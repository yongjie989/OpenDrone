# 1 "./src/main/telemetry/mavlink.c"
# 1 "/home/ethan/developer/opendrone//"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_VERSION__ 199901L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 7
#define __GNUC_MINOR__ 2
#define __GNUC_PATCHLEVEL__ 1
#define __VERSION__ "7.2.1 20170904 (release) [ARM/embedded-7-branch revision 255204]"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE_SIZE__ 1
#define __OPTIMIZE__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 8
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1011
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffffffffU
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffU
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 32
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 32
#define __WINT_WIDTH__ 32
#define __PTRDIFF_WIDTH__ 32
#define __SIZE_WIDTH__ 32
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffffL
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffUL
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffffL
#define __INT32_C(c) c ## L
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffUL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST8_WIDTH__ 32
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST16_WIDTH__ 32
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffff
#define __INTPTR_WIDTH__ 32
#define __UINTPTR_MAX__ 0xffffffffU
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.4028234663852886e+38F
#define __FLT_MIN__ 1.1754943508222875e-38F
#define __FLT_EPSILON__ 1.1920928955078125e-7F
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.7976931348623157e+308L)
#define __DBL_MIN__ ((double)2.2250738585072014e-308L)
#define __DBL_EPSILON__ ((double)2.2204460492503131e-16L)
#define __DBL_DENORM_MIN__ ((double)4.9406564584124654e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_DIG__ 15
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX_10_EXP__ 308
#define __DECIMAL_DIG__ 17
#define __LDBL_DECIMAL_DIG__ 17
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.4028234663852886e+38F32
#define __FLT32_MIN__ 1.1754943508222875e-38F32
#define __FLT32_EPSILON__ 1.1920928955078125e-7F32
#define __FLT32_DENORM_MIN__ 1.4012984643248171e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.7976931348623157e+308F64
#define __FLT64_MIN__ 2.2250738585072014e-308F64
#define __FLT64_EPSILON__ 2.2204460492503131e-16F64
#define __FLT64_DENORM_MIN__ 4.9406564584124654e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.7976931348623157e+308F32x
#define __FLT32X_MIN__ 2.2250738585072014e-308F32x
#define __FLT32X_EPSILON__ 2.2204460492503131e-16F32x
#define __FLT32X_DENORM_MIN__ 4.9406564584124654e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __SFRACT_FBIT__ 7
#define __SFRACT_IBIT__ 0
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
#define __SFRACT_MAX__ 0X7FP-7HR
#define __SFRACT_EPSILON__ 0x1P-7HR
#define __USFRACT_FBIT__ 8
#define __USFRACT_IBIT__ 0
#define __USFRACT_MIN__ 0.0UHR
#define __USFRACT_MAX__ 0XFFP-8UHR
#define __USFRACT_EPSILON__ 0x1P-8UHR
#define __FRACT_FBIT__ 15
#define __FRACT_IBIT__ 0
#define __FRACT_MIN__ (-0.5R-0.5R)
#define __FRACT_MAX__ 0X7FFFP-15R
#define __FRACT_EPSILON__ 0x1P-15R
#define __UFRACT_FBIT__ 16
#define __UFRACT_IBIT__ 0
#define __UFRACT_MIN__ 0.0UR
#define __UFRACT_MAX__ 0XFFFFP-16UR
#define __UFRACT_EPSILON__ 0x1P-16UR
#define __LFRACT_FBIT__ 31
#define __LFRACT_IBIT__ 0
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
#define __LFRACT_EPSILON__ 0x1P-31LR
#define __ULFRACT_FBIT__ 32
#define __ULFRACT_IBIT__ 0
#define __ULFRACT_MIN__ 0.0ULR
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
#define __ULFRACT_EPSILON__ 0x1P-32ULR
#define __LLFRACT_FBIT__ 63
#define __LLFRACT_IBIT__ 0
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
#define __LLFRACT_EPSILON__ 0x1P-63LLR
#define __ULLFRACT_FBIT__ 64
#define __ULLFRACT_IBIT__ 0
#define __ULLFRACT_MIN__ 0.0ULLR
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
#define __SACCUM_FBIT__ 7
#define __SACCUM_IBIT__ 8
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
#define __SACCUM_MAX__ 0X7FFFP-7HK
#define __SACCUM_EPSILON__ 0x1P-7HK
#define __USACCUM_FBIT__ 8
#define __USACCUM_IBIT__ 8
#define __USACCUM_MIN__ 0.0UHK
#define __USACCUM_MAX__ 0XFFFFP-8UHK
#define __USACCUM_EPSILON__ 0x1P-8UHK
#define __ACCUM_FBIT__ 15
#define __ACCUM_IBIT__ 16
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
#define __ACCUM_EPSILON__ 0x1P-15K
#define __UACCUM_FBIT__ 16
#define __UACCUM_IBIT__ 16
#define __UACCUM_MIN__ 0.0UK
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
#define __UACCUM_EPSILON__ 0x1P-16UK
#define __LACCUM_FBIT__ 31
#define __LACCUM_IBIT__ 32
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
#define __LACCUM_EPSILON__ 0x1P-31LK
#define __ULACCUM_FBIT__ 32
#define __ULACCUM_IBIT__ 32
#define __ULACCUM_MIN__ 0.0ULK
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
#define __ULACCUM_EPSILON__ 0x1P-32ULK
#define __LLACCUM_FBIT__ 31
#define __LLACCUM_IBIT__ 32
#define __LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK
#define __LLACCUM_EPSILON__ 0x1P-31LLK
#define __ULLACCUM_FBIT__ 32
#define __ULLACCUM_IBIT__ 32
#define __ULLACCUM_MIN__ 0.0ULLK
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK
#define __ULLACCUM_EPSILON__ 0x1P-32ULLK
#define __QQ_FBIT__ 7
#define __QQ_IBIT__ 0
#define __HQ_FBIT__ 15
#define __HQ_IBIT__ 0
#define __SQ_FBIT__ 31
#define __SQ_IBIT__ 0
#define __DQ_FBIT__ 63
#define __DQ_IBIT__ 0
#define __TQ_FBIT__ 127
#define __TQ_IBIT__ 0
#define __UQQ_FBIT__ 8
#define __UQQ_IBIT__ 0
#define __UHQ_FBIT__ 16
#define __UHQ_IBIT__ 0
#define __USQ_FBIT__ 32
#define __USQ_IBIT__ 0
#define __UDQ_FBIT__ 64
#define __UDQ_IBIT__ 0
#define __UTQ_FBIT__ 128
#define __UTQ_IBIT__ 0
#define __HA_FBIT__ 7
#define __HA_IBIT__ 8
#define __SA_FBIT__ 15
#define __SA_IBIT__ 16
#define __DA_FBIT__ 31
#define __DA_IBIT__ 32
#define __TA_FBIT__ 63
#define __TA_IBIT__ 64
#define __UHA_FBIT__ 8
#define __UHA_IBIT__ 8
#define __USA_FBIT__ 16
#define __USA_IBIT__ 16
#define __UDA_FBIT__ 32
#define __UDA_IBIT__ 32
#define __UTA_FBIT__ 64
#define __UTA_IBIT__ 64
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __CHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __ARM_FEATURE_DSP 1
#define __ARM_FEATURE_QBIT 1
#define __ARM_FEATURE_SAT 1
#undef __ARM_FEATURE_CRYPTO
# 1 "<built-in>"
#define __ARM_FEATURE_UNALIGNED 1
#undef __ARM_FEATURE_QRDMX
# 1 "<built-in>"
#define __ARM_32BIT_STATE 1
#define __ARM_FEATURE_LDREX 7
#define __ARM_FEATURE_CLZ 1
#undef __ARM_FEATURE_NUMERIC_MAXMIN
# 1 "<built-in>"
#define __ARM_FEATURE_SIMD32 1
#define __ARM_SIZEOF_MINIMAL_ENUM 1
#define __ARM_SIZEOF_WCHAR_T 4
#define __ARM_ARCH_PROFILE 77
#define __arm__ 1
#define __ARM_ARCH 7
#define __APCS_32__ 1
#define __thumb__ 1
#define __thumb2__ 1
#define __THUMBEL__ 1
#define __ARM_ARCH_ISA_THUMB 2
#define __ARMEL__ 1
#define __VFP_FP__ 1
#define __ARM_FP 4
#undef __ARM_FP16_FORMAT_IEEE
# 1 "<built-in>"
#undef __ARM_FP16_FORMAT_ALTERNATIVE
# 1 "<built-in>"
#undef __ARM_FP16_ARGS
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
# 1 "<built-in>"
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
# 1 "<built-in>"
#define __ARM_FEATURE_FMA 1
#undef __ARM_NEON__
# 1 "<built-in>"
#undef __ARM_NEON
# 1 "<built-in>"
#undef __ARM_NEON_FP
# 1 "<built-in>"
#define __THUMB_INTERWORK__ 1
#define __ARM_ARCH_7EM__ 1
#define __ARM_PCS_VFP 1
#define __ARM_EABI__ 1
#define __ARM_ARCH_EXT_IDIV__ 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_ASM_SYNTAX_UNIFIED__ 1
#define __ARM_FEATURE_COPROC 15
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __ELF__ 1
# 1 "<command-line>"
#define __USES_INITFINI__ 1
#define DEBUG 1
#define STM32F303xC 1
#define STM32F303 1
#define FLASH_SIZE 256
#define HSE_VALUE 8000000
#define USE_STDPERIPH_DRIVER 1
#define OPENDRONEBRH 1
#define __FORKNAME__ "OpenDrone"
#define __TARGET__ "OPENDRONEBRH"
# 1 "./src/main/telemetry/mavlink.c"
# 23 "./src/main/telemetry/mavlink.c"
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdbool.h" 1 3 4
# 29 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdbool.h" 3 4
#define _STDBOOL_H 



#define bool _Bool
#define true 1
#define false 0
# 52 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdbool.h" 3 4
#define __bool_true_false_are_defined 1
# 24 "./src/main/telemetry/mavlink.c" 2
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h" 1 3 4
# 9 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h" 3 4
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 1 3 4
# 10 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define _STDINT_H 

# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 1 3 4





#define _MACHINE__DEFAULT_TYPES_H 

# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/features.h" 1 3 4
# 22 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/features.h" 3 4
#define _SYS_FEATURES_H 





# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_newlib_version.h" 1 3 4



#define _NEWLIB_VERSION_H__ 1

#define _NEWLIB_VERSION "2.5.0"
#define __NEWLIB__ 2
#define __NEWLIB_MINOR__ 5
#define __NEWLIB_PATCHLEVEL__ 0
# 29 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/features.h" 2 3 4




#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))






#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)
# 128 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/features.h" 3 4
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1



#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
# 155 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/features.h" 3 4
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
# 242 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/features.h" 3 4
#define __ATFILE_VISIBLE 1





#define __BSD_VISIBLE 1







#define __GNU_VISIBLE 0







#define __ISO_C_VISIBLE 1999







#define __LARGEFILE_VISIBLE 0



#define __MISC_VISIBLE 1





#define __POSIX_VISIBLE 200809
# 298 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/features.h" 3 4
#define __SVID_VISIBLE 1
# 314 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/features.h" 3 4
#define __XSI_VISIBLE 0
# 9 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 2 3 4






#define __EXP(x) __ ##x ##__
# 26 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
#define __have_longlong64 1






#define __have_long32 1








# 41 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;



#define ___int8_t_defined 1







typedef short int __int16_t;

typedef short unsigned int __uint16_t;



#define ___int16_t_defined 1
# 77 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;



#define ___int32_t_defined 1
# 103 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;



#define ___int64_t_defined 1
# 134 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;



#define ___int_least8_t_defined 1
# 160 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;



#define ___int_least16_t_defined 1
# 182 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;



#define ___int_least32_t_defined 1
# 200 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;



#define ___int_least64_t_defined 1







typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 244 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h" 3 4
#undef __EXP
# 13 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 1 3 4
# 10 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define _SYS__INTSUP_H 





#define __STDINT_EXP(x) __ ##x ##__
# 35 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef __int20
#undef long
#define signed +0
#define unsigned +0
#define char +0
#define short +1
#define __int20 +2
#define int +2
#define long +4
# 64 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define _INTPTR_EQ_INT 






#define _INT32_EQ_LONG 







#define __INT8 "hh"
# 90 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __INT16 "h"
# 101 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __INT32 "l"
# 110 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __INT64 "ll"






#define __FAST8 
# 126 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __FAST16 






#define __FAST32 
# 144 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __FAST64 "ll"



#define __LEAST8 "hh"
# 159 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __LEAST16 "h"
# 170 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __LEAST32 "l"
# 179 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#define __LEAST64 "ll"

#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef long
       
       
       
       
       
# 191 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_intsup.h" 3 4
#undef __int20
       
       
# 14 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h" 1 3 4
# 10 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h" 3 4
#define _SYS__STDINT_H 
# 20 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h" 3 4
typedef __int8_t int8_t ;
#define _INT8_T_DECLARED 


typedef __uint8_t uint8_t ;
#define _UINT8_T_DECLARED 

#define __int8_t_defined 1




typedef __int16_t int16_t ;
#define _INT16_T_DECLARED 


typedef __uint16_t uint16_t ;
#define _UINT16_T_DECLARED 

#define __int16_t_defined 1




typedef __int32_t int32_t ;
#define _INT32_T_DECLARED 


typedef __uint32_t uint32_t ;
#define _UINT32_T_DECLARED 

#define __int32_t_defined 1




typedef __int64_t int64_t ;
#define _INT64_T_DECLARED 


typedef __uint64_t uint64_t ;
#define _UINT64_T_DECLARED 

#define __int64_t_defined 1



typedef __intmax_t intmax_t;
#define _INTMAX_T_DECLARED 



typedef __uintmax_t uintmax_t;
#define _UINTMAX_T_DECLARED 



typedef __intptr_t intptr_t;
#define _INTPTR_T_DECLARED 



typedef __uintptr_t uintptr_t;
#define _UINTPTR_T_DECLARED 
# 15 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 2 3 4






typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;
#define __int_least8_t_defined 1



typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;
#define __int_least16_t_defined 1



typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;
#define __int_least32_t_defined 1



typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
#define __int_least64_t_defined 1
# 51 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
#define __int_fast8_t_defined 1







  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
#define __int_fast16_t_defined 1







  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
#define __int_fast32_t_defined 1







  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
#define __int_fast64_t_defined 1
# 128 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INTPTR_MIN (-__INTPTR_MAX__ - 1)
#define INTPTR_MAX (__INTPTR_MAX__)
#define UINTPTR_MAX (__UINTPTR_MAX__)
# 152 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT8_MIN (-__INT8_MAX__ - 1)
#define INT8_MAX (__INT8_MAX__)
#define UINT8_MAX (__UINT8_MAX__)







#define INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)
#define INT_LEAST8_MAX (__INT_LEAST8_MAX__)
#define UINT_LEAST8_MAX (__UINT_LEAST8_MAX__)
# 174 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT16_MIN (-__INT16_MAX__ - 1)
#define INT16_MAX (__INT16_MAX__)
#define UINT16_MAX (__UINT16_MAX__)







#define INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)
#define INT_LEAST16_MAX (__INT_LEAST16_MAX__)
#define UINT_LEAST16_MAX (__UINT_LEAST16_MAX__)
# 196 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT32_MIN (-__INT32_MAX__ - 1)
#define INT32_MAX (__INT32_MAX__)
#define UINT32_MAX (__UINT32_MAX__)
# 212 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)
#define INT_LEAST32_MAX (__INT_LEAST32_MAX__)
#define UINT_LEAST32_MAX (__UINT_LEAST32_MAX__)
# 230 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT64_MIN (-__INT64_MAX__ - 1)
#define INT64_MAX (__INT64_MAX__)
#define UINT64_MAX (__UINT64_MAX__)
# 246 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)
#define INT_LEAST64_MAX (__INT_LEAST64_MAX__)
#define UINT_LEAST64_MAX (__UINT_LEAST64_MAX__)
# 262 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)
#define INT_FAST8_MAX (__INT_FAST8_MAX__)
#define UINT_FAST8_MAX (__UINT_FAST8_MAX__)
# 278 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)
#define INT_FAST16_MAX (__INT_FAST16_MAX__)
#define UINT_FAST16_MAX (__UINT_FAST16_MAX__)
# 294 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)
#define INT_FAST32_MAX (__INT_FAST32_MAX__)
#define UINT_FAST32_MAX (__UINT_FAST32_MAX__)
# 310 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)
#define INT_FAST64_MAX (__INT_FAST64_MAX__)
#define UINT_FAST64_MAX (__UINT_FAST64_MAX__)
# 326 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INTMAX_MAX (__INTMAX_MAX__)
#define INTMAX_MIN (-INTMAX_MAX - 1)







#define UINTMAX_MAX (__UINTMAX_MAX__)







#define SIZE_MAX (__SIZE_MAX__)





#define SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX (__STDINT_EXP(INT_MAX))



#define PTRDIFF_MAX (__PTRDIFF_MAX__)



#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)




#define WCHAR_MIN (__WCHAR_MIN__)
# 374 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define WCHAR_MAX (__WCHAR_MAX__)
# 384 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define WINT_MAX (__WINT_MAX__)




#define WINT_MIN (__WINT_MIN__)






#define INT8_C(x) __INT8_C(x)
#define UINT8_C(x) __UINT8_C(x)
# 408 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT16_C(x) __INT16_C(x)
#define UINT16_C(x) __UINT16_C(x)
# 420 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT32_C(x) __INT32_C(x)
#define UINT32_C(x) __UINT32_C(x)
# 433 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INT64_C(x) __INT64_C(x)
#define UINT64_C(x) __UINT64_C(x)
# 449 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdint.h" 3 4
#define INTMAX_C(x) __INTMAX_C(x)
#define UINTMAX_C(x) __UINTMAX_C(x)
# 10 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h" 2 3 4



#define _GCC_WRAP_STDINT_H 
# 25 "./src/main/telemetry/mavlink.c" 2
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 1 3







#define _STRING_H_ 

# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_ansi.h" 1 3
# 13 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_ansi.h" 3
#define _ANSIDECL_H_ 

# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/newlib.h" 1 3







#define __NEWLIB_H__ 1
# 21 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/newlib.h" 3
#define _WANT_IO_LONG_LONG 1


#define _WANT_REGISTER_FINI 1
# 40 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/newlib.h" 3
#define _MB_LEN_MAX 1
# 50 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/newlib.h" 3
#define HAVE_INITFINI_ARRAY 1



#define _ATEXIT_DYNAMIC_ALLOC 1


#define _HAVE_LONG_DOUBLE 1


#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1


#define _LDBL_EQ_DBL 1


#define _FVWRITE_IN_STREAMIO 1


#define _FSEEK_OPTIMIZATION 1


#define _WIDE_ORIENT 1


#define _UNBUF_STREAM_OPT 1
# 92 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/newlib.h" 3
#define _RETARGETABLE_LOCKING 1
# 16 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_ansi.h" 2 3
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/config.h" 1 3

#define __SYS_CONFIG_H__ 

# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 77 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/ieeefp.h" 3
#define __IEEE_LITTLE_ENDIAN 



#define __OBSOLETE_MATH_DEFAULT 0
# 454 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/ieeefp.h" 3
#define __OBSOLETE_MATH __OBSOLETE_MATH_DEFAULT
# 5 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/config.h" 2 3
# 220 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/config.h" 3
#define _POINTER_INT long





#undef __RAND_MAX



#define __RAND_MAX 0x7fffffff
# 246 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/config.h" 3
#define __EXPORT 



#define __IMPORT 






#define _READ_WRITE_RETURN_TYPE int





#define _READ_WRITE_BUFSIZE_TYPE int
# 17 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_ansi.h" 2 3






#define _HAVE_STDC 
# 44 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_ansi.h" 3
#define _BEGIN_STD_C 
#define _END_STD_C 
#define _NOTHROW 



#define _PTR void *
#define _AND ,
#define _NOARGS void
#define _CONST const
#define _VOLATILE volatile
#define _SIGNED signed
#define _DOTS , ...
#define _VOID void






#define _EXFUN_NOTHROW(name,proto) name proto _NOTHROW
#define _EXFUN(name,proto) name proto
#define _EXPARM(name,proto) (* name) proto
#define _EXFNPTR(name,proto) (* name) proto

#define _DEFUN(name,arglist,args) name(args)
#define _DEFUN_VOID(name) name(_NOARGS)
#define _CAST_VOID (void)

#define _LONG_DOUBLE long double


#define _PARAMS(paramlist) paramlist
# 101 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_ansi.h" 3
#define _ATTRIBUTE(attrs) __attribute__ (attrs)
# 127 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_ansi.h" 3
#define _ELIDABLE_INLINE static __inline__



#define _NOINLINE __attribute__ ((__noinline__))
#define _NOINLINE_STATIC _NOINLINE static
# 11 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 2 3
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 1 3
# 11 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
#define _SYS_REENT_H_ 

# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/_ansi.h" 1 3
# 14 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 39 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 137 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 



typedef int ptrdiff_t;
# 161 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 187 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 







#define __size_t 





typedef unsigned int size_t;
# 238 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 267 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
# 294 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 328 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 347 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 15 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 1 3
# 20 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 3
#define _SYS__TYPES_H 



# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_types.h" 1 3





#define _MACHINE__TYPES_H 
# 25 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 2 3
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h" 1 3

#define __SYS_LOCK_H__ 
# 33 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h" 3
struct __lock;
typedef struct __lock * _LOCK_T;
#define _LOCK_RECURSIVE_T _LOCK_T

#define __LOCK_INIT(class,lock) extern struct __lock __lock_ ## lock; class _LOCK_T lock = &__lock_ ## lock

#define __LOCK_INIT_RECURSIVE(class,lock) __LOCK_INIT(class,lock)

extern void __retarget_lock_init(_LOCK_T *lock);
#define __lock_init(lock) __retarget_lock_init(&lock)
extern void __retarget_lock_init_recursive(_LOCK_T *lock);
#define __lock_init_recursive(lock) __retarget_lock_init_recursive(&lock)
extern void __retarget_lock_close(_LOCK_T lock);
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
#define __lock_acquire_recursive(lock) __retarget_lock_acquire_recursive(lock)
extern int __retarget_lock_try_acquire(_LOCK_T lock);
#define __lock_try_acquire(lock) __retarget_lock_try_acquire(lock)
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) __retarget_lock_try_acquire_recursive(lock)

extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
#define __lock_release_recursive(lock) __retarget_lock_release_recursive(lock)
# 26 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 125 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 3
#undef __size_t



typedef unsigned int __size_t;
# 144 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 3
#define unsigned signed
typedef signed int _ssize_t;
#undef unsigned
# 156 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;

#define __need_wint_t 
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 161 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_wchar_t




#define _WINT_T 




typedef unsigned int wint_t;

#undef __need_wint_t
# 401 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 160 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;



#define _CLOCK_T_ unsigned long


typedef unsigned long __clock_t;




#define _TIME_T_ __int_least64_t

typedef __int_least64_t __time_t;

#define _CLOCKID_T_ unsigned long
typedef unsigned long __clockid_t;

#define _TIMER_T_ unsigned long
typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;




typedef char * __va_list;
# 16 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 2 3

#define _NULL 0



#define __Long long
typedef unsigned long __ULong;
# 38 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};





#define _ATEXIT_SIZE 32

struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
#define _ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}





#define _REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,
# 117 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 178 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
#define _REENT_SMALL_CHECK_INIT(ptr) 


struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 312 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
#define _RAND48_SEED_0 (0x330e)
#define _RAND48_SEED_1 (0xabcd)
#define _RAND48_SEED_2 (0x1234)
#define _RAND48_MULT_0 (0xe66d)
#define _RAND48_MULT_1 (0xdeec)
#define _RAND48_MULT_2 (0x0005)
#define _RAND48_ADD (0x000b)
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};


#define _REENT_EMERGENCY_SIZE 25
#define _REENT_ASCTIME_SIZE 26
#define _REENT_SIGNAL_SIZE 24
# 569 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {
#define _N_LISTS 30
          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;

  __FILE __sf[3];

};





#define _REENT_STDIO_STREAM(var,index) &(var)->__sf[index]


#define _REENT_INIT(var) { 0, _REENT_STDIO_STREAM(&(var), 0), _REENT_STDIO_STREAM(&(var), 1), _REENT_STDIO_STREAM(&(var), 2), 0, "", 0, _NULL, 0, _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }
# 707 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
#define _REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = _REENT_STDIO_STREAM(var, 0); (var)->_stdout = _REENT_STDIO_STREAM(var, 1); (var)->_stderr = _REENT_STDIO_STREAM(var, 2); (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
# 721 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
#define _REENT_CHECK_RAND48(ptr) 
#define _REENT_CHECK_MP(ptr) 
#define _REENT_CHECK_TM(ptr) 
#define _REENT_CHECK_ASCTIME_BUF(ptr) 
#define _REENT_CHECK_EMERGENCY(ptr) 
#define _REENT_CHECK_MISC(ptr) 
#define _REENT_CHECK_SIGNAL_BUF(ptr) 

#define _REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_signgam)
#define _REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_next)
#define _REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._seed)
#define _REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._mult)
#define _REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._add)
#define _REENT_MP_RESULT(ptr) ((ptr)->_result)
#define _REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)
#define _REENT_MP_P5S(ptr) ((ptr)->_p5s)
#define _REENT_MP_FREELIST(ptr) ((ptr)->_freelist)
#define _REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctime_buf)
#define _REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)
#define _REENT_EMERGENCY(ptr) ((ptr)->_emergency)
#define _REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok_last)
#define _REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_state)
#define _REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtowc_state)
#define _REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctomb_state)
#define _REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrlen_state)
#define _REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrtowc_state)
#define _REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mbsrtowcs_state)
#define _REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrtomb_state)
#define _REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wcsrtombs_state)
#define _REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)
#define _REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_buf)
#define _REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._getdate_err))



#define _REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(var))); _REENT_INIT_PTR_ZEROED(var); }







#define _Kmax (sizeof (size_t) << 3)







#define __ATTRIBUTE_IMPURE_PTR__ 


extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 788 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h" 3
#define _REENT _impure_ptr


#define _GLOBAL_REENT _global_impure_ptr





#define _GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)
# 12 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 2 3
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 1 3
# 41 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define _SYS_CDEFS_H_ 



# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 46 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 2 3

#define __PMT(args) args
#define __DOTS , ...
#define __THROW 


#define __ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) cname


#define __ptr_t void *
#define __long_double_t long double

#define __attribute_malloc__ 
#define __attribute_pure__ 
#define __attribute_format_strfmon__(a,b) 
#define __flexarr [0]


#define __bounded 
#define __unbounded 
#define __ptrvalue 
# 76 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __has_extension __has_feature


#define __has_feature(x) 0





#define __has_builtin(x) 0






#define __BEGIN_DECLS 
#define __END_DECLS 
# 105 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __GNUCLIKE_ASM 3
#define __GNUCLIKE_MATH_BUILTIN_CONSTANTS 



#define __GNUCLIKE___TYPEOF 1
#define __GNUCLIKE___OFFSETOF 1
#define __GNUCLIKE___SECTION 1


#define __GNUCLIKE_CTOR_SECTION_HANDLING 1


#define __GNUCLIKE_BUILTIN_CONSTANT_P 1






#define __GNUCLIKE_BUILTIN_VARARGS 1
#define __GNUCLIKE_BUILTIN_STDARG 1
#define __GNUCLIKE_BUILTIN_VAALIST 1



#define __GNUC_VA_LIST_COMPATIBILITY 1






#define __compiler_membar() __asm __volatile(" " : : : "memory")



#define __GNUCLIKE_BUILTIN_NEXT_ARG 1
#define __GNUCLIKE_MATH_BUILTIN_RELOPS 


#define __GNUCLIKE_BUILTIN_MEMCPY 1


#define __CC_SUPPORTS_INLINE 1
#define __CC_SUPPORTS___INLINE 1
#define __CC_SUPPORTS___INLINE__ 1

#define __CC_SUPPORTS___FUNC__ 1
#define __CC_SUPPORTS_WARNING 1

#define __CC_SUPPORTS_VARADIC_XXX 1

#define __CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
# 175 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __P(protos) protos
#define __CONCAT1(x,y) x ## y
#define __CONCAT(x,y) __CONCAT1(x,y)
#define __STRING(x) #x
#define __XSTRING(x) __STRING(x)

#define __const const
#define __signed signed
#define __volatile volatile
# 239 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __weak_symbol __attribute__((__weak__))
# 252 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))
#define __unused __attribute__((__unused__))
#define __used __attribute__((__used__))
#define __packed __attribute__((__packed__))
#define __aligned(x) __attribute__((__aligned__(x)))
#define __section(x) __attribute__((__section__(x)))


#define __alloc_size(x) __attribute__((__alloc_size__(x)))




#define __alloc_align(x) __attribute__((__alloc_align__(x)))
# 288 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define _Alignas(x) __aligned(x)






#define _Alignof(x) __alignof(x)
# 304 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define _Atomic(T) struct { T volatile __val; }





#define _Noreturn __dead2
# 339 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define _Thread_local __thread
# 359 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __generic(expr,t,yes,no) __builtin_choose_expr( __builtin_types_compatible_p(__typeof(expr), t), yes, no)
# 374 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __min_size(x) static (x)





#define __malloc_like __attribute__((__malloc__))
#define __pure __attribute__((__pure__))






#define __always_inline __attribute__((__always_inline__))





#define __noinline __attribute__ ((__noinline__))





#define __nonnull(x) __attribute__((__nonnull__(x)))
#define __nonnull_all __attribute__((__nonnull__))






#define __fastcall __attribute__((__fastcall__))
#define __result_use_check __attribute__((__warn_unused_result__))






#define __returns_twice __attribute__((__returns_twice__))





#define __unreachable() __builtin_unreachable()
# 442 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __restrict restrict
# 475 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __predict_true(exp) __builtin_expect((exp), 1)
#define __predict_false(exp) __builtin_expect((exp), 0)






#define __null_sentinel __attribute__((__sentinel__))
#define __exported __attribute__((__visibility__("default")))


#define __hidden __attribute__((__visibility__("hidden")))
# 497 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __offsetof(type,field) offsetof(type, field)
#define __rangeof(type,start,end) (__offsetof(type, end) - __offsetof(type, start))
# 508 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __containerof(x,s,m) ({ const volatile __typeof(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
# 530 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))

#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))

#define __format_arg(fmtarg) __attribute__((__format_arg__ (fmtarg)))
#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))

#define __strftimelike(fmtarg,firstvararg) __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
# 547 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __printf0like(fmtarg,firstvararg) 




#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))




#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)


#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")



#define __sym_compat(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@" #verid)

#define __sym_default(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@@" #verid)
# 601 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __FBSDID(s) struct __hack



#define __RCSID(s) struct __hack



#define __RCSID_SOURCE(s) struct __hack



#define __SCCSID(s) struct __hack



#define __COPYRIGHT(s) struct __hack



#define __DECONST(type,var) ((type)(__uintptr_t)(const void *)(var))



#define __DEVOLATILE(type,var) ((type)(__uintptr_t)(volatile void *)(var))



#define __DEQUALIFY(type,var) ((type)(__uintptr_t)(const volatile void *)(var))






#define _Nonnull 
#define _Nullable 
#define _Null_unspecified 
#define __NULLABILITY_PRAGMA_PUSH 
#define __NULLABILITY_PRAGMA_POP 
# 661 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __arg_type_tag(arg_kind,arg_idx,type_tag_idx) 
#define __datatype_type_tag(kind,type) 
# 680 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
#define __lock_annotate(x) 





#define __lockable __lock_annotate(lockable)


#define __locks_exclusive(...) __lock_annotate(exclusive_lock_function(__VA_ARGS__))

#define __locks_shared(...) __lock_annotate(shared_lock_function(__VA_ARGS__))



#define __trylocks_exclusive(...) __lock_annotate(exclusive_trylock_function(__VA_ARGS__))

#define __trylocks_shared(...) __lock_annotate(shared_trylock_function(__VA_ARGS__))



#define __unlocks(...) __lock_annotate(unlock_function(__VA_ARGS__))


#define __asserts_exclusive(...) __lock_annotate(assert_exclusive_lock(__VA_ARGS__))

#define __asserts_shared(...) __lock_annotate(assert_shared_lock(__VA_ARGS__))



#define __requires_exclusive(...) __lock_annotate(exclusive_locks_required(__VA_ARGS__))

#define __requires_shared(...) __lock_annotate(shared_locks_required(__VA_ARGS__))

#define __requires_unlocked(...) __lock_annotate(locks_excluded(__VA_ARGS__))



#define __no_lock_analysis __lock_annotate(no_thread_safety_analysis)


#define __guarded_by(x) __lock_annotate(guarded_by(x))
#define __pt_guarded_by(x) __lock_annotate(pt_guarded_by(x))
# 13 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 2 3


#define __need_size_t 
#define __need_NULL 
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 161 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 238 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_size_t
# 347 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 401 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
#undef NULL




#define NULL ((void *)0)





#undef __need_NULL




#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 18 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 2 3


# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/xlocale.h" 1 3



#define _XLOCALE_H 




struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 2 3



# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/strings.h" 1 3
# 30 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/strings.h" 3
#define _STRINGS_H_ 
# 44 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/strings.h" 3


int bcmp(const void *, const void *, size_t) __attribute__((__pure__));
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);


void explicit_bzero(void *, size_t);


int ffs(int) __attribute__((__const__));


int ffsl(long) __attribute__((__const__));
int ffsll(long long) __attribute__((__const__));
int fls(int) __attribute__((__const__));
int flsl(long) __attribute__((__const__));
int flsll(long long) __attribute__((__const__));


char *index(const char *, int) __attribute__((__pure__));
char *rindex(const char *, int) __attribute__((__pure__));

int strcasecmp(const char *, const char *) __attribute__((__pure__));
int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));


int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);


# 25 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 2 3




void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * restrict, const void * restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);


char *strtok_r (char *restrict, const char *restrict, char **restrict);


int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


void * memccpy (void * restrict, const void * restrict, int, size_t);
# 76 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 3
char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);






char *strdup (const char *);

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t);

char *_strndup_r (struct _reent *, const char *, size_t);
# 100 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);


char *strnstr(const char *, const char *, size_t) __attribute__((__pure__));



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 175 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 3
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/string.h" 1 3
# 176 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h" 2 3


# 26 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/platform.h" 1
# 18 "./src/main/platform.h"
       
# 51 "./src/main/platform.h"
# 1 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 1
# 30 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h"
#define __STM32F30X_CONF_H 



# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define __STM32F30x_ADC_H 






# 1 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h" 1
# 54 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
#define __STM32F30x_H 
# 113 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
#define HSE_STARTUP_TIMEOUT ((uint16_t)0x5000)







#define HSI_STARTUP_TIMEOUT ((uint16_t)0x5000)



#define HSI_VALUE ((uint32_t)8000000)




#define LSI_VALUE ((uint32_t)40000)




#define LSE_VALUE ((uint32_t)32768)






#define __STM32F30X_STDPERIPH_VERSION_MAIN (0x01)
#define __STM32F30X_STDPERIPH_VERSION_SUB1 (0x01)
#define __STM32F30X_STDPERIPH_VERSION_SUB2 (0x00)
#define __STM32F30X_STDPERIPH_VERSION_RC (0x00)
#define __STM32F30X_STDPERIPH_VERSION ( (__STM32F30X_STDPERIPH_VERSION_MAIN << 24) |(__STM32F30X_STDPERIPH_VERSION_SUB1 << 16) |(__STM32F30X_STDPERIPH_VERSION_SUB2 << 8) |(__STM32F30X_STDPERIPH_VERSION_RC))
# 162 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
#define __CM4_REV 0x0001
#define __MPU_PRESENT 1
#define __NVIC_PRIO_BITS 4
#define __Vendor_SysTickConfig 0
#define __FPU_PRESENT 1







# 173 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
typedef enum IRQn
{

  NonMaskableInt_IRQn = -14,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,


  WWDG_IRQn = 0,
  PVD_IRQn = 1,
  TAMPER_STAMP_IRQn = 2,
  RTC_WKUP_IRQn = 3,
  FLASH_IRQn = 4,
  RCC_IRQn = 5,
  EXTI0_IRQn = 6,
  EXTI1_IRQn = 7,
  EXTI2_TS_IRQn = 8,
  EXTI3_IRQn = 9,
  EXTI4_IRQn = 10,
  DMA1_Channel1_IRQn = 11,
  DMA1_Channel2_IRQn = 12,
  DMA1_Channel3_IRQn = 13,
  DMA1_Channel4_IRQn = 14,
  DMA1_Channel5_IRQn = 15,
  DMA1_Channel6_IRQn = 16,
  DMA1_Channel7_IRQn = 17,
  ADC1_2_IRQn = 18,
  USB_HP_CAN1_TX_IRQn = 19,
  USB_LP_CAN1_RX0_IRQn = 20,
  CAN1_RX1_IRQn = 21,
  CAN1_SCE_IRQn = 22,
  EXTI9_5_IRQn = 23,
  TIM1_BRK_TIM15_IRQn = 24,
  TIM1_UP_TIM16_IRQn = 25,
  TIM1_TRG_COM_TIM17_IRQn = 26,
  TIM1_CC_IRQn = 27,
  TIM2_IRQn = 28,
  TIM3_IRQn = 29,
  TIM4_IRQn = 30,
  I2C1_EV_IRQn = 31,
  I2C1_ER_IRQn = 32,
  I2C2_EV_IRQn = 33,
  I2C2_ER_IRQn = 34,
  SPI1_IRQn = 35,
  SPI2_IRQn = 36,
  USART1_IRQn = 37,
  USART2_IRQn = 38,
  USART3_IRQn = 39,
  EXTI15_10_IRQn = 40,
  RTC_Alarm_IRQn = 41,
  USBWakeUp_IRQn = 42,
  TIM8_BRK_IRQn = 43,
  TIM8_UP_IRQn = 44,
  TIM8_TRG_COM_IRQn = 45,
  TIM8_CC_IRQn = 46,
  ADC3_IRQn = 47,
  SPI3_IRQn = 51,
  UART4_IRQn = 52,
  UART5_IRQn = 53,
  TIM6_DAC_IRQn = 54,
  TIM7_IRQn = 55,
  DMA2_Channel1_IRQn = 56,
  DMA2_Channel2_IRQn = 57,
  DMA2_Channel3_IRQn = 58,
  DMA2_Channel4_IRQn = 59,
  DMA2_Channel5_IRQn = 60,
  ADC4_IRQn = 61,
  COMP1_2_3_IRQn = 64,
  COMP4_5_6_IRQn = 65,
  COMP7_IRQn = 66,
  USB_HP_IRQn = 74,
  USB_LP_IRQn = 75,
  USBWakeUp_RMP_IRQn = 76,
  FPU_IRQn = 81
# 358 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
} IRQn_Type;





# 1 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h" 1
# 32 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
#define __CORE_CM4_H_GENERIC 
# 64 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
#define __CM4_CMSIS_VERSION_MAIN ( 5U)
#define __CM4_CMSIS_VERSION_SUB ( 0U)
#define __CM4_CMSIS_VERSION ((__CM4_CMSIS_VERSION_MAIN << 16U) | __CM4_CMSIS_VERSION_SUB )


#define __CORTEX_M (4U)
# 101 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
#define __FPU_USED 1U
# 160 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
# 1 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_compiler.h" 1
# 26 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_compiler.h"
#define __CMSIS_COMPILER_H 
# 48 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_compiler.h"
# 1 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h" 1
# 26 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __CMSIS_GCC_H 


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"



#define __ASM __asm


#define __INLINE inline


#define __STATIC_INLINE static inline


#define __NO_RETURN __attribute__((noreturn))


#define __USED __attribute__((used))


#define __WEAK __attribute__((weak))


  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#define __UNALIGNED_UINT32(x) (((struct T_UINT32 *)(x))->v)


#define __ALIGNED(x) __attribute__((aligned(x)))


#define __PACKED __attribute__((packed, aligned(1)))
# 76 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 128 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 152 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 224 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : "sp");
}
# 248 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 278 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
}
# 302 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}
# 332 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 359 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 411 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 436 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 477 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 627 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{


  uint32_t result;

  __asm volatile ("");
  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  __asm volatile ("");
  return(result);



}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{


  __asm volatile ("");
  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
  __asm volatile ("");

}
# 680 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __CMSIS_GCC_OUT_REG(r) "=r" (r)
#define __CMSIS_GCC_RW_REG(r) "+r" (r)
#define __CMSIS_GCC_USE_REG(r) "r" (r)
# 693 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __NOP() __ASM volatile ("nop")
# 703 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __WFI() __ASM volatile ("wfi")
# 715 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __WFE() __ASM volatile ("wfe")
# 726 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __SEV() __ASM volatile ("sev")
# 735 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 769 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 788 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 803 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __REVSH(int32_t value)
{

  return (short)__builtin_bswap16(value);






}
# 823 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 836 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __BKPT(value) __ASM volatile ("bkpt "#value)
# 845 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 865 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
  return(result);
}
# 875 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __CLZ __builtin_clz
# 888 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 910 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 932 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 949 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 966 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 983 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1017 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __SSAT(ARG1,ARG2) ({ int32_t __RES, __ARG1 = (ARG1); __ASM ("ssat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
# 1032 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __USAT(ARG1,ARG2) ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
# 1047 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 1062 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 1084 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 1106 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 1121 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1133 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1145 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1347 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

#define __SSAT16(ARG1,ARG2) ({ int32_t __RES, __ARG1 = (ARG1); __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })






#define __USAT16(ARG1,ARG2) ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })






__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 1874 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_gcc.h"
#define __PKHBT(ARG1,ARG2,ARG3) ( ((((uint32_t)(ARG1)) ) & 0x0000FFFFUL) | ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL) )


#define __PKHTB(ARG1,ARG2,ARG3) ( ((((uint32_t)(ARG1)) ) & 0xFFFF0000UL) | ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL) )


__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 49 "./lib/main/CMSIS/CM1/CoreSupport/cmsis_compiler.h" 2
# 161 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h" 2
# 172 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
#define __CORE_CM4_H_DEPENDANT 
# 217 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
#define __I volatile const

#define __O volatile
#define __IO volatile


#define __IM volatile const
#define __OM volatile
#define __IOM volatile
# 257 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;


#define APSR_N_Pos 31U
#define APSR_N_Msk (1UL << APSR_N_Pos)

#define APSR_Z_Pos 30U
#define APSR_Z_Msk (1UL << APSR_Z_Pos)

#define APSR_C_Pos 29U
#define APSR_C_Msk (1UL << APSR_C_Pos)

#define APSR_V_Pos 28U
#define APSR_V_Msk (1UL << APSR_V_Pos)

#define APSR_Q_Pos 27U
#define APSR_Q_Msk (1UL << APSR_Q_Pos)

#define APSR_GE_Pos 16U
#define APSR_GE_Msk (0xFUL << APSR_GE_Pos)





typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;


#define IPSR_ISR_Pos 0U
#define IPSR_ISR_Msk (0x1FFUL )





typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;


#define xPSR_N_Pos 31U
#define xPSR_N_Msk (1UL << xPSR_N_Pos)

#define xPSR_Z_Pos 30U
#define xPSR_Z_Msk (1UL << xPSR_Z_Pos)

#define xPSR_C_Pos 29U
#define xPSR_C_Msk (1UL << xPSR_C_Pos)

#define xPSR_V_Pos 28U
#define xPSR_V_Msk (1UL << xPSR_V_Pos)

#define xPSR_Q_Pos 27U
#define xPSR_Q_Msk (1UL << xPSR_Q_Pos)

#define xPSR_ICI_IT_2_Pos 25U
#define xPSR_ICI_IT_2_Msk (3UL << xPSR_ICI_IT_2_Pos)

#define xPSR_T_Pos 24U
#define xPSR_T_Msk (1UL << xPSR_T_Pos)

#define xPSR_GE_Pos 16U
#define xPSR_GE_Msk (0xFUL << xPSR_GE_Pos)

#define xPSR_ICI_IT_1_Pos 10U
#define xPSR_ICI_IT_1_Msk (0x3FUL << xPSR_ICI_IT_1_Pos)

#define xPSR_ISR_Pos 0U
#define xPSR_ISR_Msk (0x1FFUL )





typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;


#define CONTROL_FPCA_Pos 2U
#define CONTROL_FPCA_Msk (1UL << CONTROL_FPCA_Pos)

#define CONTROL_SPSEL_Pos 1U
#define CONTROL_SPSEL_Msk (1UL << CONTROL_SPSEL_Pos)

#define CONTROL_nPRIV_Pos 0U
#define CONTROL_nPRIV_Msk (1UL )
# 404 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RSERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;


#define NVIC_STIR_INTID_Pos 0U
#define NVIC_STIR_INTID_Msk (0x1FFUL )
# 438 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;


#define SCB_CPUID_IMPLEMENTER_Pos 24U
#define SCB_CPUID_IMPLEMENTER_Msk (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)

#define SCB_CPUID_VARIANT_Pos 20U
#define SCB_CPUID_VARIANT_Msk (0xFUL << SCB_CPUID_VARIANT_Pos)

#define SCB_CPUID_ARCHITECTURE_Pos 16U
#define SCB_CPUID_ARCHITECTURE_Msk (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)

#define SCB_CPUID_PARTNO_Pos 4U
#define SCB_CPUID_PARTNO_Msk (0xFFFUL << SCB_CPUID_PARTNO_Pos)

#define SCB_CPUID_REVISION_Pos 0U
#define SCB_CPUID_REVISION_Msk (0xFUL )


#define SCB_ICSR_NMIPENDSET_Pos 31U
#define SCB_ICSR_NMIPENDSET_Msk (1UL << SCB_ICSR_NMIPENDSET_Pos)

#define SCB_ICSR_PENDSVSET_Pos 28U
#define SCB_ICSR_PENDSVSET_Msk (1UL << SCB_ICSR_PENDSVSET_Pos)

#define SCB_ICSR_PENDSVCLR_Pos 27U
#define SCB_ICSR_PENDSVCLR_Msk (1UL << SCB_ICSR_PENDSVCLR_Pos)

#define SCB_ICSR_PENDSTSET_Pos 26U
#define SCB_ICSR_PENDSTSET_Msk (1UL << SCB_ICSR_PENDSTSET_Pos)

#define SCB_ICSR_PENDSTCLR_Pos 25U
#define SCB_ICSR_PENDSTCLR_Msk (1UL << SCB_ICSR_PENDSTCLR_Pos)

#define SCB_ICSR_ISRPREEMPT_Pos 23U
#define SCB_ICSR_ISRPREEMPT_Msk (1UL << SCB_ICSR_ISRPREEMPT_Pos)

#define SCB_ICSR_ISRPENDING_Pos 22U
#define SCB_ICSR_ISRPENDING_Msk (1UL << SCB_ICSR_ISRPENDING_Pos)

#define SCB_ICSR_VECTPENDING_Pos 12U
#define SCB_ICSR_VECTPENDING_Msk (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)

#define SCB_ICSR_RETTOBASE_Pos 11U
#define SCB_ICSR_RETTOBASE_Msk (1UL << SCB_ICSR_RETTOBASE_Pos)

#define SCB_ICSR_VECTACTIVE_Pos 0U
#define SCB_ICSR_VECTACTIVE_Msk (0x1FFUL )


#define SCB_VTOR_TBLOFF_Pos 7U
#define SCB_VTOR_TBLOFF_Msk (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)


#define SCB_AIRCR_VECTKEY_Pos 16U
#define SCB_AIRCR_VECTKEY_Msk (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)

#define SCB_AIRCR_VECTKEYSTAT_Pos 16U
#define SCB_AIRCR_VECTKEYSTAT_Msk (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)

#define SCB_AIRCR_ENDIANESS_Pos 15U
#define SCB_AIRCR_ENDIANESS_Msk (1UL << SCB_AIRCR_ENDIANESS_Pos)

#define SCB_AIRCR_PRIGROUP_Pos 8U
#define SCB_AIRCR_PRIGROUP_Msk (7UL << SCB_AIRCR_PRIGROUP_Pos)

#define SCB_AIRCR_SYSRESETREQ_Pos 2U
#define SCB_AIRCR_SYSRESETREQ_Msk (1UL << SCB_AIRCR_SYSRESETREQ_Pos)

#define SCB_AIRCR_VECTCLRACTIVE_Pos 1U
#define SCB_AIRCR_VECTCLRACTIVE_Msk (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)

#define SCB_AIRCR_VECTRESET_Pos 0U
#define SCB_AIRCR_VECTRESET_Msk (1UL )


#define SCB_SCR_SEVONPEND_Pos 4U
#define SCB_SCR_SEVONPEND_Msk (1UL << SCB_SCR_SEVONPEND_Pos)

#define SCB_SCR_SLEEPDEEP_Pos 2U
#define SCB_SCR_SLEEPDEEP_Msk (1UL << SCB_SCR_SLEEPDEEP_Pos)

#define SCB_SCR_SLEEPONEXIT_Pos 1U
#define SCB_SCR_SLEEPONEXIT_Msk (1UL << SCB_SCR_SLEEPONEXIT_Pos)


#define SCB_CCR_STKALIGN_Pos 9U
#define SCB_CCR_STKALIGN_Msk (1UL << SCB_CCR_STKALIGN_Pos)

#define SCB_CCR_BFHFNMIGN_Pos 8U
#define SCB_CCR_BFHFNMIGN_Msk (1UL << SCB_CCR_BFHFNMIGN_Pos)

#define SCB_CCR_DIV_0_TRP_Pos 4U
#define SCB_CCR_DIV_0_TRP_Msk (1UL << SCB_CCR_DIV_0_TRP_Pos)

#define SCB_CCR_UNALIGN_TRP_Pos 3U
#define SCB_CCR_UNALIGN_TRP_Msk (1UL << SCB_CCR_UNALIGN_TRP_Pos)

#define SCB_CCR_USERSETMPEND_Pos 1U
#define SCB_CCR_USERSETMPEND_Msk (1UL << SCB_CCR_USERSETMPEND_Pos)

#define SCB_CCR_NONBASETHRDENA_Pos 0U
#define SCB_CCR_NONBASETHRDENA_Msk (1UL )


#define SCB_SHCSR_USGFAULTENA_Pos 18U
#define SCB_SHCSR_USGFAULTENA_Msk (1UL << SCB_SHCSR_USGFAULTENA_Pos)

#define SCB_SHCSR_BUSFAULTENA_Pos 17U
#define SCB_SHCSR_BUSFAULTENA_Msk (1UL << SCB_SHCSR_BUSFAULTENA_Pos)

#define SCB_SHCSR_MEMFAULTENA_Pos 16U
#define SCB_SHCSR_MEMFAULTENA_Msk (1UL << SCB_SHCSR_MEMFAULTENA_Pos)

#define SCB_SHCSR_SVCALLPENDED_Pos 15U
#define SCB_SHCSR_SVCALLPENDED_Msk (1UL << SCB_SHCSR_SVCALLPENDED_Pos)

#define SCB_SHCSR_BUSFAULTPENDED_Pos 14U
#define SCB_SHCSR_BUSFAULTPENDED_Msk (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)

#define SCB_SHCSR_MEMFAULTPENDED_Pos 13U
#define SCB_SHCSR_MEMFAULTPENDED_Msk (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)

#define SCB_SHCSR_USGFAULTPENDED_Pos 12U
#define SCB_SHCSR_USGFAULTPENDED_Msk (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)

#define SCB_SHCSR_SYSTICKACT_Pos 11U
#define SCB_SHCSR_SYSTICKACT_Msk (1UL << SCB_SHCSR_SYSTICKACT_Pos)

#define SCB_SHCSR_PENDSVACT_Pos 10U
#define SCB_SHCSR_PENDSVACT_Msk (1UL << SCB_SHCSR_PENDSVACT_Pos)

#define SCB_SHCSR_MONITORACT_Pos 8U
#define SCB_SHCSR_MONITORACT_Msk (1UL << SCB_SHCSR_MONITORACT_Pos)

#define SCB_SHCSR_SVCALLACT_Pos 7U
#define SCB_SHCSR_SVCALLACT_Msk (1UL << SCB_SHCSR_SVCALLACT_Pos)

#define SCB_SHCSR_USGFAULTACT_Pos 3U
#define SCB_SHCSR_USGFAULTACT_Msk (1UL << SCB_SHCSR_USGFAULTACT_Pos)

#define SCB_SHCSR_BUSFAULTACT_Pos 1U
#define SCB_SHCSR_BUSFAULTACT_Msk (1UL << SCB_SHCSR_BUSFAULTACT_Pos)

#define SCB_SHCSR_MEMFAULTACT_Pos 0U
#define SCB_SHCSR_MEMFAULTACT_Msk (1UL )


#define SCB_CFSR_USGFAULTSR_Pos 16U
#define SCB_CFSR_USGFAULTSR_Msk (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)

#define SCB_CFSR_BUSFAULTSR_Pos 8U
#define SCB_CFSR_BUSFAULTSR_Msk (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)

#define SCB_CFSR_MEMFAULTSR_Pos 0U
#define SCB_CFSR_MEMFAULTSR_Msk (0xFFUL )


#define SCB_CFSR_MMARVALID_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 7U)
#define SCB_CFSR_MMARVALID_Msk (1UL << SCB_CFSR_MMARVALID_Pos)

#define SCB_CFSR_MLSPERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 5U)
#define SCB_CFSR_MLSPERR_Msk (1UL << SCB_CFSR_MLSPERR_Pos)

#define SCB_CFSR_MSTKERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 4U)
#define SCB_CFSR_MSTKERR_Msk (1UL << SCB_CFSR_MSTKERR_Pos)

#define SCB_CFSR_MUNSTKERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 3U)
#define SCB_CFSR_MUNSTKERR_Msk (1UL << SCB_CFSR_MUNSTKERR_Pos)

#define SCB_CFSR_DACCVIOL_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 1U)
#define SCB_CFSR_DACCVIOL_Msk (1UL << SCB_CFSR_DACCVIOL_Pos)

#define SCB_CFSR_IACCVIOL_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 0U)
#define SCB_CFSR_IACCVIOL_Msk (1UL )


#define SCB_CFSR_BFARVALID_Pos (SCB_CFSR_BUSFAULTSR_Pos + 7U)
#define SCB_CFSR_BFARVALID_Msk (1UL << SCB_CFSR_BFARVALID_Pos)

#define SCB_CFSR_LSPERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 5U)
#define SCB_CFSR_LSPERR_Msk (1UL << SCB_CFSR_LSPERR_Pos)

#define SCB_CFSR_STKERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 4U)
#define SCB_CFSR_STKERR_Msk (1UL << SCB_CFSR_STKERR_Pos)

#define SCB_CFSR_UNSTKERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 3U)
#define SCB_CFSR_UNSTKERR_Msk (1UL << SCB_CFSR_UNSTKERR_Pos)

#define SCB_CFSR_IMPRECISERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 2U)
#define SCB_CFSR_IMPRECISERR_Msk (1UL << SCB_CFSR_IMPRECISERR_Pos)

#define SCB_CFSR_PRECISERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 1U)
#define SCB_CFSR_PRECISERR_Msk (1UL << SCB_CFSR_PRECISERR_Pos)

#define SCB_CFSR_IBUSERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 0U)
#define SCB_CFSR_IBUSERR_Msk (1UL << SCB_CFSR_IBUSERR_Pos)


#define SCB_CFSR_DIVBYZERO_Pos (SCB_CFSR_USGFAULTSR_Pos + 9U)
#define SCB_CFSR_DIVBYZERO_Msk (1UL << SCB_CFSR_DIVBYZERO_Pos)

#define SCB_CFSR_UNALIGNED_Pos (SCB_CFSR_USGFAULTSR_Pos + 8U)
#define SCB_CFSR_UNALIGNED_Msk (1UL << SCB_CFSR_UNALIGNED_Pos)

#define SCB_CFSR_NOCP_Pos (SCB_CFSR_USGFAULTSR_Pos + 3U)
#define SCB_CFSR_NOCP_Msk (1UL << SCB_CFSR_NOCP_Pos)

#define SCB_CFSR_INVPC_Pos (SCB_CFSR_USGFAULTSR_Pos + 2U)
#define SCB_CFSR_INVPC_Msk (1UL << SCB_CFSR_INVPC_Pos)

#define SCB_CFSR_INVSTATE_Pos (SCB_CFSR_USGFAULTSR_Pos + 1U)
#define SCB_CFSR_INVSTATE_Msk (1UL << SCB_CFSR_INVSTATE_Pos)

#define SCB_CFSR_UNDEFINSTR_Pos (SCB_CFSR_USGFAULTSR_Pos + 0U)
#define SCB_CFSR_UNDEFINSTR_Msk (1UL << SCB_CFSR_UNDEFINSTR_Pos)


#define SCB_HFSR_DEBUGEVT_Pos 31U
#define SCB_HFSR_DEBUGEVT_Msk (1UL << SCB_HFSR_DEBUGEVT_Pos)

#define SCB_HFSR_FORCED_Pos 30U
#define SCB_HFSR_FORCED_Msk (1UL << SCB_HFSR_FORCED_Pos)

#define SCB_HFSR_VECTTBL_Pos 1U
#define SCB_HFSR_VECTTBL_Msk (1UL << SCB_HFSR_VECTTBL_Pos)


#define SCB_DFSR_EXTERNAL_Pos 4U
#define SCB_DFSR_EXTERNAL_Msk (1UL << SCB_DFSR_EXTERNAL_Pos)

#define SCB_DFSR_VCATCH_Pos 3U
#define SCB_DFSR_VCATCH_Msk (1UL << SCB_DFSR_VCATCH_Pos)

#define SCB_DFSR_DWTTRAP_Pos 2U
#define SCB_DFSR_DWTTRAP_Msk (1UL << SCB_DFSR_DWTTRAP_Pos)

#define SCB_DFSR_BKPT_Pos 1U
#define SCB_DFSR_BKPT_Msk (1UL << SCB_DFSR_BKPT_Pos)

#define SCB_DFSR_HALTED_Pos 0U
#define SCB_DFSR_HALTED_Msk (1UL )
# 717 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;


#define SCnSCB_ICTR_INTLINESNUM_Pos 0U
#define SCnSCB_ICTR_INTLINESNUM_Msk (0xFUL )


#define SCnSCB_ACTLR_DISOOFP_Pos 9U
#define SCnSCB_ACTLR_DISOOFP_Msk (1UL << SCnSCB_ACTLR_DISOOFP_Pos)

#define SCnSCB_ACTLR_DISFPCA_Pos 8U
#define SCnSCB_ACTLR_DISFPCA_Msk (1UL << SCnSCB_ACTLR_DISFPCA_Pos)

#define SCnSCB_ACTLR_DISFOLD_Pos 2U
#define SCnSCB_ACTLR_DISFOLD_Msk (1UL << SCnSCB_ACTLR_DISFOLD_Pos)

#define SCnSCB_ACTLR_DISDEFWBUF_Pos 1U
#define SCnSCB_ACTLR_DISDEFWBUF_Msk (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)

#define SCnSCB_ACTLR_DISMCYCINT_Pos 0U
#define SCnSCB_ACTLR_DISMCYCINT_Msk (1UL )
# 757 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;


#define SysTick_CTRL_COUNTFLAG_Pos 16U
#define SysTick_CTRL_COUNTFLAG_Msk (1UL << SysTick_CTRL_COUNTFLAG_Pos)

#define SysTick_CTRL_CLKSOURCE_Pos 2U
#define SysTick_CTRL_CLKSOURCE_Msk (1UL << SysTick_CTRL_CLKSOURCE_Pos)

#define SysTick_CTRL_TICKINT_Pos 1U
#define SysTick_CTRL_TICKINT_Msk (1UL << SysTick_CTRL_TICKINT_Pos)

#define SysTick_CTRL_ENABLE_Pos 0U
#define SysTick_CTRL_ENABLE_Msk (1UL )


#define SysTick_LOAD_RELOAD_Pos 0U
#define SysTick_LOAD_RELOAD_Msk (0xFFFFFFUL )


#define SysTick_VAL_CURRENT_Pos 0U
#define SysTick_VAL_CURRENT_Msk (0xFFFFFFUL )


#define SysTick_CALIB_NOREF_Pos 31U
#define SysTick_CALIB_NOREF_Msk (1UL << SysTick_CALIB_NOREF_Pos)

#define SysTick_CALIB_SKEW_Pos 30U
#define SysTick_CALIB_SKEW_Msk (1UL << SysTick_CALIB_SKEW_Pos)

#define SysTick_CALIB_TENMS_Pos 0U
#define SysTick_CALIB_TENMS_Msk (0xFFFFFFUL )
# 809 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[29U];
  volatile uint32_t IWR;
  volatile const uint32_t IRR;
  volatile uint32_t IMCR;
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;


#define ITM_TPR_PRIVMASK_Pos 0U
#define ITM_TPR_PRIVMASK_Msk (0xFUL )


#define ITM_TCR_BUSY_Pos 23U
#define ITM_TCR_BUSY_Msk (1UL << ITM_TCR_BUSY_Pos)

#define ITM_TCR_TraceBusID_Pos 16U
#define ITM_TCR_TraceBusID_Msk (0x7FUL << ITM_TCR_TraceBusID_Pos)

#define ITM_TCR_GTSFREQ_Pos 10U
#define ITM_TCR_GTSFREQ_Msk (3UL << ITM_TCR_GTSFREQ_Pos)

#define ITM_TCR_TSPrescale_Pos 8U
#define ITM_TCR_TSPrescale_Msk (3UL << ITM_TCR_TSPrescale_Pos)

#define ITM_TCR_SWOENA_Pos 4U
#define ITM_TCR_SWOENA_Msk (1UL << ITM_TCR_SWOENA_Pos)

#define ITM_TCR_DWTENA_Pos 3U
#define ITM_TCR_DWTENA_Msk (1UL << ITM_TCR_DWTENA_Pos)

#define ITM_TCR_SYNCENA_Pos 2U
#define ITM_TCR_SYNCENA_Msk (1UL << ITM_TCR_SYNCENA_Pos)

#define ITM_TCR_TSENA_Pos 1U
#define ITM_TCR_TSENA_Msk (1UL << ITM_TCR_TSENA_Pos)

#define ITM_TCR_ITMENA_Pos 0U
#define ITM_TCR_ITMENA_Msk (1UL )


#define ITM_IWR_ATVALIDM_Pos 0U
#define ITM_IWR_ATVALIDM_Msk (1UL )


#define ITM_IRR_ATREADYM_Pos 0U
#define ITM_IRR_ATREADYM_Msk (1UL )


#define ITM_IMCR_INTEGRATION_Pos 0U
#define ITM_IMCR_INTEGRATION_Msk (1UL )


#define ITM_LSR_ByteAcc_Pos 2U
#define ITM_LSR_ByteAcc_Msk (1UL << ITM_LSR_ByteAcc_Pos)

#define ITM_LSR_Access_Pos 1U
#define ITM_LSR_Access_Msk (1UL << ITM_LSR_Access_Pos)

#define ITM_LSR_Present_Pos 0U
#define ITM_LSR_Present_Msk (1UL )
# 912 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;


#define DWT_CTRL_NUMCOMP_Pos 28U
#define DWT_CTRL_NUMCOMP_Msk (0xFUL << DWT_CTRL_NUMCOMP_Pos)

#define DWT_CTRL_NOTRCPKT_Pos 27U
#define DWT_CTRL_NOTRCPKT_Msk (0x1UL << DWT_CTRL_NOTRCPKT_Pos)

#define DWT_CTRL_NOEXTTRIG_Pos 26U
#define DWT_CTRL_NOEXTTRIG_Msk (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)

#define DWT_CTRL_NOCYCCNT_Pos 25U
#define DWT_CTRL_NOCYCCNT_Msk (0x1UL << DWT_CTRL_NOCYCCNT_Pos)

#define DWT_CTRL_NOPRFCNT_Pos 24U
#define DWT_CTRL_NOPRFCNT_Msk (0x1UL << DWT_CTRL_NOPRFCNT_Pos)

#define DWT_CTRL_CYCEVTENA_Pos 22U
#define DWT_CTRL_CYCEVTENA_Msk (0x1UL << DWT_CTRL_CYCEVTENA_Pos)

#define DWT_CTRL_FOLDEVTENA_Pos 21U
#define DWT_CTRL_FOLDEVTENA_Msk (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)

#define DWT_CTRL_LSUEVTENA_Pos 20U
#define DWT_CTRL_LSUEVTENA_Msk (0x1UL << DWT_CTRL_LSUEVTENA_Pos)

#define DWT_CTRL_SLEEPEVTENA_Pos 19U
#define DWT_CTRL_SLEEPEVTENA_Msk (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)

#define DWT_CTRL_EXCEVTENA_Pos 18U
#define DWT_CTRL_EXCEVTENA_Msk (0x1UL << DWT_CTRL_EXCEVTENA_Pos)

#define DWT_CTRL_CPIEVTENA_Pos 17U
#define DWT_CTRL_CPIEVTENA_Msk (0x1UL << DWT_CTRL_CPIEVTENA_Pos)

#define DWT_CTRL_EXCTRCENA_Pos 16U
#define DWT_CTRL_EXCTRCENA_Msk (0x1UL << DWT_CTRL_EXCTRCENA_Pos)

#define DWT_CTRL_PCSAMPLENA_Pos 12U
#define DWT_CTRL_PCSAMPLENA_Msk (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)

#define DWT_CTRL_SYNCTAP_Pos 10U
#define DWT_CTRL_SYNCTAP_Msk (0x3UL << DWT_CTRL_SYNCTAP_Pos)

#define DWT_CTRL_CYCTAP_Pos 9U
#define DWT_CTRL_CYCTAP_Msk (0x1UL << DWT_CTRL_CYCTAP_Pos)

#define DWT_CTRL_POSTINIT_Pos 5U
#define DWT_CTRL_POSTINIT_Msk (0xFUL << DWT_CTRL_POSTINIT_Pos)

#define DWT_CTRL_POSTPRESET_Pos 1U
#define DWT_CTRL_POSTPRESET_Msk (0xFUL << DWT_CTRL_POSTPRESET_Pos)

#define DWT_CTRL_CYCCNTENA_Pos 0U
#define DWT_CTRL_CYCCNTENA_Msk (0x1UL )


#define DWT_CPICNT_CPICNT_Pos 0U
#define DWT_CPICNT_CPICNT_Msk (0xFFUL )


#define DWT_EXCCNT_EXCCNT_Pos 0U
#define DWT_EXCCNT_EXCCNT_Msk (0xFFUL )


#define DWT_SLEEPCNT_SLEEPCNT_Pos 0U
#define DWT_SLEEPCNT_SLEEPCNT_Msk (0xFFUL )


#define DWT_LSUCNT_LSUCNT_Pos 0U
#define DWT_LSUCNT_LSUCNT_Msk (0xFFUL )


#define DWT_FOLDCNT_FOLDCNT_Pos 0U
#define DWT_FOLDCNT_FOLDCNT_Msk (0xFFUL )


#define DWT_MASK_MASK_Pos 0U
#define DWT_MASK_MASK_Msk (0x1FUL )


#define DWT_FUNCTION_MATCHED_Pos 24U
#define DWT_FUNCTION_MATCHED_Msk (0x1UL << DWT_FUNCTION_MATCHED_Pos)

#define DWT_FUNCTION_DATAVADDR1_Pos 16U
#define DWT_FUNCTION_DATAVADDR1_Msk (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)

#define DWT_FUNCTION_DATAVADDR0_Pos 12U
#define DWT_FUNCTION_DATAVADDR0_Msk (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)

#define DWT_FUNCTION_DATAVSIZE_Pos 10U
#define DWT_FUNCTION_DATAVSIZE_Msk (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)

#define DWT_FUNCTION_LNK1ENA_Pos 9U
#define DWT_FUNCTION_LNK1ENA_Msk (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)

#define DWT_FUNCTION_DATAVMATCH_Pos 8U
#define DWT_FUNCTION_DATAVMATCH_Msk (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)

#define DWT_FUNCTION_CYCMATCH_Pos 7U
#define DWT_FUNCTION_CYCMATCH_Msk (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)

#define DWT_FUNCTION_EMITRANGE_Pos 5U
#define DWT_FUNCTION_EMITRANGE_Msk (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)

#define DWT_FUNCTION_FUNCTION_Pos 0U
#define DWT_FUNCTION_FUNCTION_Msk (0xFUL )
# 1059 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
  volatile uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;


#define TPI_ACPR_PRESCALER_Pos 0U
#define TPI_ACPR_PRESCALER_Msk (0x1FFFUL )


#define TPI_SPPR_TXMODE_Pos 0U
#define TPI_SPPR_TXMODE_Msk (0x3UL )


#define TPI_FFSR_FtNonStop_Pos 3U
#define TPI_FFSR_FtNonStop_Msk (0x1UL << TPI_FFSR_FtNonStop_Pos)

#define TPI_FFSR_TCPresent_Pos 2U
#define TPI_FFSR_TCPresent_Msk (0x1UL << TPI_FFSR_TCPresent_Pos)

#define TPI_FFSR_FtStopped_Pos 1U
#define TPI_FFSR_FtStopped_Msk (0x1UL << TPI_FFSR_FtStopped_Pos)

#define TPI_FFSR_FlInProg_Pos 0U
#define TPI_FFSR_FlInProg_Msk (0x1UL )


#define TPI_FFCR_TrigIn_Pos 8U
#define TPI_FFCR_TrigIn_Msk (0x1UL << TPI_FFCR_TrigIn_Pos)

#define TPI_FFCR_EnFCont_Pos 1U
#define TPI_FFCR_EnFCont_Msk (0x1UL << TPI_FFCR_EnFCont_Pos)


#define TPI_TRIGGER_TRIGGER_Pos 0U
#define TPI_TRIGGER_TRIGGER_Msk (0x1UL )


#define TPI_FIFO0_ITM_ATVALID_Pos 29U
#define TPI_FIFO0_ITM_ATVALID_Msk (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)

#define TPI_FIFO0_ITM_bytecount_Pos 27U
#define TPI_FIFO0_ITM_bytecount_Msk (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)

#define TPI_FIFO0_ETM_ATVALID_Pos 26U
#define TPI_FIFO0_ETM_ATVALID_Msk (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)

#define TPI_FIFO0_ETM_bytecount_Pos 24U
#define TPI_FIFO0_ETM_bytecount_Msk (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)

#define TPI_FIFO0_ETM2_Pos 16U
#define TPI_FIFO0_ETM2_Msk (0xFFUL << TPI_FIFO0_ETM2_Pos)

#define TPI_FIFO0_ETM1_Pos 8U
#define TPI_FIFO0_ETM1_Msk (0xFFUL << TPI_FIFO0_ETM1_Pos)

#define TPI_FIFO0_ETM0_Pos 0U
#define TPI_FIFO0_ETM0_Msk (0xFFUL )


#define TPI_ITATBCTR2_ATREADY_Pos 0U
#define TPI_ITATBCTR2_ATREADY_Msk (0x1UL )


#define TPI_FIFO1_ITM_ATVALID_Pos 29U
#define TPI_FIFO1_ITM_ATVALID_Msk (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)

#define TPI_FIFO1_ITM_bytecount_Pos 27U
#define TPI_FIFO1_ITM_bytecount_Msk (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)

#define TPI_FIFO1_ETM_ATVALID_Pos 26U
#define TPI_FIFO1_ETM_ATVALID_Msk (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)

#define TPI_FIFO1_ETM_bytecount_Pos 24U
#define TPI_FIFO1_ETM_bytecount_Msk (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)

#define TPI_FIFO1_ITM2_Pos 16U
#define TPI_FIFO1_ITM2_Msk (0xFFUL << TPI_FIFO1_ITM2_Pos)

#define TPI_FIFO1_ITM1_Pos 8U
#define TPI_FIFO1_ITM1_Msk (0xFFUL << TPI_FIFO1_ITM1_Pos)

#define TPI_FIFO1_ITM0_Pos 0U
#define TPI_FIFO1_ITM0_Msk (0xFFUL )


#define TPI_ITATBCTR0_ATREADY_Pos 0U
#define TPI_ITATBCTR0_ATREADY_Msk (0x1UL )


#define TPI_ITCTRL_Mode_Pos 0U
#define TPI_ITCTRL_Mode_Msk (0x1UL )


#define TPI_DEVID_NRZVALID_Pos 11U
#define TPI_DEVID_NRZVALID_Msk (0x1UL << TPI_DEVID_NRZVALID_Pos)

#define TPI_DEVID_MANCVALID_Pos 10U
#define TPI_DEVID_MANCVALID_Msk (0x1UL << TPI_DEVID_MANCVALID_Pos)

#define TPI_DEVID_PTINVALID_Pos 9U
#define TPI_DEVID_PTINVALID_Msk (0x1UL << TPI_DEVID_PTINVALID_Pos)

#define TPI_DEVID_MinBufSz_Pos 6U
#define TPI_DEVID_MinBufSz_Msk (0x7UL << TPI_DEVID_MinBufSz_Pos)

#define TPI_DEVID_AsynClkIn_Pos 5U
#define TPI_DEVID_AsynClkIn_Msk (0x1UL << TPI_DEVID_AsynClkIn_Pos)

#define TPI_DEVID_NrTraceInput_Pos 0U
#define TPI_DEVID_NrTraceInput_Msk (0x1FUL )


#define TPI_DEVTYPE_MajorType_Pos 4U
#define TPI_DEVTYPE_MajorType_Msk (0xFUL << TPI_DEVTYPE_MajorType_Pos)

#define TPI_DEVTYPE_SubType_Pos 0U
#define TPI_DEVTYPE_SubType_Msk (0xFUL )
# 1215 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;


#define MPU_TYPE_IREGION_Pos 16U
#define MPU_TYPE_IREGION_Msk (0xFFUL << MPU_TYPE_IREGION_Pos)

#define MPU_TYPE_DREGION_Pos 8U
#define MPU_TYPE_DREGION_Msk (0xFFUL << MPU_TYPE_DREGION_Pos)

#define MPU_TYPE_SEPARATE_Pos 0U
#define MPU_TYPE_SEPARATE_Msk (1UL )


#define MPU_CTRL_PRIVDEFENA_Pos 2U
#define MPU_CTRL_PRIVDEFENA_Msk (1UL << MPU_CTRL_PRIVDEFENA_Pos)

#define MPU_CTRL_HFNMIENA_Pos 1U
#define MPU_CTRL_HFNMIENA_Msk (1UL << MPU_CTRL_HFNMIENA_Pos)

#define MPU_CTRL_ENABLE_Pos 0U
#define MPU_CTRL_ENABLE_Msk (1UL )


#define MPU_RNR_REGION_Pos 0U
#define MPU_RNR_REGION_Msk (0xFFUL )


#define MPU_RBAR_ADDR_Pos 5U
#define MPU_RBAR_ADDR_Msk (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)

#define MPU_RBAR_VALID_Pos 4U
#define MPU_RBAR_VALID_Msk (1UL << MPU_RBAR_VALID_Pos)

#define MPU_RBAR_REGION_Pos 0U
#define MPU_RBAR_REGION_Msk (0xFUL )


#define MPU_RASR_ATTRS_Pos 16U
#define MPU_RASR_ATTRS_Msk (0xFFFFUL << MPU_RASR_ATTRS_Pos)

#define MPU_RASR_XN_Pos 28U
#define MPU_RASR_XN_Msk (1UL << MPU_RASR_XN_Pos)

#define MPU_RASR_AP_Pos 24U
#define MPU_RASR_AP_Msk (0x7UL << MPU_RASR_AP_Pos)

#define MPU_RASR_TEX_Pos 19U
#define MPU_RASR_TEX_Msk (0x7UL << MPU_RASR_TEX_Pos)

#define MPU_RASR_S_Pos 18U
#define MPU_RASR_S_Msk (1UL << MPU_RASR_S_Pos)

#define MPU_RASR_C_Pos 17U
#define MPU_RASR_C_Msk (1UL << MPU_RASR_C_Pos)

#define MPU_RASR_B_Pos 16U
#define MPU_RASR_B_Msk (1UL << MPU_RASR_B_Pos)

#define MPU_RASR_SRD_Pos 8U
#define MPU_RASR_SRD_Msk (0xFFUL << MPU_RASR_SRD_Pos)

#define MPU_RASR_SIZE_Pos 1U
#define MPU_RASR_SIZE_Msk (0x1FUL << MPU_RASR_SIZE_Pos)

#define MPU_RASR_ENABLE_Pos 0U
#define MPU_RASR_ENABLE_Msk (1UL )
# 1309 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
} FPU_Type;


#define FPU_FPCCR_ASPEN_Pos 31U
#define FPU_FPCCR_ASPEN_Msk (1UL << FPU_FPCCR_ASPEN_Pos)

#define FPU_FPCCR_LSPEN_Pos 30U
#define FPU_FPCCR_LSPEN_Msk (1UL << FPU_FPCCR_LSPEN_Pos)

#define FPU_FPCCR_MONRDY_Pos 8U
#define FPU_FPCCR_MONRDY_Msk (1UL << FPU_FPCCR_MONRDY_Pos)

#define FPU_FPCCR_BFRDY_Pos 6U
#define FPU_FPCCR_BFRDY_Msk (1UL << FPU_FPCCR_BFRDY_Pos)

#define FPU_FPCCR_MMRDY_Pos 5U
#define FPU_FPCCR_MMRDY_Msk (1UL << FPU_FPCCR_MMRDY_Pos)

#define FPU_FPCCR_HFRDY_Pos 4U
#define FPU_FPCCR_HFRDY_Msk (1UL << FPU_FPCCR_HFRDY_Pos)

#define FPU_FPCCR_THREAD_Pos 3U
#define FPU_FPCCR_THREAD_Msk (1UL << FPU_FPCCR_THREAD_Pos)

#define FPU_FPCCR_USER_Pos 1U
#define FPU_FPCCR_USER_Msk (1UL << FPU_FPCCR_USER_Pos)

#define FPU_FPCCR_LSPACT_Pos 0U
#define FPU_FPCCR_LSPACT_Msk (1UL )


#define FPU_FPCAR_ADDRESS_Pos 3U
#define FPU_FPCAR_ADDRESS_Msk (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)


#define FPU_FPDSCR_AHP_Pos 26U
#define FPU_FPDSCR_AHP_Msk (1UL << FPU_FPDSCR_AHP_Pos)

#define FPU_FPDSCR_DN_Pos 25U
#define FPU_FPDSCR_DN_Msk (1UL << FPU_FPDSCR_DN_Pos)

#define FPU_FPDSCR_FZ_Pos 24U
#define FPU_FPDSCR_FZ_Msk (1UL << FPU_FPDSCR_FZ_Pos)

#define FPU_FPDSCR_RMode_Pos 22U
#define FPU_FPDSCR_RMode_Msk (3UL << FPU_FPDSCR_RMode_Pos)


#define FPU_MVFR0_FP_rounding_modes_Pos 28U
#define FPU_MVFR0_FP_rounding_modes_Msk (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)

#define FPU_MVFR0_Short_vectors_Pos 24U
#define FPU_MVFR0_Short_vectors_Msk (0xFUL << FPU_MVFR0_Short_vectors_Pos)

#define FPU_MVFR0_Square_root_Pos 20U
#define FPU_MVFR0_Square_root_Msk (0xFUL << FPU_MVFR0_Square_root_Pos)

#define FPU_MVFR0_Divide_Pos 16U
#define FPU_MVFR0_Divide_Msk (0xFUL << FPU_MVFR0_Divide_Pos)

#define FPU_MVFR0_FP_excep_trapping_Pos 12U
#define FPU_MVFR0_FP_excep_trapping_Msk (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)

#define FPU_MVFR0_Double_precision_Pos 8U
#define FPU_MVFR0_Double_precision_Msk (0xFUL << FPU_MVFR0_Double_precision_Pos)

#define FPU_MVFR0_Single_precision_Pos 4U
#define FPU_MVFR0_Single_precision_Msk (0xFUL << FPU_MVFR0_Single_precision_Pos)

#define FPU_MVFR0_A_SIMD_registers_Pos 0U
#define FPU_MVFR0_A_SIMD_registers_Msk (0xFUL )


#define FPU_MVFR1_FP_fused_MAC_Pos 28U
#define FPU_MVFR1_FP_fused_MAC_Msk (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)

#define FPU_MVFR1_FP_HPFP_Pos 24U
#define FPU_MVFR1_FP_HPFP_Msk (0xFUL << FPU_MVFR1_FP_HPFP_Pos)

#define FPU_MVFR1_D_NaN_mode_Pos 4U
#define FPU_MVFR1_D_NaN_mode_Msk (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)

#define FPU_MVFR1_FtZ_mode_Pos 0U
#define FPU_MVFR1_FtZ_mode_Msk (0xFUL )
# 1415 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;


#define CoreDebug_DHCSR_DBGKEY_Pos 16U
#define CoreDebug_DHCSR_DBGKEY_Msk (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)

#define CoreDebug_DHCSR_S_RESET_ST_Pos 25U
#define CoreDebug_DHCSR_S_RESET_ST_Msk (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)

#define CoreDebug_DHCSR_S_RETIRE_ST_Pos 24U
#define CoreDebug_DHCSR_S_RETIRE_ST_Msk (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)

#define CoreDebug_DHCSR_S_LOCKUP_Pos 19U
#define CoreDebug_DHCSR_S_LOCKUP_Msk (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)

#define CoreDebug_DHCSR_S_SLEEP_Pos 18U
#define CoreDebug_DHCSR_S_SLEEP_Msk (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)

#define CoreDebug_DHCSR_S_HALT_Pos 17U
#define CoreDebug_DHCSR_S_HALT_Msk (1UL << CoreDebug_DHCSR_S_HALT_Pos)

#define CoreDebug_DHCSR_S_REGRDY_Pos 16U
#define CoreDebug_DHCSR_S_REGRDY_Msk (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)

#define CoreDebug_DHCSR_C_SNAPSTALL_Pos 5U
#define CoreDebug_DHCSR_C_SNAPSTALL_Msk (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)

#define CoreDebug_DHCSR_C_MASKINTS_Pos 3U
#define CoreDebug_DHCSR_C_MASKINTS_Msk (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)

#define CoreDebug_DHCSR_C_STEP_Pos 2U
#define CoreDebug_DHCSR_C_STEP_Msk (1UL << CoreDebug_DHCSR_C_STEP_Pos)

#define CoreDebug_DHCSR_C_HALT_Pos 1U
#define CoreDebug_DHCSR_C_HALT_Msk (1UL << CoreDebug_DHCSR_C_HALT_Pos)

#define CoreDebug_DHCSR_C_DEBUGEN_Pos 0U
#define CoreDebug_DHCSR_C_DEBUGEN_Msk (1UL )


#define CoreDebug_DCRSR_REGWnR_Pos 16U
#define CoreDebug_DCRSR_REGWnR_Msk (1UL << CoreDebug_DCRSR_REGWnR_Pos)

#define CoreDebug_DCRSR_REGSEL_Pos 0U
#define CoreDebug_DCRSR_REGSEL_Msk (0x1FUL )


#define CoreDebug_DEMCR_TRCENA_Pos 24U
#define CoreDebug_DEMCR_TRCENA_Msk (1UL << CoreDebug_DEMCR_TRCENA_Pos)

#define CoreDebug_DEMCR_MON_REQ_Pos 19U
#define CoreDebug_DEMCR_MON_REQ_Msk (1UL << CoreDebug_DEMCR_MON_REQ_Pos)

#define CoreDebug_DEMCR_MON_STEP_Pos 18U
#define CoreDebug_DEMCR_MON_STEP_Msk (1UL << CoreDebug_DEMCR_MON_STEP_Pos)

#define CoreDebug_DEMCR_MON_PEND_Pos 17U
#define CoreDebug_DEMCR_MON_PEND_Msk (1UL << CoreDebug_DEMCR_MON_PEND_Pos)

#define CoreDebug_DEMCR_MON_EN_Pos 16U
#define CoreDebug_DEMCR_MON_EN_Msk (1UL << CoreDebug_DEMCR_MON_EN_Pos)

#define CoreDebug_DEMCR_VC_HARDERR_Pos 10U
#define CoreDebug_DEMCR_VC_HARDERR_Msk (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)

#define CoreDebug_DEMCR_VC_INTERR_Pos 9U
#define CoreDebug_DEMCR_VC_INTERR_Msk (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)

#define CoreDebug_DEMCR_VC_BUSERR_Pos 8U
#define CoreDebug_DEMCR_VC_BUSERR_Msk (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)

#define CoreDebug_DEMCR_VC_STATERR_Pos 7U
#define CoreDebug_DEMCR_VC_STATERR_Msk (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)

#define CoreDebug_DEMCR_VC_CHKERR_Pos 6U
#define CoreDebug_DEMCR_VC_CHKERR_Msk (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)

#define CoreDebug_DEMCR_VC_NOCPERR_Pos 5U
#define CoreDebug_DEMCR_VC_NOCPERR_Msk (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)

#define CoreDebug_DEMCR_VC_MMERR_Pos 4U
#define CoreDebug_DEMCR_VC_MMERR_Msk (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)

#define CoreDebug_DEMCR_VC_CORERESET_Pos 0U
#define CoreDebug_DEMCR_VC_CORERESET_Msk (1UL )
# 1523 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
#define _VAL2FLD(field,value) (((uint32_t)(value) << field ## _Pos) & field ## _Msk)







#define _FLD2VAL(field,value) (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
# 1544 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
#define SCS_BASE (0xE000E000UL)
#define ITM_BASE (0xE0000000UL)
#define DWT_BASE (0xE0001000UL)
#define TPI_BASE (0xE0040000UL)
#define CoreDebug_BASE (0xE000EDF0UL)
#define SysTick_BASE (SCS_BASE + 0x0010UL)
#define NVIC_BASE (SCS_BASE + 0x0100UL)
#define SCB_BASE (SCS_BASE + 0x0D00UL)

#define SCnSCB ((SCnSCB_Type *) SCS_BASE )
#define SCB ((SCB_Type *) SCB_BASE )
#define SysTick ((SysTick_Type *) SysTick_BASE )
#define NVIC ((NVIC_Type *) NVIC_BASE )
#define ITM ((ITM_Type *) ITM_BASE )
#define DWT ((DWT_Type *) DWT_BASE )
#define TPI ((TPI_Type *) TPI_BASE )
#define CoreDebug ((CoreDebug_Type *) CoreDebug_BASE)


#define MPU_BASE (SCS_BASE + 0x0D90UL)
#define MPU ((MPU_Type *) MPU_BASE )


#define FPU_BASE (SCS_BASE + 0x0F30UL)
#define FPU ((FPU_Type *) FPU_BASE )
# 1597 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
#define NVIC_SetPriorityGrouping __NVIC_SetPriorityGrouping
#define NVIC_GetPriorityGrouping __NVIC_GetPriorityGrouping
#define NVIC_EnableIRQ __NVIC_EnableIRQ
#define NVIC_GetEnableIRQ __NVIC_GetEnableIRQ
#define NVIC_DisableIRQ __NVIC_DisableIRQ
#define NVIC_GetPendingIRQ __NVIC_GetPendingIRQ
#define NVIC_SetPendingIRQ __NVIC_SetPendingIRQ
#define NVIC_ClearPendingIRQ __NVIC_ClearPendingIRQ
#define NVIC_GetActive __NVIC_GetActive
#define NVIC_SetPriority __NVIC_SetPriority
#define NVIC_GetPriority __NVIC_GetPriority



#define NVIC_SetVector __NVIC_SetVector
#define NVIC_GetVector __NVIC_GetVector


#define NVIC_USER_IRQ_OFFSET 16
# 1628 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1659 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  }
}
# 1676 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1695 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  }
}
# 1712 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1731 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  }
}
# 1746 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  }
}
# 1763 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1785 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
}
# 1807 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)] >> (8U - 4)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - 4)));
  }
}
# 1832 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 1859 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 1882 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
    uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
    vectors[(int32_t)IRQn + 16] = vector;
}
# 1897 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
    uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
    return vectors[(int32_t)IRQn + 16];
}






static inline void NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}
# 1942 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 1983 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 4) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2013 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
extern volatile int32_t ITM_RxBuffer;
#define ITM_RXBUFFER_EMPTY ((int32_t)0x5AA55AA5U)
# 2025 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2046 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2066 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 365 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h" 2
# 1 "./src/main/target/system_stm32f30x.h" 1
# 40 "./src/main/target/system_stm32f30x.h"
#define __SYSTEM_STM32F30X_H 






extern uint32_t SystemCoreClock;
# 56 "./src/main/target/system_stm32f30x.h"
extern void SystemInit(void);
extern void SystemCoreClockUpdate(void);
# 366 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h" 2






typedef int32_t s32;
typedef int16_t s16;
typedef int8_t s8;

typedef const int32_t sc32;
typedef const int16_t sc16;
typedef const int8_t sc8;

typedef volatile int32_t vs32;
typedef volatile int16_t vs16;
typedef volatile int8_t vs8;

typedef volatile const int32_t vsc32;
typedef volatile const int16_t vsc16;
typedef volatile const int8_t vsc8;

typedef uint32_t u32;
typedef uint16_t u16;
typedef uint8_t u8;

typedef const uint32_t uc32;
typedef const uint16_t uc16;
typedef const uint8_t uc8;

typedef volatile uint32_t vu32;
typedef volatile uint16_t vu16;
typedef volatile uint8_t vu8;

typedef volatile const uint32_t vuc32;
typedef volatile const uint16_t vuc16;
typedef volatile const uint8_t vuc8;

typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;

typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))

typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;
# 423 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IER;
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  uint32_t RESERVED0;
  volatile uint32_t SMPR1;
  volatile uint32_t SMPR2;
  uint32_t RESERVED1;
  volatile uint32_t TR1;
  volatile uint32_t TR2;
  volatile uint32_t TR3;
  uint32_t RESERVED2;
  volatile uint32_t SQR1;
  volatile uint32_t SQR2;
  volatile uint32_t SQR3;
  volatile uint32_t SQR4;
  volatile uint32_t DR;
  uint32_t RESERVED3;
  uint32_t RESERVED4;
  volatile uint32_t JSQR;
  uint32_t RESERVED5[4];
  volatile uint32_t OFR1;
  volatile uint32_t OFR2;
  volatile uint32_t OFR3;
  volatile uint32_t OFR4;
  uint32_t RESERVED6[4];
  volatile uint32_t JDR1;
  volatile uint32_t JDR2;
  volatile uint32_t JDR3;
  volatile uint32_t JDR4;
  uint32_t RESERVED7[4];
  volatile uint32_t AWD2CR;
  volatile uint32_t AWD3CR;
  uint32_t RESERVED8;
  uint32_t RESERVED9;
  volatile uint32_t DIFSEL;
  volatile uint32_t CALFACT;

} ADC_TypeDef;

typedef struct
{
  volatile uint32_t CSR;
  uint32_t RESERVED;
  volatile uint32_t CCR;
  volatile uint32_t CDR;

} ADC_Common_TypeDef;





typedef struct
{
  volatile uint32_t TIR;
  volatile uint32_t TDTR;
  volatile uint32_t TDLR;
  volatile uint32_t TDHR;
} CAN_TxMailBox_TypeDef;




typedef struct
{
  volatile uint32_t RIR;
  volatile uint32_t RDTR;
  volatile uint32_t RDLR;
  volatile uint32_t RDHR;
} CAN_FIFOMailBox_TypeDef;




typedef struct
{
  volatile uint32_t FR1;
  volatile uint32_t FR2;
} CAN_FilterRegister_TypeDef;




typedef struct
{
  volatile uint32_t MCR;
  volatile uint32_t MSR;
  volatile uint32_t TSR;
  volatile uint32_t RF0R;
  volatile uint32_t RF1R;
  volatile uint32_t IER;
  volatile uint32_t ESR;
  volatile uint32_t BTR;
  uint32_t RESERVED0[88];
  CAN_TxMailBox_TypeDef sTxMailBox[3];
  CAN_FIFOMailBox_TypeDef sFIFOMailBox[2];
  uint32_t RESERVED1[12];
  volatile uint32_t FMR;
  volatile uint32_t FM1R;
  uint32_t RESERVED2;
  volatile uint32_t FS1R;
  uint32_t RESERVED3;
  volatile uint32_t FFA1R;
  uint32_t RESERVED4;
  volatile uint32_t FA1R;
  uint32_t RESERVED5[8];
  CAN_FilterRegister_TypeDef sFilterRegister[28];
} CAN_TypeDef;






typedef struct
{
  volatile uint32_t CSR;
} COMP_TypeDef;





typedef struct
{
  volatile uint32_t DR;
  volatile uint8_t IDR;
  uint8_t RESERVED0;
  uint16_t RESERVED1;
  volatile uint32_t CR;
  uint32_t RESERVED2;
  volatile uint32_t INIT;
  volatile uint32_t POL;
} CRC_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SWTRIGR;
  volatile uint32_t DHR12R1;
  volatile uint32_t DHR12L1;
  volatile uint32_t DHR8R1;
  volatile uint32_t DHR12R2;
  volatile uint32_t DHR12L2;
  volatile uint32_t DHR8R2;
  volatile uint32_t DHR12RD;
  volatile uint32_t DHR12LD;
  volatile uint32_t DHR8RD;
  volatile uint32_t DOR1;
  volatile uint32_t DOR2;
  volatile uint32_t SR;
} DAC_TypeDef;





typedef struct
{
  volatile uint32_t IDCODE;
  volatile uint32_t CR;
  volatile uint32_t APB1FZ;
  volatile uint32_t APB2FZ;
}DBGMCU_TypeDef;





typedef struct
{
  volatile uint32_t CCR;
  volatile uint32_t CNDTR;
  volatile uint32_t CPAR;
  volatile uint32_t CMAR;
} DMA_Channel_TypeDef;

typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
} DMA_TypeDef;





typedef struct
{
  volatile uint32_t IMR;
  volatile uint32_t EMR;
  volatile uint32_t RTSR;
  volatile uint32_t FTSR;
  volatile uint32_t SWIER;
  volatile uint32_t PR;
  uint32_t RESERVED1;
  uint32_t RESERVED2;
  volatile uint32_t IMR2;
  volatile uint32_t EMR2;
  volatile uint32_t RTSR2;
  volatile uint32_t FTSR2;
  volatile uint32_t SWIER2;
  volatile uint32_t PR2;
}EXTI_TypeDef;





typedef struct
{
  volatile uint32_t ACR;
  volatile uint32_t KEYR;
  volatile uint32_t OPTKEYR;
  volatile uint32_t SR;
  volatile uint32_t CR;
  volatile uint32_t AR;
  uint32_t RESERVED;
  volatile uint32_t OBR;
  volatile uint32_t WRPR;

} FLASH_TypeDef;




typedef struct
{
  volatile uint16_t RDP;
  volatile uint16_t USER;
  uint16_t RESERVED0;
  uint16_t RESERVED1;
  volatile uint16_t WRP0;
  volatile uint16_t WRP1;
  volatile uint16_t WRP2;
  volatile uint16_t WRP3;
} OB_TypeDef;





typedef struct
{
  volatile uint32_t MODER;
  volatile uint16_t OTYPER;
  uint16_t RESERVED0;
  volatile uint32_t OSPEEDR;
  volatile uint32_t PUPDR;
  volatile uint16_t IDR;
  uint16_t RESERVED1;
  volatile uint16_t ODR;
  uint16_t RESERVED2;
  volatile uint32_t BSRR;
  volatile uint32_t LCKR;
  volatile uint32_t AFR[2];
  volatile uint16_t BRR;
  uint16_t RESERVED3;
}GPIO_TypeDef;





typedef struct
{
  volatile uint32_t MCR;
  volatile uint32_t MISR;
  volatile uint32_t MICR;
  volatile uint32_t MDIER;
  volatile uint32_t MCNTR;
  volatile uint32_t MPER;
  volatile uint32_t MREP;
  volatile uint32_t MCMP1R;
  uint32_t RESERVED0;
  volatile uint32_t MCMP2R;
  volatile uint32_t MCMP3R;
  volatile uint32_t MCMP4R;
}HRTIM_Master_TypeDef;


typedef struct
{
  volatile uint32_t TIMxCR;
  volatile uint32_t TIMxISR;
  volatile uint32_t TIMxICR;
  volatile uint32_t TIMxDIER;
  volatile uint32_t CNTxR;
  volatile uint32_t PERxR;
  volatile uint32_t REPxR;
  volatile uint32_t CMP1xR;
  volatile uint32_t CMP1CxR;
  volatile uint32_t CMP2xR;
  volatile uint32_t CMP3xR;
  volatile uint32_t CMP4xR;
  volatile uint32_t CPT1xR;
  volatile uint32_t CPT2xR;
  volatile uint32_t DTxR;
  volatile uint32_t SETx1R;
  volatile uint32_t RSTx1R;
  volatile uint32_t SETx2R;
  volatile uint32_t RSTx2R;
  volatile uint32_t EEFxR1;
  volatile uint32_t EEFxR2;
  volatile uint32_t RSTxR;
  volatile uint32_t CHPxR;
  volatile uint32_t CPT1xCR;
  volatile uint32_t CPT2xCR;
  volatile uint32_t OUTxR;
  volatile uint32_t FLTxR;
  uint32_t RESERVED0[5];
}HRTIM_Timerx_TypeDef;


typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t IER;
  volatile uint32_t OENR;
  volatile uint32_t DISR;
  volatile uint32_t ODSR;
  volatile uint32_t BMCR;
  volatile uint32_t BMTRGR;
  volatile uint32_t BMCMPR;
  volatile uint32_t BMPER;
  volatile uint32_t EECR1;
  volatile uint32_t EECR2;
  volatile uint32_t EECR3;
  volatile uint32_t ADC1R;
  volatile uint32_t ADC2R;
  volatile uint32_t ADC3R;
  volatile uint32_t ADC4R;
  volatile uint32_t DLLCR;
  volatile uint32_t FLTINxR1;
  volatile uint32_t FLTINxR2;
  volatile uint32_t BDMUPDR;
  volatile uint32_t BDTAUPR;
  volatile uint32_t BDTBUPR;
  volatile uint32_t BDTCUPR;
  volatile uint32_t BDTDUPR;
  volatile uint32_t BDTEUPR;
  volatile uint32_t BDMADR;
}HRTIM_Common_TypeDef;


typedef struct {
  HRTIM_Master_TypeDef HRTIM_MASTER;
  uint32_t RESERVED0[20];
  HRTIM_Timerx_TypeDef HRTIM_TIMERx[5];
  uint32_t RESERVED1[32];
  HRTIM_Common_TypeDef HRTIM_COMMON;
}HRTIM_TypeDef;





typedef struct
{
  volatile uint32_t CSR;
} OPAMP_TypeDef;






typedef struct
{
  volatile uint32_t CFGR1;
  volatile uint32_t RCR;
  volatile uint32_t EXTICR[4];
  volatile uint32_t CFGR2;
  volatile uint32_t RESERVED0;
  volatile uint32_t RESERVED1;
  volatile uint32_t RESERVED2;
  volatile uint32_t RESERVED4;
  volatile uint32_t RESERVED5;
  volatile uint32_t RESERVED6;
  volatile uint32_t RESERVED7;
  volatile uint32_t RESERVED8;
  volatile uint32_t RESERVED9;
  volatile uint32_t RESERVED10;
  volatile uint32_t RESERVED11;
  volatile uint32_t RESERVED12;
  volatile uint32_t RESERVED13;
  volatile uint32_t CFGR3;
} SYSCFG_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t OAR1;
  volatile uint32_t OAR2;
  volatile uint32_t TIMINGR;
  volatile uint32_t TIMEOUTR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t PECR;
  volatile uint32_t RXDR;
  volatile uint32_t TXDR;
}I2C_TypeDef;





typedef struct
{
  volatile uint32_t KR;
  volatile uint32_t PR;
  volatile uint32_t RLR;
  volatile uint32_t SR;
  volatile uint32_t WINR;
} IWDG_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CSR;
} PWR_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t CIR;
  volatile uint32_t APB2RSTR;
  volatile uint32_t APB1RSTR;
  volatile uint32_t AHBENR;
  volatile uint32_t APB2ENR;
  volatile uint32_t APB1ENR;
  volatile uint32_t BDCR;
  volatile uint32_t CSR;
  volatile uint32_t AHBRSTR;
  volatile uint32_t CFGR2;
  volatile uint32_t CFGR3;
} RCC_TypeDef;





typedef struct
{
  volatile uint32_t TR;
  volatile uint32_t DR;
  volatile uint32_t CR;
  volatile uint32_t ISR;
  volatile uint32_t PRER;
  volatile uint32_t WUTR;
  uint32_t RESERVED0;
  volatile uint32_t ALRMAR;
  volatile uint32_t ALRMBR;
  volatile uint32_t WPR;
  volatile uint32_t SSR;
  volatile uint32_t SHIFTR;
  volatile uint32_t TSTR;
  volatile uint32_t TSDR;
  volatile uint32_t TSSSR;
  volatile uint32_t CALR;
  volatile uint32_t TAFCR;
  volatile uint32_t ALRMASSR;
  volatile uint32_t ALRMBSSR;
  uint32_t RESERVED7;
  volatile uint32_t BKP0R;
  volatile uint32_t BKP1R;
  volatile uint32_t BKP2R;
  volatile uint32_t BKP3R;
  volatile uint32_t BKP4R;
  volatile uint32_t BKP5R;
  volatile uint32_t BKP6R;
  volatile uint32_t BKP7R;
  volatile uint32_t BKP8R;
  volatile uint32_t BKP9R;
  volatile uint32_t BKP10R;
  volatile uint32_t BKP11R;
  volatile uint32_t BKP12R;
  volatile uint32_t BKP13R;
  volatile uint32_t BKP14R;
  volatile uint32_t BKP15R;
} RTC_TypeDef;






typedef struct
{
  volatile uint16_t CR1;
  uint16_t RESERVED0;
  volatile uint16_t CR2;
  uint16_t RESERVED1;
  volatile uint16_t SR;
  uint16_t RESERVED2;
  volatile uint16_t DR;
  uint16_t RESERVED3;
  volatile uint16_t CRCPR;
  uint16_t RESERVED4;
  volatile uint16_t RXCRCR;
  uint16_t RESERVED5;
  volatile uint16_t TXCRCR;
  uint16_t RESERVED6;
  volatile uint16_t I2SCFGR;
  uint16_t RESERVED7;
  volatile uint16_t I2SPR;
  uint16_t RESERVED8;
} SPI_TypeDef;




typedef struct
{
  volatile uint16_t CR1;
  uint16_t RESERVED0;
 volatile uint32_t CR2;
  volatile uint32_t SMCR;
  volatile uint32_t DIER;
  volatile uint32_t SR;
  volatile uint32_t EGR;
  volatile uint32_t CCMR1;
  volatile uint32_t CCMR2;
  volatile uint32_t CCER;
  volatile uint32_t CNT;
  volatile uint16_t PSC;
  uint16_t RESERVED9;
  volatile uint32_t ARR;
  volatile uint16_t RCR;
  uint16_t RESERVED10;
  volatile uint32_t CCR1;
  volatile uint32_t CCR2;
  volatile uint32_t CCR3;
  volatile uint32_t CCR4;
  volatile uint32_t BDTR;
  volatile uint16_t DCR;
  uint16_t RESERVED12;
  volatile uint16_t DMAR;
  uint16_t RESERVED13;
  volatile uint16_t OR;
  volatile uint32_t CCMR3;
  volatile uint32_t CCR5;
  volatile uint32_t CCR6;
} TIM_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t IER;
  volatile uint32_t ICR;
  volatile uint32_t ISR;
  volatile uint32_t IOHCR;
  uint32_t RESERVED1;
  volatile uint32_t IOASCR;
  uint32_t RESERVED2;
  volatile uint32_t IOSCR;
  uint32_t RESERVED3;
  volatile uint32_t IOCCR;
  uint32_t RESERVED4;
  volatile uint32_t IOGCSR;
  volatile uint32_t IOGXCR[8];
} TSC_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t CR3;
  volatile uint16_t BRR;
  uint16_t RESERVED1;
  volatile uint16_t GTPR;
  uint16_t RESERVED2;
  volatile uint32_t RTOR;
  volatile uint16_t RQR;
  uint16_t RESERVED3;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint16_t RDR;
  uint16_t RESERVED4;
  volatile uint16_t TDR;
  uint16_t RESERVED5;
} USART_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFR;
  volatile uint32_t SR;
} WWDG_TypeDef;






#define FLASH_BASE ((uint32_t)0x08000000)
#define SRAM_BASE ((uint32_t)0x20000000)
#define PERIPH_BASE ((uint32_t)0x40000000)

#define SRAM_BB_BASE ((uint32_t)0x22000000)
#define PERIPH_BB_BASE ((uint32_t)0x42000000)



#define APB1PERIPH_BASE PERIPH_BASE
#define APB2PERIPH_BASE (PERIPH_BASE + 0x00010000)
#define AHB1PERIPH_BASE (PERIPH_BASE + 0x00020000)
#define AHB2PERIPH_BASE (PERIPH_BASE + 0x08000000)
#define AHB3PERIPH_BASE (PERIPH_BASE + 0x10000000)


#define TIM2_BASE (APB1PERIPH_BASE + 0x00000000)
#define TIM3_BASE (APB1PERIPH_BASE + 0x00000400)
#define TIM4_BASE (APB1PERIPH_BASE + 0x00000800)
#define TIM6_BASE (APB1PERIPH_BASE + 0x00001000)
#define TIM7_BASE (APB1PERIPH_BASE + 0x00001400)
#define RTC_BASE (APB1PERIPH_BASE + 0x00002800)
#define WWDG_BASE (APB1PERIPH_BASE + 0x00002C00)
#define IWDG_BASE (APB1PERIPH_BASE + 0x00003000)
#define I2S2ext_BASE (APB1PERIPH_BASE + 0x00003400)
#define SPI2_BASE (APB1PERIPH_BASE + 0x00003800)
#define SPI3_BASE (APB1PERIPH_BASE + 0x00003C00)
#define I2S3ext_BASE (APB1PERIPH_BASE + 0x00004000)
#define USART2_BASE (APB1PERIPH_BASE + 0x00004400)
#define USART3_BASE (APB1PERIPH_BASE + 0x00004800)
#define UART4_BASE (APB1PERIPH_BASE + 0x00004C00)
#define UART5_BASE (APB1PERIPH_BASE + 0x00005000)
#define I2C1_BASE (APB1PERIPH_BASE + 0x00005400)
#define I2C2_BASE (APB1PERIPH_BASE + 0x00005800)
#define CAN1_BASE (APB1PERIPH_BASE + 0x00006400)
#define PWR_BASE (APB1PERIPH_BASE + 0x00007000)
#define DAC1_BASE (APB1PERIPH_BASE + 0x00007400)
#define I2C3_BASE (APB1PERIPH_BASE + 0x00007800)
#define DAC2_BASE (APB1PERIPH_BASE + 0x00009800)
#define DAC_BASE DAC1_BASE


#define SYSCFG_BASE (APB2PERIPH_BASE + 0x00000000)
#define COMP_BASE (APB2PERIPH_BASE + 0x0000001C)
#define COMP1_BASE (APB2PERIPH_BASE + 0x0000001C)
#define COMP2_BASE (APB2PERIPH_BASE + 0x00000020)
#define COMP3_BASE (APB2PERIPH_BASE + 0x00000024)
#define COMP4_BASE (APB2PERIPH_BASE + 0x00000028)
#define COMP5_BASE (APB2PERIPH_BASE + 0x0000002C)
#define COMP6_BASE (APB2PERIPH_BASE + 0x00000030)
#define COMP7_BASE (APB2PERIPH_BASE + 0x00000034)
#define OPAMP_BASE (APB2PERIPH_BASE + 0x00000038)
#define OPAMP1_BASE (APB2PERIPH_BASE + 0x00000038)
#define OPAMP2_BASE (APB2PERIPH_BASE + 0x0000003C)
#define OPAMP3_BASE (APB2PERIPH_BASE + 0x00000040)
#define OPAMP4_BASE (APB2PERIPH_BASE + 0x00000044)
#define EXTI_BASE (APB2PERIPH_BASE + 0x00000400)
#define TIM1_BASE (APB2PERIPH_BASE + 0x00002C00)
#define SPI1_BASE (APB2PERIPH_BASE + 0x00003000)
#define TIM8_BASE (APB2PERIPH_BASE + 0x00003400)
#define USART1_BASE (APB2PERIPH_BASE + 0x00003800)
#define TIM15_BASE (APB2PERIPH_BASE + 0x00004000)
#define TIM16_BASE (APB2PERIPH_BASE + 0x00004400)
#define TIM17_BASE (APB2PERIPH_BASE + 0x00004800)
#define HRTIM1_BASE (APB2PERIPH_BASE + 0x00007400)
#define HRTIM1_TIMA_BASE (HRTIM1_BASE + 0x00000080)
#define HRTIM1_TIMB_BASE (HRTIM1_BASE + 0x00000100)
#define HRTIM1_TIMC_BASE (HRTIM1_BASE + 0x00000180)
#define HRTIM1_TIMD_BASE (HRTIM1_BASE + 0x00000200)
#define HRTIM1_TIME_BASE (HRTIM1_BASE + 0x00000280)
#define HRTIM1_COMMON_BASE (HRTIM1_BASE + 0x00000380)


#define DMA1_BASE (AHB1PERIPH_BASE + 0x00000000)
#define DMA1_Channel1_BASE (AHB1PERIPH_BASE + 0x00000008)
#define DMA1_Channel2_BASE (AHB1PERIPH_BASE + 0x0000001C)
#define DMA1_Channel3_BASE (AHB1PERIPH_BASE + 0x00000030)
#define DMA1_Channel4_BASE (AHB1PERIPH_BASE + 0x00000044)
#define DMA1_Channel5_BASE (AHB1PERIPH_BASE + 0x00000058)
#define DMA1_Channel6_BASE (AHB1PERIPH_BASE + 0x0000006C)
#define DMA1_Channel7_BASE (AHB1PERIPH_BASE + 0x00000080)
#define DMA2_BASE (AHB1PERIPH_BASE + 0x00000400)
#define DMA2_Channel1_BASE (AHB1PERIPH_BASE + 0x00000408)
#define DMA2_Channel2_BASE (AHB1PERIPH_BASE + 0x0000041C)
#define DMA2_Channel3_BASE (AHB1PERIPH_BASE + 0x00000430)
#define DMA2_Channel4_BASE (AHB1PERIPH_BASE + 0x00000444)
#define DMA2_Channel5_BASE (AHB1PERIPH_BASE + 0x00000458)
#define RCC_BASE (AHB1PERIPH_BASE + 0x00001000)
#define FLASH_R_BASE (AHB1PERIPH_BASE + 0x00002000)
#define OB_BASE ((uint32_t)0x1FFFF800)
#define CRC_BASE (AHB1PERIPH_BASE + 0x00003000)
#define TSC_BASE (AHB1PERIPH_BASE + 0x00004000)


#define GPIOA_BASE (AHB2PERIPH_BASE + 0x0000)
#define GPIOB_BASE (AHB2PERIPH_BASE + 0x0400)
#define GPIOC_BASE (AHB2PERIPH_BASE + 0x0800)
#define GPIOD_BASE (AHB2PERIPH_BASE + 0x0C00)
#define GPIOE_BASE (AHB2PERIPH_BASE + 0x1000)
#define GPIOF_BASE (AHB2PERIPH_BASE + 0x1400)


#define ADC1_BASE (AHB3PERIPH_BASE + 0x0000)
#define ADC2_BASE (AHB3PERIPH_BASE + 0x0100)
#define ADC1_2_BASE (AHB3PERIPH_BASE + 0x0300)
#define ADC3_BASE (AHB3PERIPH_BASE + 0x0400)
#define ADC4_BASE (AHB3PERIPH_BASE + 0x0500)
#define ADC3_4_BASE (AHB3PERIPH_BASE + 0x0700)

#define DBGMCU_BASE ((uint32_t)0xE0042000)







#define TIM2 ((TIM_TypeDef *) TIM2_BASE)
#define TIM3 ((TIM_TypeDef *) TIM3_BASE)
#define TIM4 ((TIM_TypeDef *) TIM4_BASE)
#define TIM6 ((TIM_TypeDef *) TIM6_BASE)
#define TIM7 ((TIM_TypeDef *) TIM7_BASE)
#define RTC ((RTC_TypeDef *) RTC_BASE)
#define WWDG ((WWDG_TypeDef *) WWDG_BASE)
#define IWDG ((IWDG_TypeDef *) IWDG_BASE)
#define I2S2ext ((SPI_TypeDef *) I2S2ext_BASE)
#define SPI2 ((SPI_TypeDef *) SPI2_BASE)
#define SPI3 ((SPI_TypeDef *) SPI3_BASE)
#define I2S3ext ((SPI_TypeDef *) I2S3ext_BASE)
#define USART2 ((USART_TypeDef *) USART2_BASE)
#define USART3 ((USART_TypeDef *) USART3_BASE)
#define UART4 ((USART_TypeDef *) UART4_BASE)
#define UART5 ((USART_TypeDef *) UART5_BASE)
#define I2C1 ((I2C_TypeDef *) I2C1_BASE)
#define I2C2 ((I2C_TypeDef *) I2C2_BASE)
#define I2C3 ((I2C_TypeDef *) I2C3_BASE)
#define CAN1 ((CAN_TypeDef *) CAN1_BASE)
#define PWR ((PWR_TypeDef *) PWR_BASE)
#define DAC1 ((DAC_TypeDef *) DAC1_BASE)
#define DAC2 ((DAC_TypeDef *) DAC2_BASE)
#define DAC DAC1
#define SYSCFG ((SYSCFG_TypeDef *) SYSCFG_BASE)
#define COMP ((COMP_TypeDef *) COMP_BASE)
#define COMP1 ((COMP_TypeDef *) COMP1_BASE)
#define COMP2 ((COMP_TypeDef *) COMP2_BASE)
#define COMP3 ((COMP_TypeDef *) COMP3_BASE)
#define COMP4 ((COMP_TypeDef *) COMP4_BASE)
#define COMP5 ((COMP_TypeDef *) COMP5_BASE)
#define COMP6 ((COMP_TypeDef *) COMP6_BASE)
#define COMP7 ((COMP_TypeDef *) COMP7_BASE)
#define OPAMP ((OPAMP_TypeDef *) OPAMP_BASE)
#define OPAMP1 ((OPAMP_TypeDef *) OPAMP1_BASE)
#define OPAMP2 ((OPAMP_TypeDef *) OPAMP2_BASE)
#define OPAMP3 ((OPAMP_TypeDef *) OPAMP3_BASE)
#define OPAMP4 ((OPAMP_TypeDef *) OPAMP4_BASE)
#define EXTI ((EXTI_TypeDef *) EXTI_BASE)
#define TIM1 ((TIM_TypeDef *) TIM1_BASE)
#define SPI1 ((SPI_TypeDef *) SPI1_BASE)
#define TIM8 ((TIM_TypeDef *) TIM8_BASE)
#define USART1 ((USART_TypeDef *) USART1_BASE)
#define TIM15 ((TIM_TypeDef *) TIM15_BASE)
#define TIM16 ((TIM_TypeDef *) TIM16_BASE)
#define TIM17 ((TIM_TypeDef *) TIM17_BASE)
#define HRTIM1 ((HRTIM_TypeDef *) HRTIM1_BASE)
#define HRTIM1_TIMA ((HRTIM_TIM_TypeDef *) HRTIM1_TIMA_BASE)
#define HRTIM1_TIMB ((HRTIM_TIM_TypeDef *) HRTIM1_TIMB_BASE)
#define HRTIM1_TIMC ((HRTIM_TIM_TypeDef *) HRTIM1_TIMC_BASE)
#define HRTIM1_TIMD ((HRTIM_TIM_TypeDef *) HRTIM1_TIMD_BASE)
#define HRTIM1_TIME ((HRTIM_TIM_TypeDef *) HRTIM1_TIME_BASE)
#define HRTIM1_COMMON ((HRTIM_Common_TypeDef *) HRTIM1_COMMON_BASE)
#define DBGMCU ((DBGMCU_TypeDef *) DBGMCU_BASE)
#define DMA1 ((DMA_TypeDef *) DMA1_BASE)
#define DMA1_Channel1 ((DMA_Channel_TypeDef *) DMA1_Channel1_BASE)
#define DMA1_Channel2 ((DMA_Channel_TypeDef *) DMA1_Channel2_BASE)
#define DMA1_Channel3 ((DMA_Channel_TypeDef *) DMA1_Channel3_BASE)
#define DMA1_Channel4 ((DMA_Channel_TypeDef *) DMA1_Channel4_BASE)
#define DMA1_Channel5 ((DMA_Channel_TypeDef *) DMA1_Channel5_BASE)
#define DMA1_Channel6 ((DMA_Channel_TypeDef *) DMA1_Channel6_BASE)
#define DMA1_Channel7 ((DMA_Channel_TypeDef *) DMA1_Channel7_BASE)
#define DMA2 ((DMA_TypeDef *) DMA2_BASE)
#define DMA2_Channel1 ((DMA_Channel_TypeDef *) DMA2_Channel1_BASE)
#define DMA2_Channel2 ((DMA_Channel_TypeDef *) DMA2_Channel2_BASE)
#define DMA2_Channel3 ((DMA_Channel_TypeDef *) DMA2_Channel3_BASE)
#define DMA2_Channel4 ((DMA_Channel_TypeDef *) DMA2_Channel4_BASE)
#define DMA2_Channel5 ((DMA_Channel_TypeDef *) DMA2_Channel5_BASE)
#define RCC ((RCC_TypeDef *) RCC_BASE)
#define FLASH ((FLASH_TypeDef *) FLASH_R_BASE)
#define OB ((OB_TypeDef *) OB_BASE)
#define CRC ((CRC_TypeDef *) CRC_BASE)
#define TSC ((TSC_TypeDef *) TSC_BASE)
#define GPIOA ((GPIO_TypeDef *) GPIOA_BASE)
#define GPIOB ((GPIO_TypeDef *) GPIOB_BASE)
#define GPIOC ((GPIO_TypeDef *) GPIOC_BASE)
#define GPIOD ((GPIO_TypeDef *) GPIOD_BASE)
#define GPIOE ((GPIO_TypeDef *) GPIOE_BASE)
#define GPIOF ((GPIO_TypeDef *) GPIOF_BASE)
#define ADC1 ((ADC_TypeDef *) ADC1_BASE)
#define ADC2 ((ADC_TypeDef *) ADC2_BASE)
#define ADC3 ((ADC_TypeDef *) ADC3_BASE)
#define ADC4 ((ADC_TypeDef *) ADC4_BASE)
#define ADC1_2 ((ADC_Common_TypeDef *) ADC1_2_BASE)
#define ADC3_4 ((ADC_Common_TypeDef *) ADC3_4_BASE)
# 1275 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
#define HRTIM_MCR_CK_PSC ((uint32_t)0x00000007)
#define HRTIM_MCR_CK_PSC_0 ((uint32_t)0x00000001)
#define HRTIM_MCR_CK_PSC_1 ((uint32_t)0x00000002)
#define HRTIM_MCR_CK_PSC_2 ((uint32_t)0x00000004)

#define HRTIM_MCR_CONT ((uint32_t)0x00000008)
#define HRTIM_MCR_RETRIG ((uint32_t)0x00000010)
#define HRTIM_MCR_HALF ((uint32_t)0x00000020)

#define HRTIM_MCR_SYNC_IN ((uint32_t)0x00000300)
#define HRTIM_MCR_SYNC_IN_0 ((uint32_t)0x00000100)
#define HRTIM_MCR_SYNC_IN_1 ((uint32_t)0x00000200)
#define HRTIM_MCR_SYNCRSTM ((uint32_t)0x00000400)
#define HRTIM_MCR_SYNCSTRTM ((uint32_t)0x00000800)
#define HRTIM_MCR_SYNC_OUT ((uint32_t)0x00003000)
#define HRTIM_MCR_SYNC_OUT_0 ((uint32_t)0x00001000)
#define HRTIM_MCR_SYNC_OUT_1 ((uint32_t)0x00002000)
#define HRTIM_MCR_SYNC_SRC ((uint32_t)0x0000C000)
#define HRTIM_MCR_SYNC_SRC_0 ((uint32_t)0x00004000)
#define HRTIM_MCR_SYNC_SRC_1 ((uint32_t)0x00008000)

#define HRTIM_MCR_MCEN ((uint32_t)0x00010000)
#define HRTIM_MCR_TACEN ((uint32_t)0x00020000)
#define HRTIM_MCR_TBCEN ((uint32_t)0x00040000)
#define HRTIM_MCR_TCCEN ((uint32_t)0x00080000)
#define HRTIM_MCR_TDCEN ((uint32_t)0x00100000)
#define HRTIM_MCR_TECEN ((uint32_t)0x00200000)

#define HRTIM_MCR_DACSYNC ((uint32_t)0x06000000)
#define HRTIM_MCR_DACSYNC_0 ((uint32_t)0x02000000)
#define HRTIM_MCR_DACSYNC_1 ((uint32_t)0x04000000)

#define HRTIM_MCR_PREEN ((uint32_t)0x08000000)
#define HRTIM_MCR_MREPU ((uint32_t)0x20000000)

#define HRTIM_MCR_BRSTDMA ((uint32_t)0xC0000000)
#define HRTIM_MCR_BRSTDMA_0 ((uint32_t)0x40000000)
#define HRTIM_MCR_BRSTDMA_1 ((uint32_t)0x80000000)


#define HRTIM_MISR_MCMP1 ((uint32_t)0x00000001)
#define HRTIM_MISR_MCMP2 ((uint32_t)0x00000002)
#define HRTIM_MISR_MCMP3 ((uint32_t)0x00000004)
#define HRTIM_MISR_MCMP4 ((uint32_t)0x00000008)
#define HRTIM_MISR_MREP ((uint32_t)0x00000010)
#define HRTIM_MISR_SYNC ((uint32_t)0x00000020)
#define HRTIM_MISR_MUPD ((uint32_t)0x00000040)


#define HRTIM_MICR_MCMP1 ((uint32_t)0x00000001)
#define HRTIM_MICR_MCMP2 ((uint32_t)0x00000002)
#define HRTIM_MICR_MCMP3 ((uint32_t)0x00000004)
#define HRTIM_MICR_MCMP4 ((uint32_t)0x00000008)
#define HRTIM_MICR_MREP ((uint32_t)0x00000010)
#define HRTIM_MICR_SYNC ((uint32_t)0x00000020)
#define HRTIM_MICR_MUPD ((uint32_t)0x00000040)


#define HRTIM_MDIER_MCMP1IE ((uint32_t)0x00000001)
#define HRTIM_MDIER_MCMP2IE ((uint32_t)0x00000002)
#define HRTIM_MDIER_MCMP3IE ((uint32_t)0x00000004)
#define HRTIM_MDIER_MCMP4IE ((uint32_t)0x00000008)
#define HRTIM_MDIER_MREPIE ((uint32_t)0x00000010)
#define HRTIM_MDIER_SYNCIE ((uint32_t)0x00000020)
#define HRTIM_MDIER_MUPDIE ((uint32_t)0x00000040)

#define HRTIM_MDIER_MCMP1DE ((uint32_t)0x00010000)
#define HRTIM_MDIER_MCMP2DE ((uint32_t)0x00020000)
#define HRTIM_MDIER_MCMP3DE ((uint32_t)0x00040000)
#define HRTIM_MDIER_MCMP4DE ((uint32_t)0x00080000)
#define HRTIM_MDIER_MREPDE ((uint32_t)0x00100000)
#define HRTIM_MDIER_SYNCDE ((uint32_t)0x00200000)
#define HRTIM_MDIER_MUPDDE ((uint32_t)0x00400000)


#define HRTIM_MCNTR_MCNTR ((uint32_t)0xFFFFFFFF)


#define HRTIM_MPER_MPER ((uint32_t)0xFFFFFFFF)


#define HRTIM_MREP_MREP ((uint32_t)0xFFFFFFFF)


#define HRTIM_MCMP1R_MCMP1R ((uint32_t)0xFFFFFFFF)


#define HRTIM_MCMP1R_MCMP2R ((uint32_t)0xFFFFFFFF)


#define HRTIM_MCMP1R_MCMP3R ((uint32_t)0xFFFFFFFF)


#define HRTIM_MCMP1R_MCMP4R ((uint32_t)0xFFFFFFFF)


#define HRTIM_TIMCR_CK_PSC ((uint32_t)0x00000007)
#define HRTIM_TIMCR_CK_PSC_0 ((uint32_t)0x00000001)
#define HRTIM_TIMCR_CK_PSC_1 ((uint32_t)0x00000002)
#define HRTIM_TIMCR_CK_PSC_2 ((uint32_t)0x00000004)

#define HRTIM_TIMCR_CONT ((uint32_t)0x00000008)
#define HRTIM_TIMCR_RETRIG ((uint32_t)0x00000010)
#define HRTIM_TIMCR_HALF ((uint32_t)0x00000020)
#define HRTIM_TIMCR_PSHPLL ((uint32_t)0x00000040)

#define HRTIM_TIMCR_SYNCRST ((uint32_t)0x00000400)
#define HRTIM_TIMCR_SYNCSTRT ((uint32_t)0x00000800)

#define HRTIM_TIMCR_DELCMP2 ((uint32_t)0x00003000)
#define HRTIM_TIMCR_DELCMP2_0 ((uint32_t)0x00001000)
#define HRTIM_TIMCR_DELCMP2_1 ((uint32_t)0x00002000)
#define HRTIM_TIMCR_DELCMP4 ((uint32_t)0x0000C000)
#define HRTIM_TIMCR_DELCMP4_0 ((uint32_t)0x00004000)
#define HRTIM_TIMCR_DELCMP4_1 ((uint32_t)0x00008000)

#define HRTIM_TIMCR_TREPU ((uint32_t)0x00020000)
#define HRTIM_TIMCR_TRSTU ((uint32_t)0x00040000)
#define HRTIM_TIMCR_TAU ((uint32_t)0x00080000)
#define HRTIM_TIMCR_TBU ((uint32_t)0x00100000)
#define HRTIM_TIMCR_TCU ((uint32_t)0x00200000)
#define HRTIM_TIMCR_TDU ((uint32_t)0x00400000)
#define HRTIM_TIMCR_TEU ((uint32_t)0x00800000)
#define HRTIM_TIMCR_MSTU ((uint32_t)0x01000000)

#define HRTIM_TIMCR_DACSYNC ((uint32_t)0x06000000)
#define HRTIM_TIMCR_DACSYNC_0 ((uint32_t)0x02000000)
#define HRTIM_TIMCR_DACSYNC_1 ((uint32_t)0x04000000)
#define HRTIM_TIMCR_PREEN ((uint32_t)0x08000000)

#define HRTIM_TIMCR_UPDGAT ((uint32_t)0xF0000000)
#define HRTIM_TIMCR_UPDGAT_0 ((uint32_t)0x10000000)
#define HRTIM_TIMCR_UPDGAT_1 ((uint32_t)0x20000000)
#define HRTIM_TIMCR_UPDGAT_2 ((uint32_t)0x40000000)
#define HRTIM_TIMCR_UPDGAT_3 ((uint32_t)0x80000000)


#define HRTIM_TIMISR_CMP1 ((uint32_t)0x00000001)
#define HRTIM_TIMISR_CMP2 ((uint32_t)0x00000002)
#define HRTIM_TIMISR_CMP3 ((uint32_t)0x00000004)
#define HRTIM_TIMISR_CMP4 ((uint32_t)0x00000008)
#define HRTIM_TIMISR_REP ((uint32_t)0x00000010)
#define HRTIM_TIMISR_UPD ((uint32_t)0x00000040)
#define HRTIM_TIMISR_CPT1 ((uint32_t)0x00000080)
#define HRTIM_TIMISR_CPT2 ((uint32_t)0x00000100)
#define HRTIM_TIMISR_SET1 ((uint32_t)0x00000200)
#define HRTIM_TIMISR_RST1 ((uint32_t)0x00000400)
#define HRTIM_TIMISR_SET2 ((uint32_t)0x00000800)
#define HRTIM_TIMISR_RST2 ((uint32_t)0x00001000)
#define HRTIM_TIMISR_RST ((uint32_t)0x00002000)
#define HRTIM_TIMISR_DLYPRT ((uint32_t)0x00004000)
#define HRTIM_TIMISR_CPPSTAT ((uint32_t)0x00010000)
#define HRTIM_TIMISR_IPPSTAT ((uint32_t)0x00020000)
#define HRTIM_TIMISR_O1STAT ((uint32_t)0x00040000)
#define HRTIM_TIMISR_O2STAT ((uint32_t)0x00080000)
#define HRTIM_TIMISR_O1CPY ((uint32_t)0x00100000)
#define HRTIM_TIMISR_O2CPY ((uint32_t)0x00200000)


#define HRTIM_TIMICR_CMP1C ((uint32_t)0x00000001)
#define HRTIM_TIMICR_CMP2C ((uint32_t)0x00000002)
#define HRTIM_TIMICR_CMP3C ((uint32_t)0x00000004)
#define HRTIM_TIMICR_CMP4C ((uint32_t)0x00000008)
#define HRTIM_TIMICR_REPC ((uint32_t)0x00000010)
#define HRTIM_TIMICR_UPDC ((uint32_t)0x00000040)
#define HRTIM_TIMICR_CPT1C ((uint32_t)0x00000080)
#define HRTIM_TIMICR_CPT2C ((uint32_t)0x00000100)
#define HRTIM_TIMICR_SET1C ((uint32_t)0x00000200)
#define HRTIM_TIMICR_RST1C ((uint32_t)0x00000400)
#define HRTIM_TIMICR_SET2C ((uint32_t)0x00000800)
#define HRTIM_TIMICR_RST2C ((uint32_t)0x00001000)
#define HRTIM_TIMICR_RSTC ((uint32_t)0x00002000)
#define HRTIM_TIMICR_DLYPRT1C ((uint32_t)0x00004000)
#define HRTIM_TIMICR_DLYPRT2C ((uint32_t)0x00008000)


#define HRTIM_TIMDIER_CMP1IE ((uint32_t)0x00000001)
#define HRTIM_TIMDIER_CMP2IE ((uint32_t)0x00000002)
#define HRTIM_TIMDIER_CMP3IE ((uint32_t)0x00000004)
#define HRTIM_TIMDIER_CMP4IE ((uint32_t)0x00000008)
#define HRTIM_TIMDIER_REPIE ((uint32_t)0x00000010)
#define HRTIM_TIMDIER_UPDIE ((uint32_t)0x00000040)
#define HRTIM_TIMDIER_CPT1IE ((uint32_t)0x00000080)
#define HRTIM_TIMDIER_CPT2IE ((uint32_t)0x00000100)
#define HRTIM_TIMDIER_SET1IE ((uint32_t)0x00000200)
#define HRTIM_TIMDIER_RST1IE ((uint32_t)0x00000400)
#define HRTIM_TIMDIER_SET2IE ((uint32_t)0x00000800)
#define HRTIM_TIMDIER_RST2IE ((uint32_t)0x00001000)
#define HRTIM_TIMDIER_RSTIE ((uint32_t)0x00002000)
#define HRTIM_TIMDIER_DLYPRTIE ((uint32_t)0x00004000)

#define HRTIM_TIMDIER_CMP1DE ((uint32_t)0x00010000)
#define HRTIM_TIMDIER_CMP2DE ((uint32_t)0x00020000)
#define HRTIM_TIMDIER_CMP3DE ((uint32_t)0x00040000)
#define HRTIM_TIMDIER_CMP4DE ((uint32_t)0x00080000)
#define HRTIM_TIMDIER_REPDE ((uint32_t)0x00100000)
#define HRTIM_TIMDIER_UPDDE ((uint32_t)0x00400000)
#define HRTIM_TIMDIER_CPT1DE ((uint32_t)0x00800000)
#define HRTIM_TIMDIER_CPT2DE ((uint32_t)0x01000000)
#define HRTIM_TIMDIER_SET1DE ((uint32_t)0x02000000)
#define HRTIM_TIMDIER_RST1DE ((uint32_t)0x04000000)
#define HRTIM_TIMDIER_SET2DE ((uint32_t)0x08000000)
#define HRTIM_TIMDIER_RST2DE ((uint32_t)0x10000000)
#define HRTIM_TIMDIER_RSTDE ((uint32_t)0x20000000)
#define HRTIM_TIMDIER_DLYPRTDE ((uint32_t)0x40000000)


#define HRTIM_CNTR_CNTR ((uint32_t)0xFFFFFFFF)


#define HRTIM_PER_PER ((uint32_t)0xFFFFFFFF)


#define HRTIM_REP_REP ((uint32_t)0xFFFFFFFF)


#define HRTIM_CMP1R_CMP1R ((uint32_t)0xFFFFFFFF)


#define HRTIM_CMP1CR_CMP1CR ((uint32_t)0xFFFFFFFF)


#define HRTIM_CMP2R_CMP2R ((uint32_t)0xFFFFFFFF)


#define HRTIM_CMP3R_CMP3R ((uint32_t)0xFFFFFFFF)


#define HRTIM_CMP4R_CMP4R ((uint32_t)0xFFFFFFFF)


#define HRTIM_CPT1R_CPT1R ((uint32_t)0xFFFFFFFF)


#define HRTIM_CPT2R_CPT2R ((uint32_t)0xFFFFFFFF)


#define HRTIM_DTR_DTR ((uint32_t)0x000001FF)
#define HRTIM_DTR_DTR_0 ((uint32_t)0x00000001)
#define HRTIM_DTR_DTR_1 ((uint32_t)0x00000002)
#define HRTIM_DTR_DTR_2 ((uint32_t)0x00000004)
#define HRTIM_DTR_DTR_3 ((uint32_t)0x00000008)
#define HRTIM_DTR_DTR_4 ((uint32_t)0x00000010)
#define HRTIM_DTR_DTR_5 ((uint32_t)0x00000020)
#define HRTIM_DTR_DTR_6 ((uint32_t)0x00000040)
#define HRTIM_DTR_DTR_7 ((uint32_t)0x00000080)
#define HRTIM_DTR_DTR_8 ((uint32_t)0x00000100)
#define HRTIM_DTR_SDTR ((uint32_t)0x00000200)
#define HRTIM_DTR_DTPRSC ((uint32_t)0x00001C00)
#define HRTIM_DTR_DTPRSC_0 ((uint32_t)0x00000400)
#define HRTIM_DTR_DTPRSC_1 ((uint32_t)0x00000800)
#define HRTIM_DTR_DTPRSC_2 ((uint32_t)0x00001000)
#define HRTIM_DTR_DTRSLK ((uint32_t)0x00004000)
#define HRTIM_DTR_DTRLK ((uint32_t)0x00008000)
#define HRTIM_DTR_DTF ((uint32_t)0x01FF0000)
#define HRTIM_DTR_DTF_0 ((uint32_t)0x00010000)
#define HRTIM_DTR_DTF_1 ((uint32_t)0x00020000)
#define HRTIM_DTR_DTF_2 ((uint32_t)0x00040000)
#define HRTIM_DTR_DTF_3 ((uint32_t)0x00080000)
#define HRTIM_DTR_DTF_4 ((uint32_t)0x00100000)
#define HRTIM_DTR_DTF_5 ((uint32_t)0x00200000)
#define HRTIM_DTR_DTF_6 ((uint32_t)0x00400000)
#define HRTIM_DTR_DTF_7 ((uint32_t)0x00800000)
#define HRTIM_DTR_DTF_8 ((uint32_t)0x01000000)
#define HRTIM_DTR_SDTF ((uint32_t)0x02000000)
#define HRTIM_DTR_DTFSLK ((uint32_t)0x40000000)
#define HRTIM_DTR_DTFLK ((uint32_t)0x80000000)


#define HRTIM_SET1R_SST ((uint32_t)0x00000001)
#define HRTIM_SET1R_RESYNC ((uint32_t)0x00000002)
#define HRTIM_SET1R_PER ((uint32_t)0x00000004)
#define HRTIM_SET1R_CMP1 ((uint32_t)0x00000008)
#define HRTIM_SET1R_CMP2 ((uint32_t)0x00000010)
#define HRTIM_SET1R_CMP3 ((uint32_t)0x00000020)
#define HRTIM_SET1R_CMP4 ((uint32_t)0x00000040)

#define HRTIM_SET1R_MSTPER ((uint32_t)0x00000080)
#define HRTIM_SET1R_MSTCMP1 ((uint32_t)0x00000100)
#define HRTIM_SET1R_MSTCMP2 ((uint32_t)0x00000200)
#define HRTIM_SET1R_MSTCMP3 ((uint32_t)0x00000400)
#define HRTIM_SET1R_MSTCMP4 ((uint32_t)0x00000800)

#define HRTIM_SET1R_TIMEVNT1 ((uint32_t)0x00001000)
#define HRTIM_SET1R_TIMEVNT2 ((uint32_t)0x00002000)
#define HRTIM_SET1R_TIMEVNT3 ((uint32_t)0x00004000)
#define HRTIM_SET1R_TIMEVNT4 ((uint32_t)0x00008000)
#define HRTIM_SET1R_TIMEVNT5 ((uint32_t)0x00010000)
#define HRTIM_SET1R_TIMEVNT6 ((uint32_t)0x00020000)
#define HRTIM_SET1R_TIMEVNT7 ((uint32_t)0x00040000)
#define HRTIM_SET1R_TIMEVNT8 ((uint32_t)0x00080000)
#define HRTIM_SET1R_TIMEVNT9 ((uint32_t)0x00100000)

#define HRTIM_SET1R_EXTVNT1 ((uint32_t)0x00200000)
#define HRTIM_SET1R_EXTVNT2 ((uint32_t)0x00400000)
#define HRTIM_SET1R_EXTVNT3 ((uint32_t)0x00800000)
#define HRTIM_SET1R_EXTVNT4 ((uint32_t)0x01000000)
#define HRTIM_SET1R_EXTVNT5 ((uint32_t)0x02000000)
#define HRTIM_SET1R_EXTVNT6 ((uint32_t)0x04000000)
#define HRTIM_SET1R_EXTVNT7 ((uint32_t)0x08000000)
#define HRTIM_SET1R_EXTVNT8 ((uint32_t)0x10000000)
#define HRTIM_SET1R_EXTVNT9 ((uint32_t)0x20000000)
#define HRTIM_SET1R_EXTVNT10 ((uint32_t)0x40000000)

#define HRTIM_SET1R_UPDATE ((uint32_t)0x80000000)


#define HRTIM_RST1R_SRT ((uint32_t)0x00000001)
#define HRTIM_RST1R_RESYNC ((uint32_t)0x00000002)
#define HRTIM_RST1R_PER ((uint32_t)0x00000004)
#define HRTIM_RST1R_CMP1 ((uint32_t)0x00000008)
#define HRTIM_RST1R_CMP2 ((uint32_t)0x00000010)
#define HRTIM_RST1R_CMP3 ((uint32_t)0x00000020)
#define HRTIM_RST1R_CMP4 ((uint32_t)0x00000040)

#define HRTIM_RST1R_MSTPER ((uint32_t)0x00000080)
#define HRTIM_RST1R_MSTCMP1 ((uint32_t)0x00000100)
#define HRTIM_RST1R_MSTCMP2 ((uint32_t)0x00000200)
#define HRTIM_RST1R_MSTCMP3 ((uint32_t)0x00000400)
#define HRTIM_RST1R_MSTCMP4 ((uint32_t)0x00000800)

#define HRTIM_RST1R_TIMEVNT1 ((uint32_t)0x00001000)
#define HRTIM_RST1R_TIMEVNT2 ((uint32_t)0x00002000)
#define HRTIM_RST1R_TIMEVNT3 ((uint32_t)0x00004000)
#define HRTIM_RST1R_TIMEVNT4 ((uint32_t)0x00008000)
#define HRTIM_RST1R_TIMEVNT5 ((uint32_t)0x00010000)
#define HRTIM_RST1R_TIMEVNT6 ((uint32_t)0x00020000)
#define HRTIM_RST1R_TIMEVNT7 ((uint32_t)0x00040000)
#define HRTIM_RST1R_TIMEVNT8 ((uint32_t)0x00080000)
#define HRTIM_RST1R_TIMEVNT9 ((uint32_t)0x00100000)

#define HRTIM_RST1R_EXTVNT1 ((uint32_t)0x00200000)
#define HRTIM_RST1R_EXTVNT2 ((uint32_t)0x00400000)
#define HRTIM_RST1R_EXTVNT3 ((uint32_t)0x00800000)
#define HRTIM_RST1R_EXTVNT4 ((uint32_t)0x01000000)
#define HRTIM_RST1R_EXTVNT5 ((uint32_t)0x02000000)
#define HRTIM_RST1R_EXTVNT6 ((uint32_t)0x04000000)
#define HRTIM_RST1R_EXTVNT7 ((uint32_t)0x08000000)
#define HRTIM_RST1R_EXTVNT8 ((uint32_t)0x10000000)
#define HRTIM_RST1R_EXTVNT9 ((uint32_t)0x20000000)
#define HRTIM_RST1R_EXTVNT10 ((uint32_t)0x40000000)

#define HRTIM_RST1R_UPDATE ((uint32_t)0x80000000)



#define HRTIM_SET2R_SST ((uint32_t)0x00000001)
#define HRTIM_SET2R_RESYNC ((uint32_t)0x00000002)
#define HRTIM_SET2R_PER ((uint32_t)0x00000004)
#define HRTIM_SET2R_CMP1 ((uint32_t)0x00000008)
#define HRTIM_SET2R_CMP2 ((uint32_t)0x00000010)
#define HRTIM_SET2R_CMP3 ((uint32_t)0x00000020)
#define HRTIM_SET2R_CMP4 ((uint32_t)0x00000040)

#define HRTIM_SET2R_MSTPER ((uint32_t)0x00000080)
#define HRTIM_SET2R_MSTCMP1 ((uint32_t)0x00000100)
#define HRTIM_SET2R_MSTCMP2 ((uint32_t)0x00000200)
#define HRTIM_SET2R_MSTCMP3 ((uint32_t)0x00000400)
#define HRTIM_SET2R_MSTCMP4 ((uint32_t)0x00000800)

#define HRTIM_SET2R_TIMEVNT1 ((uint32_t)0x00001000)
#define HRTIM_SET2R_TIMEVNT2 ((uint32_t)0x00002000)
#define HRTIM_SET2R_TIMEVNT3 ((uint32_t)0x00004000)
#define HRTIM_SET2R_TIMEVNT4 ((uint32_t)0x00008000)
#define HRTIM_SET2R_TIMEVNT5 ((uint32_t)0x00010000)
#define HRTIM_SET2R_TIMEVNT6 ((uint32_t)0x00020000)
#define HRTIM_SET2R_TIMEVNT7 ((uint32_t)0x00040000)
#define HRTIM_SET2R_TIMEVNT8 ((uint32_t)0x00080000)
#define HRTIM_SET2R_TIMEVNT9 ((uint32_t)0x00100000)

#define HRTIM_SET2R_EXTVNT1 ((uint32_t)0x00200000)
#define HRTIM_SET2R_EXTVNT2 ((uint32_t)0x00400000)
#define HRTIM_SET2R_EXTVNT3 ((uint32_t)0x00800000)
#define HRTIM_SET2R_EXTVNT4 ((uint32_t)0x01000000)
#define HRTIM_SET2R_EXTVNT5 ((uint32_t)0x02000000)
#define HRTIM_SET2R_EXTVNT6 ((uint32_t)0x04000000)
#define HRTIM_SET2R_EXTVNT7 ((uint32_t)0x08000000)
#define HRTIM_SET2R_EXTVNT8 ((uint32_t)0x10000000)
#define HRTIM_SET2R_EXTVNT9 ((uint32_t)0x20000000)
#define HRTIM_SET2R_EXTVNT10 ((uint32_t)0x40000000)

#define HRTIM_SET2R_UPDATE ((uint32_t)0x80000000)


#define HRTIM_RST2R_SRT ((uint32_t)0x00000001)
#define HRTIM_RST2R_RESYNC ((uint32_t)0x00000002)
#define HRTIM_RST2R_PER ((uint32_t)0x00000004)
#define HRTIM_RST2R_CMP1 ((uint32_t)0x00000008)
#define HRTIM_RST2R_CMP2 ((uint32_t)0x00000010)
#define HRTIM_RST2R_CMP3 ((uint32_t)0x00000020)
#define HRTIM_RST2R_CMP4 ((uint32_t)0x00000040)

#define HRTIM_RST2R_MSTPER ((uint32_t)0x00000080)
#define HRTIM_RST2R_MSTCMP1 ((uint32_t)0x00000100)
#define HRTIM_RST2R_MSTCMP2 ((uint32_t)0x00000200)
#define HRTIM_RST2R_MSTCMP3 ((uint32_t)0x00000400)
#define HRTIM_RST2R_MSTCMP4 ((uint32_t)0x00000800)

#define HRTIM_RST2R_TIMEVNT1 ((uint32_t)0x00001000)
#define HRTIM_RST2R_TIMEVNT2 ((uint32_t)0x00002000)
#define HRTIM_RST2R_TIMEVNT3 ((uint32_t)0x00004000)
#define HRTIM_RST2R_TIMEVNT4 ((uint32_t)0x00008000)
#define HRTIM_RST2R_TIMEVNT5 ((uint32_t)0x00010000)
#define HRTIM_RST2R_TIMEVNT6 ((uint32_t)0x00020000)
#define HRTIM_RST2R_TIMEVNT7 ((uint32_t)0x00040000)
#define HRTIM_RST2R_TIMEVNT8 ((uint32_t)0x00080000)
#define HRTIM_RST2R_TIMEVNT9 ((uint32_t)0x00100000)

#define HRTIM_RST2R_EXTVNT1 ((uint32_t)0x00200000)
#define HRTIM_RST2R_EXTVNT2 ((uint32_t)0x00400000)
#define HRTIM_RST2R_EXTVNT3 ((uint32_t)0x00800000)
#define HRTIM_RST2R_EXTVNT4 ((uint32_t)0x01000000)
#define HRTIM_RST2R_EXTVNT5 ((uint32_t)0x02000000)
#define HRTIM_RST2R_EXTVNT6 ((uint32_t)0x04000000)
#define HRTIM_RST2R_EXTVNT7 ((uint32_t)0x08000000)
#define HRTIM_RST2R_EXTVNT8 ((uint32_t)0x10000000)
#define HRTIM_RST2R_EXTVNT9 ((uint32_t)0x20000000)
#define HRTIM_RST2R_EXTVNT10 ((uint32_t)0x40000000)

#define HRTIM_RST2R_UPDATE ((uint32_t)0x80000000)


#define HRTIM_EEFR1_EE1LTCH ((uint32_t)0x00000001)
#define HRTIM_EEFR1_EE1FLTR ((uint32_t)0x0000001E)
#define HRTIM_EEFR1_EE1FLTR_0 ((uint32_t)0x00000002)
#define HRTIM_EEFR1_EE1FLTR_1 ((uint32_t)0x00000004)
#define HRTIM_EEFR1_EE1FLTR_2 ((uint32_t)0x00000008)
#define HRTIM_EEFR1_EE1FLTR_3 ((uint32_t)0x00000010)

#define HRTIM_EEFR1_EE2LTCH ((uint32_t)0x00000040)
#define HRTIM_EEFR1_EE2FLTR ((uint32_t)0x00000780)
#define HRTIM_EEFR1_EE2FLTR_0 ((uint32_t)0x00000080)
#define HRTIM_EEFR1_EE2FLTR_1 ((uint32_t)0x00000100)
#define HRTIM_EEFR1_EE2FLTR_2 ((uint32_t)0x00000200)
#define HRTIM_EEFR1_EE2FLTR_3 ((uint32_t)0x00000400)

#define HRTIM_EEFR1_EE3LTCH ((uint32_t)0x00001000)
#define HRTIM_EEFR1_EE3FLTR ((uint32_t)0x0001E000)
#define HRTIM_EEFR1_EE3FLTR_0 ((uint32_t)0x00002000)
#define HRTIM_EEFR1_EE3FLTR_1 ((uint32_t)0x00004000)
#define HRTIM_EEFR1_EE3FLTR_2 ((uint32_t)0x00008000)
#define HRTIM_EEFR1_EE3FLTR_3 ((uint32_t)0x00010000)

#define HRTIM_EEFR1_EE4LTCH ((uint32_t)0x00040000)
#define HRTIM_EEFR1_EE4FLTR ((uint32_t)0x00780000)
#define HRTIM_EEFR1_EE4FLTR_0 ((uint32_t)0x00080000)
#define HRTIM_EEFR1_EE4FLTR_1 ((uint32_t)0x00100000)
#define HRTIM_EEFR1_EE4FLTR_2 ((uint32_t)0x00200000)
#define HRTIM_EEFR1_EE4FLTR_3 ((uint32_t)0x00400000)

#define HRTIM_EEFR1_EE5LTCH ((uint32_t)0x01000000)
#define HRTIM_EEFR1_EE5FLTR ((uint32_t)0x1E000000)
#define HRTIM_EEFR1_EE5FLTR_0 ((uint32_t)0x02000000)
#define HRTIM_EEFR1_EE5FLTR_1 ((uint32_t)0x04000000)
#define HRTIM_EEFR1_EE5FLTR_2 ((uint32_t)0x08000000)
#define HRTIM_EEFR1_EE5FLTR_3 ((uint32_t)0x10000000)


#define HRTIM_EEFR2_EE6LTCH ((uint32_t)0x00000001)
#define HRTIM_EEFR2_EE6FLTR ((uint32_t)0x0000001E)
#define HRTIM_EEFR2_EE6FLTR_0 ((uint32_t)0x00000002)
#define HRTIM_EEFR2_EE6FLTR_1 ((uint32_t)0x00000004)
#define HRTIM_EEFR2_EE6FLTR_2 ((uint32_t)0x00000008)
#define HRTIM_EEFR2_EE6FLTR_3 ((uint32_t)0x00000010)

#define HRTIM_EEFR2_EE7LTCH ((uint32_t)0x00000040)
#define HRTIM_EEFR2_EE7FLTR ((uint32_t)0x00000780)
#define HRTIM_EEFR2_EE7FLTR_0 ((uint32_t)0x00000080)
#define HRTIM_EEFR2_EE7FLTR_1 ((uint32_t)0x00000100)
#define HRTIM_EEFR2_EE7FLTR_2 ((uint32_t)0x00000200)
#define HRTIM_EEFR2_EE7FLTR_3 ((uint32_t)0x00000400)

#define HRTIM_EEFR2_EE8LTCH ((uint32_t)0x00001000)
#define HRTIM_EEFR2_EE8FLTR ((uint32_t)0x0001E000)
#define HRTIM_EEFR2_EE8FLTR_0 ((uint32_t)0x00002000)
#define HRTIM_EEFR2_EE8FLTR_1 ((uint32_t)0x00004000)
#define HRTIM_EEFR2_EE8FLTR_2 ((uint32_t)0x00008000)
#define HRTIM_EEFR2_EE8FLTR_3 ((uint32_t)0x00010000)

#define HRTIM_EEFR2_EE9LTCH ((uint32_t)0x00040000)
#define HRTIM_EEFR2_EE9FLTR ((uint32_t)0x00780000)
#define HRTIM_EEFR2_EE9FLTR_0 ((uint32_t)0x00080000)
#define HRTIM_EEFR2_EE9FLTR_1 ((uint32_t)0x00100000)
#define HRTIM_EEFR2_EE9FLTR_2 ((uint32_t)0x00200000)
#define HRTIM_EEFR2_EE9FLTR_3 ((uint32_t)0x00400000)

#define HRTIM_EEFR2_EE10LTCH ((uint32_t)0x01000000)
#define HRTIM_EEFR2_EE10FLTR ((uint32_t)0x1E000000)
#define HRTIM_EEFR2_EE10FLTR_0 ((uint32_t)0x02000000)
#define HRTIM_EEFR2_EE10FLTR_1 ((uint32_t)0x04000000)
#define HRTIM_EEFR2_EE10FLTR_2 ((uint32_t)0x08000000)
#define HRTIM_EEFR2_EE10FLTR_3 ((uint32_t)0x10000000)


#define HRTIM_RSTR_UPDATE ((uint32_t)0x00000002)
#define HRTIM_RSTR_CMP2 ((uint32_t)0x00000004)
#define HRTIM_RSTR_CMP4 ((uint32_t)0x00000008)

#define HRTIM_RSTR_MSTPER ((uint32_t)0x00000010)
#define HRTIM_RSTR_MSTCMP1 ((uint32_t)0x00000020)
#define HRTIM_RSTR_MSTCMP2 ((uint32_t)0x00000040)
#define HRTIM_RSTR_MSTCMP3 ((uint32_t)0x00000080)
#define HRTIM_RSTR_MSTCMP4 ((uint32_t)0x00000100)

#define HRTIM_RSTR_EXTEVNT1 ((uint32_t)0x00000200)
#define HRTIM_RSTR_EXTEVNT2 ((uint32_t)0x00000400)
#define HRTIM_RSTR_EXTEVNT3 ((uint32_t)0x00000800)
#define HRTIM_RSTR_EXTEVNT4 ((uint32_t)0x00001000)
#define HRTIM_RSTR_EXTEVNT5 ((uint32_t)0x00002000)
#define HRTIM_RSTR_EXTEVNT6 ((uint32_t)0x00004000)
#define HRTIM_RSTR_EXTEVNT7 ((uint32_t)0x00008000)
#define HRTIM_RSTR_EXTEVNT8 ((uint32_t)0x00010000)
#define HRTIM_RSTR_EXTEVNT9 ((uint32_t)0x00020000)
#define HRTIM_RSTR_EXTEVNT10 ((uint32_t)0x00040000)

#define HRTIM_RSTR_TIMBCMP1 ((uint32_t)0x00080000)
#define HRTIM_RSTR_TIMBCMP2 ((uint32_t)0x00100000)
#define HRTIM_RSTR_TIMBCMP4 ((uint32_t)0x00200000)

#define HRTIM_RSTR_TIMCCMP1 ((uint32_t)0x00400000)
#define HRTIM_RSTR_TIMCCMP2 ((uint32_t)0x00800000)
#define HRTIM_RSTR_TIMCCMP4 ((uint32_t)0x01000000)

#define HRTIM_RSTR_TIMDCMP1 ((uint32_t)0x02000000)
#define HRTIM_RSTR_TIMDCMP2 ((uint32_t)0x04000000)
#define HRTIM_RSTR_TIMDCMP4 ((uint32_t)0x08000000)

#define HRTIM_RSTR_TIMECMP1 ((uint32_t)0x10000000)
#define HRTIM_RSTR_TIMECMP2 ((uint32_t)0x20000000)
#define HRTIM_RSTR_TIMECMP4 ((uint32_t)0x40000000)


#define HRTIM_CHPR_CARFRQ ((uint32_t)0x0000000F)
#define HRTIM_CHPR_CARFRQ_0 ((uint32_t)0x00000001)
#define HRTIM_CHPR_CARFRQ_1 ((uint32_t)0x00000002)
#define HRTIM_CHPR_CARFRQ_2 ((uint32_t)0x00000004)
#define HRTIM_CHPR_CARFRQ_3 ((uint32_t)0x00000008)

#define HRTIM_CHPR_CARDTY ((uint32_t)0x00000070)
#define HRTIM_CHPR_CARDTY_0 ((uint32_t)0x00000010)
#define HRTIM_CHPR_CARDTY_1 ((uint32_t)0x00000020)
#define HRTIM_CHPR_CARDTY_2 ((uint32_t)0x00000040)

#define HRTIM_CHPR_STRPW ((uint32_t)0x00000780)
#define HRTIM_CHPR_STRPW_0 ((uint32_t)0x00000080)
#define HRTIM_CHPR_STRPW_1 ((uint32_t)0x00000100)
#define HRTIM_CHPR_STRPW_2 ((uint32_t)0x00000200)
#define HRTIM_CHPR_STRPW_3 ((uint32_t)0x00000400)


#define HRTIM_CPT1CR_SWCPT ((uint32_t)0x00000001)
#define HRTIM_CPT1CR_UPDCPT ((uint32_t)0x00000002)
#define HRTIM_CPT1CR_EXEV1CPT ((uint32_t)0x00000004)
#define HRTIM_CPT1CR_EXEV2CPT ((uint32_t)0x00000008)
#define HRTIM_CPT1CR_EXEV3CPT ((uint32_t)0x00000010)
#define HRTIM_CPT1CR_EXEV4CPT ((uint32_t)0x00000020)
#define HRTIM_CPT1CR_EXEV5CPT ((uint32_t)0x00000040)
#define HRTIM_CPT1CR_EXEV6CPT ((uint32_t)0x00000080)
#define HRTIM_CPT1CR_EXEV7CPT ((uint32_t)0x00000100)
#define HRTIM_CPT1CR_EXEV8CPT ((uint32_t)0x00000200)
#define HRTIM_CPT1CR_EXEV9CPT ((uint32_t)0x00000400)
#define HRTIM_CPT1CR_EXEV10CPT ((uint32_t)0x00000800)

#define HRTIM_CPT1CR_TA1SET ((uint32_t)0x00001000)
#define HRTIM_CPT1CR_TA1RST ((uint32_t)0x00002000)
#define HRTIM_CPT1CR_TA1CMP1 ((uint32_t)0x00004000)
#define HRTIM_CPT1CR_TA1CMP2 ((uint32_t)0x00008000)

#define HRTIM_CPT1CR_TB1SET ((uint32_t)0x00010000)
#define HRTIM_CPT1CR_TB1RST ((uint32_t)0x00020000)
#define HRTIM_CPT1CR_TB1CMP1 ((uint32_t)0x00040000)
#define HRTIM_CPT1CR_TB1CMP2 ((uint32_t)0x00080000)

#define HRTIM_CPT1CR_TC1SET ((uint32_t)0x00100000)
#define HRTIM_CPT1CR_TC1RST ((uint32_t)0x00200000)
#define HRTIM_CPT1CR_TC1CMP1 ((uint32_t)0x00400000)
#define HRTIM_CPT1CR_TC1CMP2 ((uint32_t)0x00800000)

#define HRTIM_CPT1CR_TD1SET ((uint32_t)0x01000000)
#define HRTIM_CPT1CR_TD1RST ((uint32_t)0x02000000)
#define HRTIM_CPT1CR_TD1CMP1 ((uint32_t)0x04000000)
#define HRTIM_CPT1CR_TD1CMP2 ((uint32_t)0x08000000)

#define HRTIM_CPT1CR_TE1SET ((uint32_t)0x10000000)
#define HRTIM_CPT1CR_TE1RST ((uint32_t)0x20000000)
#define HRTIM_CPT1CR_TE1CMP1 ((uint32_t)0x40000000)
#define HRTIM_CPT1CR_TE1CMP2 ((uint32_t)0x80000000)


#define HRTIM_CPT2CR_SWCPT ((uint32_t)0x00000001)
#define HRTIM_CPT2CR_UPDCPT ((uint32_t)0x00000002)
#define HRTIM_CPT2CR_EXEV1CPT ((uint32_t)0x00000004)
#define HRTIM_CPT2CR_EXEV2CPT ((uint32_t)0x00000008)
#define HRTIM_CPT2CR_EXEV3CPT ((uint32_t)0x00000010)
#define HRTIM_CPT2CR_EXEV4CPT ((uint32_t)0x00000020)
#define HRTIM_CPT2CR_EXEV5CPT ((uint32_t)0x00000040)
#define HRTIM_CPT2CR_EXEV6CPT ((uint32_t)0x00000080)
#define HRTIM_CPT2CR_EXEV7CPT ((uint32_t)0x00000100)
#define HRTIM_CPT2CR_EXEV8CPT ((uint32_t)0x00000200)
#define HRTIM_CPT2CR_EXEV9CPT ((uint32_t)0x00000400)
#define HRTIM_CPT2CR_EXEV10CPT ((uint32_t)0x00000800)

#define HRTIM_CPT2CR_TA1SET ((uint32_t)0x00001000)
#define HRTIM_CPT2CR_TA1RST ((uint32_t)0x00002000)
#define HRTIM_CPT2CR_TA1CMP1 ((uint32_t)0x00004000)
#define HRTIM_CPT2CR_TA1CMP2 ((uint32_t)0x00008000)

#define HRTIM_CPT2CR_TB1SET ((uint32_t)0x00010000)
#define HRTIM_CPT2CR_TB1RST ((uint32_t)0x00020000)
#define HRTIM_CPT2CR_TB1CMP1 ((uint32_t)0x00040000)
#define HRTIM_CPT2CR_TB1CMP2 ((uint32_t)0x00080000)

#define HRTIM_CPT2CR_TC1SET ((uint32_t)0x00100000)
#define HRTIM_CPT2CR_TC1RST ((uint32_t)0x00200000)
#define HRTIM_CPT2CR_TC1CMP1 ((uint32_t)0x00400000)
#define HRTIM_CPT2CR_TC1CMP2 ((uint32_t)0x00800000)

#define HRTIM_CPT2CR_TD1SET ((uint32_t)0x01000000)
#define HRTIM_CPT2CR_TD1RST ((uint32_t)0x02000000)
#define HRTIM_CPT2CR_TD1CMP1 ((uint32_t)0x04000000)
#define HRTIM_CPT2CR_TD1CMP2 ((uint32_t)0x08000000)

#define HRTIM_CPT2CR_TE1SET ((uint32_t)0x10000000)
#define HRTIM_CPT2CR_TE1RST ((uint32_t)0x20000000)
#define HRTIM_CPT2CR_TE1CMP1 ((uint32_t)0x40000000)
#define HRTIM_CPT2CR_TE1CMP2 ((uint32_t)0x80000000)


#define HRTIM_OUTR_POL1 ((uint32_t)0x00000002)
#define HRTIM_OUTR_IDLM1 ((uint32_t)0x00000004)
#define HRTIM_OUTR_IDLES1 ((uint32_t)0x00000008)
#define HRTIM_OUTR_FAULT1 ((uint32_t)0x00000030)
#define HRTIM_OUTR_FAULT1_0 ((uint32_t)0x00000010)
#define HRTIM_OUTR_FAULT1_1 ((uint32_t)0x00000020)
#define HRTIM_OUTR_CHP1 ((uint32_t)0x00000040)
#define HRTIM_OUTR_DIDL1 ((uint32_t)0x00000080)

#define HRTIM_OUTR_DTEN ((uint32_t)0x00000100)
#define HRTIM_OUTR_DLYPRTEN ((uint32_t)0x00000200)
#define HRTIM_OUTR_DLYPRT ((uint32_t)0x00001C00)
#define HRTIM_OUTR_DLYPRT_0 ((uint32_t)0x00000400)
#define HRTIM_OUTR_DLYPRT_1 ((uint32_t)0x00000800)
#define HRTIM_OUTR_DLYPRT_2 ((uint32_t)0x00001000)

#define HRTIM_OUTR_POL2 ((uint32_t)0x00020000)
#define HRTIM_OUTR_IDLM2 ((uint32_t)0x00040000)
#define HRTIM_OUTR_IDLES2 ((uint32_t)0x00080000)
#define HRTIM_OUTR_FAULT2 ((uint32_t)0x00300000)
#define HRTIM_OUTR_FAULT2_0 ((uint32_t)0x00100000)
#define HRTIM_OUTR_FAULT2_1 ((uint32_t)0x00200000)
#define HRTIM_OUTR_CHP2 ((uint32_t)0x00400000)
#define HRTIM_OUTR_DIDL2 ((uint32_t)0x00800000)


#define HRTIM_FLTR_FLT1EN ((uint32_t)0x00000001)
#define HRTIM_FLTR_FLT2EN ((uint32_t)0x00000002)
#define HRTIM_FLTR_FLT3EN ((uint32_t)0x00000004)
#define HRTIM_FLTR_FLT4EN ((uint32_t)0x00000008)
#define HRTIM_FLTR_FLT5EN ((uint32_t)0x00000010)
#define HRTIM_FLTR_FLTCLK ((uint32_t)0x80000000)


#define HRTIM_CR1_MUDIS ((uint32_t)0x00000001)
#define HRTIM_CR1_TAUDIS ((uint32_t)0x00000002)
#define HRTIM_CR1_TBUDIS ((uint32_t)0x00000004)
#define HRTIM_CR1_TCUDIS ((uint32_t)0x00000008)
#define HRTIM_CR1_TDUDIS ((uint32_t)0x00000010)
#define HRTIM_CR1_TEUDIS ((uint32_t)0x00000020)
#define HRTIM_CR1_ADC1USRC ((uint32_t)0x00070000)
#define HRTIM_CR1_ADC1USRC_0 ((uint32_t)0x00010000)
#define HRTIM_CR1_ADC1USRC_1 ((uint32_t)0x00020000)
#define HRTIM_CR1_ADC1USRC_2 ((uint32_t)0x00040000)
#define HRTIM_CR1_ADC2USRC ((uint32_t)0x00380000)
#define HRTIM_CR1_ADC2USRC_0 ((uint32_t)0x00080000)
#define HRTIM_CR1_ADC2USRC_1 ((uint32_t)0x00100000)
#define HRTIM_CR1_ADC2USRC_2 ((uint32_t)0x00200000)
#define HRTIM_CR1_ADC3USRC ((uint32_t)0x01C00000)
#define HRTIM_CR1_ADC3USRC_0 ((uint32_t)0x00400000)
#define HRTIM_CR1_ADC3USRC_1 ((uint32_t)0x00800000)
#define HRTIM_CR1_ADC3USRC_2 ((uint32_t)0x01000000)
#define HRTIM_CR1_ADC4USRC ((uint32_t)0x0E000000)
#define HRTIM_CR1_ADC4USRC_0 ((uint32_t)0x02000000)
#define HRTIM_CR1_ADC4USRC_1 ((uint32_t)0x04000000)
#define HRTIM_CR1_ADC4USRC_2 ((uint32_t)0x0800000)


#define HRTIM_CR2_MSWU ((uint32_t)0x00000001)
#define HRTIM_CR2_TASWU ((uint32_t)0x00000002)
#define HRTIM_CR2_TBSWU ((uint32_t)0x00000004)
#define HRTIM_CR2_TCSWU ((uint32_t)0x00000008)
#define HRTIM_CR2_TDSWU ((uint32_t)0x00000010)
#define HRTIM_CR2_TESWU ((uint32_t)0x00000020)
#define HRTIM_CR2_MRST ((uint32_t)0x00000100)
#define HRTIM_CR2_TARST ((uint32_t)0x00000200)
#define HRTIM_CR2_TBRST ((uint32_t)0x00000400)
#define HRTIM_CR2_TCRST ((uint32_t)0x00000800)
#define HRTIM_CR2_TDRST ((uint32_t)0x00001000)
#define HRTIM_CR2_TERST ((uint32_t)0x00002000)


#define HRTIM_ISR_FLT1 ((uint32_t)0x00000001)
#define HRTIM_ISR_FLT2 ((uint32_t)0x00000002)
#define HRTIM_ISR_FLT3 ((uint32_t)0x00000004)
#define HRTIM_ISR_FLT4 ((uint32_t)0x00000008)
#define HRTIM_ISR_FLT5 ((uint32_t)0x00000010)
#define HRTIM_ISR_SYSFLT ((uint32_t)0x00000020)
#define HRTIM_ISR_DLLRDY ((uint32_t)0x00010000)
#define HRTIM_ISR_BMPER ((uint32_t)0x00020000)


#define HRTIM_ICR_FLT1C ((uint32_t)0x00000001)
#define HRTIM_ICR_FLT2C ((uint32_t)0x00000002)
#define HRTIM_ICR_FLT3C ((uint32_t)0x00000004)
#define HRTIM_ICR_FLT4C ((uint32_t)0x00000008)
#define HRTIM_ICR_FLT5C ((uint32_t)0x00000010)
#define HRTIM_ICR_SYSFLTC ((uint32_t)0x00000020)
#define HRTIM_ICR_DLLRDYC ((uint32_t)0x00010000)
#define HRTIM_ICR_BMPERC ((uint32_t)0x00020000)


#define HRTIM_IER_FLT1 ((uint32_t)0x00000001)
#define HRTIM_IER_FLT2 ((uint32_t)0x00000002)
#define HRTIM_IER_FLT3 ((uint32_t)0x00000004)
#define HRTIM_IER_FLT4 ((uint32_t)0x00000008)
#define HRTIM_IER_FLT5 ((uint32_t)0x00000010)
#define HRTIM_IER_SYSFLT ((uint32_t)0x00000020)
#define HRTIM_IER_DLLRDY ((uint32_t)0x00010000)
#define HRTIM_IER_BMPER ((uint32_t)0x00020000)


#define HRTIM_OENR_TA1OEN ((uint32_t)0x00000001)
#define HRTIM_OENR_TA2OEN ((uint32_t)0x00000002)
#define HRTIM_OENR_TB1OEN ((uint32_t)0x00000004)
#define HRTIM_OENR_TB2OEN ((uint32_t)0x00000008)
#define HRTIM_OENR_TC1OEN ((uint32_t)0x00000010)
#define HRTIM_OENR_TC2OEN ((uint32_t)0x00000020)
#define HRTIM_OENR_TD1OEN ((uint32_t)0x00000040)
#define HRTIM_OENR_TD2OEN ((uint32_t)0x00000080)
#define HRTIM_OENR_TE1OEN ((uint32_t)0x00000100)
#define HRTIM_OENR_TE2OEN ((uint32_t)0x00000200)


#define HRTIM_ODISR_TA1ODIS ((uint32_t)0x00000001)
#define HRTIM_ODISR_TA2ODIS ((uint32_t)0x00000002)
#define HRTIM_ODISR_TB1ODIS ((uint32_t)0x00000004)
#define HRTIM_ODISR_TB2ODIS ((uint32_t)0x00000008)
#define HRTIM_ODISR_TC1ODIS ((uint32_t)0x00000010)
#define HRTIM_ODISR_TC2ODIS ((uint32_t)0x00000020)
#define HRTIM_ODISR_TD1ODIS ((uint32_t)0x00000040)
#define HRTIM_ODISR_TD2ODIS ((uint32_t)0x00000080)
#define HRTIM_ODISR_TE1ODIS ((uint32_t)0x00000100)
#define HRTIM_ODISR_TE2ODIS ((uint32_t)0x00000200)


#define HRTIM_ODSR_TA1ODS ((uint32_t)0x00000001)
#define HRTIM_ODSR_TA2ODS ((uint32_t)0x00000002)
#define HRTIM_ODSR_TB1ODS ((uint32_t)0x00000004)
#define HRTIM_ODSR_TB2ODS ((uint32_t)0x00000008)
#define HRTIM_ODSR_TC1ODS ((uint32_t)0x00000010)
#define HRTIM_ODSR_TC2ODS ((uint32_t)0x00000020)
#define HRTIM_ODSR_TD1ODS ((uint32_t)0x00000040)
#define HRTIM_ODSR_TD2ODS ((uint32_t)0x00000080)
#define HRTIM_ODSR_TE1ODS ((uint32_t)0x00000100)
#define HRTIM_ODSR_TE2ODS ((uint32_t)0x00000200)


#define HRTIM_BMCR_BME ((uint32_t)0x00000001)
#define HRTIM_BMCR_BMOM ((uint32_t)0x00000002)
#define HRTIM_BMCR_BMCLK ((uint32_t)0x0000003C)
#define HRTIM_BMCR_BMCLK_0 ((uint32_t)0x00000004)
#define HRTIM_BMCR_BMCLK_1 ((uint32_t)0x00000008)
#define HRTIM_BMCR_BMCLK_2 ((uint32_t)0x00000010)
#define HRTIM_BMCR_BMCLK_3 ((uint32_t)0x00000020)
#define HRTIM_BMCR_BMPSC ((uint32_t)0x000003C0)
#define HRTIM_BMCR_BMPSC_0 ((uint32_t)0x00000040)
#define HRTIM_BMCR_BMPSC_1 ((uint32_t)0x00000080)
#define HRTIM_BMCR_BMPSC_2 ((uint32_t)0x00000100)
#define HRTIM_BMCR_BMPSC_3 ((uint32_t)0x00000200)
#define HRTIM_BMCR_BMPREN ((uint32_t)0x00000400)
#define HRTIM_BMCR_MTBM ((uint32_t)0x00010000)
#define HRTIM_BMCR_TABM ((uint32_t)0x00020000)
#define HRTIM_BMCR_TBBM ((uint32_t)0x00040000)
#define HRTIM_BMCR_TCBM ((uint32_t)0x00080000)
#define HRTIM_BMCR_TDBM ((uint32_t)0x00100000)
#define HRTIM_BMCR_TEBM ((uint32_t)0x00200000)
#define HRTIM_BMCR_BMSTAT ((uint32_t)0x80000000)


#define HRTIM_BMTRGR_SW ((uint32_t)0x00000001)
#define HRTIM_BMTRGR_MSTRST ((uint32_t)0x00000002)
#define HRTIM_BMTRGR_MSTREP ((uint32_t)0x00000004)
#define HRTIM_BMTRGR_MSTCMP1 ((uint32_t)0x00000008)
#define HRTIM_BMTRGR_MSTCMP2 ((uint32_t)0x00000010)
#define HRTIM_BMTRGR_MSTCMP3 ((uint32_t)0x00000020)
#define HRTIM_BMTRGR_MSTCMP4 ((uint32_t)0x00000040)
#define HRTIM_BMTRGR_TARST ((uint32_t)0x00000080)
#define HRTIM_BMTRGR_TAREP ((uint32_t)0x00000100)
#define HRTIM_BMTRGR_TACMP1 ((uint32_t)0x00000200)
#define HRTIM_BMTRGR_TACMP2 ((uint32_t)0x00000400)
#define HRTIM_BMTRGR_TBRST ((uint32_t)0x00000800)
#define HRTIM_BMTRGR_TBREP ((uint32_t)0x00001000)
#define HRTIM_BMTRGR_TBCMP1 ((uint32_t)0x00002000)
#define HRTIM_BMTRGR_TBCMP2 ((uint32_t)0x00004000)
#define HRTIM_BMTRGR_TCRST ((uint32_t)0x00008000)
#define HRTIM_BMTRGR_TCREP ((uint32_t)0x00010000)
#define HRTIM_BMTRGR_TCCMP1 ((uint32_t)0x00020000)
#define HRTIM_BMTRGR_TCCMP2 ((uint32_t)0x00040000)
#define HRTIM_BMTRGR_TDRST ((uint32_t)0x00080000)
#define HRTIM_BMTRGR_TDREP ((uint32_t)0x00100000)
#define HRTIM_BMTRGR_TDCMP1 ((uint32_t)0x00200000)
#define HRTIM_BMTRGR_TDCMP2 ((uint32_t)0x00400000)
#define HRTIM_BMTRGR_TERST ((uint32_t)0x00800000)
#define HRTIM_BMTRGR_TEREP ((uint32_t)0x01000000)
#define HRTIM_BMTRGR_TECMP1 ((uint32_t)0x02000000)
#define HRTIM_BMTRGR_TECMP2 ((uint32_t)0x04000000)
#define HRTIM_BMTRGR_TAEEV7 ((uint32_t)0x08000000)
#define HRTIM_BMTRGR_TDEEV8 ((uint32_t)0x10000000)
#define HRTIM_BMTRGR_EEV7 ((uint32_t)0x20000000)
#define HRTIM_BMTRGR_EEV8 ((uint32_t)0x40000000)
#define HRTIM_BMTRGR_OCHPEV ((uint32_t)0x80000000)


#define HRTIM_BMCMPR_BMCMPR ((uint32_t)0x0000FFFF)


#define HRTIM_BMPER_BMPER ((uint32_t)0x0000FFFF)


#define HRTIM_EECR1_EE1SRC ((uint32_t)0x00000003)
#define HRTIM_EECR1_EE1SRC_0 ((uint32_t)0x00000001)
#define HRTIM_EECR1_EE1SRC_1 ((uint32_t)0x00000002)
#define HRTIM_EECR1_EE1POL ((uint32_t)0x00000004)
#define HRTIM_EECR1_EE1SNS ((uint32_t)0x00000018)
#define HRTIM_EECR1_EE1SNS_0 ((uint32_t)0x00000008)
#define HRTIM_EECR1_EE1SNS_1 ((uint32_t)0x00000010)
#define HRTIM_EECR1_EE1FAST ((uint32_t)0x00000020)

#define HRTIM_EECR1_EE2SRC ((uint32_t)0x000000C0)
#define HRTIM_EECR1_EE2SRC_0 ((uint32_t)0x00000040)
#define HRTIM_EECR1_EE2SRC_1 ((uint32_t)0x00000080)
#define HRTIM_EECR1_EE2POL ((uint32_t)0x00000100)
#define HRTIM_EECR1_EE2SNS ((uint32_t)0x00000600)
#define HRTIM_EECR1_EE2SNS_0 ((uint32_t)0x00000200)
#define HRTIM_EECR1_EE2SNS_1 ((uint32_t)0x00000400)
#define HRTIM_EECR1_EE2FAST ((uint32_t)0x00000800)

#define HRTIM_EECR1_EE3SRC ((uint32_t)0x00003000)
#define HRTIM_EECR1_EE3SRC_0 ((uint32_t)0x00001000)
#define HRTIM_EECR1_EE3SRC_1 ((uint32_t)0x00002000)
#define HRTIM_EECR1_EE3POL ((uint32_t)0x00004000)
#define HRTIM_EECR1_EE3SNS ((uint32_t)0x00018000)
#define HRTIM_EECR1_EE3SNS_0 ((uint32_t)0x00008000)
#define HRTIM_EECR1_EE3SNS_1 ((uint32_t)0x00010000)
#define HRTIM_EECR1_EE3FAST ((uint32_t)0x00020000)

#define HRTIM_EECR1_EE4SRC ((uint32_t)0x000C0000)
#define HRTIM_EECR1_EE4SRC_0 ((uint32_t)0x00040000)
#define HRTIM_EECR1_EE4SRC_1 ((uint32_t)0x00080000)
#define HRTIM_EECR1_EE4POL ((uint32_t)0x00100000)
#define HRTIM_EECR1_EE4SNS ((uint32_t)0x00600000)
#define HRTIM_EECR1_EE4SNS_0 ((uint32_t)0x00200000)
#define HRTIM_EECR1_EE4SNS_1 ((uint32_t)0x00400000)
#define HRTIM_EECR1_EE4FAST ((uint32_t)0x00800000)

#define HRTIM_EECR1_EE5SRC ((uint32_t)0x03000000)
#define HRTIM_EECR1_EE5SRC_0 ((uint32_t)0x01000000)
#define HRTIM_EECR1_EE5SRC_1 ((uint32_t)0x02000000)
#define HRTIM_EECR1_EE5POL ((uint32_t)0x04000000)
#define HRTIM_EECR1_EE5SNS ((uint32_t)0x18000000)
#define HRTIM_EECR1_EE5SNS_0 ((uint32_t)0x08000000)
#define HRTIM_EECR1_EE5SNS_1 ((uint32_t)0x10000000)
#define HRTIM_EECR1_EE5FAST ((uint32_t)0x20000000)


#define HRTIM_EECR2_EE6SRC ((uint32_t)0x00000003)
#define HRTIM_EECR2_EE6SRC_0 ((uint32_t)0x00000001)
#define HRTIM_EECR2_EE6SRC_1 ((uint32_t)0x00000002)
#define HRTIM_EECR2_EE6POL ((uint32_t)0x00000004)
#define HRTIM_EECR2_EE6SNS ((uint32_t)0x00000018)
#define HRTIM_EECR2_EE6SNS_0 ((uint32_t)0x00000008)
#define HRTIM_EECR2_EE6SNS_1 ((uint32_t)0x00000010)

#define HRTIM_EECR2_EE7SRC ((uint32_t)0x000000C0)
#define HRTIM_EECR2_EE7SRC_0 ((uint32_t)0x00000040)
#define HRTIM_EECR2_EE7SRC_1 ((uint32_t)0x00000080)
#define HRTIM_EECR2_EE7POL ((uint32_t)0x00000100)
#define HRTIM_EECR2_EE7SNS ((uint32_t)0x00000600)
#define HRTIM_EECR2_EE7SNS_0 ((uint32_t)0x00000200)
#define HRTIM_EECR2_EE7SNS_1 ((uint32_t)0x00000400)

#define HRTIM_EECR2_EE8SRC ((uint32_t)0x00003000)
#define HRTIM_EECR2_EE8SRC_0 ((uint32_t)0x00001000)
#define HRTIM_EECR2_EE8SRC_1 ((uint32_t)0x00002000)
#define HRTIM_EECR2_EE8POL ((uint32_t)0x00004000)
#define HRTIM_EECR2_EE8SNS ((uint32_t)0x00018000)
#define HRTIM_EECR2_EE8SNS_0 ((uint32_t)0x00008000)
#define HRTIM_EECR2_EE8SNS_1 ((uint32_t)0x00010000)

#define HRTIM_EECR2_EE9SRC ((uint32_t)0x000C0000)
#define HRTIM_EECR2_EE9SRC_0 ((uint32_t)0x00040000)
#define HRTIM_EECR2_EE9SRC_1 ((uint32_t)0x00080000)
#define HRTIM_EECR2_EE9POL ((uint32_t)0x00100000)
#define HRTIM_EECR2_EE9SNS ((uint32_t)0x00600000)
#define HRTIM_EECR2_EE9SNS_0 ((uint32_t)0x00200000)
#define HRTIM_EECR2_EE9SNS_1 ((uint32_t)0x00400000)

#define HRTIM_EECR2_EE10SRC ((uint32_t)0x03000000)
#define HRTIM_EECR2_EE10SRC_0 ((uint32_t)0x01000000)
#define HRTIM_EECR2_EE10SRC_1 ((uint32_t)0x02000000)
#define HRTIM_EECR2_EE10POL ((uint32_t)0x04000000)
#define HRTIM_EECR2_EE10SNS ((uint32_t)0x18000000)
#define HRTIM_EECR2_EE10SNS_0 ((uint32_t)0x08000000)
#define HRTIM_EECR2_EE10SNS_1 ((uint32_t)0x10000000)


#define HRTIM_EECR3_EE6F ((uint32_t)0x0000000F)
#define HRTIM_EECR3_EE6F_0 ((uint32_t)0x00000001)
#define HRTIM_EECR3_EE6F_1 ((uint32_t)0x00000002)
#define HRTIM_EECR3_EE6F_2 ((uint32_t)0x00000004)
#define HRTIM_EECR3_EE6F_3 ((uint32_t)0x00000008)
#define HRTIM_EECR3_EE7F ((uint32_t)0x000003C0)
#define HRTIM_EECR3_EE7F_0 ((uint32_t)0x00000040)
#define HRTIM_EECR3_EE7F_1 ((uint32_t)0x00000080)
#define HRTIM_EECR3_EE7F_2 ((uint32_t)0x00000100)
#define HRTIM_EECR3_EE7F_3 ((uint32_t)0x00000200)
#define HRTIM_EECR3_EE8F ((uint32_t)0x0000F000)
#define HRTIM_EECR3_EE8F_0 ((uint32_t)0x00001000)
#define HRTIM_EECR3_EE8F_1 ((uint32_t)0x00002000)
#define HRTIM_EECR3_EE8F_2 ((uint32_t)0x00004000)
#define HRTIM_EECR3_EE8F_3 ((uint32_t)0x00008000)
#define HRTIM_EECR3_EE9F ((uint32_t)0x003C0000)
#define HRTIM_EECR3_EE9F_0 ((uint32_t)0x00040000)
#define HRTIM_EECR3_EE9F_1 ((uint32_t)0x00080000)
#define HRTIM_EECR3_EE9F_2 ((uint32_t)0x00100000)
#define HRTIM_EECR3_EE9F_3 ((uint32_t)0x00200000)
#define HRTIM_EECR3_EE10F ((uint32_t)0x0F000000)
#define HRTIM_EECR3_EE10F_0 ((uint32_t)0x01000000)
#define HRTIM_EECR3_EE10F_1 ((uint32_t)0x02000000)
#define HRTIM_EECR3_EE10F_2 ((uint32_t)0x04000000)
#define HRTIM_EECR3_EE10F_3 ((uint32_t)0x08000000)
#define HRTIM_EECR3_EEVSD ((uint32_t)0xC0000000)
#define HRTIM_EECR3_EEVSD_0 ((uint32_t)0x40000000)
#define HRTIM_EECR3_EEVSD_1 ((uint32_t)0x80000000)


#define HRTIM_ADC1R_AD1MC1 ((uint32_t)0x00000001)
#define HRTIM_ADC1R_AD1MC2 ((uint32_t)0x00000002)
#define HRTIM_ADC1R_AD1MC3 ((uint32_t)0x00000004)
#define HRTIM_ADC1R_AD1MC4 ((uint32_t)0x00000008)
#define HRTIM_ADC1R_AD1MPER ((uint32_t)0x00000010)
#define HRTIM_ADC1R_AD1EEV1 ((uint32_t)0x00000020)
#define HRTIM_ADC1R_AD1EEV2 ((uint32_t)0x00000040)
#define HRTIM_ADC1R_AD1EEV3 ((uint32_t)0x00000080)
#define HRTIM_ADC1R_AD1EEV4 ((uint32_t)0x00000100)
#define HRTIM_ADC1R_AD1EEV5 ((uint32_t)0x00000200)
#define HRTIM_ADC1R_AD1TAC2 ((uint32_t)0x00000400)
#define HRTIM_ADC1R_AD1TAC3 ((uint32_t)0x00000800)
#define HRTIM_ADC1R_AD1TAC4 ((uint32_t)0x00001000)
#define HRTIM_ADC1R_AD1TAPER ((uint32_t)0x00002000)
#define HRTIM_ADC1R_AD1TARST ((uint32_t)0x00004000)
#define HRTIM_ADC1R_AD1TBC2 ((uint32_t)0x00008000)
#define HRTIM_ADC1R_AD1TBC3 ((uint32_t)0x00010000)
#define HRTIM_ADC1R_AD1TBC4 ((uint32_t)0x00020000)
#define HRTIM_ADC1R_AD1TBPER ((uint32_t)0x00040000)
#define HRTIM_ADC1R_AD1TBRST ((uint32_t)0x00080000)
#define HRTIM_ADC1R_AD1TCC2 ((uint32_t)0x00100000)
#define HRTIM_ADC1R_AD1TCC3 ((uint32_t)0x00200000)
#define HRTIM_ADC1R_AD1TCC4 ((uint32_t)0x00400000)
#define HRTIM_ADC1R_AD1TCPER ((uint32_t)0x00800000)
#define HRTIM_ADC1R_AD1TDC2 ((uint32_t)0x01000000)
#define HRTIM_ADC1R_AD1TDC3 ((uint32_t)0x02000000)
#define HRTIM_ADC1R_AD1TDC4 ((uint32_t)0x04000000)
#define HRTIM_ADC1R_AD1TDPER ((uint32_t)0x08000000)
#define HRTIM_ADC1R_AD1TEC2 ((uint32_t)0x10000000)
#define HRTIM_ADC1R_AD1TEC3 ((uint32_t)0x20000000)
#define HRTIM_ADC1R_AD1TEC4 ((uint32_t)0x40000000)
#define HRTIM_ADC1R_AD1TEPER ((uint32_t)0x80000000)


#define HRTIM_ADC2R_AD2MC1 ((uint32_t)0x00000001)
#define HRTIM_ADC2R_AD2MC2 ((uint32_t)0x00000002)
#define HRTIM_ADC2R_AD2MC3 ((uint32_t)0x00000004)
#define HRTIM_ADC2R_AD2MC4 ((uint32_t)0x00000008)
#define HRTIM_ADC2R_AD2MPER ((uint32_t)0x00000010)
#define HRTIM_ADC2R_AD2EEV6 ((uint32_t)0x00000020)
#define HRTIM_ADC2R_AD2EEV7 ((uint32_t)0x00000040)
#define HRTIM_ADC2R_AD2EEV8 ((uint32_t)0x00000080)
#define HRTIM_ADC2R_AD2EEV9 ((uint32_t)0x00000100)
#define HRTIM_ADC2R_AD2EEV10 ((uint32_t)0x00000200)
#define HRTIM_ADC2R_AD2TAC2 ((uint32_t)0x00000400)
#define HRTIM_ADC2R_AD2TAC3 ((uint32_t)0x00000800)
#define HRTIM_ADC2R_AD2TAC4 ((uint32_t)0x00001000)
#define HRTIM_ADC2R_AD2TAPER ((uint32_t)0x00002000)
#define HRTIM_ADC2R_AD2TBC2 ((uint32_t)0x00004000)
#define HRTIM_ADC2R_AD2TBC3 ((uint32_t)0x00008000)
#define HRTIM_ADC2R_AD2TBC4 ((uint32_t)0x00010000)
#define HRTIM_ADC2R_AD2TBPER ((uint32_t)0x00020000)
#define HRTIM_ADC2R_AD2TCC2 ((uint32_t)0x00040000)
#define HRTIM_ADC2R_AD2TCC3 ((uint32_t)0x00080000)
#define HRTIM_ADC2R_AD2TCC4 ((uint32_t)0x00100000)
#define HRTIM_ADC2R_AD2TCPER ((uint32_t)0x00200000)
#define HRTIM_ADC2R_AD2TCRST ((uint32_t)0x00400000)
#define HRTIM_ADC2R_AD2TDC2 ((uint32_t)0x00800000)
#define HRTIM_ADC2R_AD2TDC3 ((uint32_t)0x01000000)
#define HRTIM_ADC2R_AD2TDC4 ((uint32_t)0x02000000)
#define HRTIM_ADC2R_AD2TDPER ((uint32_t)0x04000000)
#define HRTIM_ADC2R_AD2TDRST ((uint32_t)0x08000000)
#define HRTIM_ADC2R_AD2TEC2 ((uint32_t)0x10000000)
#define HRTIM_ADC2R_AD2TEC3 ((uint32_t)0x20000000)
#define HRTIM_ADC2R_AD2TEC4 ((uint32_t)0x40000000)
#define HRTIM_ADC2R_AD2TERST ((uint32_t)0x80000000)


#define HRTIM_ADC3R_AD3MC1 ((uint32_t)0x00000001)
#define HRTIM_ADC3R_AD3MC2 ((uint32_t)0x00000002)
#define HRTIM_ADC3R_AD3MC3 ((uint32_t)0x00000004)
#define HRTIM_ADC3R_AD3MC4 ((uint32_t)0x00000008)
#define HRTIM_ADC3R_AD3MPER ((uint32_t)0x00000010)
#define HRTIM_ADC3R_AD3EEV1 ((uint32_t)0x00000020)
#define HRTIM_ADC3R_AD3EEV2 ((uint32_t)0x00000040)
#define HRTIM_ADC3R_AD3EEV3 ((uint32_t)0x00000080)
#define HRTIM_ADC3R_AD3EEV4 ((uint32_t)0x00000100)
#define HRTIM_ADC3R_AD3EEV5 ((uint32_t)0x00000200)
#define HRTIM_ADC3R_AD3TAC2 ((uint32_t)0x00000400)
#define HRTIM_ADC3R_AD3TAC3 ((uint32_t)0x00000800)
#define HRTIM_ADC3R_AD3TAC4 ((uint32_t)0x00001000)
#define HRTIM_ADC3R_AD3TAPER ((uint32_t)0x00002000)
#define HRTIM_ADC3R_AD3TARST ((uint32_t)0x00004000)
#define HRTIM_ADC3R_AD3TBC2 ((uint32_t)0x00008000)
#define HRTIM_ADC3R_AD3TBC3 ((uint32_t)0x00010000)
#define HRTIM_ADC3R_AD3TBC4 ((uint32_t)0x00020000)
#define HRTIM_ADC3R_AD3TBPER ((uint32_t)0x00040000)
#define HRTIM_ADC3R_AD3TBRST ((uint32_t)0x00080000)
#define HRTIM_ADC3R_AD3TCC2 ((uint32_t)0x00100000)
#define HRTIM_ADC3R_AD3TCC3 ((uint32_t)0x00200000)
#define HRTIM_ADC3R_AD3TCC4 ((uint32_t)0x00400000)
#define HRTIM_ADC3R_AD3TCPER ((uint32_t)0x00800000)
#define HRTIM_ADC3R_AD3TDC2 ((uint32_t)0x01000000)
#define HRTIM_ADC3R_AD3TDC3 ((uint32_t)0x02000000)
#define HRTIM_ADC3R_AD3TDC4 ((uint32_t)0x04000000)
#define HRTIM_ADC3R_AD3TDPER ((uint32_t)0x08000000)
#define HRTIM_ADC3R_AD3TEC2 ((uint32_t)0x10000000)
#define HRTIM_ADC3R_AD3TEC3 ((uint32_t)0x20000000)
#define HRTIM_ADC3R_AD3TEC4 ((uint32_t)0x40000000)
#define HRTIM_ADC3R_AD3TEPER ((uint32_t)0x80000000)


#define HRTIM_ADC4R_AD4MC1 ((uint32_t)0x00000001)
#define HRTIM_ADC4R_AD4MC2 ((uint32_t)0x00000002)
#define HRTIM_ADC4R_AD4MC3 ((uint32_t)0x00000004)
#define HRTIM_ADC4R_AD4MC4 ((uint32_t)0x00000008)
#define HRTIM_ADC4R_AD4MPER ((uint32_t)0x00000010)
#define HRTIM_ADC4R_AD4EEV6 ((uint32_t)0x00000020)
#define HRTIM_ADC4R_AD4EEV7 ((uint32_t)0x00000040)
#define HRTIM_ADC4R_AD4EEV8 ((uint32_t)0x00000080)
#define HRTIM_ADC4R_AD4EEV9 ((uint32_t)0x00000100)
#define HRTIM_ADC4R_AD4EEV10 ((uint32_t)0x00000200)
#define HRTIM_ADC4R_AD4TAC2 ((uint32_t)0x00000400)
#define HRTIM_ADC4R_AD4TAC3 ((uint32_t)0x00000800)
#define HRTIM_ADC4R_AD4TAC4 ((uint32_t)0x00001000)
#define HRTIM_ADC4R_AD4TAPER ((uint32_t)0x00002000)
#define HRTIM_ADC4R_AD4TBC2 ((uint32_t)0x00004000)
#define HRTIM_ADC4R_AD4TBC3 ((uint32_t)0x00008000)
#define HRTIM_ADC4R_AD4TBC4 ((uint32_t)0x00010000)
#define HRTIM_ADC4R_AD4TBPER ((uint32_t)0x00020000)
#define HRTIM_ADC4R_AD4TCC2 ((uint32_t)0x00040000)
#define HRTIM_ADC4R_AD4TCC3 ((uint32_t)0x00080000)
#define HRTIM_ADC4R_AD4TCC4 ((uint32_t)0x00100000)
#define HRTIM_ADC4R_AD4TCPER ((uint32_t)0x00200000)
#define HRTIM_ADC4R_AD4TCRST ((uint32_t)0x00400000)
#define HRTIM_ADC4R_AD4TDC2 ((uint32_t)0x00800000)
#define HRTIM_ADC4R_AD4TDC3 ((uint32_t)0x01000000)
#define HRTIM_ADC4R_AD4TDC4 ((uint32_t)0x02000000)
#define HRTIM_ADC4R_AD4TDPER ((uint32_t)0x04000000)
#define HRTIM_ADC4R_AD4TDRST ((uint32_t)0x08000000)
#define HRTIM_ADC4R_AD4TEC2 ((uint32_t)0x10000000)
#define HRTIM_ADC4R_AD4TEC3 ((uint32_t)0x20000000)
#define HRTIM_ADC4R_AD4TEC4 ((uint32_t)0x40000000)
#define HRTIM_ADC4R_AD4TERST ((uint32_t)0x80000000)


#define HRTIM_DLLCR_CAL ((uint32_t)0x00000001)
#define HRTIM_DLLCR_CALEN ((uint32_t)0x00000002)
#define HRTIM_DLLCR_CALRTE ((uint32_t)0x0000000C)
#define HRTIM_DLLCR_CALRTE_0 ((uint32_t)0x00000004)
#define HRTIM_DLLCR_CALRTE_1 ((uint32_t)0x00000008)


#define HRTIM_FLTINR1_FLT1E ((uint32_t)0x00000001)
#define HRTIM_FLTINR1_FLT1P ((uint32_t)0x00000002)
#define HRTIM_FLTINR1_FLT1SRC ((uint32_t)0x00000004)
#define HRTIM_FLTINR1_FLT1F ((uint32_t)0x00000078)
#define HRTIM_FLTINR1_FLT1F_0 ((uint32_t)0x00000008)
#define HRTIM_FLTINR1_FLT1F_1 ((uint32_t)0x00000010)
#define HRTIM_FLTINR1_FLT1F_2 ((uint32_t)0x00000020)
#define HRTIM_FLTINR1_FLT1F_3 ((uint32_t)0x00000040)
#define HRTIM_FLTINR1_FLT1LCK ((uint32_t)0x00000080)

#define HRTIM_FLTINR1_FLT2E ((uint32_t)0x00000100)
#define HRTIM_FLTINR1_FLT2P ((uint32_t)0x00000200)
#define HRTIM_FLTINR1_FLT2SRC ((uint32_t)0x00000400)
#define HRTIM_FLTINR1_FLT2F ((uint32_t)0x00007800)
#define HRTIM_FLTINR1_FLT2F_0 ((uint32_t)0x00000800)
#define HRTIM_FLTINR1_FLT2F_1 ((uint32_t)0x00001000)
#define HRTIM_FLTINR1_FLT2F_2 ((uint32_t)0x00002000)
#define HRTIM_FLTINR1_FLT2F_3 ((uint32_t)0x00004000)
#define HRTIM_FLTINR1_FLT2LCK ((uint32_t)0x00008000)

#define HRTIM_FLTINR1_FLT3E ((uint32_t)0x00010000)
#define HRTIM_FLTINR1_FLT3P ((uint32_t)0x00020000)
#define HRTIM_FLTINR1_FLT3SRC ((uint32_t)0x00040000)
#define HRTIM_FLTINR1_FLT3F ((uint32_t)0x00780000)
#define HRTIM_FLTINR1_FLT3F_0 ((uint32_t)0x00080000)
#define HRTIM_FLTINR1_FLT3F_1 ((uint32_t)0x00100000)
#define HRTIM_FLTINR1_FLT3F_2 ((uint32_t)0x00200000)
#define HRTIM_FLTINR1_FLT3F_3 ((uint32_t)0x00400000)
#define HRTIM_FLTINR1_FLT3LCK ((uint32_t)0x00800000)

#define HRTIM_FLTINR1_FLT4E ((uint32_t)0x01000000)
#define HRTIM_FLTINR1_FLT4P ((uint32_t)0x02000000)
#define HRTIM_FLTINR1_FLT4SRC ((uint32_t)0x04000000)
#define HRTIM_FLTINR1_FLT4F ((uint32_t)0x78000000)
#define HRTIM_FLTINR1_FLT4F_0 ((uint32_t)0x08000000)
#define HRTIM_FLTINR1_FLT4F_1 ((uint32_t)0x10000000)
#define HRTIM_FLTINR1_FLT4F_2 ((uint32_t)0x20000000)
#define HRTIM_FLTINR1_FLT4F_3 ((uint32_t)0x40000000)
#define HRTIM_FLTINR1_FLT4LCK ((uint32_t)0x80000000)


#define HRTIM_FLTINR2_FLT5E ((uint32_t)0x00000001)
#define HRTIM_FLTINR2_FLT5P ((uint32_t)0x00000002)
#define HRTIM_FLTINR2_FLT5SRC ((uint32_t)0x00000004)
#define HRTIM_FLTINR2_FLT5F ((uint32_t)0x00000078)
#define HRTIM_FLTINR2_FLT5F_0 ((uint32_t)0x00000008)
#define HRTIM_FLTINR2_FLT5F_1 ((uint32_t)0x00000010)
#define HRTIM_FLTINR2_FLT5F_2 ((uint32_t)0x00000020)
#define HRTIM_FLTINR2_FLT5F_3 ((uint32_t)0x00000040)
#define HRTIM_FLTINR2_FLT5LCK ((uint32_t)0x00000080)
#define HRTIM_FLTINR2_FLTSD ((uint32_t)0x03000000)
#define HRTIM_FLTINR2_FLTSD_0 ((uint32_t)0x01000000)
#define HRTIM_FLTINR2_FLTSD_1 ((uint32_t)0x02000000)


#define HRTIM_BDMUPR_MCR ((uint32_t)0x00000001)
#define HRTIM_BDMUPR_MICR ((uint32_t)0x00000002)
#define HRTIM_BDMUPR_MDIER ((uint32_t)0x00000004)
#define HRTIM_BDMUPR_MCNT ((uint32_t)0x00000008)
#define HRTIM_BDMUPR_MPER ((uint32_t)0x00000010)
#define HRTIM_BDMUPR_MREP ((uint32_t)0x00000020)
#define HRTIM_BDMUPR_MCMP1 ((uint32_t)0x00000040)
#define HRTIM_BDMUPR_MCMP2 ((uint32_t)0x00000080)
#define HRTIM_BDMUPR_MCMP3 ((uint32_t)0x00000100)
#define HRTIM_BDMUPR_MCMP4 ((uint32_t)0x00000200)


#define HRTIM_BDTUPR_TIMCR ((uint32_t)0x00000001)
#define HRTIM_BDTUPR_TIMICR ((uint32_t)0x00000002)
#define HRTIM_BDTUPR_TIMDIER ((uint32_t)0x00000004)
#define HRTIM_BDTUPR_TIMCNT ((uint32_t)0x00000008)
#define HRTIM_BDTUPR_TIMPER ((uint32_t)0x00000010)
#define HRTIM_BDTUPR_TIMREP ((uint32_t)0x00000020)
#define HRTIM_BDTUPR_TIMCMP1 ((uint32_t)0x00000040)
#define HRTIM_BDTUPR_TIMCMP2 ((uint32_t)0x00000080)
#define HRTIM_BDTUPR_TIMCMP3 ((uint32_t)0x00000100)
#define HRTIM_BDTUPR_TIMCMP4 ((uint32_t)0x00000200)
#define HRTIM_BDTUPR_TIMDTR ((uint32_t)0x00000400)
#define HRTIM_BDTUPR_TIMSET1R ((uint32_t)0x00000800)
#define HRTIM_BDTUPR_TIMRST1R ((uint32_t)0x00001000)
#define HRTIM_BDTUPR_TIMSET2R ((uint32_t)0x00002000)
#define HRTIM_BDTUPR_TIMRST2R ((uint32_t)0x00004000)
#define HRTIM_BDTUPR_TIMEEFR1 ((uint32_t)0x00008000)
#define HRTIM_BDTUPR_TIMEEFR2 ((uint32_t)0x00010000)
#define HRTIM_BDTUPR_TIMRSTR ((uint32_t)0x00020000)
#define HRTIM_BDTUPR_TIMCHPR ((uint32_t)0x00040000)
#define HRTIM_BDTUPR_TIMOUTR ((uint32_t)0x00080000)
#define HRTIM_BDTUPR_TIMFLTR ((uint32_t)0x00100000)


#define HRTIM_BDMADR_BDMADR ((uint32_t)0xFFFFFFFF)







#define ADC_ISR_ADRD ((uint32_t)0x00000001)
#define ADC_ISR_EOSMP ((uint32_t)0x00000002)
#define ADC_ISR_EOC ((uint32_t)0x00000004)
#define ADC_ISR_EOS ((uint32_t)0x00000008)
#define ADC_ISR_OVR ((uint32_t)0x00000010)
#define ADC_ISR_JEOC ((uint32_t)0x00000020)
#define ADC_ISR_JEOS ((uint32_t)0x00000040)
#define ADC_ISR_AWD1 ((uint32_t)0x00000080)
#define ADC_ISR_AWD2 ((uint32_t)0x00000100)
#define ADC_ISR_AWD3 ((uint32_t)0x00000200)
#define ADC_ISR_JQOVF ((uint32_t)0x00000400)


#define ADC_IER_RDY ((uint32_t)0x00000001)
#define ADC_IER_EOSMP ((uint32_t)0x00000002)
#define ADC_IER_EOC ((uint32_t)0x00000004)
#define ADC_IER_EOS ((uint32_t)0x00000008)
#define ADC_IER_OVR ((uint32_t)0x00000010)
#define ADC_IER_JEOC ((uint32_t)0x00000020)
#define ADC_IER_JEOS ((uint32_t)0x00000040)
#define ADC_IER_AWD1 ((uint32_t)0x00000080)
#define ADC_IER_AWD2 ((uint32_t)0x00000100)
#define ADC_IER_AWD3 ((uint32_t)0x00000200)
#define ADC_IER_JQOVF ((uint32_t)0x00000400)


#define ADC_CR_ADEN ((uint32_t)0x00000001)
#define ADC_CR_ADDIS ((uint32_t)0x00000002)
#define ADC_CR_ADSTART ((uint32_t)0x00000004)
#define ADC_CR_JADSTART ((uint32_t)0x00000008)
#define ADC_CR_ADSTP ((uint32_t)0x00000010)
#define ADC_CR_JADSTP ((uint32_t)0x00000020)
#define ADC_CR_ADVREGEN ((uint32_t)0x30000000)
#define ADC_CR_ADVREGEN_0 ((uint32_t)0x10000000)
#define ADC_CR_ADVREGEN_1 ((uint32_t)0x20000000)
#define ADC_CR_ADCALDIF ((uint32_t)0x40000000)
#define ADC_CR_ADCAL ((uint32_t)0x80000000)


#define ADC_CFGR_DMAEN ((uint32_t)0x00000001)
#define ADC_CFGR_DMACFG ((uint32_t)0x00000002)

#define ADC_CFGR_RES ((uint32_t)0x00000018)
#define ADC_CFGR_RES_0 ((uint32_t)0x00000008)
#define ADC_CFGR_RES_1 ((uint32_t)0x00000010)

#define ADC_CFGR_ALIGN ((uint32_t)0x00000020)

#define ADC_CFGR_EXTSEL ((uint32_t)0x000003C0)
#define ADC_CFGR_EXTSEL_0 ((uint32_t)0x00000040)
#define ADC_CFGR_EXTSEL_1 ((uint32_t)0x00000080)
#define ADC_CFGR_EXTSEL_2 ((uint32_t)0x00000100)
#define ADC_CFGR_EXTSEL_3 ((uint32_t)0x00000200)

#define ADC_CFGR_EXTEN ((uint32_t)0x00000C00)
#define ADC_CFGR_EXTEN_0 ((uint32_t)0x00000400)
#define ADC_CFGR_EXTEN_1 ((uint32_t)0x00000800)

#define ADC_CFGR_OVRMOD ((uint32_t)0x00001000)
#define ADC_CFGR_CONT ((uint32_t)0x00002000)
#define ADC_CFGR_AUTDLY ((uint32_t)0x00004000)
#define ADC_CFGR_DISCEN ((uint32_t)0x00010000)

#define ADC_CFGR_DISCNUM ((uint32_t)0x000E0000)
#define ADC_CFGR_DISCNUM_0 ((uint32_t)0x00020000)
#define ADC_CFGR_DISCNUM_1 ((uint32_t)0x00040000)
#define ADC_CFGR_DISCNUM_2 ((uint32_t)0x00080000)

#define ADC_CFGR_JDISCEN ((uint32_t)0x00100000)
#define ADC_CFGR_JQM ((uint32_t)0x00200000)
#define ADC_CFGR_AWD1SGL ((uint32_t)0x00400000)
#define ADC_CFGR_AWD1EN ((uint32_t)0x00800000)
#define ADC_CFGR_JAWD1EN ((uint32_t)0x01000000)
#define ADC_CFGR_JAUTO ((uint32_t)0x02000000)

#define ADC_CFGR_AWD1CH ((uint32_t)0x7C000000)
#define ADC_CFGR_AWD1CH_0 ((uint32_t)0x04000000)
#define ADC_CFGR_AWD1CH_1 ((uint32_t)0x08000000)
#define ADC_CFGR_AWD1CH_2 ((uint32_t)0x10000000)
#define ADC_CFGR_AWD1CH_3 ((uint32_t)0x20000000)
#define ADC_CFGR_AWD1CH_4 ((uint32_t)0x40000000)


#define ADC_SMPR1_SMP0 ((uint32_t)0x00000007)
#define ADC_SMPR1_SMP0_0 ((uint32_t)0x00000001)
#define ADC_SMPR1_SMP0_1 ((uint32_t)0x00000002)
#define ADC_SMPR1_SMP0_2 ((uint32_t)0x00000004)

#define ADC_SMPR1_SMP1 ((uint32_t)0x00000038)
#define ADC_SMPR1_SMP1_0 ((uint32_t)0x00000008)
#define ADC_SMPR1_SMP1_1 ((uint32_t)0x00000010)
#define ADC_SMPR1_SMP1_2 ((uint32_t)0x00000020)

#define ADC_SMPR1_SMP2 ((uint32_t)0x000001C0)
#define ADC_SMPR1_SMP2_0 ((uint32_t)0x00000040)
#define ADC_SMPR1_SMP2_1 ((uint32_t)0x00000080)
#define ADC_SMPR1_SMP2_2 ((uint32_t)0x00000100)

#define ADC_SMPR1_SMP3 ((uint32_t)0x00000E00)
#define ADC_SMPR1_SMP3_0 ((uint32_t)0x00000200)
#define ADC_SMPR1_SMP3_1 ((uint32_t)0x00000400)
#define ADC_SMPR1_SMP3_2 ((uint32_t)0x00000800)

#define ADC_SMPR1_SMP4 ((uint32_t)0x00007000)
#define ADC_SMPR1_SMP4_0 ((uint32_t)0x00001000)
#define ADC_SMPR1_SMP4_1 ((uint32_t)0x00002000)
#define ADC_SMPR1_SMP4_2 ((uint32_t)0x00004000)

#define ADC_SMPR1_SMP5 ((uint32_t)0x00038000)
#define ADC_SMPR1_SMP5_0 ((uint32_t)0x00008000)
#define ADC_SMPR1_SMP5_1 ((uint32_t)0x00010000)
#define ADC_SMPR1_SMP5_2 ((uint32_t)0x00020000)

#define ADC_SMPR1_SMP6 ((uint32_t)0x001C0000)
#define ADC_SMPR1_SMP6_0 ((uint32_t)0x00040000)
#define ADC_SMPR1_SMP6_1 ((uint32_t)0x00080000)
#define ADC_SMPR1_SMP6_2 ((uint32_t)0x00100000)

#define ADC_SMPR1_SMP7 ((uint32_t)0x00E00000)
#define ADC_SMPR1_SMP7_0 ((uint32_t)0x00200000)
#define ADC_SMPR1_SMP7_1 ((uint32_t)0x00400000)
#define ADC_SMPR1_SMP7_2 ((uint32_t)0x00800000)

#define ADC_SMPR1_SMP8 ((uint32_t)0x07000000)
#define ADC_SMPR1_SMP8_0 ((uint32_t)0x01000000)
#define ADC_SMPR1_SMP8_1 ((uint32_t)0x02000000)
#define ADC_SMPR1_SMP8_2 ((uint32_t)0x04000000)

#define ADC_SMPR1_SMP9 ((uint32_t)0x38000000)
#define ADC_SMPR1_SMP9_0 ((uint32_t)0x08000000)
#define ADC_SMPR1_SMP9_1 ((uint32_t)0x10000000)
#define ADC_SMPR1_SMP9_2 ((uint32_t)0x20000000)


#define ADC_SMPR2_SMP10 ((uint32_t)0x00000007)
#define ADC_SMPR2_SMP10_0 ((uint32_t)0x00000001)
#define ADC_SMPR2_SMP10_1 ((uint32_t)0x00000002)
#define ADC_SMPR2_SMP10_2 ((uint32_t)0x00000004)

#define ADC_SMPR2_SMP11 ((uint32_t)0x00000038)
#define ADC_SMPR2_SMP11_0 ((uint32_t)0x00000008)
#define ADC_SMPR2_SMP11_1 ((uint32_t)0x00000010)
#define ADC_SMPR2_SMP11_2 ((uint32_t)0x00000020)

#define ADC_SMPR2_SMP12 ((uint32_t)0x000001C0)
#define ADC_SMPR2_SMP12_0 ((uint32_t)0x00000040)
#define ADC_SMPR2_SMP12_1 ((uint32_t)0x00000080)
#define ADC_SMPR2_SMP12_2 ((uint32_t)0x00000100)

#define ADC_SMPR2_SMP13 ((uint32_t)0x00000E00)
#define ADC_SMPR2_SMP13_0 ((uint32_t)0x00000200)
#define ADC_SMPR2_SMP13_1 ((uint32_t)0x00000400)
#define ADC_SMPR2_SMP13_2 ((uint32_t)0x00000800)

#define ADC_SMPR2_SMP14 ((uint32_t)0x00007000)
#define ADC_SMPR2_SMP14_0 ((uint32_t)0x00001000)
#define ADC_SMPR2_SMP14_1 ((uint32_t)0x00002000)
#define ADC_SMPR2_SMP14_2 ((uint32_t)0x00004000)

#define ADC_SMPR2_SMP15 ((uint32_t)0x00038000)
#define ADC_SMPR2_SMP15_0 ((uint32_t)0x00008000)
#define ADC_SMPR2_SMP15_1 ((uint32_t)0x00010000)
#define ADC_SMPR2_SMP15_2 ((uint32_t)0x00020000)

#define ADC_SMPR2_SMP16 ((uint32_t)0x001C0000)
#define ADC_SMPR2_SMP16_0 ((uint32_t)0x00040000)
#define ADC_SMPR2_SMP16_1 ((uint32_t)0x00080000)
#define ADC_SMPR2_SMP16_2 ((uint32_t)0x00100000)

#define ADC_SMPR2_SMP17 ((uint32_t)0x00E00000)
#define ADC_SMPR2_SMP17_0 ((uint32_t)0x00200000)
#define ADC_SMPR2_SMP17_1 ((uint32_t)0x00400000)
#define ADC_SMPR2_SMP17_2 ((uint32_t)0x00800000)

#define ADC_SMPR2_SMP18 ((uint32_t)0x07000000)
#define ADC_SMPR2_SMP18_0 ((uint32_t)0x01000000)
#define ADC_SMPR2_SMP18_1 ((uint32_t)0x02000000)
#define ADC_SMPR2_SMP18_2 ((uint32_t)0x04000000)


#define ADC_TR1_LT1 ((uint32_t)0x00000FFF)
#define ADC_TR1_LT1_0 ((uint32_t)0x00000001)
#define ADC_TR1_LT1_1 ((uint32_t)0x00000002)
#define ADC_TR1_LT1_2 ((uint32_t)0x00000004)
#define ADC_TR1_LT1_3 ((uint32_t)0x00000008)
#define ADC_TR1_LT1_4 ((uint32_t)0x00000010)
#define ADC_TR1_LT1_5 ((uint32_t)0x00000020)
#define ADC_TR1_LT1_6 ((uint32_t)0x00000040)
#define ADC_TR1_LT1_7 ((uint32_t)0x00000080)
#define ADC_TR1_LT1_8 ((uint32_t)0x00000100)
#define ADC_TR1_LT1_9 ((uint32_t)0x00000200)
#define ADC_TR1_LT1_10 ((uint32_t)0x00000400)
#define ADC_TR1_LT1_11 ((uint32_t)0x00000800)

#define ADC_TR1_HT1 ((uint32_t)0x0FFF0000)
#define ADC_TR1_HT1_0 ((uint32_t)0x00010000)
#define ADC_TR1_HT1_1 ((uint32_t)0x00020000)
#define ADC_TR1_HT1_2 ((uint32_t)0x00040000)
#define ADC_TR1_HT1_3 ((uint32_t)0x00080000)
#define ADC_TR1_HT1_4 ((uint32_t)0x00100000)
#define ADC_TR1_HT1_5 ((uint32_t)0x00200000)
#define ADC_TR1_HT1_6 ((uint32_t)0x00400000)
#define ADC_TR1_HT1_7 ((uint32_t)0x00800000)
#define ADC_TR1_HT1_8 ((uint32_t)0x01000000)
#define ADC_TR1_HT1_9 ((uint32_t)0x02000000)
#define ADC_TR1_HT1_10 ((uint32_t)0x04000000)
#define ADC_TR1_HT1_11 ((uint32_t)0x08000000)


#define ADC_TR2_LT2 ((uint32_t)0x000000FF)
#define ADC_TR2_LT2_0 ((uint32_t)0x00000001)
#define ADC_TR2_LT2_1 ((uint32_t)0x00000002)
#define ADC_TR2_LT2_2 ((uint32_t)0x00000004)
#define ADC_TR2_LT2_3 ((uint32_t)0x00000008)
#define ADC_TR2_LT2_4 ((uint32_t)0x00000010)
#define ADC_TR2_LT2_5 ((uint32_t)0x00000020)
#define ADC_TR2_LT2_6 ((uint32_t)0x00000040)
#define ADC_TR2_LT2_7 ((uint32_t)0x00000080)

#define ADC_TR2_HT2 ((uint32_t)0x00FF0000)
#define ADC_TR2_HT2_0 ((uint32_t)0x00010000)
#define ADC_TR2_HT2_1 ((uint32_t)0x00020000)
#define ADC_TR2_HT2_2 ((uint32_t)0x00040000)
#define ADC_TR2_HT2_3 ((uint32_t)0x00080000)
#define ADC_TR2_HT2_4 ((uint32_t)0x00100000)
#define ADC_TR2_HT2_5 ((uint32_t)0x00200000)
#define ADC_TR2_HT2_6 ((uint32_t)0x00400000)
#define ADC_TR2_HT2_7 ((uint32_t)0x00800000)


#define ADC_TR3_LT3 ((uint32_t)0x000000FF)
#define ADC_TR3_LT3_0 ((uint32_t)0x00000001)
#define ADC_TR3_LT3_1 ((uint32_t)0x00000002)
#define ADC_TR3_LT3_2 ((uint32_t)0x00000004)
#define ADC_TR3_LT3_3 ((uint32_t)0x00000008)
#define ADC_TR3_LT3_4 ((uint32_t)0x00000010)
#define ADC_TR3_LT3_5 ((uint32_t)0x00000020)
#define ADC_TR3_LT3_6 ((uint32_t)0x00000040)
#define ADC_TR3_LT3_7 ((uint32_t)0x00000080)

#define ADC_TR3_HT3 ((uint32_t)0x00FF0000)
#define ADC_TR3_HT3_0 ((uint32_t)0x00010000)
#define ADC_TR3_HT3_1 ((uint32_t)0x00020000)
#define ADC_TR3_HT3_2 ((uint32_t)0x00040000)
#define ADC_TR3_HT3_3 ((uint32_t)0x00080000)
#define ADC_TR3_HT3_4 ((uint32_t)0x00100000)
#define ADC_TR3_HT3_5 ((uint32_t)0x00200000)
#define ADC_TR3_HT3_6 ((uint32_t)0x00400000)
#define ADC_TR3_HT3_7 ((uint32_t)0x00800000)


#define ADC_SQR1_L ((uint32_t)0x0000000F)
#define ADC_SQR1_L_0 ((uint32_t)0x00000001)
#define ADC_SQR1_L_1 ((uint32_t)0x00000002)
#define ADC_SQR1_L_2 ((uint32_t)0x00000004)
#define ADC_SQR1_L_3 ((uint32_t)0x00000008)

#define ADC_SQR1_SQ1 ((uint32_t)0x000007C0)
#define ADC_SQR1_SQ1_0 ((uint32_t)0x00000040)
#define ADC_SQR1_SQ1_1 ((uint32_t)0x00000080)
#define ADC_SQR1_SQ1_2 ((uint32_t)0x00000100)
#define ADC_SQR1_SQ1_3 ((uint32_t)0x00000200)
#define ADC_SQR1_SQ1_4 ((uint32_t)0x00000400)

#define ADC_SQR1_SQ2 ((uint32_t)0x0001F000)
#define ADC_SQR1_SQ2_0 ((uint32_t)0x00001000)
#define ADC_SQR1_SQ2_1 ((uint32_t)0x00002000)
#define ADC_SQR1_SQ2_2 ((uint32_t)0x00004000)
#define ADC_SQR1_SQ2_3 ((uint32_t)0x00008000)
#define ADC_SQR1_SQ2_4 ((uint32_t)0x00010000)

#define ADC_SQR1_SQ3 ((uint32_t)0x007C0000)
#define ADC_SQR1_SQ3_0 ((uint32_t)0x00040000)
#define ADC_SQR1_SQ3_1 ((uint32_t)0x00080000)
#define ADC_SQR1_SQ3_2 ((uint32_t)0x00100000)
#define ADC_SQR1_SQ3_3 ((uint32_t)0x00200000)
#define ADC_SQR1_SQ3_4 ((uint32_t)0x00400000)

#define ADC_SQR1_SQ4 ((uint32_t)0x1F000000)
#define ADC_SQR1_SQ4_0 ((uint32_t)0x01000000)
#define ADC_SQR1_SQ4_1 ((uint32_t)0x02000000)
#define ADC_SQR1_SQ4_2 ((uint32_t)0x04000000)
#define ADC_SQR1_SQ4_3 ((uint32_t)0x08000000)
#define ADC_SQR1_SQ4_4 ((uint32_t)0x10000000)


#define ADC_SQR2_SQ5 ((uint32_t)0x0000001F)
#define ADC_SQR2_SQ5_0 ((uint32_t)0x00000001)
#define ADC_SQR2_SQ5_1 ((uint32_t)0x00000002)
#define ADC_SQR2_SQ5_2 ((uint32_t)0x00000004)
#define ADC_SQR2_SQ5_3 ((uint32_t)0x00000008)
#define ADC_SQR2_SQ5_4 ((uint32_t)0x00000010)

#define ADC_SQR2_SQ6 ((uint32_t)0x000007C0)
#define ADC_SQR2_SQ6_0 ((uint32_t)0x00000040)
#define ADC_SQR2_SQ6_1 ((uint32_t)0x00000080)
#define ADC_SQR2_SQ6_2 ((uint32_t)0x00000100)
#define ADC_SQR2_SQ6_3 ((uint32_t)0x00000200)
#define ADC_SQR2_SQ6_4 ((uint32_t)0x00000400)

#define ADC_SQR2_SQ7 ((uint32_t)0x0001F000)
#define ADC_SQR2_SQ7_0 ((uint32_t)0x00001000)
#define ADC_SQR2_SQ7_1 ((uint32_t)0x00002000)
#define ADC_SQR2_SQ7_2 ((uint32_t)0x00004000)
#define ADC_SQR2_SQ7_3 ((uint32_t)0x00008000)
#define ADC_SQR2_SQ7_4 ((uint32_t)0x00010000)

#define ADC_SQR2_SQ8 ((uint32_t)0x007C0000)
#define ADC_SQR2_SQ8_0 ((uint32_t)0x00040000)
#define ADC_SQR2_SQ8_1 ((uint32_t)0x00080000)
#define ADC_SQR2_SQ8_2 ((uint32_t)0x00100000)
#define ADC_SQR2_SQ8_3 ((uint32_t)0x00200000)
#define ADC_SQR2_SQ8_4 ((uint32_t)0x00400000)

#define ADC_SQR2_SQ9 ((uint32_t)0x1F000000)
#define ADC_SQR2_SQ9_0 ((uint32_t)0x01000000)
#define ADC_SQR2_SQ9_1 ((uint32_t)0x02000000)
#define ADC_SQR2_SQ9_2 ((uint32_t)0x04000000)
#define ADC_SQR2_SQ9_3 ((uint32_t)0x08000000)
#define ADC_SQR2_SQ9_4 ((uint32_t)0x10000000)


#define ADC_SQR3_SQ10 ((uint32_t)0x0000001F)
#define ADC_SQR3_SQ10_0 ((uint32_t)0x00000001)
#define ADC_SQR3_SQ10_1 ((uint32_t)0x00000002)
#define ADC_SQR3_SQ10_2 ((uint32_t)0x00000004)
#define ADC_SQR3_SQ10_3 ((uint32_t)0x00000008)
#define ADC_SQR3_SQ10_4 ((uint32_t)0x00000010)

#define ADC_SQR3_SQ11 ((uint32_t)0x000007C0)
#define ADC_SQR3_SQ11_0 ((uint32_t)0x00000040)
#define ADC_SQR3_SQ11_1 ((uint32_t)0x00000080)
#define ADC_SQR3_SQ11_2 ((uint32_t)0x00000100)
#define ADC_SQR3_SQ11_3 ((uint32_t)0x00000200)
#define ADC_SQR3_SQ11_4 ((uint32_t)0x00000400)

#define ADC_SQR3_SQ12 ((uint32_t)0x0001F000)
#define ADC_SQR3_SQ12_0 ((uint32_t)0x00001000)
#define ADC_SQR3_SQ12_1 ((uint32_t)0x00002000)
#define ADC_SQR3_SQ12_2 ((uint32_t)0x00004000)
#define ADC_SQR3_SQ12_3 ((uint32_t)0x00008000)
#define ADC_SQR3_SQ12_4 ((uint32_t)0x00010000)

#define ADC_SQR3_SQ13 ((uint32_t)0x007C0000)
#define ADC_SQR3_SQ13_0 ((uint32_t)0x00040000)
#define ADC_SQR3_SQ13_1 ((uint32_t)0x00080000)
#define ADC_SQR3_SQ13_2 ((uint32_t)0x00100000)
#define ADC_SQR3_SQ13_3 ((uint32_t)0x00200000)
#define ADC_SQR3_SQ13_4 ((uint32_t)0x00400000)

#define ADC_SQR3_SQ14 ((uint32_t)0x1F000000)
#define ADC_SQR3_SQ14_0 ((uint32_t)0x01000000)
#define ADC_SQR3_SQ14_1 ((uint32_t)0x02000000)
#define ADC_SQR3_SQ14_2 ((uint32_t)0x04000000)
#define ADC_SQR3_SQ14_3 ((uint32_t)0x08000000)
#define ADC_SQR3_SQ14_4 ((uint32_t)0x10000000)


#define ADC_SQR4_SQ15 ((uint32_t)0x0000001F)
#define ADC_SQR4_SQ15_0 ((uint32_t)0x00000001)
#define ADC_SQR4_SQ15_1 ((uint32_t)0x00000002)
#define ADC_SQR4_SQ15_2 ((uint32_t)0x00000004)
#define ADC_SQR4_SQ15_3 ((uint32_t)0x00000008)
#define ADC_SQR4_SQ15_4 ((uint32_t)0x00000010)

#define ADC_SQR4_SQ16 ((uint32_t)0x000007C0)
#define ADC_SQR4_SQ16_0 ((uint32_t)0x00000040)
#define ADC_SQR4_SQ16_1 ((uint32_t)0x00000080)
#define ADC_SQR4_SQ16_2 ((uint32_t)0x00000100)
#define ADC_SQR4_SQ16_3 ((uint32_t)0x00000200)
#define ADC_SQR4_SQ16_4 ((uint32_t)0x00000400)


#define ADC_SQR3_SQ15 ADC_SQR4_SQ15
#define ADC_SQR3_SQ15_0 ADC_SQR4_SQ15_0
#define ADC_SQR3_SQ15_1 ADC_SQR4_SQ15_1
#define ADC_SQR3_SQ15_2 ADC_SQR4_SQ15_2
#define ADC_SQR3_SQ15_3 ADC_SQR4_SQ15_3
#define ADC_SQR3_SQ15_4 ADC_SQR4_SQ15_4

#define ADC_SQR3_SQ16 ADC_SQR4_SQ16
#define ADC_SQR3_SQ16_0 ADC_SQR4_SQ16_0
#define ADC_SQR3_SQ16_1 ADC_SQR4_SQ16_1
#define ADC_SQR3_SQ16_2 ADC_SQR4_SQ16_2
#define ADC_SQR3_SQ16_3 ADC_SQR4_SQ16_3
#define ADC_SQR3_SQ16_4 ADC_SQR4_SQ16_4

#define ADC_DR_RDATA ((uint32_t)0x0000FFFF)
#define ADC_DR_RDATA_0 ((uint32_t)0x00000001)
#define ADC_DR_RDATA_1 ((uint32_t)0x00000002)
#define ADC_DR_RDATA_2 ((uint32_t)0x00000004)
#define ADC_DR_RDATA_3 ((uint32_t)0x00000008)
#define ADC_DR_RDATA_4 ((uint32_t)0x00000010)
#define ADC_DR_RDATA_5 ((uint32_t)0x00000020)
#define ADC_DR_RDATA_6 ((uint32_t)0x00000040)
#define ADC_DR_RDATA_7 ((uint32_t)0x00000080)
#define ADC_DR_RDATA_8 ((uint32_t)0x00000100)
#define ADC_DR_RDATA_9 ((uint32_t)0x00000200)
#define ADC_DR_RDATA_10 ((uint32_t)0x00000400)
#define ADC_DR_RDATA_11 ((uint32_t)0x00000800)
#define ADC_DR_RDATA_12 ((uint32_t)0x00001000)
#define ADC_DR_RDATA_13 ((uint32_t)0x00002000)
#define ADC_DR_RDATA_14 ((uint32_t)0x00004000)
#define ADC_DR_RDATA_15 ((uint32_t)0x00008000)


#define ADC_JSQR_JL ((uint32_t)0x00000003)
#define ADC_JSQR_JL_0 ((uint32_t)0x00000001)
#define ADC_JSQR_JL_1 ((uint32_t)0x00000002)

#define ADC_JSQR_JEXTSEL ((uint32_t)0x0000003C)
#define ADC_JSQR_JEXTSEL_0 ((uint32_t)0x00000004)
#define ADC_JSQR_JEXTSEL_1 ((uint32_t)0x00000008)
#define ADC_JSQR_JEXTSEL_2 ((uint32_t)0x00000010)
#define ADC_JSQR_JEXTSEL_3 ((uint32_t)0x00000020)

#define ADC_JSQR_JEXTEN ((uint32_t)0x000000C0)
#define ADC_JSQR_JEXTEN_0 ((uint32_t)0x00000040)
#define ADC_JSQR_JEXTEN_1 ((uint32_t)0x00000080)

#define ADC_JSQR_JSQ1 ((uint32_t)0x00001F00)
#define ADC_JSQR_JSQ1_0 ((uint32_t)0x00000100)
#define ADC_JSQR_JSQ1_1 ((uint32_t)0x00000200)
#define ADC_JSQR_JSQ1_2 ((uint32_t)0x00000400)
#define ADC_JSQR_JSQ1_3 ((uint32_t)0x00000800)
#define ADC_JSQR_JSQ1_4 ((uint32_t)0x00001000)

#define ADC_JSQR_JSQ2 ((uint32_t)0x0007C000)
#define ADC_JSQR_JSQ2_0 ((uint32_t)0x00004000)
#define ADC_JSQR_JSQ2_1 ((uint32_t)0x00008000)
#define ADC_JSQR_JSQ2_2 ((uint32_t)0x00010000)
#define ADC_JSQR_JSQ2_3 ((uint32_t)0x00020000)
#define ADC_JSQR_JSQ2_4 ((uint32_t)0x00040000)

#define ADC_JSQR_JSQ3 ((uint32_t)0x01F00000)
#define ADC_JSQR_JSQ3_0 ((uint32_t)0x00100000)
#define ADC_JSQR_JSQ3_1 ((uint32_t)0x00200000)
#define ADC_JSQR_JSQ3_2 ((uint32_t)0x00400000)
#define ADC_JSQR_JSQ3_3 ((uint32_t)0x00800000)
#define ADC_JSQR_JSQ3_4 ((uint32_t)0x01000000)

#define ADC_JSQR_JSQ4 ((uint32_t)0x7C000000)
#define ADC_JSQR_JSQ4_0 ((uint32_t)0x04000000)
#define ADC_JSQR_JSQ4_1 ((uint32_t)0x08000000)
#define ADC_JSQR_JSQ4_2 ((uint32_t)0x10000000)
#define ADC_JSQR_JSQ4_3 ((uint32_t)0x20000000)
#define ADC_JSQR_JSQ4_4 ((uint32_t)0x40000000)


#define ADC_OFR1_OFFSET1 ((uint32_t)0x00000FFF)
#define ADC_OFR1_OFFSET1_0 ((uint32_t)0x00000001)
#define ADC_OFR1_OFFSET1_1 ((uint32_t)0x00000002)
#define ADC_OFR1_OFFSET1_2 ((uint32_t)0x00000004)
#define ADC_OFR1_OFFSET1_3 ((uint32_t)0x00000008)
#define ADC_OFR1_OFFSET1_4 ((uint32_t)0x00000010)
#define ADC_OFR1_OFFSET1_5 ((uint32_t)0x00000020)
#define ADC_OFR1_OFFSET1_6 ((uint32_t)0x00000040)
#define ADC_OFR1_OFFSET1_7 ((uint32_t)0x00000080)
#define ADC_OFR1_OFFSET1_8 ((uint32_t)0x00000100)
#define ADC_OFR1_OFFSET1_9 ((uint32_t)0x00000200)
#define ADC_OFR1_OFFSET1_10 ((uint32_t)0x00000400)
#define ADC_OFR1_OFFSET1_11 ((uint32_t)0x00000800)

#define ADC_OFR1_OFFSET1_CH ((uint32_t)0x7C000000)
#define ADC_OFR1_OFFSET1_CH_0 ((uint32_t)0x04000000)
#define ADC_OFR1_OFFSET1_CH_1 ((uint32_t)0x08000000)
#define ADC_OFR1_OFFSET1_CH_2 ((uint32_t)0x10000000)
#define ADC_OFR1_OFFSET1_CH_3 ((uint32_t)0x20000000)
#define ADC_OFR1_OFFSET1_CH_4 ((uint32_t)0x40000000)

#define ADC_OFR1_OFFSET1_EN ((uint32_t)0x80000000)


#define ADC_OFR2_OFFSET2 ((uint32_t)0x00000FFF)
#define ADC_OFR2_OFFSET2_0 ((uint32_t)0x00000001)
#define ADC_OFR2_OFFSET2_1 ((uint32_t)0x00000002)
#define ADC_OFR2_OFFSET2_2 ((uint32_t)0x00000004)
#define ADC_OFR2_OFFSET2_3 ((uint32_t)0x00000008)
#define ADC_OFR2_OFFSET2_4 ((uint32_t)0x00000010)
#define ADC_OFR2_OFFSET2_5 ((uint32_t)0x00000020)
#define ADC_OFR2_OFFSET2_6 ((uint32_t)0x00000040)
#define ADC_OFR2_OFFSET2_7 ((uint32_t)0x00000080)
#define ADC_OFR2_OFFSET2_8 ((uint32_t)0x00000100)
#define ADC_OFR2_OFFSET2_9 ((uint32_t)0x00000200)
#define ADC_OFR2_OFFSET2_10 ((uint32_t)0x00000400)
#define ADC_OFR2_OFFSET2_11 ((uint32_t)0x00000800)

#define ADC_OFR2_OFFSET2_CH ((uint32_t)0x7C000000)
#define ADC_OFR2_OFFSET2_CH_0 ((uint32_t)0x04000000)
#define ADC_OFR2_OFFSET2_CH_1 ((uint32_t)0x08000000)
#define ADC_OFR2_OFFSET2_CH_2 ((uint32_t)0x10000000)
#define ADC_OFR2_OFFSET2_CH_3 ((uint32_t)0x20000000)
#define ADC_OFR2_OFFSET2_CH_4 ((uint32_t)0x40000000)

#define ADC_OFR2_OFFSET2_EN ((uint32_t)0x80000000)


#define ADC_OFR3_OFFSET3 ((uint32_t)0x00000FFF)
#define ADC_OFR3_OFFSET3_0 ((uint32_t)0x00000001)
#define ADC_OFR3_OFFSET3_1 ((uint32_t)0x00000002)
#define ADC_OFR3_OFFSET3_2 ((uint32_t)0x00000004)
#define ADC_OFR3_OFFSET3_3 ((uint32_t)0x00000008)
#define ADC_OFR3_OFFSET3_4 ((uint32_t)0x00000010)
#define ADC_OFR3_OFFSET3_5 ((uint32_t)0x00000020)
#define ADC_OFR3_OFFSET3_6 ((uint32_t)0x00000040)
#define ADC_OFR3_OFFSET3_7 ((uint32_t)0x00000080)
#define ADC_OFR3_OFFSET3_8 ((uint32_t)0x00000100)
#define ADC_OFR3_OFFSET3_9 ((uint32_t)0x00000200)
#define ADC_OFR3_OFFSET3_10 ((uint32_t)0x00000400)
#define ADC_OFR3_OFFSET3_11 ((uint32_t)0x00000800)

#define ADC_OFR3_OFFSET3_CH ((uint32_t)0x7C000000)
#define ADC_OFR3_OFFSET3_CH_0 ((uint32_t)0x04000000)
#define ADC_OFR3_OFFSET3_CH_1 ((uint32_t)0x08000000)
#define ADC_OFR3_OFFSET3_CH_2 ((uint32_t)0x10000000)
#define ADC_OFR3_OFFSET3_CH_3 ((uint32_t)0x20000000)
#define ADC_OFR3_OFFSET3_CH_4 ((uint32_t)0x40000000)

#define ADC_OFR3_OFFSET3_EN ((uint32_t)0x80000000)


#define ADC_OFR4_OFFSET4 ((uint32_t)0x00000FFF)
#define ADC_OFR4_OFFSET4_0 ((uint32_t)0x00000001)
#define ADC_OFR4_OFFSET4_1 ((uint32_t)0x00000002)
#define ADC_OFR4_OFFSET4_2 ((uint32_t)0x00000004)
#define ADC_OFR4_OFFSET4_3 ((uint32_t)0x00000008)
#define ADC_OFR4_OFFSET4_4 ((uint32_t)0x00000010)
#define ADC_OFR4_OFFSET4_5 ((uint32_t)0x00000020)
#define ADC_OFR4_OFFSET4_6 ((uint32_t)0x00000040)
#define ADC_OFR4_OFFSET4_7 ((uint32_t)0x00000080)
#define ADC_OFR4_OFFSET4_8 ((uint32_t)0x00000100)
#define ADC_OFR4_OFFSET4_9 ((uint32_t)0x00000200)
#define ADC_OFR4_OFFSET4_10 ((uint32_t)0x00000400)
#define ADC_OFR4_OFFSET4_11 ((uint32_t)0x00000800)

#define ADC_OFR4_OFFSET4_CH ((uint32_t)0x7C000000)
#define ADC_OFR4_OFFSET4_CH_0 ((uint32_t)0x04000000)
#define ADC_OFR4_OFFSET4_CH_1 ((uint32_t)0x08000000)
#define ADC_OFR4_OFFSET4_CH_2 ((uint32_t)0x10000000)
#define ADC_OFR4_OFFSET4_CH_3 ((uint32_t)0x20000000)
#define ADC_OFR4_OFFSET4_CH_4 ((uint32_t)0x40000000)

#define ADC_OFR4_OFFSET4_EN ((uint32_t)0x80000000)


#define ADC_JDR1_JDATA ((uint32_t)0x0000FFFF)
#define ADC_JDR1_JDATA_0 ((uint32_t)0x00000001)
#define ADC_JDR1_JDATA_1 ((uint32_t)0x00000002)
#define ADC_JDR1_JDATA_2 ((uint32_t)0x00000004)
#define ADC_JDR1_JDATA_3 ((uint32_t)0x00000008)
#define ADC_JDR1_JDATA_4 ((uint32_t)0x00000010)
#define ADC_JDR1_JDATA_5 ((uint32_t)0x00000020)
#define ADC_JDR1_JDATA_6 ((uint32_t)0x00000040)
#define ADC_JDR1_JDATA_7 ((uint32_t)0x00000080)
#define ADC_JDR1_JDATA_8 ((uint32_t)0x00000100)
#define ADC_JDR1_JDATA_9 ((uint32_t)0x00000200)
#define ADC_JDR1_JDATA_10 ((uint32_t)0x00000400)
#define ADC_JDR1_JDATA_11 ((uint32_t)0x00000800)
#define ADC_JDR1_JDATA_12 ((uint32_t)0x00001000)
#define ADC_JDR1_JDATA_13 ((uint32_t)0x00002000)
#define ADC_JDR1_JDATA_14 ((uint32_t)0x00004000)
#define ADC_JDR1_JDATA_15 ((uint32_t)0x00008000)


#define ADC_JDR2_JDATA ((uint32_t)0x0000FFFF)
#define ADC_JDR2_JDATA_0 ((uint32_t)0x00000001)
#define ADC_JDR2_JDATA_1 ((uint32_t)0x00000002)
#define ADC_JDR2_JDATA_2 ((uint32_t)0x00000004)
#define ADC_JDR2_JDATA_3 ((uint32_t)0x00000008)
#define ADC_JDR2_JDATA_4 ((uint32_t)0x00000010)
#define ADC_JDR2_JDATA_5 ((uint32_t)0x00000020)
#define ADC_JDR2_JDATA_6 ((uint32_t)0x00000040)
#define ADC_JDR2_JDATA_7 ((uint32_t)0x00000080)
#define ADC_JDR2_JDATA_8 ((uint32_t)0x00000100)
#define ADC_JDR2_JDATA_9 ((uint32_t)0x00000200)
#define ADC_JDR2_JDATA_10 ((uint32_t)0x00000400)
#define ADC_JDR2_JDATA_11 ((uint32_t)0x00000800)
#define ADC_JDR2_JDATA_12 ((uint32_t)0x00001000)
#define ADC_JDR2_JDATA_13 ((uint32_t)0x00002000)
#define ADC_JDR2_JDATA_14 ((uint32_t)0x00004000)
#define ADC_JDR2_JDATA_15 ((uint32_t)0x00008000)


#define ADC_JDR3_JDATA ((uint32_t)0x0000FFFF)
#define ADC_JDR3_JDATA_0 ((uint32_t)0x00000001)
#define ADC_JDR3_JDATA_1 ((uint32_t)0x00000002)
#define ADC_JDR3_JDATA_2 ((uint32_t)0x00000004)
#define ADC_JDR3_JDATA_3 ((uint32_t)0x00000008)
#define ADC_JDR3_JDATA_4 ((uint32_t)0x00000010)
#define ADC_JDR3_JDATA_5 ((uint32_t)0x00000020)
#define ADC_JDR3_JDATA_6 ((uint32_t)0x00000040)
#define ADC_JDR3_JDATA_7 ((uint32_t)0x00000080)
#define ADC_JDR3_JDATA_8 ((uint32_t)0x00000100)
#define ADC_JDR3_JDATA_9 ((uint32_t)0x00000200)
#define ADC_JDR3_JDATA_10 ((uint32_t)0x00000400)
#define ADC_JDR3_JDATA_11 ((uint32_t)0x00000800)
#define ADC_JDR3_JDATA_12 ((uint32_t)0x00001000)
#define ADC_JDR3_JDATA_13 ((uint32_t)0x00002000)
#define ADC_JDR3_JDATA_14 ((uint32_t)0x00004000)
#define ADC_JDR3_JDATA_15 ((uint32_t)0x00008000)


#define ADC_JDR4_JDATA ((uint32_t)0x0000FFFF)
#define ADC_JDR4_JDATA_0 ((uint32_t)0x00000001)
#define ADC_JDR4_JDATA_1 ((uint32_t)0x00000002)
#define ADC_JDR4_JDATA_2 ((uint32_t)0x00000004)
#define ADC_JDR4_JDATA_3 ((uint32_t)0x00000008)
#define ADC_JDR4_JDATA_4 ((uint32_t)0x00000010)
#define ADC_JDR4_JDATA_5 ((uint32_t)0x00000020)
#define ADC_JDR4_JDATA_6 ((uint32_t)0x00000040)
#define ADC_JDR4_JDATA_7 ((uint32_t)0x00000080)
#define ADC_JDR4_JDATA_8 ((uint32_t)0x00000100)
#define ADC_JDR4_JDATA_9 ((uint32_t)0x00000200)
#define ADC_JDR4_JDATA_10 ((uint32_t)0x00000400)
#define ADC_JDR4_JDATA_11 ((uint32_t)0x00000800)
#define ADC_JDR4_JDATA_12 ((uint32_t)0x00001000)
#define ADC_JDR4_JDATA_13 ((uint32_t)0x00002000)
#define ADC_JDR4_JDATA_14 ((uint32_t)0x00004000)
#define ADC_JDR4_JDATA_15 ((uint32_t)0x00008000)


#define ADC_AWD2CR_AWD2CH ((uint32_t)0x0007FFFE)
#define ADC_AWD2CR_AWD2CH_0 ((uint32_t)0x00000002)
#define ADC_AWD2CR_AWD2CH_1 ((uint32_t)0x00000004)
#define ADC_AWD2CR_AWD2CH_2 ((uint32_t)0x00000008)
#define ADC_AWD2CR_AWD2CH_3 ((uint32_t)0x00000010)
#define ADC_AWD2CR_AWD2CH_4 ((uint32_t)0x00000020)
#define ADC_AWD2CR_AWD2CH_5 ((uint32_t)0x00000040)
#define ADC_AWD2CR_AWD2CH_6 ((uint32_t)0x00000080)
#define ADC_AWD2CR_AWD2CH_7 ((uint32_t)0x00000100)
#define ADC_AWD2CR_AWD2CH_8 ((uint32_t)0x00000200)
#define ADC_AWD2CR_AWD2CH_9 ((uint32_t)0x00000400)
#define ADC_AWD2CR_AWD2CH_10 ((uint32_t)0x00000800)
#define ADC_AWD2CR_AWD2CH_11 ((uint32_t)0x00001000)
#define ADC_AWD2CR_AWD2CH_12 ((uint32_t)0x00002000)
#define ADC_AWD2CR_AWD2CH_13 ((uint32_t)0x00004000)
#define ADC_AWD2CR_AWD2CH_14 ((uint32_t)0x00008000)
#define ADC_AWD2CR_AWD2CH_15 ((uint32_t)0x00010000)
#define ADC_AWD2CR_AWD2CH_16 ((uint32_t)0x00020000)
#define ADC_AWD2CR_AWD2CH_17 ((uint32_t)0x00030000)


#define ADC_AWD3CR_AWD3CH ((uint32_t)0x0007FFFE)
#define ADC_AWD3CR_AWD3CH_0 ((uint32_t)0x00000002)
#define ADC_AWD3CR_AWD3CH_1 ((uint32_t)0x00000004)
#define ADC_AWD3CR_AWD3CH_2 ((uint32_t)0x00000008)
#define ADC_AWD3CR_AWD3CH_3 ((uint32_t)0x00000010)
#define ADC_AWD3CR_AWD3CH_4 ((uint32_t)0x00000020)
#define ADC_AWD3CR_AWD3CH_5 ((uint32_t)0x00000040)
#define ADC_AWD3CR_AWD3CH_6 ((uint32_t)0x00000080)
#define ADC_AWD3CR_AWD3CH_7 ((uint32_t)0x00000100)
#define ADC_AWD3CR_AWD3CH_8 ((uint32_t)0x00000200)
#define ADC_AWD3CR_AWD3CH_9 ((uint32_t)0x00000400)
#define ADC_AWD3CR_AWD3CH_10 ((uint32_t)0x00000800)
#define ADC_AWD3CR_AWD3CH_11 ((uint32_t)0x00001000)
#define ADC_AWD3CR_AWD3CH_12 ((uint32_t)0x00002000)
#define ADC_AWD3CR_AWD3CH_13 ((uint32_t)0x00004000)
#define ADC_AWD3CR_AWD3CH_14 ((uint32_t)0x00008000)
#define ADC_AWD3CR_AWD3CH_15 ((uint32_t)0x00010000)
#define ADC_AWD3CR_AWD3CH_16 ((uint32_t)0x00020000)
#define ADC_AWD3CR_AWD3CH_17 ((uint32_t)0x00030000)


#define ADC_DIFSEL_DIFSEL ((uint32_t)0x0007FFFE)
#define ADC_DIFSEL_DIFSEL_0 ((uint32_t)0x00000002)
#define ADC_DIFSEL_DIFSEL_1 ((uint32_t)0x00000004)
#define ADC_DIFSEL_DIFSEL_2 ((uint32_t)0x00000008)
#define ADC_DIFSEL_DIFSEL_3 ((uint32_t)0x00000010)
#define ADC_DIFSEL_DIFSEL_4 ((uint32_t)0x00000020)
#define ADC_DIFSEL_DIFSEL_5 ((uint32_t)0x00000040)
#define ADC_DIFSEL_DIFSEL_6 ((uint32_t)0x00000080)
#define ADC_DIFSEL_DIFSEL_7 ((uint32_t)0x00000100)
#define ADC_DIFSEL_DIFSEL_8 ((uint32_t)0x00000200)
#define ADC_DIFSEL_DIFSEL_9 ((uint32_t)0x00000400)
#define ADC_DIFSEL_DIFSEL_10 ((uint32_t)0x00000800)
#define ADC_DIFSEL_DIFSEL_11 ((uint32_t)0x00001000)
#define ADC_DIFSEL_DIFSEL_12 ((uint32_t)0x00002000)
#define ADC_DIFSEL_DIFSEL_13 ((uint32_t)0x00004000)
#define ADC_DIFSEL_DIFSEL_14 ((uint32_t)0x00008000)
#define ADC_DIFSEL_DIFSEL_15 ((uint32_t)0x00010000)
#define ADC_DIFSEL_DIFSEL_16 ((uint32_t)0x00020000)
#define ADC_DIFSEL_DIFSEL_17 ((uint32_t)0x00030000)


#define ADC_CALFACT_CALFACT_S ((uint32_t)0x0000007F)
#define ADC_CALFACT_CALFACT_S_0 ((uint32_t)0x00000001)
#define ADC_CALFACT_CALFACT_S_1 ((uint32_t)0x00000002)
#define ADC_CALFACT_CALFACT_S_2 ((uint32_t)0x00000004)
#define ADC_CALFACT_CALFACT_S_3 ((uint32_t)0x00000008)
#define ADC_CALFACT_CALFACT_S_4 ((uint32_t)0x00000010)
#define ADC_CALFACT_CALFACT_S_5 ((uint32_t)0x00000020)
#define ADC_CALFACT_CALFACT_S_6 ((uint32_t)0x00000040)
#define ADC_CALFACT_CALFACT_D ((uint32_t)0x007F0000)
#define ADC_CALFACT_CALFACT_D_0 ((uint32_t)0x00010000)
#define ADC_CALFACT_CALFACT_D_1 ((uint32_t)0x00020000)
#define ADC_CALFACT_CALFACT_D_2 ((uint32_t)0x00040000)
#define ADC_CALFACT_CALFACT_D_3 ((uint32_t)0x00080000)
#define ADC_CALFACT_CALFACT_D_4 ((uint32_t)0x00100000)
#define ADC_CALFACT_CALFACT_D_5 ((uint32_t)0x00200000)
#define ADC_CALFACT_CALFACT_D_6 ((uint32_t)0x00400000)



#define ADC12_CSR_ADRDY_MST ((uint32_t)0x00000001)
#define ADC12_CSR_ADRDY_EOSMP_MST ((uint32_t)0x00000002)
#define ADC12_CSR_ADRDY_EOC_MST ((uint32_t)0x00000004)
#define ADC12_CSR_ADRDY_EOS_MST ((uint32_t)0x00000008)
#define ADC12_CSR_ADRDY_OVR_MST ((uint32_t)0x00000010)
#define ADC12_CSR_ADRDY_JEOC_MST ((uint32_t)0x00000020)
#define ADC12_CSR_ADRDY_JEOS_MST ((uint32_t)0x00000040)
#define ADC12_CSR_AWD1_MST ((uint32_t)0x00000080)
#define ADC12_CSR_AWD2_MST ((uint32_t)0x00000100)
#define ADC12_CSR_AWD3_MST ((uint32_t)0x00000200)
#define ADC12_CSR_JQOVF_MST ((uint32_t)0x00000400)
#define ADC12_CSR_ADRDY_SLV ((uint32_t)0x00010000)
#define ADC12_CSR_ADRDY_EOSMP_SLV ((uint32_t)0x00020000)
#define ADC12_CSR_ADRDY_EOC_SLV ((uint32_t)0x00040000)
#define ADC12_CSR_ADRDY_EOS_SLV ((uint32_t)0x00080000)
#define ADC12_CSR_ADRDY_OVR_SLV ((uint32_t)0x00100000)
#define ADC12_CSR_ADRDY_JEOC_SLV ((uint32_t)0x00200000)
#define ADC12_CSR_ADRDY_JEOS_SLV ((uint32_t)0x00400000)
#define ADC12_CSR_AWD1_SLV ((uint32_t)0x00800000)
#define ADC12_CSR_AWD2_SLV ((uint32_t)0x01000000)
#define ADC12_CSR_AWD3_SLV ((uint32_t)0x02000000)
#define ADC12_CSR_JQOVF_SLV ((uint32_t)0x04000000)


#define ADC34_CSR_ADRDY_MST ((uint32_t)0x00000001)
#define ADC34_CSR_ADRDY_EOSMP_MST ((uint32_t)0x00000002)
#define ADC34_CSR_ADRDY_EOC_MST ((uint32_t)0x00000004)
#define ADC34_CSR_ADRDY_EOS_MST ((uint32_t)0x00000008)
#define ADC34_CSR_ADRDY_OVR_MST ((uint32_t)0x00000010)
#define ADC34_CSR_ADRDY_JEOC_MST ((uint32_t)0x00000020)
#define ADC34_CSR_ADRDY_JEOS_MST ((uint32_t)0x00000040)
#define ADC34_CSR_AWD1_MST ((uint32_t)0x00000080)
#define ADC34_CSR_AWD2_MST ((uint32_t)0x00000100)
#define ADC34_CSR_AWD3_MST ((uint32_t)0x00000200)
#define ADC34_CSR_JQOVF_MST ((uint32_t)0x00000400)
#define ADC34_CSR_ADRDY_SLV ((uint32_t)0x00010000)
#define ADC34_CSR_ADRDY_EOSMP_SLV ((uint32_t)0x00020000)
#define ADC34_CSR_ADRDY_EOC_SLV ((uint32_t)0x00040000)
#define ADC34_CSR_ADRDY_EOS_SLV ((uint32_t)0x00080000)
#define ADC12_CSR_ADRDY_OVR_SLV ((uint32_t)0x00100000)
#define ADC34_CSR_ADRDY_JEOC_SLV ((uint32_t)0x00200000)
#define ADC34_CSR_ADRDY_JEOS_SLV ((uint32_t)0x00400000)
#define ADC34_CSR_AWD1_SLV ((uint32_t)0x00800000)
#define ADC34_CSR_AWD2_SLV ((uint32_t)0x01000000)
#define ADC34_CSR_AWD3_SLV ((uint32_t)0x02000000)
#define ADC34_CSR_JQOVF_SLV ((uint32_t)0x04000000)


#define ADC12_CCR_MULTI ((uint32_t)0x0000001F)
#define ADC12_CCR_MULTI_0 ((uint32_t)0x00000001)
#define ADC12_CCR_MULTI_1 ((uint32_t)0x00000002)
#define ADC12_CCR_MULTI_2 ((uint32_t)0x00000004)
#define ADC12_CCR_MULTI_3 ((uint32_t)0x00000008)
#define ADC12_CCR_MULTI_4 ((uint32_t)0x00000010)
#define ADC12_CCR_DELAY ((uint32_t)0x00000F00)
#define ADC12_CCR_DELAY_0 ((uint32_t)0x00000100)
#define ADC12_CCR_DELAY_1 ((uint32_t)0x00000200)
#define ADC12_CCR_DELAY_2 ((uint32_t)0x00000400)
#define ADC12_CCR_DELAY_3 ((uint32_t)0x00000800)
#define ADC12_CCR_DMACFG ((uint32_t)0x00002000)
#define ADC12_CCR_MDMA ((uint32_t)0x0000C000)
#define ADC12_CCR_MDMA_0 ((uint32_t)0x00004000)
#define ADC12_CCR_MDMA_1 ((uint32_t)0x00008000)
#define ADC12_CCR_CKMODE ((uint32_t)0x00030000)
#define ADC12_CCR_CKMODE_0 ((uint32_t)0x00010000)
#define ADC12_CCR_CKMODE_1 ((uint32_t)0x00020000)
#define ADC12_CCR_VREFEN ((uint32_t)0x00400000)
#define ADC12_CCR_TSEN ((uint32_t)0x00800000)
#define ADC12_CCR_VBATEN ((uint32_t)0x01000000)


#define ADC34_CCR_MULTI ((uint32_t)0x0000001F)
#define ADC34_CCR_MULTI_0 ((uint32_t)0x00000001)
#define ADC34_CCR_MULTI_1 ((uint32_t)0x00000002)
#define ADC34_CCR_MULTI_2 ((uint32_t)0x00000004)
#define ADC34_CCR_MULTI_3 ((uint32_t)0x00000008)
#define ADC34_CCR_MULTI_4 ((uint32_t)0x00000010)

#define ADC34_CCR_DELAY ((uint32_t)0x00000F00)
#define ADC34_CCR_DELAY_0 ((uint32_t)0x00000100)
#define ADC34_CCR_DELAY_1 ((uint32_t)0x00000200)
#define ADC34_CCR_DELAY_2 ((uint32_t)0x00000400)
#define ADC34_CCR_DELAY_3 ((uint32_t)0x00000800)

#define ADC34_CCR_DMACFG ((uint32_t)0x00002000)
#define ADC34_CCR_MDMA ((uint32_t)0x0000C000)
#define ADC34_CCR_MDMA_0 ((uint32_t)0x00004000)
#define ADC34_CCR_MDMA_1 ((uint32_t)0x00008000)

#define ADC34_CCR_CKMODE ((uint32_t)0x00030000)
#define ADC34_CCR_CKMODE_0 ((uint32_t)0x00010000)
#define ADC34_CCR_CKMODE_1 ((uint32_t)0x00020000)

#define ADC34_CCR_VREFEN ((uint32_t)0x00400000)


#define ADC12_CDR_RDATA_MST ((uint32_t)0x0000FFFF)
#define ADC12_CDR_RDATA_MST_0 ((uint32_t)0x00000001)
#define ADC12_CDR_RDATA_MST_1 ((uint32_t)0x00000002)
#define ADC12_CDR_RDATA_MST_2 ((uint32_t)0x00000004)
#define ADC12_CDR_RDATA_MST_3 ((uint32_t)0x00000008)
#define ADC12_CDR_RDATA_MST_4 ((uint32_t)0x00000010)
#define ADC12_CDR_RDATA_MST_5 ((uint32_t)0x00000020)
#define ADC12_CDR_RDATA_MST_6 ((uint32_t)0x00000040)
#define ADC12_CDR_RDATA_MST_7 ((uint32_t)0x00000080)
#define ADC12_CDR_RDATA_MST_8 ((uint32_t)0x00000100)
#define ADC12_CDR_RDATA_MST_9 ((uint32_t)0x00000200)
#define ADC12_CDR_RDATA_MST_10 ((uint32_t)0x00000400)
#define ADC12_CDR_RDATA_MST_11 ((uint32_t)0x00000800)
#define ADC12_CDR_RDATA_MST_12 ((uint32_t)0x00001000)
#define ADC12_CDR_RDATA_MST_13 ((uint32_t)0x00002000)
#define ADC12_CDR_RDATA_MST_14 ((uint32_t)0x00004000)
#define ADC12_CDR_RDATA_MST_15 ((uint32_t)0x00008000)

#define ADC12_CDR_RDATA_SLV ((uint32_t)0xFFFF0000)
#define ADC12_CDR_RDATA_SLV_0 ((uint32_t)0x00010000)
#define ADC12_CDR_RDATA_SLV_1 ((uint32_t)0x00020000)
#define ADC12_CDR_RDATA_SLV_2 ((uint32_t)0x00040000)
#define ADC12_CDR_RDATA_SLV_3 ((uint32_t)0x00080000)
#define ADC12_CDR_RDATA_SLV_4 ((uint32_t)0x00100000)
#define ADC12_CDR_RDATA_SLV_5 ((uint32_t)0x00200000)
#define ADC12_CDR_RDATA_SLV_6 ((uint32_t)0x00400000)
#define ADC12_CDR_RDATA_SLV_7 ((uint32_t)0x00800000)
#define ADC12_CDR_RDATA_SLV_8 ((uint32_t)0x01000000)
#define ADC12_CDR_RDATA_SLV_9 ((uint32_t)0x02000000)
#define ADC12_CDR_RDATA_SLV_10 ((uint32_t)0x04000000)
#define ADC12_CDR_RDATA_SLV_11 ((uint32_t)0x08000000)
#define ADC12_CDR_RDATA_SLV_12 ((uint32_t)0x10000000)
#define ADC12_CDR_RDATA_SLV_13 ((uint32_t)0x20000000)
#define ADC12_CDR_RDATA_SLV_14 ((uint32_t)0x40000000)
#define ADC12_CDR_RDATA_SLV_15 ((uint32_t)0x80000000)


#define ADC34_CDR_RDATA_MST ((uint32_t)0x0000FFFF)
#define ADC34_CDR_RDATA_MST_0 ((uint32_t)0x00000001)
#define ADC34_CDR_RDATA_MST_1 ((uint32_t)0x00000002)
#define ADC34_CDR_RDATA_MST_2 ((uint32_t)0x00000004)
#define ADC34_CDR_RDATA_MST_3 ((uint32_t)0x00000008)
#define ADC34_CDR_RDATA_MST_4 ((uint32_t)0x00000010)
#define ADC34_CDR_RDATA_MST_5 ((uint32_t)0x00000020)
#define ADC34_CDR_RDATA_MST_6 ((uint32_t)0x00000040)
#define ADC34_CDR_RDATA_MST_7 ((uint32_t)0x00000080)
#define ADC34_CDR_RDATA_MST_8 ((uint32_t)0x00000100)
#define ADC34_CDR_RDATA_MST_9 ((uint32_t)0x00000200)
#define ADC34_CDR_RDATA_MST_10 ((uint32_t)0x00000400)
#define ADC34_CDR_RDATA_MST_11 ((uint32_t)0x00000800)
#define ADC34_CDR_RDATA_MST_12 ((uint32_t)0x00001000)
#define ADC34_CDR_RDATA_MST_13 ((uint32_t)0x00002000)
#define ADC34_CDR_RDATA_MST_14 ((uint32_t)0x00004000)
#define ADC34_CDR_RDATA_MST_15 ((uint32_t)0x00008000)

#define ADC34_CDR_RDATA_SLV ((uint32_t)0xFFFF0000)
#define ADC34_CDR_RDATA_SLV_0 ((uint32_t)0x00010000)
#define ADC34_CDR_RDATA_SLV_1 ((uint32_t)0x00020000)
#define ADC34_CDR_RDATA_SLV_2 ((uint32_t)0x00040000)
#define ADC34_CDR_RDATA_SLV_3 ((uint32_t)0x00080000)
#define ADC34_CDR_RDATA_SLV_4 ((uint32_t)0x00100000)
#define ADC34_CDR_RDATA_SLV_5 ((uint32_t)0x00200000)
#define ADC34_CDR_RDATA_SLV_6 ((uint32_t)0x00400000)
#define ADC34_CDR_RDATA_SLV_7 ((uint32_t)0x00800000)
#define ADC34_CDR_RDATA_SLV_8 ((uint32_t)0x01000000)
#define ADC34_CDR_RDATA_SLV_9 ((uint32_t)0x02000000)
#define ADC34_CDR_RDATA_SLV_10 ((uint32_t)0x04000000)
#define ADC34_CDR_RDATA_SLV_11 ((uint32_t)0x08000000)
#define ADC34_CDR_RDATA_SLV_12 ((uint32_t)0x10000000)
#define ADC34_CDR_RDATA_SLV_13 ((uint32_t)0x20000000)
#define ADC34_CDR_RDATA_SLV_14 ((uint32_t)0x40000000)
#define ADC34_CDR_RDATA_SLV_15 ((uint32_t)0x80000000)







#define COMP1_CSR_COMP1EN ((uint32_t)0x00000001)
#define COMP1_CSR_COMP1SW1 ((uint32_t)0x00000002)
#define COMP1_CSR_COMP1MODE ((uint32_t)0x0000000C)
#define COMP1_CSR_COMP1MODE_0 ((uint32_t)0x00000004)
#define COMP1_CSR_COMP1MODE_1 ((uint32_t)0x00000008)
#define COMP1_CSR_COMP1INSEL ((uint32_t)0x00000070)
#define COMP1_CSR_COMP1INSEL_0 ((uint32_t)0x00000010)
#define COMP1_CSR_COMP1INSEL_1 ((uint32_t)0x00000020)
#define COMP1_CSR_COMP1INSEL_2 ((uint32_t)0x00000040)
#define COMP1_CSR_COMP1NONINSEL ((uint32_t)0x00000080)
#define COMP1_CSR_COMP1OUTSEL ((uint32_t)0x00003C00)
#define COMP1_CSR_COMP1OUTSEL_0 ((uint32_t)0x00000400)
#define COMP1_CSR_COMP1OUTSEL_1 ((uint32_t)0x00000800)
#define COMP1_CSR_COMP1OUTSEL_2 ((uint32_t)0x00001000)
#define COMP1_CSR_COMP1OUTSEL_3 ((uint32_t)0x00002000)
#define COMP1_CSR_COMP1POL ((uint32_t)0x00008000)
#define COMP1_CSR_COMP1HYST ((uint32_t)0x00030000)
#define COMP1_CSR_COMP1HYST_0 ((uint32_t)0x00010000)
#define COMP1_CSR_COMP1HYST_1 ((uint32_t)0x00020000)
#define COMP1_CSR_COMP1BLANKING ((uint32_t)0x000C0000)
#define COMP1_CSR_COMP1BLANKING_0 ((uint32_t)0x00040000)
#define COMP1_CSR_COMP1BLANKING_1 ((uint32_t)0x00080000)
#define COMP1_CSR_COMP1BLANKING_2 ((uint32_t)0x00100000)
#define COMP1_CSR_COMP1OUT ((uint32_t)0x40000000)
#define COMP1_CSR_COMP1LOCK ((uint32_t)0x80000000)


#define COMP2_CSR_COMP2EN ((uint32_t)0x00000001)
#define COMP2_CSR_COMP2MODE ((uint32_t)0x0000000C)
#define COMP2_CSR_COMP2MODE_0 ((uint32_t)0x00000004)
#define COMP2_CSR_COMP2MODE_1 ((uint32_t)0x00000008)
#define COMP2_CSR_COMP2INSEL ((uint32_t)0x00000070)
#define COMP2_CSR_COMP2INSEL_0 ((uint32_t)0x00000010)
#define COMP2_CSR_COMP2INSEL_1 ((uint32_t)0x00000020)
#define COMP2_CSR_COMP2INSEL_2 ((uint32_t)0x00000040)
#define COMP2_CSR_COMP2NONINSEL ((uint32_t)0x00000080)
#define COMP2_CSR_COMP2WNDWEN ((uint32_t)0x00000200)
#define COMP2_CSR_COMP2OUTSEL ((uint32_t)0x00003C00)
#define COMP2_CSR_COMP2OUTSEL_0 ((uint32_t)0x00000400)
#define COMP2_CSR_COMP2OUTSEL_1 ((uint32_t)0x00000800)
#define COMP2_CSR_COMP2OUTSEL_2 ((uint32_t)0x00001000)
#define COMP2_CSR_COMP2OUTSEL_3 ((uint32_t)0x00002000)
#define COMP2_CSR_COMP2POL ((uint32_t)0x00008000)
#define COMP2_CSR_COMP2HYST ((uint32_t)0x00030000)
#define COMP2_CSR_COMP2HYST_0 ((uint32_t)0x00010000)
#define COMP2_CSR_COMP2HYST_1 ((uint32_t)0x00020000)
#define COMP2_CSR_COMP2BLANKING ((uint32_t)0x000C0000)
#define COMP2_CSR_COMP2BLANKING_0 ((uint32_t)0x00040000)
#define COMP2_CSR_COMP2BLANKING_1 ((uint32_t)0x00080000)
#define COMP2_CSR_COMP2BLANKING_2 ((uint32_t)0x00100000)
#define COMP2_CSR_COMP2OUT ((uint32_t)0x40000000)
#define COMP2_CSR_COMP2LOCK ((uint32_t)0x80000000)


#define COMP3_CSR_COMP3EN ((uint32_t)0x00000001)
#define COMP3_CSR_COMP3MODE ((uint32_t)0x0000000C)
#define COMP3_CSR_COMP3MODE_0 ((uint32_t)0x00000004)
#define COMP3_CSR_COMP3MODE_1 ((uint32_t)0x00000008)
#define COMP3_CSR_COMP3INSEL ((uint32_t)0x00000070)
#define COMP3_CSR_COMP3INSEL_0 ((uint32_t)0x00000010)
#define COMP3_CSR_COMP3INSEL_1 ((uint32_t)0x00000020)
#define COMP3_CSR_COMP3INSEL_2 ((uint32_t)0x00000040)
#define COMP3_CSR_COMP3NONINSEL ((uint32_t)0x00000080)
#define COMP3_CSR_COMP3OUTSEL ((uint32_t)0x00003C00)
#define COMP3_CSR_COMP3OUTSEL_0 ((uint32_t)0x00000400)
#define COMP3_CSR_COMP3OUTSEL_1 ((uint32_t)0x00000800)
#define COMP3_CSR_COMP3OUTSEL_2 ((uint32_t)0x00001000)
#define COMP3_CSR_COMP3OUTSEL_3 ((uint32_t)0x00002000)
#define COMP3_CSR_COMP3POL ((uint32_t)0x00008000)
#define COMP3_CSR_COMP3HYST ((uint32_t)0x00030000)
#define COMP3_CSR_COMP3HYST_0 ((uint32_t)0x00010000)
#define COMP3_CSR_COMP3HYST_1 ((uint32_t)0x00020000)
#define COMP3_CSR_COMP3BLANKING ((uint32_t)0x000C0000)
#define COMP3_CSR_COMP3BLANKING_0 ((uint32_t)0x00040000)
#define COMP3_CSR_COMP3BLANKING_1 ((uint32_t)0x00080000)
#define COMP3_CSR_COMP3BLANKING_2 ((uint32_t)0x00100000)
#define COMP3_CSR_COMP3OUT ((uint32_t)0x40000000)
#define COMP3_CSR_COMP3LOCK ((uint32_t)0x80000000)


#define COMP4_CSR_COMP4EN ((uint32_t)0x00000001)
#define COMP4_CSR_COMP4MODE ((uint32_t)0x0000000C)
#define COMP4_CSR_COMP4MODE_0 ((uint32_t)0x00000004)
#define COMP4_CSR_COMP4MODE_1 ((uint32_t)0x00000008)
#define COMP4_CSR_COMP4INSEL ((uint32_t)0x00000070)
#define COMP4_CSR_COMP4INSEL_0 ((uint32_t)0x00000010)
#define COMP4_CSR_COMP4INSEL_1 ((uint32_t)0x00000020)
#define COMP4_CSR_COMP4INSEL_2 ((uint32_t)0x00000040)
#define COMP4_CSR_COMP4NONINSEL ((uint32_t)0x00000080)
#define COMP4_CSR_COMP4WNDWEN ((uint32_t)0x00000200)
#define COMP4_CSR_COMP4OUTSEL ((uint32_t)0x00003C00)
#define COMP4_CSR_COMP4OUTSEL_0 ((uint32_t)0x00000400)
#define COMP4_CSR_COMP4OUTSEL_1 ((uint32_t)0x00000800)
#define COMP4_CSR_COMP4OUTSEL_2 ((uint32_t)0x00001000)
#define COMP4_CSR_COMP4OUTSEL_3 ((uint32_t)0x00002000)
#define COMP4_CSR_COMP4POL ((uint32_t)0x00008000)
#define COMP4_CSR_COMP4HYST ((uint32_t)0x00030000)
#define COMP4_CSR_COMP4HYST_0 ((uint32_t)0x00010000)
#define COMP4_CSR_COMP4HYST_1 ((uint32_t)0x00020000)
#define COMP4_CSR_COMP4BLANKING ((uint32_t)0x000C0000)
#define COMP4_CSR_COMP4BLANKING_0 ((uint32_t)0x00040000)
#define COMP4_CSR_COMP4BLANKING_1 ((uint32_t)0x00080000)
#define COMP4_CSR_COMP4BLANKING_2 ((uint32_t)0x00100000)
#define COMP4_CSR_COMP4OUT ((uint32_t)0x40000000)
#define COMP4_CSR_COMP4LOCK ((uint32_t)0x80000000)


#define COMP5_CSR_COMP5EN ((uint32_t)0x00000001)
#define COMP5_CSR_COMP5MODE ((uint32_t)0x0000000C)
#define COMP5_CSR_COMP5MODE_0 ((uint32_t)0x00000004)
#define COMP5_CSR_COMP5MODE_1 ((uint32_t)0x00000008)
#define COMP5_CSR_COMP5INSEL ((uint32_t)0x00000070)
#define COMP5_CSR_COMP5INSEL_0 ((uint32_t)0x00000010)
#define COMP5_CSR_COMP5INSEL_1 ((uint32_t)0x00000020)
#define COMP5_CSR_COMP5INSEL_2 ((uint32_t)0x00000040)
#define COMP5_CSR_COMP5NONINSEL ((uint32_t)0x00000080)
#define COMP5_CSR_COMP5OUTSEL ((uint32_t)0x00003C00)
#define COMP5_CSR_COMP5OUTSEL_0 ((uint32_t)0x00000400)
#define COMP5_CSR_COMP5OUTSEL_1 ((uint32_t)0x00000800)
#define COMP5_CSR_COMP5OUTSEL_2 ((uint32_t)0x00001000)
#define COMP5_CSR_COMP5OUTSEL_3 ((uint32_t)0x00002000)
#define COMP5_CSR_COMP5POL ((uint32_t)0x00008000)
#define COMP5_CSR_COMP5HYST ((uint32_t)0x00030000)
#define COMP5_CSR_COMP5HYST_0 ((uint32_t)0x00010000)
#define COMP5_CSR_COMP5HYST_1 ((uint32_t)0x00020000)
#define COMP5_CSR_COMP5BLANKING ((uint32_t)0x000C0000)
#define COMP5_CSR_COMP5BLANKING_0 ((uint32_t)0x00040000)
#define COMP5_CSR_COMP5BLANKING_1 ((uint32_t)0x00080000)
#define COMP5_CSR_COMP5BLANKING_2 ((uint32_t)0x00100000)
#define COMP5_CSR_COMP5OUT ((uint32_t)0x40000000)
#define COMP5_CSR_COMP5LOCK ((uint32_t)0x80000000)


#define COMP6_CSR_COMP6EN ((uint32_t)0x00000001)
#define COMP6_CSR_COMP6MODE ((uint32_t)0x0000000C)
#define COMP6_CSR_COMP6MODE_0 ((uint32_t)0x00000004)
#define COMP6_CSR_COMP6MODE_1 ((uint32_t)0x00000008)
#define COMP6_CSR_COMP6INSEL ((uint32_t)0x00000070)
#define COMP6_CSR_COMP6INSEL_0 ((uint32_t)0x00000010)
#define COMP6_CSR_COMP6INSEL_1 ((uint32_t)0x00000020)
#define COMP6_CSR_COMP6INSEL_2 ((uint32_t)0x00000040)
#define COMP6_CSR_COMP6NONINSEL ((uint32_t)0x00000080)
#define COMP6_CSR_COMP6WNDWEN ((uint32_t)0x00000200)
#define COMP6_CSR_COMP6OUTSEL ((uint32_t)0x00003C00)
#define COMP6_CSR_COMP6OUTSEL_0 ((uint32_t)0x00000400)
#define COMP6_CSR_COMP6OUTSEL_1 ((uint32_t)0x00000800)
#define COMP6_CSR_COMP6OUTSEL_2 ((uint32_t)0x00001000)
#define COMP6_CSR_COMP6OUTSEL_3 ((uint32_t)0x00002000)
#define COMP6_CSR_COMP6POL ((uint32_t)0x00008000)
#define COMP6_CSR_COMP6HYST ((uint32_t)0x00030000)
#define COMP6_CSR_COMP6HYST_0 ((uint32_t)0x00010000)
#define COMP6_CSR_COMP6HYST_1 ((uint32_t)0x00020000)
#define COMP6_CSR_COMP6BLANKING ((uint32_t)0x000C0000)
#define COMP6_CSR_COMP6BLANKING_0 ((uint32_t)0x00040000)
#define COMP6_CSR_COMP6BLANKING_1 ((uint32_t)0x00080000)
#define COMP6_CSR_COMP6BLANKING_2 ((uint32_t)0x00100000)
#define COMP6_CSR_COMP6OUT ((uint32_t)0x40000000)
#define COMP6_CSR_COMP6LOCK ((uint32_t)0x80000000)


#define COMP7_CSR_COMP7EN ((uint32_t)0x00000001)
#define COMP7_CSR_COMP7MODE ((uint32_t)0x0000000C)
#define COMP7_CSR_COMP7MODE_0 ((uint32_t)0x00000004)
#define COMP7_CSR_COMP7MODE_1 ((uint32_t)0x00000008)
#define COMP7_CSR_COMP7INSEL ((uint32_t)0x00000070)
#define COMP7_CSR_COMP7INSEL_0 ((uint32_t)0x00000010)
#define COMP7_CSR_COMP7INSEL_1 ((uint32_t)0x00000020)
#define COMP7_CSR_COMP7INSEL_2 ((uint32_t)0x00000040)
#define COMP7_CSR_COMP7NONINSEL ((uint32_t)0x00000080)
#define COMP7_CSR_COMP7OUTSEL ((uint32_t)0x00003C00)
#define COMP7_CSR_COMP7OUTSEL_0 ((uint32_t)0x00000400)
#define COMP7_CSR_COMP7OUTSEL_1 ((uint32_t)0x00000800)
#define COMP7_CSR_COMP7OUTSEL_2 ((uint32_t)0x00001000)
#define COMP7_CSR_COMP7OUTSEL_3 ((uint32_t)0x00002000)
#define COMP7_CSR_COMP7POL ((uint32_t)0x00008000)
#define COMP7_CSR_COMP7HYST ((uint32_t)0x00030000)
#define COMP7_CSR_COMP7HYST_0 ((uint32_t)0x00010000)
#define COMP7_CSR_COMP7HYST_1 ((uint32_t)0x00020000)
#define COMP7_CSR_COMP7BLANKING ((uint32_t)0x000C0000)
#define COMP7_CSR_COMP7BLANKING_0 ((uint32_t)0x00040000)
#define COMP7_CSR_COMP7BLANKING_1 ((uint32_t)0x00080000)
#define COMP7_CSR_COMP7BLANKING_2 ((uint32_t)0x00100000)
#define COMP7_CSR_COMP7OUT ((uint32_t)0x40000000)
#define COMP7_CSR_COMP7LOCK ((uint32_t)0x80000000)


#define COMP_CSR_COMPxEN ((uint32_t)0x00000001)
#define COMP_CSR_COMP1SW1 ((uint32_t)0x00000002)
#define COMP_CSR_COMPxMODE ((uint32_t)0x0000000C)
#define COMP_CSR_COMPxMODE_0 ((uint32_t)0x00000004)
#define COMP_CSR_COMPxMODE_1 ((uint32_t)0x00000008)
#define COMP_CSR_COMPxINSEL ((uint32_t)0x00000070)
#define COMP_CSR_COMPxINSEL_0 ((uint32_t)0x00000010)
#define COMP_CSR_COMPxINSEL_1 ((uint32_t)0x00000020)
#define COMP_CSR_COMPxINSEL_2 ((uint32_t)0x00000040)
#define COMP_CSR_COMPxNONINSEL ((uint32_t)0x00000080)
#define COMP_CSR_COMPxWNDWEN ((uint32_t)0x00000200)
#define COMP_CSR_COMPxOUTSEL ((uint32_t)0x00003C00)
#define COMP_CSR_COMPxOUTSEL_0 ((uint32_t)0x00000400)
#define COMP_CSR_COMPxOUTSEL_1 ((uint32_t)0x00000800)
#define COMP_CSR_COMPxOUTSEL_2 ((uint32_t)0x00001000)
#define COMP_CSR_COMPxOUTSEL_3 ((uint32_t)0x00002000)
#define COMP_CSR_COMPxPOL ((uint32_t)0x00008000)
#define COMP_CSR_COMPxHYST ((uint32_t)0x00030000)
#define COMP_CSR_COMPxHYST_0 ((uint32_t)0x00010000)
#define COMP_CSR_COMPxHYST_1 ((uint32_t)0x00020000)
#define COMP_CSR_COMPxBLANKING ((uint32_t)0x000C0000)
#define COMP_CSR_COMPxBLANKING_0 ((uint32_t)0x00040000)
#define COMP_CSR_COMPxBLANKING_1 ((uint32_t)0x00080000)
#define COMP_CSR_COMPxBLANKING_2 ((uint32_t)0x00100000)
#define COMP_CSR_COMPxINSEL_3 ((uint32_t)0x00400000)
#define COMP_CSR_COMPxOUT ((uint32_t)0x40000000)
#define COMP_CSR_COMPxLOCK ((uint32_t)0x80000000)







#define OPAMP1_CSR_OPAMP1EN ((uint32_t)0x00000001)
#define OPAMP1_CSR_FORCEVP ((uint32_t)0x00000002)
#define OPAMP1_CSR_VPSEL ((uint32_t)0x0000000C)
#define OPAMP1_CSR_VPSEL_0 ((uint32_t)0x00000004)
#define OPAMP1_CSR_VPSEL_1 ((uint32_t)0x00000008)
#define OPAMP1_CSR_VMSEL ((uint32_t)0x00000060)
#define OPAMP1_CSR_VMSEL_0 ((uint32_t)0x00000020)
#define OPAMP1_CSR_VMSEL_1 ((uint32_t)0x00000040)
#define OPAMP1_CSR_TCMEN ((uint32_t)0x00000080)
#define OPAMP1_CSR_VMSSEL ((uint32_t)0x00000100)
#define OPAMP1_CSR_VPSSEL ((uint32_t)0x00000600)
#define OPAMP1_CSR_VPSSEL_0 ((uint32_t)0x00000200)
#define OPAMP1_CSR_VPSSEL_1 ((uint32_t)0x00000400)
#define OPAMP1_CSR_CALON ((uint32_t)0x00000800)
#define OPAMP1_CSR_CALSEL ((uint32_t)0x00003000)
#define OPAMP1_CSR_CALSEL_0 ((uint32_t)0x00001000)
#define OPAMP1_CSR_CALSEL_1 ((uint32_t)0x00002000)
#define OPAMP1_CSR_PGGAIN ((uint32_t)0x0003C000)
#define OPAMP1_CSR_PGGAIN_0 ((uint32_t)0x00004000)
#define OPAMP1_CSR_PGGAIN_1 ((uint32_t)0x00008000)
#define OPAMP1_CSR_PGGAIN_2 ((uint32_t)0x00010000)
#define OPAMP1_CSR_PGGAIN_3 ((uint32_t)0x00020000)
#define OPAMP1_CSR_USERTRIM ((uint32_t)0x00040000)
#define OPAMP1_CSR_TRIMOFFSETP ((uint32_t)0x00F80000)
#define OPAMP1_CSR_TRIMOFFSETN ((uint32_t)0x1F000000)
#define OPAMP1_CSR_TSTREF ((uint32_t)0x20000000)
#define OPAMP1_CSR_OUTCAL ((uint32_t)0x40000000)
#define OPAMP1_CSR_LOCK ((uint32_t)0x80000000)


#define OPAMP2_CSR_OPAMP2EN ((uint32_t)0x00000001)
#define OPAMP2_CSR_FORCEVP ((uint32_t)0x00000002)
#define OPAMP2_CSR_VPSEL ((uint32_t)0x0000000C)
#define OPAMP2_CSR_VPSEL_0 ((uint32_t)0x00000004)
#define OPAMP2_CSR_VPSEL_1 ((uint32_t)0x00000008)
#define OPAMP2_CSR_VMSEL ((uint32_t)0x00000060)
#define OPAMP2_CSR_VMSEL_0 ((uint32_t)0x00000020)
#define OPAMP2_CSR_VMSEL_1 ((uint32_t)0x00000040)
#define OPAMP2_CSR_TCMEN ((uint32_t)0x00000080)
#define OPAMP2_CSR_VMSSEL ((uint32_t)0x00000100)
#define OPAMP2_CSR_VPSSEL ((uint32_t)0x00000600)
#define OPAMP2_CSR_VPSSEL_0 ((uint32_t)0x00000200)
#define OPAMP2_CSR_VPSSEL_1 ((uint32_t)0x00000400)
#define OPAMP2_CSR_CALON ((uint32_t)0x00000800)
#define OPAMP2_CSR_CALSEL ((uint32_t)0x00003000)
#define OPAMP2_CSR_CALSEL_0 ((uint32_t)0x00001000)
#define OPAMP2_CSR_CALSEL_1 ((uint32_t)0x00002000)
#define OPAMP2_CSR_PGGAIN ((uint32_t)0x0003C000)
#define OPAMP2_CSR_PGGAIN_0 ((uint32_t)0x00004000)
#define OPAMP2_CSR_PGGAIN_1 ((uint32_t)0x00008000)
#define OPAMP2_CSR_PGGAIN_2 ((uint32_t)0x00010000)
#define OPAMP2_CSR_PGGAIN_3 ((uint32_t)0x00020000)
#define OPAMP2_CSR_USERTRIM ((uint32_t)0x00040000)
#define OPAMP2_CSR_TRIMOFFSETP ((uint32_t)0x00F80000)
#define OPAMP2_CSR_TRIMOFFSETN ((uint32_t)0x1F000000)
#define OPAMP2_CSR_TSTREF ((uint32_t)0x20000000)
#define OPAMP2_CSR_OUTCAL ((uint32_t)0x40000000)
#define OPAMP2_CSR_LOCK ((uint32_t)0x80000000)


#define OPAMP3_CSR_OPAMP3EN ((uint32_t)0x00000001)
#define OPAMP3_CSR_FORCEVP ((uint32_t)0x00000002)
#define OPAMP3_CSR_VPSEL ((uint32_t)0x0000000C)
#define OPAMP3_CSR_VPSEL_0 ((uint32_t)0x00000004)
#define OPAMP3_CSR_VPSEL_1 ((uint32_t)0x00000008)
#define OPAMP3_CSR_VMSEL ((uint32_t)0x00000060)
#define OPAMP3_CSR_VMSEL_0 ((uint32_t)0x00000020)
#define OPAMP3_CSR_VMSEL_1 ((uint32_t)0x00000040)
#define OPAMP3_CSR_TCMEN ((uint32_t)0x00000080)
#define OPAMP3_CSR_VMSSEL ((uint32_t)0x00000100)
#define OPAMP3_CSR_VPSSEL ((uint32_t)0x00000600)
#define OPAMP3_CSR_VPSSEL_0 ((uint32_t)0x00000200)
#define OPAMP3_CSR_VPSSEL_1 ((uint32_t)0x00000400)
#define OPAMP3_CSR_CALON ((uint32_t)0x00000800)
#define OPAMP3_CSR_CALSEL ((uint32_t)0x00003000)
#define OPAMP3_CSR_CALSEL_0 ((uint32_t)0x00001000)
#define OPAMP3_CSR_CALSEL_1 ((uint32_t)0x00002000)
#define OPAMP3_CSR_PGGAIN ((uint32_t)0x0003C000)
#define OPAMP3_CSR_PGGAIN_0 ((uint32_t)0x00004000)
#define OPAMP3_CSR_PGGAIN_1 ((uint32_t)0x00008000)
#define OPAMP3_CSR_PGGAIN_2 ((uint32_t)0x00010000)
#define OPAMP3_CSR_PGGAIN_3 ((uint32_t)0x00020000)
#define OPAMP3_CSR_USERTRIM ((uint32_t)0x00040000)
#define OPAMP3_CSR_TRIMOFFSETP ((uint32_t)0x00F80000)
#define OPAMP3_CSR_TRIMOFFSETN ((uint32_t)0x1F000000)
#define OPAMP3_CSR_TSTREF ((uint32_t)0x20000000)
#define OPAMP3_CSR_OUTCAL ((uint32_t)0x40000000)
#define OPAMP3_CSR_LOCK ((uint32_t)0x80000000)


#define OPAMP4_CSR_OPAMP4EN ((uint32_t)0x00000001)
#define OPAMP4_CSR_FORCEVP ((uint32_t)0x00000002)
#define OPAMP4_CSR_VPSEL ((uint32_t)0x0000000C)
#define OPAMP4_CSR_VPSEL_0 ((uint32_t)0x00000004)
#define OPAMP4_CSR_VPSEL_1 ((uint32_t)0x00000008)
#define OPAMP4_CSR_VMSEL ((uint32_t)0x00000060)
#define OPAMP4_CSR_VMSEL_0 ((uint32_t)0x00000020)
#define OPAMP4_CSR_VMSEL_1 ((uint32_t)0x00000040)
#define OPAMP4_CSR_TCMEN ((uint32_t)0x00000080)
#define OPAMP4_CSR_VMSSEL ((uint32_t)0x00000100)
#define OPAMP4_CSR_VPSSEL ((uint32_t)0x00000600)
#define OPAMP4_CSR_VPSSEL_0 ((uint32_t)0x00000200)
#define OPAMP4_CSR_VPSSEL_1 ((uint32_t)0x00000400)
#define OPAMP4_CSR_CALON ((uint32_t)0x00000800)
#define OPAMP4_CSR_CALSEL ((uint32_t)0x00003000)
#define OPAMP4_CSR_CALSEL_0 ((uint32_t)0x00001000)
#define OPAMP4_CSR_CALSEL_1 ((uint32_t)0x00002000)
#define OPAMP4_CSR_PGGAIN ((uint32_t)0x0003C000)
#define OPAMP4_CSR_PGGAIN_0 ((uint32_t)0x00004000)
#define OPAMP4_CSR_PGGAIN_1 ((uint32_t)0x00008000)
#define OPAMP4_CSR_PGGAIN_2 ((uint32_t)0x00010000)
#define OPAMP4_CSR_PGGAIN_3 ((uint32_t)0x00020000)
#define OPAMP4_CSR_USERTRIM ((uint32_t)0x00040000)
#define OPAMP4_CSR_TRIMOFFSETP ((uint32_t)0x00F80000)
#define OPAMP4_CSR_TRIMOFFSETN ((uint32_t)0x1F000000)
#define OPAMP4_CSR_TSTREF ((uint32_t)0x20000000)
#define OPAMP4_CSR_OUTCAL ((uint32_t)0x40000000)
#define OPAMP4_CSR_LOCK ((uint32_t)0x80000000)


#define OPAMP_CSR_OPAMPxEN ((uint32_t)0x00000001)
#define OPAMP_CSR_FORCEVP ((uint32_t)0x00000002)
#define OPAMP_CSR_VPSEL ((uint32_t)0x0000000C)
#define OPAMP_CSR_VPSEL_0 ((uint32_t)0x00000004)
#define OPAMP_CSR_VPSEL_1 ((uint32_t)0x00000008)
#define OPAMP_CSR_VMSEL ((uint32_t)0x00000060)
#define OPAMP_CSR_VMSEL_0 ((uint32_t)0x00000020)
#define OPAMP_CSR_VMSEL_1 ((uint32_t)0x00000040)
#define OPAMP_CSR_TCMEN ((uint32_t)0x00000080)
#define OPAMP_CSR_VMSSEL ((uint32_t)0x00000100)
#define OPAMP_CSR_VPSSEL ((uint32_t)0x00000600)
#define OPAMP_CSR_VPSSEL_0 ((uint32_t)0x00000200)
#define OPAMP_CSR_VPSSEL_1 ((uint32_t)0x00000400)
#define OPAMP_CSR_CALON ((uint32_t)0x00000800)
#define OPAMP_CSR_CALSEL ((uint32_t)0x00003000)
#define OPAMP_CSR_CALSEL_0 ((uint32_t)0x00001000)
#define OPAMP_CSR_CALSEL_1 ((uint32_t)0x00002000)
#define OPAMP_CSR_PGGAIN ((uint32_t)0x0003C000)
#define OPAMP_CSR_PGGAIN_0 ((uint32_t)0x00004000)
#define OPAMP_CSR_PGGAIN_1 ((uint32_t)0x00008000)
#define OPAMP_CSR_PGGAIN_2 ((uint32_t)0x00010000)
#define OPAMP_CSR_PGGAIN_3 ((uint32_t)0x00020000)
#define OPAMP_CSR_USERTRIM ((uint32_t)0x00040000)
#define OPAMP_CSR_TRIMOFFSETP ((uint32_t)0x00F80000)
#define OPAMP_CSR_TRIMOFFSETN ((uint32_t)0x1F000000)
#define OPAMP_CSR_TSTREF ((uint32_t)0x20000000)
#define OPAMP_CSR_OUTCAL ((uint32_t)0x40000000)
#define OPAMP_CSR_LOCK ((uint32_t)0x80000000)
# 3716 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
#define CAN_MCR_INRQ ((uint16_t)0x0001)
#define CAN_MCR_SLEEP ((uint16_t)0x0002)
#define CAN_MCR_TXFP ((uint16_t)0x0004)
#define CAN_MCR_RFLM ((uint16_t)0x0008)
#define CAN_MCR_NART ((uint16_t)0x0010)
#define CAN_MCR_AWUM ((uint16_t)0x0020)
#define CAN_MCR_ABOM ((uint16_t)0x0040)
#define CAN_MCR_TTCM ((uint16_t)0x0080)
#define CAN_MCR_RESET ((uint16_t)0x8000)


#define CAN_MSR_INAK ((uint16_t)0x0001)
#define CAN_MSR_SLAK ((uint16_t)0x0002)
#define CAN_MSR_ERRI ((uint16_t)0x0004)
#define CAN_MSR_WKUI ((uint16_t)0x0008)
#define CAN_MSR_SLAKI ((uint16_t)0x0010)
#define CAN_MSR_TXM ((uint16_t)0x0100)
#define CAN_MSR_RXM ((uint16_t)0x0200)
#define CAN_MSR_SAMP ((uint16_t)0x0400)
#define CAN_MSR_RX ((uint16_t)0x0800)


#define CAN_TSR_RQCP0 ((uint32_t)0x00000001)
#define CAN_TSR_TXOK0 ((uint32_t)0x00000002)
#define CAN_TSR_ALST0 ((uint32_t)0x00000004)
#define CAN_TSR_TERR0 ((uint32_t)0x00000008)
#define CAN_TSR_ABRQ0 ((uint32_t)0x00000080)
#define CAN_TSR_RQCP1 ((uint32_t)0x00000100)
#define CAN_TSR_TXOK1 ((uint32_t)0x00000200)
#define CAN_TSR_ALST1 ((uint32_t)0x00000400)
#define CAN_TSR_TERR1 ((uint32_t)0x00000800)
#define CAN_TSR_ABRQ1 ((uint32_t)0x00008000)
#define CAN_TSR_RQCP2 ((uint32_t)0x00010000)
#define CAN_TSR_TXOK2 ((uint32_t)0x00020000)
#define CAN_TSR_ALST2 ((uint32_t)0x00040000)
#define CAN_TSR_TERR2 ((uint32_t)0x00080000)
#define CAN_TSR_ABRQ2 ((uint32_t)0x00800000)
#define CAN_TSR_CODE ((uint32_t)0x03000000)

#define CAN_TSR_TME ((uint32_t)0x1C000000)
#define CAN_TSR_TME0 ((uint32_t)0x04000000)
#define CAN_TSR_TME1 ((uint32_t)0x08000000)
#define CAN_TSR_TME2 ((uint32_t)0x10000000)

#define CAN_TSR_LOW ((uint32_t)0xE0000000)
#define CAN_TSR_LOW0 ((uint32_t)0x20000000)
#define CAN_TSR_LOW1 ((uint32_t)0x40000000)
#define CAN_TSR_LOW2 ((uint32_t)0x80000000)


#define CAN_RF0R_FMP0 ((uint8_t)0x03)
#define CAN_RF0R_FULL0 ((uint8_t)0x08)
#define CAN_RF0R_FOVR0 ((uint8_t)0x10)
#define CAN_RF0R_RFOM0 ((uint8_t)0x20)


#define CAN_RF1R_FMP1 ((uint8_t)0x03)
#define CAN_RF1R_FULL1 ((uint8_t)0x08)
#define CAN_RF1R_FOVR1 ((uint8_t)0x10)
#define CAN_RF1R_RFOM1 ((uint8_t)0x20)


#define CAN_IER_TMEIE ((uint32_t)0x00000001)
#define CAN_IER_FMPIE0 ((uint32_t)0x00000002)
#define CAN_IER_FFIE0 ((uint32_t)0x00000004)
#define CAN_IER_FOVIE0 ((uint32_t)0x00000008)
#define CAN_IER_FMPIE1 ((uint32_t)0x00000010)
#define CAN_IER_FFIE1 ((uint32_t)0x00000020)
#define CAN_IER_FOVIE1 ((uint32_t)0x00000040)
#define CAN_IER_EWGIE ((uint32_t)0x00000100)
#define CAN_IER_EPVIE ((uint32_t)0x00000200)
#define CAN_IER_BOFIE ((uint32_t)0x00000400)
#define CAN_IER_LECIE ((uint32_t)0x00000800)
#define CAN_IER_ERRIE ((uint32_t)0x00008000)
#define CAN_IER_WKUIE ((uint32_t)0x00010000)
#define CAN_IER_SLKIE ((uint32_t)0x00020000)


#define CAN_ESR_EWGF ((uint32_t)0x00000001)
#define CAN_ESR_EPVF ((uint32_t)0x00000002)
#define CAN_ESR_BOFF ((uint32_t)0x00000004)

#define CAN_ESR_LEC ((uint32_t)0x00000070)
#define CAN_ESR_LEC_0 ((uint32_t)0x00000010)
#define CAN_ESR_LEC_1 ((uint32_t)0x00000020)
#define CAN_ESR_LEC_2 ((uint32_t)0x00000040)

#define CAN_ESR_TEC ((uint32_t)0x00FF0000)
#define CAN_ESR_REC ((uint32_t)0xFF000000)


#define CAN_BTR_BRP ((uint32_t)0x000003FF)
#define CAN_BTR_TS1 ((uint32_t)0x000F0000)
#define CAN_BTR_TS2 ((uint32_t)0x00700000)
#define CAN_BTR_SJW ((uint32_t)0x03000000)
#define CAN_BTR_LBKM ((uint32_t)0x40000000)
#define CAN_BTR_SILM ((uint32_t)0x80000000)



#define CAN_TI0R_TXRQ ((uint32_t)0x00000001)
#define CAN_TI0R_RTR ((uint32_t)0x00000002)
#define CAN_TI0R_IDE ((uint32_t)0x00000004)
#define CAN_TI0R_EXID ((uint32_t)0x001FFFF8)
#define CAN_TI0R_STID ((uint32_t)0xFFE00000)


#define CAN_TDT0R_DLC ((uint32_t)0x0000000F)
#define CAN_TDT0R_TGT ((uint32_t)0x00000100)
#define CAN_TDT0R_TIME ((uint32_t)0xFFFF0000)


#define CAN_TDL0R_DATA0 ((uint32_t)0x000000FF)
#define CAN_TDL0R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_TDL0R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_TDL0R_DATA3 ((uint32_t)0xFF000000)


#define CAN_TDH0R_DATA4 ((uint32_t)0x000000FF)
#define CAN_TDH0R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_TDH0R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_TDH0R_DATA7 ((uint32_t)0xFF000000)


#define CAN_TI1R_TXRQ ((uint32_t)0x00000001)
#define CAN_TI1R_RTR ((uint32_t)0x00000002)
#define CAN_TI1R_IDE ((uint32_t)0x00000004)
#define CAN_TI1R_EXID ((uint32_t)0x001FFFF8)
#define CAN_TI1R_STID ((uint32_t)0xFFE00000)


#define CAN_TDT1R_DLC ((uint32_t)0x0000000F)
#define CAN_TDT1R_TGT ((uint32_t)0x00000100)
#define CAN_TDT1R_TIME ((uint32_t)0xFFFF0000)


#define CAN_TDL1R_DATA0 ((uint32_t)0x000000FF)
#define CAN_TDL1R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_TDL1R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_TDL1R_DATA3 ((uint32_t)0xFF000000)


#define CAN_TDH1R_DATA4 ((uint32_t)0x000000FF)
#define CAN_TDH1R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_TDH1R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_TDH1R_DATA7 ((uint32_t)0xFF000000)


#define CAN_TI2R_TXRQ ((uint32_t)0x00000001)
#define CAN_TI2R_RTR ((uint32_t)0x00000002)
#define CAN_TI2R_IDE ((uint32_t)0x00000004)
#define CAN_TI2R_EXID ((uint32_t)0x001FFFF8)
#define CAN_TI2R_STID ((uint32_t)0xFFE00000)


#define CAN_TDT2R_DLC ((uint32_t)0x0000000F)
#define CAN_TDT2R_TGT ((uint32_t)0x00000100)
#define CAN_TDT2R_TIME ((uint32_t)0xFFFF0000)


#define CAN_TDL2R_DATA0 ((uint32_t)0x000000FF)
#define CAN_TDL2R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_TDL2R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_TDL2R_DATA3 ((uint32_t)0xFF000000)


#define CAN_TDH2R_DATA4 ((uint32_t)0x000000FF)
#define CAN_TDH2R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_TDH2R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_TDH2R_DATA7 ((uint32_t)0xFF000000)


#define CAN_RI0R_RTR ((uint32_t)0x00000002)
#define CAN_RI0R_IDE ((uint32_t)0x00000004)
#define CAN_RI0R_EXID ((uint32_t)0x001FFFF8)
#define CAN_RI0R_STID ((uint32_t)0xFFE00000)


#define CAN_RDT0R_DLC ((uint32_t)0x0000000F)
#define CAN_RDT0R_FMI ((uint32_t)0x0000FF00)
#define CAN_RDT0R_TIME ((uint32_t)0xFFFF0000)


#define CAN_RDL0R_DATA0 ((uint32_t)0x000000FF)
#define CAN_RDL0R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_RDL0R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_RDL0R_DATA3 ((uint32_t)0xFF000000)


#define CAN_RDH0R_DATA4 ((uint32_t)0x000000FF)
#define CAN_RDH0R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_RDH0R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_RDH0R_DATA7 ((uint32_t)0xFF000000)


#define CAN_RI1R_RTR ((uint32_t)0x00000002)
#define CAN_RI1R_IDE ((uint32_t)0x00000004)
#define CAN_RI1R_EXID ((uint32_t)0x001FFFF8)
#define CAN_RI1R_STID ((uint32_t)0xFFE00000)


#define CAN_RDT1R_DLC ((uint32_t)0x0000000F)
#define CAN_RDT1R_FMI ((uint32_t)0x0000FF00)
#define CAN_RDT1R_TIME ((uint32_t)0xFFFF0000)


#define CAN_RDL1R_DATA0 ((uint32_t)0x000000FF)
#define CAN_RDL1R_DATA1 ((uint32_t)0x0000FF00)
#define CAN_RDL1R_DATA2 ((uint32_t)0x00FF0000)
#define CAN_RDL1R_DATA3 ((uint32_t)0xFF000000)


#define CAN_RDH1R_DATA4 ((uint32_t)0x000000FF)
#define CAN_RDH1R_DATA5 ((uint32_t)0x0000FF00)
#define CAN_RDH1R_DATA6 ((uint32_t)0x00FF0000)
#define CAN_RDH1R_DATA7 ((uint32_t)0xFF000000)



#define CAN_FMR_FINIT ((uint8_t)0x01)


#define CAN_FM1R_FBM ((uint16_t)0x3FFF)
#define CAN_FM1R_FBM0 ((uint16_t)0x0001)
#define CAN_FM1R_FBM1 ((uint16_t)0x0002)
#define CAN_FM1R_FBM2 ((uint16_t)0x0004)
#define CAN_FM1R_FBM3 ((uint16_t)0x0008)
#define CAN_FM1R_FBM4 ((uint16_t)0x0010)
#define CAN_FM1R_FBM5 ((uint16_t)0x0020)
#define CAN_FM1R_FBM6 ((uint16_t)0x0040)
#define CAN_FM1R_FBM7 ((uint16_t)0x0080)
#define CAN_FM1R_FBM8 ((uint16_t)0x0100)
#define CAN_FM1R_FBM9 ((uint16_t)0x0200)
#define CAN_FM1R_FBM10 ((uint16_t)0x0400)
#define CAN_FM1R_FBM11 ((uint16_t)0x0800)
#define CAN_FM1R_FBM12 ((uint16_t)0x1000)
#define CAN_FM1R_FBM13 ((uint16_t)0x2000)


#define CAN_FS1R_FSC ((uint16_t)0x3FFF)
#define CAN_FS1R_FSC0 ((uint16_t)0x0001)
#define CAN_FS1R_FSC1 ((uint16_t)0x0002)
#define CAN_FS1R_FSC2 ((uint16_t)0x0004)
#define CAN_FS1R_FSC3 ((uint16_t)0x0008)
#define CAN_FS1R_FSC4 ((uint16_t)0x0010)
#define CAN_FS1R_FSC5 ((uint16_t)0x0020)
#define CAN_FS1R_FSC6 ((uint16_t)0x0040)
#define CAN_FS1R_FSC7 ((uint16_t)0x0080)
#define CAN_FS1R_FSC8 ((uint16_t)0x0100)
#define CAN_FS1R_FSC9 ((uint16_t)0x0200)
#define CAN_FS1R_FSC10 ((uint16_t)0x0400)
#define CAN_FS1R_FSC11 ((uint16_t)0x0800)
#define CAN_FS1R_FSC12 ((uint16_t)0x1000)
#define CAN_FS1R_FSC13 ((uint16_t)0x2000)


#define CAN_FFA1R_FFA ((uint16_t)0x3FFF)
#define CAN_FFA1R_FFA0 ((uint16_t)0x0001)
#define CAN_FFA1R_FFA1 ((uint16_t)0x0002)
#define CAN_FFA1R_FFA2 ((uint16_t)0x0004)
#define CAN_FFA1R_FFA3 ((uint16_t)0x0008)
#define CAN_FFA1R_FFA4 ((uint16_t)0x0010)
#define CAN_FFA1R_FFA5 ((uint16_t)0x0020)
#define CAN_FFA1R_FFA6 ((uint16_t)0x0040)
#define CAN_FFA1R_FFA7 ((uint16_t)0x0080)
#define CAN_FFA1R_FFA8 ((uint16_t)0x0100)
#define CAN_FFA1R_FFA9 ((uint16_t)0x0200)
#define CAN_FFA1R_FFA10 ((uint16_t)0x0400)
#define CAN_FFA1R_FFA11 ((uint16_t)0x0800)
#define CAN_FFA1R_FFA12 ((uint16_t)0x1000)
#define CAN_FFA1R_FFA13 ((uint16_t)0x2000)


#define CAN_FA1R_FACT ((uint16_t)0x3FFF)
#define CAN_FA1R_FACT0 ((uint16_t)0x0001)
#define CAN_FA1R_FACT1 ((uint16_t)0x0002)
#define CAN_FA1R_FACT2 ((uint16_t)0x0004)
#define CAN_FA1R_FACT3 ((uint16_t)0x0008)
#define CAN_FA1R_FACT4 ((uint16_t)0x0010)
#define CAN_FA1R_FACT5 ((uint16_t)0x0020)
#define CAN_FA1R_FACT6 ((uint16_t)0x0040)
#define CAN_FA1R_FACT7 ((uint16_t)0x0080)
#define CAN_FA1R_FACT8 ((uint16_t)0x0100)
#define CAN_FA1R_FACT9 ((uint16_t)0x0200)
#define CAN_FA1R_FACT10 ((uint16_t)0x0400)
#define CAN_FA1R_FACT11 ((uint16_t)0x0800)
#define CAN_FA1R_FACT12 ((uint16_t)0x1000)
#define CAN_FA1R_FACT13 ((uint16_t)0x2000)


#define CAN_F0R1_FB0 ((uint32_t)0x00000001)
#define CAN_F0R1_FB1 ((uint32_t)0x00000002)
#define CAN_F0R1_FB2 ((uint32_t)0x00000004)
#define CAN_F0R1_FB3 ((uint32_t)0x00000008)
#define CAN_F0R1_FB4 ((uint32_t)0x00000010)
#define CAN_F0R1_FB5 ((uint32_t)0x00000020)
#define CAN_F0R1_FB6 ((uint32_t)0x00000040)
#define CAN_F0R1_FB7 ((uint32_t)0x00000080)
#define CAN_F0R1_FB8 ((uint32_t)0x00000100)
#define CAN_F0R1_FB9 ((uint32_t)0x00000200)
#define CAN_F0R1_FB10 ((uint32_t)0x00000400)
#define CAN_F0R1_FB11 ((uint32_t)0x00000800)
#define CAN_F0R1_FB12 ((uint32_t)0x00001000)
#define CAN_F0R1_FB13 ((uint32_t)0x00002000)
#define CAN_F0R1_FB14 ((uint32_t)0x00004000)
#define CAN_F0R1_FB15 ((uint32_t)0x00008000)
#define CAN_F0R1_FB16 ((uint32_t)0x00010000)
#define CAN_F0R1_FB17 ((uint32_t)0x00020000)
#define CAN_F0R1_FB18 ((uint32_t)0x00040000)
#define CAN_F0R1_FB19 ((uint32_t)0x00080000)
#define CAN_F0R1_FB20 ((uint32_t)0x00100000)
#define CAN_F0R1_FB21 ((uint32_t)0x00200000)
#define CAN_F0R1_FB22 ((uint32_t)0x00400000)
#define CAN_F0R1_FB23 ((uint32_t)0x00800000)
#define CAN_F0R1_FB24 ((uint32_t)0x01000000)
#define CAN_F0R1_FB25 ((uint32_t)0x02000000)
#define CAN_F0R1_FB26 ((uint32_t)0x04000000)
#define CAN_F0R1_FB27 ((uint32_t)0x08000000)
#define CAN_F0R1_FB28 ((uint32_t)0x10000000)
#define CAN_F0R1_FB29 ((uint32_t)0x20000000)
#define CAN_F0R1_FB30 ((uint32_t)0x40000000)
#define CAN_F0R1_FB31 ((uint32_t)0x80000000)


#define CAN_F1R1_FB0 ((uint32_t)0x00000001)
#define CAN_F1R1_FB1 ((uint32_t)0x00000002)
#define CAN_F1R1_FB2 ((uint32_t)0x00000004)
#define CAN_F1R1_FB3 ((uint32_t)0x00000008)
#define CAN_F1R1_FB4 ((uint32_t)0x00000010)
#define CAN_F1R1_FB5 ((uint32_t)0x00000020)
#define CAN_F1R1_FB6 ((uint32_t)0x00000040)
#define CAN_F1R1_FB7 ((uint32_t)0x00000080)
#define CAN_F1R1_FB8 ((uint32_t)0x00000100)
#define CAN_F1R1_FB9 ((uint32_t)0x00000200)
#define CAN_F1R1_FB10 ((uint32_t)0x00000400)
#define CAN_F1R1_FB11 ((uint32_t)0x00000800)
#define CAN_F1R1_FB12 ((uint32_t)0x00001000)
#define CAN_F1R1_FB13 ((uint32_t)0x00002000)
#define CAN_F1R1_FB14 ((uint32_t)0x00004000)
#define CAN_F1R1_FB15 ((uint32_t)0x00008000)
#define CAN_F1R1_FB16 ((uint32_t)0x00010000)
#define CAN_F1R1_FB17 ((uint32_t)0x00020000)
#define CAN_F1R1_FB18 ((uint32_t)0x00040000)
#define CAN_F1R1_FB19 ((uint32_t)0x00080000)
#define CAN_F1R1_FB20 ((uint32_t)0x00100000)
#define CAN_F1R1_FB21 ((uint32_t)0x00200000)
#define CAN_F1R1_FB22 ((uint32_t)0x00400000)
#define CAN_F1R1_FB23 ((uint32_t)0x00800000)
#define CAN_F1R1_FB24 ((uint32_t)0x01000000)
#define CAN_F1R1_FB25 ((uint32_t)0x02000000)
#define CAN_F1R1_FB26 ((uint32_t)0x04000000)
#define CAN_F1R1_FB27 ((uint32_t)0x08000000)
#define CAN_F1R1_FB28 ((uint32_t)0x10000000)
#define CAN_F1R1_FB29 ((uint32_t)0x20000000)
#define CAN_F1R1_FB30 ((uint32_t)0x40000000)
#define CAN_F1R1_FB31 ((uint32_t)0x80000000)


#define CAN_F2R1_FB0 ((uint32_t)0x00000001)
#define CAN_F2R1_FB1 ((uint32_t)0x00000002)
#define CAN_F2R1_FB2 ((uint32_t)0x00000004)
#define CAN_F2R1_FB3 ((uint32_t)0x00000008)
#define CAN_F2R1_FB4 ((uint32_t)0x00000010)
#define CAN_F2R1_FB5 ((uint32_t)0x00000020)
#define CAN_F2R1_FB6 ((uint32_t)0x00000040)
#define CAN_F2R1_FB7 ((uint32_t)0x00000080)
#define CAN_F2R1_FB8 ((uint32_t)0x00000100)
#define CAN_F2R1_FB9 ((uint32_t)0x00000200)
#define CAN_F2R1_FB10 ((uint32_t)0x00000400)
#define CAN_F2R1_FB11 ((uint32_t)0x00000800)
#define CAN_F2R1_FB12 ((uint32_t)0x00001000)
#define CAN_F2R1_FB13 ((uint32_t)0x00002000)
#define CAN_F2R1_FB14 ((uint32_t)0x00004000)
#define CAN_F2R1_FB15 ((uint32_t)0x00008000)
#define CAN_F2R1_FB16 ((uint32_t)0x00010000)
#define CAN_F2R1_FB17 ((uint32_t)0x00020000)
#define CAN_F2R1_FB18 ((uint32_t)0x00040000)
#define CAN_F2R1_FB19 ((uint32_t)0x00080000)
#define CAN_F2R1_FB20 ((uint32_t)0x00100000)
#define CAN_F2R1_FB21 ((uint32_t)0x00200000)
#define CAN_F2R1_FB22 ((uint32_t)0x00400000)
#define CAN_F2R1_FB23 ((uint32_t)0x00800000)
#define CAN_F2R1_FB24 ((uint32_t)0x01000000)
#define CAN_F2R1_FB25 ((uint32_t)0x02000000)
#define CAN_F2R1_FB26 ((uint32_t)0x04000000)
#define CAN_F2R1_FB27 ((uint32_t)0x08000000)
#define CAN_F2R1_FB28 ((uint32_t)0x10000000)
#define CAN_F2R1_FB29 ((uint32_t)0x20000000)
#define CAN_F2R1_FB30 ((uint32_t)0x40000000)
#define CAN_F2R1_FB31 ((uint32_t)0x80000000)


#define CAN_F3R1_FB0 ((uint32_t)0x00000001)
#define CAN_F3R1_FB1 ((uint32_t)0x00000002)
#define CAN_F3R1_FB2 ((uint32_t)0x00000004)
#define CAN_F3R1_FB3 ((uint32_t)0x00000008)
#define CAN_F3R1_FB4 ((uint32_t)0x00000010)
#define CAN_F3R1_FB5 ((uint32_t)0x00000020)
#define CAN_F3R1_FB6 ((uint32_t)0x00000040)
#define CAN_F3R1_FB7 ((uint32_t)0x00000080)
#define CAN_F3R1_FB8 ((uint32_t)0x00000100)
#define CAN_F3R1_FB9 ((uint32_t)0x00000200)
#define CAN_F3R1_FB10 ((uint32_t)0x00000400)
#define CAN_F3R1_FB11 ((uint32_t)0x00000800)
#define CAN_F3R1_FB12 ((uint32_t)0x00001000)
#define CAN_F3R1_FB13 ((uint32_t)0x00002000)
#define CAN_F3R1_FB14 ((uint32_t)0x00004000)
#define CAN_F3R1_FB15 ((uint32_t)0x00008000)
#define CAN_F3R1_FB16 ((uint32_t)0x00010000)
#define CAN_F3R1_FB17 ((uint32_t)0x00020000)
#define CAN_F3R1_FB18 ((uint32_t)0x00040000)
#define CAN_F3R1_FB19 ((uint32_t)0x00080000)
#define CAN_F3R1_FB20 ((uint32_t)0x00100000)
#define CAN_F3R1_FB21 ((uint32_t)0x00200000)
#define CAN_F3R1_FB22 ((uint32_t)0x00400000)
#define CAN_F3R1_FB23 ((uint32_t)0x00800000)
#define CAN_F3R1_FB24 ((uint32_t)0x01000000)
#define CAN_F3R1_FB25 ((uint32_t)0x02000000)
#define CAN_F3R1_FB26 ((uint32_t)0x04000000)
#define CAN_F3R1_FB27 ((uint32_t)0x08000000)
#define CAN_F3R1_FB28 ((uint32_t)0x10000000)
#define CAN_F3R1_FB29 ((uint32_t)0x20000000)
#define CAN_F3R1_FB30 ((uint32_t)0x40000000)
#define CAN_F3R1_FB31 ((uint32_t)0x80000000)


#define CAN_F4R1_FB0 ((uint32_t)0x00000001)
#define CAN_F4R1_FB1 ((uint32_t)0x00000002)
#define CAN_F4R1_FB2 ((uint32_t)0x00000004)
#define CAN_F4R1_FB3 ((uint32_t)0x00000008)
#define CAN_F4R1_FB4 ((uint32_t)0x00000010)
#define CAN_F4R1_FB5 ((uint32_t)0x00000020)
#define CAN_F4R1_FB6 ((uint32_t)0x00000040)
#define CAN_F4R1_FB7 ((uint32_t)0x00000080)
#define CAN_F4R1_FB8 ((uint32_t)0x00000100)
#define CAN_F4R1_FB9 ((uint32_t)0x00000200)
#define CAN_F4R1_FB10 ((uint32_t)0x00000400)
#define CAN_F4R1_FB11 ((uint32_t)0x00000800)
#define CAN_F4R1_FB12 ((uint32_t)0x00001000)
#define CAN_F4R1_FB13 ((uint32_t)0x00002000)
#define CAN_F4R1_FB14 ((uint32_t)0x00004000)
#define CAN_F4R1_FB15 ((uint32_t)0x00008000)
#define CAN_F4R1_FB16 ((uint32_t)0x00010000)
#define CAN_F4R1_FB17 ((uint32_t)0x00020000)
#define CAN_F4R1_FB18 ((uint32_t)0x00040000)
#define CAN_F4R1_FB19 ((uint32_t)0x00080000)
#define CAN_F4R1_FB20 ((uint32_t)0x00100000)
#define CAN_F4R1_FB21 ((uint32_t)0x00200000)
#define CAN_F4R1_FB22 ((uint32_t)0x00400000)
#define CAN_F4R1_FB23 ((uint32_t)0x00800000)
#define CAN_F4R1_FB24 ((uint32_t)0x01000000)
#define CAN_F4R1_FB25 ((uint32_t)0x02000000)
#define CAN_F4R1_FB26 ((uint32_t)0x04000000)
#define CAN_F4R1_FB27 ((uint32_t)0x08000000)
#define CAN_F4R1_FB28 ((uint32_t)0x10000000)
#define CAN_F4R1_FB29 ((uint32_t)0x20000000)
#define CAN_F4R1_FB30 ((uint32_t)0x40000000)
#define CAN_F4R1_FB31 ((uint32_t)0x80000000)


#define CAN_F5R1_FB0 ((uint32_t)0x00000001)
#define CAN_F5R1_FB1 ((uint32_t)0x00000002)
#define CAN_F5R1_FB2 ((uint32_t)0x00000004)
#define CAN_F5R1_FB3 ((uint32_t)0x00000008)
#define CAN_F5R1_FB4 ((uint32_t)0x00000010)
#define CAN_F5R1_FB5 ((uint32_t)0x00000020)
#define CAN_F5R1_FB6 ((uint32_t)0x00000040)
#define CAN_F5R1_FB7 ((uint32_t)0x00000080)
#define CAN_F5R1_FB8 ((uint32_t)0x00000100)
#define CAN_F5R1_FB9 ((uint32_t)0x00000200)
#define CAN_F5R1_FB10 ((uint32_t)0x00000400)
#define CAN_F5R1_FB11 ((uint32_t)0x00000800)
#define CAN_F5R1_FB12 ((uint32_t)0x00001000)
#define CAN_F5R1_FB13 ((uint32_t)0x00002000)
#define CAN_F5R1_FB14 ((uint32_t)0x00004000)
#define CAN_F5R1_FB15 ((uint32_t)0x00008000)
#define CAN_F5R1_FB16 ((uint32_t)0x00010000)
#define CAN_F5R1_FB17 ((uint32_t)0x00020000)
#define CAN_F5R1_FB18 ((uint32_t)0x00040000)
#define CAN_F5R1_FB19 ((uint32_t)0x00080000)
#define CAN_F5R1_FB20 ((uint32_t)0x00100000)
#define CAN_F5R1_FB21 ((uint32_t)0x00200000)
#define CAN_F5R1_FB22 ((uint32_t)0x00400000)
#define CAN_F5R1_FB23 ((uint32_t)0x00800000)
#define CAN_F5R1_FB24 ((uint32_t)0x01000000)
#define CAN_F5R1_FB25 ((uint32_t)0x02000000)
#define CAN_F5R1_FB26 ((uint32_t)0x04000000)
#define CAN_F5R1_FB27 ((uint32_t)0x08000000)
#define CAN_F5R1_FB28 ((uint32_t)0x10000000)
#define CAN_F5R1_FB29 ((uint32_t)0x20000000)
#define CAN_F5R1_FB30 ((uint32_t)0x40000000)
#define CAN_F5R1_FB31 ((uint32_t)0x80000000)


#define CAN_F6R1_FB0 ((uint32_t)0x00000001)
#define CAN_F6R1_FB1 ((uint32_t)0x00000002)
#define CAN_F6R1_FB2 ((uint32_t)0x00000004)
#define CAN_F6R1_FB3 ((uint32_t)0x00000008)
#define CAN_F6R1_FB4 ((uint32_t)0x00000010)
#define CAN_F6R1_FB5 ((uint32_t)0x00000020)
#define CAN_F6R1_FB6 ((uint32_t)0x00000040)
#define CAN_F6R1_FB7 ((uint32_t)0x00000080)
#define CAN_F6R1_FB8 ((uint32_t)0x00000100)
#define CAN_F6R1_FB9 ((uint32_t)0x00000200)
#define CAN_F6R1_FB10 ((uint32_t)0x00000400)
#define CAN_F6R1_FB11 ((uint32_t)0x00000800)
#define CAN_F6R1_FB12 ((uint32_t)0x00001000)
#define CAN_F6R1_FB13 ((uint32_t)0x00002000)
#define CAN_F6R1_FB14 ((uint32_t)0x00004000)
#define CAN_F6R1_FB15 ((uint32_t)0x00008000)
#define CAN_F6R1_FB16 ((uint32_t)0x00010000)
#define CAN_F6R1_FB17 ((uint32_t)0x00020000)
#define CAN_F6R1_FB18 ((uint32_t)0x00040000)
#define CAN_F6R1_FB19 ((uint32_t)0x00080000)
#define CAN_F6R1_FB20 ((uint32_t)0x00100000)
#define CAN_F6R1_FB21 ((uint32_t)0x00200000)
#define CAN_F6R1_FB22 ((uint32_t)0x00400000)
#define CAN_F6R1_FB23 ((uint32_t)0x00800000)
#define CAN_F6R1_FB24 ((uint32_t)0x01000000)
#define CAN_F6R1_FB25 ((uint32_t)0x02000000)
#define CAN_F6R1_FB26 ((uint32_t)0x04000000)
#define CAN_F6R1_FB27 ((uint32_t)0x08000000)
#define CAN_F6R1_FB28 ((uint32_t)0x10000000)
#define CAN_F6R1_FB29 ((uint32_t)0x20000000)
#define CAN_F6R1_FB30 ((uint32_t)0x40000000)
#define CAN_F6R1_FB31 ((uint32_t)0x80000000)


#define CAN_F7R1_FB0 ((uint32_t)0x00000001)
#define CAN_F7R1_FB1 ((uint32_t)0x00000002)
#define CAN_F7R1_FB2 ((uint32_t)0x00000004)
#define CAN_F7R1_FB3 ((uint32_t)0x00000008)
#define CAN_F7R1_FB4 ((uint32_t)0x00000010)
#define CAN_F7R1_FB5 ((uint32_t)0x00000020)
#define CAN_F7R1_FB6 ((uint32_t)0x00000040)
#define CAN_F7R1_FB7 ((uint32_t)0x00000080)
#define CAN_F7R1_FB8 ((uint32_t)0x00000100)
#define CAN_F7R1_FB9 ((uint32_t)0x00000200)
#define CAN_F7R1_FB10 ((uint32_t)0x00000400)
#define CAN_F7R1_FB11 ((uint32_t)0x00000800)
#define CAN_F7R1_FB12 ((uint32_t)0x00001000)
#define CAN_F7R1_FB13 ((uint32_t)0x00002000)
#define CAN_F7R1_FB14 ((uint32_t)0x00004000)
#define CAN_F7R1_FB15 ((uint32_t)0x00008000)
#define CAN_F7R1_FB16 ((uint32_t)0x00010000)
#define CAN_F7R1_FB17 ((uint32_t)0x00020000)
#define CAN_F7R1_FB18 ((uint32_t)0x00040000)
#define CAN_F7R1_FB19 ((uint32_t)0x00080000)
#define CAN_F7R1_FB20 ((uint32_t)0x00100000)
#define CAN_F7R1_FB21 ((uint32_t)0x00200000)
#define CAN_F7R1_FB22 ((uint32_t)0x00400000)
#define CAN_F7R1_FB23 ((uint32_t)0x00800000)
#define CAN_F7R1_FB24 ((uint32_t)0x01000000)
#define CAN_F7R1_FB25 ((uint32_t)0x02000000)
#define CAN_F7R1_FB26 ((uint32_t)0x04000000)
#define CAN_F7R1_FB27 ((uint32_t)0x08000000)
#define CAN_F7R1_FB28 ((uint32_t)0x10000000)
#define CAN_F7R1_FB29 ((uint32_t)0x20000000)
#define CAN_F7R1_FB30 ((uint32_t)0x40000000)
#define CAN_F7R1_FB31 ((uint32_t)0x80000000)


#define CAN_F8R1_FB0 ((uint32_t)0x00000001)
#define CAN_F8R1_FB1 ((uint32_t)0x00000002)
#define CAN_F8R1_FB2 ((uint32_t)0x00000004)
#define CAN_F8R1_FB3 ((uint32_t)0x00000008)
#define CAN_F8R1_FB4 ((uint32_t)0x00000010)
#define CAN_F8R1_FB5 ((uint32_t)0x00000020)
#define CAN_F8R1_FB6 ((uint32_t)0x00000040)
#define CAN_F8R1_FB7 ((uint32_t)0x00000080)
#define CAN_F8R1_FB8 ((uint32_t)0x00000100)
#define CAN_F8R1_FB9 ((uint32_t)0x00000200)
#define CAN_F8R1_FB10 ((uint32_t)0x00000400)
#define CAN_F8R1_FB11 ((uint32_t)0x00000800)
#define CAN_F8R1_FB12 ((uint32_t)0x00001000)
#define CAN_F8R1_FB13 ((uint32_t)0x00002000)
#define CAN_F8R1_FB14 ((uint32_t)0x00004000)
#define CAN_F8R1_FB15 ((uint32_t)0x00008000)
#define CAN_F8R1_FB16 ((uint32_t)0x00010000)
#define CAN_F8R1_FB17 ((uint32_t)0x00020000)
#define CAN_F8R1_FB18 ((uint32_t)0x00040000)
#define CAN_F8R1_FB19 ((uint32_t)0x00080000)
#define CAN_F8R1_FB20 ((uint32_t)0x00100000)
#define CAN_F8R1_FB21 ((uint32_t)0x00200000)
#define CAN_F8R1_FB22 ((uint32_t)0x00400000)
#define CAN_F8R1_FB23 ((uint32_t)0x00800000)
#define CAN_F8R1_FB24 ((uint32_t)0x01000000)
#define CAN_F8R1_FB25 ((uint32_t)0x02000000)
#define CAN_F8R1_FB26 ((uint32_t)0x04000000)
#define CAN_F8R1_FB27 ((uint32_t)0x08000000)
#define CAN_F8R1_FB28 ((uint32_t)0x10000000)
#define CAN_F8R1_FB29 ((uint32_t)0x20000000)
#define CAN_F8R1_FB30 ((uint32_t)0x40000000)
#define CAN_F8R1_FB31 ((uint32_t)0x80000000)


#define CAN_F9R1_FB0 ((uint32_t)0x00000001)
#define CAN_F9R1_FB1 ((uint32_t)0x00000002)
#define CAN_F9R1_FB2 ((uint32_t)0x00000004)
#define CAN_F9R1_FB3 ((uint32_t)0x00000008)
#define CAN_F9R1_FB4 ((uint32_t)0x00000010)
#define CAN_F9R1_FB5 ((uint32_t)0x00000020)
#define CAN_F9R1_FB6 ((uint32_t)0x00000040)
#define CAN_F9R1_FB7 ((uint32_t)0x00000080)
#define CAN_F9R1_FB8 ((uint32_t)0x00000100)
#define CAN_F9R1_FB9 ((uint32_t)0x00000200)
#define CAN_F9R1_FB10 ((uint32_t)0x00000400)
#define CAN_F9R1_FB11 ((uint32_t)0x00000800)
#define CAN_F9R1_FB12 ((uint32_t)0x00001000)
#define CAN_F9R1_FB13 ((uint32_t)0x00002000)
#define CAN_F9R1_FB14 ((uint32_t)0x00004000)
#define CAN_F9R1_FB15 ((uint32_t)0x00008000)
#define CAN_F9R1_FB16 ((uint32_t)0x00010000)
#define CAN_F9R1_FB17 ((uint32_t)0x00020000)
#define CAN_F9R1_FB18 ((uint32_t)0x00040000)
#define CAN_F9R1_FB19 ((uint32_t)0x00080000)
#define CAN_F9R1_FB20 ((uint32_t)0x00100000)
#define CAN_F9R1_FB21 ((uint32_t)0x00200000)
#define CAN_F9R1_FB22 ((uint32_t)0x00400000)
#define CAN_F9R1_FB23 ((uint32_t)0x00800000)
#define CAN_F9R1_FB24 ((uint32_t)0x01000000)
#define CAN_F9R1_FB25 ((uint32_t)0x02000000)
#define CAN_F9R1_FB26 ((uint32_t)0x04000000)
#define CAN_F9R1_FB27 ((uint32_t)0x08000000)
#define CAN_F9R1_FB28 ((uint32_t)0x10000000)
#define CAN_F9R1_FB29 ((uint32_t)0x20000000)
#define CAN_F9R1_FB30 ((uint32_t)0x40000000)
#define CAN_F9R1_FB31 ((uint32_t)0x80000000)


#define CAN_F10R1_FB0 ((uint32_t)0x00000001)
#define CAN_F10R1_FB1 ((uint32_t)0x00000002)
#define CAN_F10R1_FB2 ((uint32_t)0x00000004)
#define CAN_F10R1_FB3 ((uint32_t)0x00000008)
#define CAN_F10R1_FB4 ((uint32_t)0x00000010)
#define CAN_F10R1_FB5 ((uint32_t)0x00000020)
#define CAN_F10R1_FB6 ((uint32_t)0x00000040)
#define CAN_F10R1_FB7 ((uint32_t)0x00000080)
#define CAN_F10R1_FB8 ((uint32_t)0x00000100)
#define CAN_F10R1_FB9 ((uint32_t)0x00000200)
#define CAN_F10R1_FB10 ((uint32_t)0x00000400)
#define CAN_F10R1_FB11 ((uint32_t)0x00000800)
#define CAN_F10R1_FB12 ((uint32_t)0x00001000)
#define CAN_F10R1_FB13 ((uint32_t)0x00002000)
#define CAN_F10R1_FB14 ((uint32_t)0x00004000)
#define CAN_F10R1_FB15 ((uint32_t)0x00008000)
#define CAN_F10R1_FB16 ((uint32_t)0x00010000)
#define CAN_F10R1_FB17 ((uint32_t)0x00020000)
#define CAN_F10R1_FB18 ((uint32_t)0x00040000)
#define CAN_F10R1_FB19 ((uint32_t)0x00080000)
#define CAN_F10R1_FB20 ((uint32_t)0x00100000)
#define CAN_F10R1_FB21 ((uint32_t)0x00200000)
#define CAN_F10R1_FB22 ((uint32_t)0x00400000)
#define CAN_F10R1_FB23 ((uint32_t)0x00800000)
#define CAN_F10R1_FB24 ((uint32_t)0x01000000)
#define CAN_F10R1_FB25 ((uint32_t)0x02000000)
#define CAN_F10R1_FB26 ((uint32_t)0x04000000)
#define CAN_F10R1_FB27 ((uint32_t)0x08000000)
#define CAN_F10R1_FB28 ((uint32_t)0x10000000)
#define CAN_F10R1_FB29 ((uint32_t)0x20000000)
#define CAN_F10R1_FB30 ((uint32_t)0x40000000)
#define CAN_F10R1_FB31 ((uint32_t)0x80000000)


#define CAN_F11R1_FB0 ((uint32_t)0x00000001)
#define CAN_F11R1_FB1 ((uint32_t)0x00000002)
#define CAN_F11R1_FB2 ((uint32_t)0x00000004)
#define CAN_F11R1_FB3 ((uint32_t)0x00000008)
#define CAN_F11R1_FB4 ((uint32_t)0x00000010)
#define CAN_F11R1_FB5 ((uint32_t)0x00000020)
#define CAN_F11R1_FB6 ((uint32_t)0x00000040)
#define CAN_F11R1_FB7 ((uint32_t)0x00000080)
#define CAN_F11R1_FB8 ((uint32_t)0x00000100)
#define CAN_F11R1_FB9 ((uint32_t)0x00000200)
#define CAN_F11R1_FB10 ((uint32_t)0x00000400)
#define CAN_F11R1_FB11 ((uint32_t)0x00000800)
#define CAN_F11R1_FB12 ((uint32_t)0x00001000)
#define CAN_F11R1_FB13 ((uint32_t)0x00002000)
#define CAN_F11R1_FB14 ((uint32_t)0x00004000)
#define CAN_F11R1_FB15 ((uint32_t)0x00008000)
#define CAN_F11R1_FB16 ((uint32_t)0x00010000)
#define CAN_F11R1_FB17 ((uint32_t)0x00020000)
#define CAN_F11R1_FB18 ((uint32_t)0x00040000)
#define CAN_F11R1_FB19 ((uint32_t)0x00080000)
#define CAN_F11R1_FB20 ((uint32_t)0x00100000)
#define CAN_F11R1_FB21 ((uint32_t)0x00200000)
#define CAN_F11R1_FB22 ((uint32_t)0x00400000)
#define CAN_F11R1_FB23 ((uint32_t)0x00800000)
#define CAN_F11R1_FB24 ((uint32_t)0x01000000)
#define CAN_F11R1_FB25 ((uint32_t)0x02000000)
#define CAN_F11R1_FB26 ((uint32_t)0x04000000)
#define CAN_F11R1_FB27 ((uint32_t)0x08000000)
#define CAN_F11R1_FB28 ((uint32_t)0x10000000)
#define CAN_F11R1_FB29 ((uint32_t)0x20000000)
#define CAN_F11R1_FB30 ((uint32_t)0x40000000)
#define CAN_F11R1_FB31 ((uint32_t)0x80000000)


#define CAN_F12R1_FB0 ((uint32_t)0x00000001)
#define CAN_F12R1_FB1 ((uint32_t)0x00000002)
#define CAN_F12R1_FB2 ((uint32_t)0x00000004)
#define CAN_F12R1_FB3 ((uint32_t)0x00000008)
#define CAN_F12R1_FB4 ((uint32_t)0x00000010)
#define CAN_F12R1_FB5 ((uint32_t)0x00000020)
#define CAN_F12R1_FB6 ((uint32_t)0x00000040)
#define CAN_F12R1_FB7 ((uint32_t)0x00000080)
#define CAN_F12R1_FB8 ((uint32_t)0x00000100)
#define CAN_F12R1_FB9 ((uint32_t)0x00000200)
#define CAN_F12R1_FB10 ((uint32_t)0x00000400)
#define CAN_F12R1_FB11 ((uint32_t)0x00000800)
#define CAN_F12R1_FB12 ((uint32_t)0x00001000)
#define CAN_F12R1_FB13 ((uint32_t)0x00002000)
#define CAN_F12R1_FB14 ((uint32_t)0x00004000)
#define CAN_F12R1_FB15 ((uint32_t)0x00008000)
#define CAN_F12R1_FB16 ((uint32_t)0x00010000)
#define CAN_F12R1_FB17 ((uint32_t)0x00020000)
#define CAN_F12R1_FB18 ((uint32_t)0x00040000)
#define CAN_F12R1_FB19 ((uint32_t)0x00080000)
#define CAN_F12R1_FB20 ((uint32_t)0x00100000)
#define CAN_F12R1_FB21 ((uint32_t)0x00200000)
#define CAN_F12R1_FB22 ((uint32_t)0x00400000)
#define CAN_F12R1_FB23 ((uint32_t)0x00800000)
#define CAN_F12R1_FB24 ((uint32_t)0x01000000)
#define CAN_F12R1_FB25 ((uint32_t)0x02000000)
#define CAN_F12R1_FB26 ((uint32_t)0x04000000)
#define CAN_F12R1_FB27 ((uint32_t)0x08000000)
#define CAN_F12R1_FB28 ((uint32_t)0x10000000)
#define CAN_F12R1_FB29 ((uint32_t)0x20000000)
#define CAN_F12R1_FB30 ((uint32_t)0x40000000)
#define CAN_F12R1_FB31 ((uint32_t)0x80000000)


#define CAN_F13R1_FB0 ((uint32_t)0x00000001)
#define CAN_F13R1_FB1 ((uint32_t)0x00000002)
#define CAN_F13R1_FB2 ((uint32_t)0x00000004)
#define CAN_F13R1_FB3 ((uint32_t)0x00000008)
#define CAN_F13R1_FB4 ((uint32_t)0x00000010)
#define CAN_F13R1_FB5 ((uint32_t)0x00000020)
#define CAN_F13R1_FB6 ((uint32_t)0x00000040)
#define CAN_F13R1_FB7 ((uint32_t)0x00000080)
#define CAN_F13R1_FB8 ((uint32_t)0x00000100)
#define CAN_F13R1_FB9 ((uint32_t)0x00000200)
#define CAN_F13R1_FB10 ((uint32_t)0x00000400)
#define CAN_F13R1_FB11 ((uint32_t)0x00000800)
#define CAN_F13R1_FB12 ((uint32_t)0x00001000)
#define CAN_F13R1_FB13 ((uint32_t)0x00002000)
#define CAN_F13R1_FB14 ((uint32_t)0x00004000)
#define CAN_F13R1_FB15 ((uint32_t)0x00008000)
#define CAN_F13R1_FB16 ((uint32_t)0x00010000)
#define CAN_F13R1_FB17 ((uint32_t)0x00020000)
#define CAN_F13R1_FB18 ((uint32_t)0x00040000)
#define CAN_F13R1_FB19 ((uint32_t)0x00080000)
#define CAN_F13R1_FB20 ((uint32_t)0x00100000)
#define CAN_F13R1_FB21 ((uint32_t)0x00200000)
#define CAN_F13R1_FB22 ((uint32_t)0x00400000)
#define CAN_F13R1_FB23 ((uint32_t)0x00800000)
#define CAN_F13R1_FB24 ((uint32_t)0x01000000)
#define CAN_F13R1_FB25 ((uint32_t)0x02000000)
#define CAN_F13R1_FB26 ((uint32_t)0x04000000)
#define CAN_F13R1_FB27 ((uint32_t)0x08000000)
#define CAN_F13R1_FB28 ((uint32_t)0x10000000)
#define CAN_F13R1_FB29 ((uint32_t)0x20000000)
#define CAN_F13R1_FB30 ((uint32_t)0x40000000)
#define CAN_F13R1_FB31 ((uint32_t)0x80000000)


#define CAN_F0R2_FB0 ((uint32_t)0x00000001)
#define CAN_F0R2_FB1 ((uint32_t)0x00000002)
#define CAN_F0R2_FB2 ((uint32_t)0x00000004)
#define CAN_F0R2_FB3 ((uint32_t)0x00000008)
#define CAN_F0R2_FB4 ((uint32_t)0x00000010)
#define CAN_F0R2_FB5 ((uint32_t)0x00000020)
#define CAN_F0R2_FB6 ((uint32_t)0x00000040)
#define CAN_F0R2_FB7 ((uint32_t)0x00000080)
#define CAN_F0R2_FB8 ((uint32_t)0x00000100)
#define CAN_F0R2_FB9 ((uint32_t)0x00000200)
#define CAN_F0R2_FB10 ((uint32_t)0x00000400)
#define CAN_F0R2_FB11 ((uint32_t)0x00000800)
#define CAN_F0R2_FB12 ((uint32_t)0x00001000)
#define CAN_F0R2_FB13 ((uint32_t)0x00002000)
#define CAN_F0R2_FB14 ((uint32_t)0x00004000)
#define CAN_F0R2_FB15 ((uint32_t)0x00008000)
#define CAN_F0R2_FB16 ((uint32_t)0x00010000)
#define CAN_F0R2_FB17 ((uint32_t)0x00020000)
#define CAN_F0R2_FB18 ((uint32_t)0x00040000)
#define CAN_F0R2_FB19 ((uint32_t)0x00080000)
#define CAN_F0R2_FB20 ((uint32_t)0x00100000)
#define CAN_F0R2_FB21 ((uint32_t)0x00200000)
#define CAN_F0R2_FB22 ((uint32_t)0x00400000)
#define CAN_F0R2_FB23 ((uint32_t)0x00800000)
#define CAN_F0R2_FB24 ((uint32_t)0x01000000)
#define CAN_F0R2_FB25 ((uint32_t)0x02000000)
#define CAN_F0R2_FB26 ((uint32_t)0x04000000)
#define CAN_F0R2_FB27 ((uint32_t)0x08000000)
#define CAN_F0R2_FB28 ((uint32_t)0x10000000)
#define CAN_F0R2_FB29 ((uint32_t)0x20000000)
#define CAN_F0R2_FB30 ((uint32_t)0x40000000)
#define CAN_F0R2_FB31 ((uint32_t)0x80000000)


#define CAN_F1R2_FB0 ((uint32_t)0x00000001)
#define CAN_F1R2_FB1 ((uint32_t)0x00000002)
#define CAN_F1R2_FB2 ((uint32_t)0x00000004)
#define CAN_F1R2_FB3 ((uint32_t)0x00000008)
#define CAN_F1R2_FB4 ((uint32_t)0x00000010)
#define CAN_F1R2_FB5 ((uint32_t)0x00000020)
#define CAN_F1R2_FB6 ((uint32_t)0x00000040)
#define CAN_F1R2_FB7 ((uint32_t)0x00000080)
#define CAN_F1R2_FB8 ((uint32_t)0x00000100)
#define CAN_F1R2_FB9 ((uint32_t)0x00000200)
#define CAN_F1R2_FB10 ((uint32_t)0x00000400)
#define CAN_F1R2_FB11 ((uint32_t)0x00000800)
#define CAN_F1R2_FB12 ((uint32_t)0x00001000)
#define CAN_F1R2_FB13 ((uint32_t)0x00002000)
#define CAN_F1R2_FB14 ((uint32_t)0x00004000)
#define CAN_F1R2_FB15 ((uint32_t)0x00008000)
#define CAN_F1R2_FB16 ((uint32_t)0x00010000)
#define CAN_F1R2_FB17 ((uint32_t)0x00020000)
#define CAN_F1R2_FB18 ((uint32_t)0x00040000)
#define CAN_F1R2_FB19 ((uint32_t)0x00080000)
#define CAN_F1R2_FB20 ((uint32_t)0x00100000)
#define CAN_F1R2_FB21 ((uint32_t)0x00200000)
#define CAN_F1R2_FB22 ((uint32_t)0x00400000)
#define CAN_F1R2_FB23 ((uint32_t)0x00800000)
#define CAN_F1R2_FB24 ((uint32_t)0x01000000)
#define CAN_F1R2_FB25 ((uint32_t)0x02000000)
#define CAN_F1R2_FB26 ((uint32_t)0x04000000)
#define CAN_F1R2_FB27 ((uint32_t)0x08000000)
#define CAN_F1R2_FB28 ((uint32_t)0x10000000)
#define CAN_F1R2_FB29 ((uint32_t)0x20000000)
#define CAN_F1R2_FB30 ((uint32_t)0x40000000)
#define CAN_F1R2_FB31 ((uint32_t)0x80000000)


#define CAN_F2R2_FB0 ((uint32_t)0x00000001)
#define CAN_F2R2_FB1 ((uint32_t)0x00000002)
#define CAN_F2R2_FB2 ((uint32_t)0x00000004)
#define CAN_F2R2_FB3 ((uint32_t)0x00000008)
#define CAN_F2R2_FB4 ((uint32_t)0x00000010)
#define CAN_F2R2_FB5 ((uint32_t)0x00000020)
#define CAN_F2R2_FB6 ((uint32_t)0x00000040)
#define CAN_F2R2_FB7 ((uint32_t)0x00000080)
#define CAN_F2R2_FB8 ((uint32_t)0x00000100)
#define CAN_F2R2_FB9 ((uint32_t)0x00000200)
#define CAN_F2R2_FB10 ((uint32_t)0x00000400)
#define CAN_F2R2_FB11 ((uint32_t)0x00000800)
#define CAN_F2R2_FB12 ((uint32_t)0x00001000)
#define CAN_F2R2_FB13 ((uint32_t)0x00002000)
#define CAN_F2R2_FB14 ((uint32_t)0x00004000)
#define CAN_F2R2_FB15 ((uint32_t)0x00008000)
#define CAN_F2R2_FB16 ((uint32_t)0x00010000)
#define CAN_F2R2_FB17 ((uint32_t)0x00020000)
#define CAN_F2R2_FB18 ((uint32_t)0x00040000)
#define CAN_F2R2_FB19 ((uint32_t)0x00080000)
#define CAN_F2R2_FB20 ((uint32_t)0x00100000)
#define CAN_F2R2_FB21 ((uint32_t)0x00200000)
#define CAN_F2R2_FB22 ((uint32_t)0x00400000)
#define CAN_F2R2_FB23 ((uint32_t)0x00800000)
#define CAN_F2R2_FB24 ((uint32_t)0x01000000)
#define CAN_F2R2_FB25 ((uint32_t)0x02000000)
#define CAN_F2R2_FB26 ((uint32_t)0x04000000)
#define CAN_F2R2_FB27 ((uint32_t)0x08000000)
#define CAN_F2R2_FB28 ((uint32_t)0x10000000)
#define CAN_F2R2_FB29 ((uint32_t)0x20000000)
#define CAN_F2R2_FB30 ((uint32_t)0x40000000)
#define CAN_F2R2_FB31 ((uint32_t)0x80000000)


#define CAN_F3R2_FB0 ((uint32_t)0x00000001)
#define CAN_F3R2_FB1 ((uint32_t)0x00000002)
#define CAN_F3R2_FB2 ((uint32_t)0x00000004)
#define CAN_F3R2_FB3 ((uint32_t)0x00000008)
#define CAN_F3R2_FB4 ((uint32_t)0x00000010)
#define CAN_F3R2_FB5 ((uint32_t)0x00000020)
#define CAN_F3R2_FB6 ((uint32_t)0x00000040)
#define CAN_F3R2_FB7 ((uint32_t)0x00000080)
#define CAN_F3R2_FB8 ((uint32_t)0x00000100)
#define CAN_F3R2_FB9 ((uint32_t)0x00000200)
#define CAN_F3R2_FB10 ((uint32_t)0x00000400)
#define CAN_F3R2_FB11 ((uint32_t)0x00000800)
#define CAN_F3R2_FB12 ((uint32_t)0x00001000)
#define CAN_F3R2_FB13 ((uint32_t)0x00002000)
#define CAN_F3R2_FB14 ((uint32_t)0x00004000)
#define CAN_F3R2_FB15 ((uint32_t)0x00008000)
#define CAN_F3R2_FB16 ((uint32_t)0x00010000)
#define CAN_F3R2_FB17 ((uint32_t)0x00020000)
#define CAN_F3R2_FB18 ((uint32_t)0x00040000)
#define CAN_F3R2_FB19 ((uint32_t)0x00080000)
#define CAN_F3R2_FB20 ((uint32_t)0x00100000)
#define CAN_F3R2_FB21 ((uint32_t)0x00200000)
#define CAN_F3R2_FB22 ((uint32_t)0x00400000)
#define CAN_F3R2_FB23 ((uint32_t)0x00800000)
#define CAN_F3R2_FB24 ((uint32_t)0x01000000)
#define CAN_F3R2_FB25 ((uint32_t)0x02000000)
#define CAN_F3R2_FB26 ((uint32_t)0x04000000)
#define CAN_F3R2_FB27 ((uint32_t)0x08000000)
#define CAN_F3R2_FB28 ((uint32_t)0x10000000)
#define CAN_F3R2_FB29 ((uint32_t)0x20000000)
#define CAN_F3R2_FB30 ((uint32_t)0x40000000)
#define CAN_F3R2_FB31 ((uint32_t)0x80000000)


#define CAN_F4R2_FB0 ((uint32_t)0x00000001)
#define CAN_F4R2_FB1 ((uint32_t)0x00000002)
#define CAN_F4R2_FB2 ((uint32_t)0x00000004)
#define CAN_F4R2_FB3 ((uint32_t)0x00000008)
#define CAN_F4R2_FB4 ((uint32_t)0x00000010)
#define CAN_F4R2_FB5 ((uint32_t)0x00000020)
#define CAN_F4R2_FB6 ((uint32_t)0x00000040)
#define CAN_F4R2_FB7 ((uint32_t)0x00000080)
#define CAN_F4R2_FB8 ((uint32_t)0x00000100)
#define CAN_F4R2_FB9 ((uint32_t)0x00000200)
#define CAN_F4R2_FB10 ((uint32_t)0x00000400)
#define CAN_F4R2_FB11 ((uint32_t)0x00000800)
#define CAN_F4R2_FB12 ((uint32_t)0x00001000)
#define CAN_F4R2_FB13 ((uint32_t)0x00002000)
#define CAN_F4R2_FB14 ((uint32_t)0x00004000)
#define CAN_F4R2_FB15 ((uint32_t)0x00008000)
#define CAN_F4R2_FB16 ((uint32_t)0x00010000)
#define CAN_F4R2_FB17 ((uint32_t)0x00020000)
#define CAN_F4R2_FB18 ((uint32_t)0x00040000)
#define CAN_F4R2_FB19 ((uint32_t)0x00080000)
#define CAN_F4R2_FB20 ((uint32_t)0x00100000)
#define CAN_F4R2_FB21 ((uint32_t)0x00200000)
#define CAN_F4R2_FB22 ((uint32_t)0x00400000)
#define CAN_F4R2_FB23 ((uint32_t)0x00800000)
#define CAN_F4R2_FB24 ((uint32_t)0x01000000)
#define CAN_F4R2_FB25 ((uint32_t)0x02000000)
#define CAN_F4R2_FB26 ((uint32_t)0x04000000)
#define CAN_F4R2_FB27 ((uint32_t)0x08000000)
#define CAN_F4R2_FB28 ((uint32_t)0x10000000)
#define CAN_F4R2_FB29 ((uint32_t)0x20000000)
#define CAN_F4R2_FB30 ((uint32_t)0x40000000)
#define CAN_F4R2_FB31 ((uint32_t)0x80000000)


#define CAN_F5R2_FB0 ((uint32_t)0x00000001)
#define CAN_F5R2_FB1 ((uint32_t)0x00000002)
#define CAN_F5R2_FB2 ((uint32_t)0x00000004)
#define CAN_F5R2_FB3 ((uint32_t)0x00000008)
#define CAN_F5R2_FB4 ((uint32_t)0x00000010)
#define CAN_F5R2_FB5 ((uint32_t)0x00000020)
#define CAN_F5R2_FB6 ((uint32_t)0x00000040)
#define CAN_F5R2_FB7 ((uint32_t)0x00000080)
#define CAN_F5R2_FB8 ((uint32_t)0x00000100)
#define CAN_F5R2_FB9 ((uint32_t)0x00000200)
#define CAN_F5R2_FB10 ((uint32_t)0x00000400)
#define CAN_F5R2_FB11 ((uint32_t)0x00000800)
#define CAN_F5R2_FB12 ((uint32_t)0x00001000)
#define CAN_F5R2_FB13 ((uint32_t)0x00002000)
#define CAN_F5R2_FB14 ((uint32_t)0x00004000)
#define CAN_F5R2_FB15 ((uint32_t)0x00008000)
#define CAN_F5R2_FB16 ((uint32_t)0x00010000)
#define CAN_F5R2_FB17 ((uint32_t)0x00020000)
#define CAN_F5R2_FB18 ((uint32_t)0x00040000)
#define CAN_F5R2_FB19 ((uint32_t)0x00080000)
#define CAN_F5R2_FB20 ((uint32_t)0x00100000)
#define CAN_F5R2_FB21 ((uint32_t)0x00200000)
#define CAN_F5R2_FB22 ((uint32_t)0x00400000)
#define CAN_F5R2_FB23 ((uint32_t)0x00800000)
#define CAN_F5R2_FB24 ((uint32_t)0x01000000)
#define CAN_F5R2_FB25 ((uint32_t)0x02000000)
#define CAN_F5R2_FB26 ((uint32_t)0x04000000)
#define CAN_F5R2_FB27 ((uint32_t)0x08000000)
#define CAN_F5R2_FB28 ((uint32_t)0x10000000)
#define CAN_F5R2_FB29 ((uint32_t)0x20000000)
#define CAN_F5R2_FB30 ((uint32_t)0x40000000)
#define CAN_F5R2_FB31 ((uint32_t)0x80000000)


#define CAN_F6R2_FB0 ((uint32_t)0x00000001)
#define CAN_F6R2_FB1 ((uint32_t)0x00000002)
#define CAN_F6R2_FB2 ((uint32_t)0x00000004)
#define CAN_F6R2_FB3 ((uint32_t)0x00000008)
#define CAN_F6R2_FB4 ((uint32_t)0x00000010)
#define CAN_F6R2_FB5 ((uint32_t)0x00000020)
#define CAN_F6R2_FB6 ((uint32_t)0x00000040)
#define CAN_F6R2_FB7 ((uint32_t)0x00000080)
#define CAN_F6R2_FB8 ((uint32_t)0x00000100)
#define CAN_F6R2_FB9 ((uint32_t)0x00000200)
#define CAN_F6R2_FB10 ((uint32_t)0x00000400)
#define CAN_F6R2_FB11 ((uint32_t)0x00000800)
#define CAN_F6R2_FB12 ((uint32_t)0x00001000)
#define CAN_F6R2_FB13 ((uint32_t)0x00002000)
#define CAN_F6R2_FB14 ((uint32_t)0x00004000)
#define CAN_F6R2_FB15 ((uint32_t)0x00008000)
#define CAN_F6R2_FB16 ((uint32_t)0x00010000)
#define CAN_F6R2_FB17 ((uint32_t)0x00020000)
#define CAN_F6R2_FB18 ((uint32_t)0x00040000)
#define CAN_F6R2_FB19 ((uint32_t)0x00080000)
#define CAN_F6R2_FB20 ((uint32_t)0x00100000)
#define CAN_F6R2_FB21 ((uint32_t)0x00200000)
#define CAN_F6R2_FB22 ((uint32_t)0x00400000)
#define CAN_F6R2_FB23 ((uint32_t)0x00800000)
#define CAN_F6R2_FB24 ((uint32_t)0x01000000)
#define CAN_F6R2_FB25 ((uint32_t)0x02000000)
#define CAN_F6R2_FB26 ((uint32_t)0x04000000)
#define CAN_F6R2_FB27 ((uint32_t)0x08000000)
#define CAN_F6R2_FB28 ((uint32_t)0x10000000)
#define CAN_F6R2_FB29 ((uint32_t)0x20000000)
#define CAN_F6R2_FB30 ((uint32_t)0x40000000)
#define CAN_F6R2_FB31 ((uint32_t)0x80000000)


#define CAN_F7R2_FB0 ((uint32_t)0x00000001)
#define CAN_F7R2_FB1 ((uint32_t)0x00000002)
#define CAN_F7R2_FB2 ((uint32_t)0x00000004)
#define CAN_F7R2_FB3 ((uint32_t)0x00000008)
#define CAN_F7R2_FB4 ((uint32_t)0x00000010)
#define CAN_F7R2_FB5 ((uint32_t)0x00000020)
#define CAN_F7R2_FB6 ((uint32_t)0x00000040)
#define CAN_F7R2_FB7 ((uint32_t)0x00000080)
#define CAN_F7R2_FB8 ((uint32_t)0x00000100)
#define CAN_F7R2_FB9 ((uint32_t)0x00000200)
#define CAN_F7R2_FB10 ((uint32_t)0x00000400)
#define CAN_F7R2_FB11 ((uint32_t)0x00000800)
#define CAN_F7R2_FB12 ((uint32_t)0x00001000)
#define CAN_F7R2_FB13 ((uint32_t)0x00002000)
#define CAN_F7R2_FB14 ((uint32_t)0x00004000)
#define CAN_F7R2_FB15 ((uint32_t)0x00008000)
#define CAN_F7R2_FB16 ((uint32_t)0x00010000)
#define CAN_F7R2_FB17 ((uint32_t)0x00020000)
#define CAN_F7R2_FB18 ((uint32_t)0x00040000)
#define CAN_F7R2_FB19 ((uint32_t)0x00080000)
#define CAN_F7R2_FB20 ((uint32_t)0x00100000)
#define CAN_F7R2_FB21 ((uint32_t)0x00200000)
#define CAN_F7R2_FB22 ((uint32_t)0x00400000)
#define CAN_F7R2_FB23 ((uint32_t)0x00800000)
#define CAN_F7R2_FB24 ((uint32_t)0x01000000)
#define CAN_F7R2_FB25 ((uint32_t)0x02000000)
#define CAN_F7R2_FB26 ((uint32_t)0x04000000)
#define CAN_F7R2_FB27 ((uint32_t)0x08000000)
#define CAN_F7R2_FB28 ((uint32_t)0x10000000)
#define CAN_F7R2_FB29 ((uint32_t)0x20000000)
#define CAN_F7R2_FB30 ((uint32_t)0x40000000)
#define CAN_F7R2_FB31 ((uint32_t)0x80000000)


#define CAN_F8R2_FB0 ((uint32_t)0x00000001)
#define CAN_F8R2_FB1 ((uint32_t)0x00000002)
#define CAN_F8R2_FB2 ((uint32_t)0x00000004)
#define CAN_F8R2_FB3 ((uint32_t)0x00000008)
#define CAN_F8R2_FB4 ((uint32_t)0x00000010)
#define CAN_F8R2_FB5 ((uint32_t)0x00000020)
#define CAN_F8R2_FB6 ((uint32_t)0x00000040)
#define CAN_F8R2_FB7 ((uint32_t)0x00000080)
#define CAN_F8R2_FB8 ((uint32_t)0x00000100)
#define CAN_F8R2_FB9 ((uint32_t)0x00000200)
#define CAN_F8R2_FB10 ((uint32_t)0x00000400)
#define CAN_F8R2_FB11 ((uint32_t)0x00000800)
#define CAN_F8R2_FB12 ((uint32_t)0x00001000)
#define CAN_F8R2_FB13 ((uint32_t)0x00002000)
#define CAN_F8R2_FB14 ((uint32_t)0x00004000)
#define CAN_F8R2_FB15 ((uint32_t)0x00008000)
#define CAN_F8R2_FB16 ((uint32_t)0x00010000)
#define CAN_F8R2_FB17 ((uint32_t)0x00020000)
#define CAN_F8R2_FB18 ((uint32_t)0x00040000)
#define CAN_F8R2_FB19 ((uint32_t)0x00080000)
#define CAN_F8R2_FB20 ((uint32_t)0x00100000)
#define CAN_F8R2_FB21 ((uint32_t)0x00200000)
#define CAN_F8R2_FB22 ((uint32_t)0x00400000)
#define CAN_F8R2_FB23 ((uint32_t)0x00800000)
#define CAN_F8R2_FB24 ((uint32_t)0x01000000)
#define CAN_F8R2_FB25 ((uint32_t)0x02000000)
#define CAN_F8R2_FB26 ((uint32_t)0x04000000)
#define CAN_F8R2_FB27 ((uint32_t)0x08000000)
#define CAN_F8R2_FB28 ((uint32_t)0x10000000)
#define CAN_F8R2_FB29 ((uint32_t)0x20000000)
#define CAN_F8R2_FB30 ((uint32_t)0x40000000)
#define CAN_F8R2_FB31 ((uint32_t)0x80000000)


#define CAN_F9R2_FB0 ((uint32_t)0x00000001)
#define CAN_F9R2_FB1 ((uint32_t)0x00000002)
#define CAN_F9R2_FB2 ((uint32_t)0x00000004)
#define CAN_F9R2_FB3 ((uint32_t)0x00000008)
#define CAN_F9R2_FB4 ((uint32_t)0x00000010)
#define CAN_F9R2_FB5 ((uint32_t)0x00000020)
#define CAN_F9R2_FB6 ((uint32_t)0x00000040)
#define CAN_F9R2_FB7 ((uint32_t)0x00000080)
#define CAN_F9R2_FB8 ((uint32_t)0x00000100)
#define CAN_F9R2_FB9 ((uint32_t)0x00000200)
#define CAN_F9R2_FB10 ((uint32_t)0x00000400)
#define CAN_F9R2_FB11 ((uint32_t)0x00000800)
#define CAN_F9R2_FB12 ((uint32_t)0x00001000)
#define CAN_F9R2_FB13 ((uint32_t)0x00002000)
#define CAN_F9R2_FB14 ((uint32_t)0x00004000)
#define CAN_F9R2_FB15 ((uint32_t)0x00008000)
#define CAN_F9R2_FB16 ((uint32_t)0x00010000)
#define CAN_F9R2_FB17 ((uint32_t)0x00020000)
#define CAN_F9R2_FB18 ((uint32_t)0x00040000)
#define CAN_F9R2_FB19 ((uint32_t)0x00080000)
#define CAN_F9R2_FB20 ((uint32_t)0x00100000)
#define CAN_F9R2_FB21 ((uint32_t)0x00200000)
#define CAN_F9R2_FB22 ((uint32_t)0x00400000)
#define CAN_F9R2_FB23 ((uint32_t)0x00800000)
#define CAN_F9R2_FB24 ((uint32_t)0x01000000)
#define CAN_F9R2_FB25 ((uint32_t)0x02000000)
#define CAN_F9R2_FB26 ((uint32_t)0x04000000)
#define CAN_F9R2_FB27 ((uint32_t)0x08000000)
#define CAN_F9R2_FB28 ((uint32_t)0x10000000)
#define CAN_F9R2_FB29 ((uint32_t)0x20000000)
#define CAN_F9R2_FB30 ((uint32_t)0x40000000)
#define CAN_F9R2_FB31 ((uint32_t)0x80000000)


#define CAN_F10R2_FB0 ((uint32_t)0x00000001)
#define CAN_F10R2_FB1 ((uint32_t)0x00000002)
#define CAN_F10R2_FB2 ((uint32_t)0x00000004)
#define CAN_F10R2_FB3 ((uint32_t)0x00000008)
#define CAN_F10R2_FB4 ((uint32_t)0x00000010)
#define CAN_F10R2_FB5 ((uint32_t)0x00000020)
#define CAN_F10R2_FB6 ((uint32_t)0x00000040)
#define CAN_F10R2_FB7 ((uint32_t)0x00000080)
#define CAN_F10R2_FB8 ((uint32_t)0x00000100)
#define CAN_F10R2_FB9 ((uint32_t)0x00000200)
#define CAN_F10R2_FB10 ((uint32_t)0x00000400)
#define CAN_F10R2_FB11 ((uint32_t)0x00000800)
#define CAN_F10R2_FB12 ((uint32_t)0x00001000)
#define CAN_F10R2_FB13 ((uint32_t)0x00002000)
#define CAN_F10R2_FB14 ((uint32_t)0x00004000)
#define CAN_F10R2_FB15 ((uint32_t)0x00008000)
#define CAN_F10R2_FB16 ((uint32_t)0x00010000)
#define CAN_F10R2_FB17 ((uint32_t)0x00020000)
#define CAN_F10R2_FB18 ((uint32_t)0x00040000)
#define CAN_F10R2_FB19 ((uint32_t)0x00080000)
#define CAN_F10R2_FB20 ((uint32_t)0x00100000)
#define CAN_F10R2_FB21 ((uint32_t)0x00200000)
#define CAN_F10R2_FB22 ((uint32_t)0x00400000)
#define CAN_F10R2_FB23 ((uint32_t)0x00800000)
#define CAN_F10R2_FB24 ((uint32_t)0x01000000)
#define CAN_F10R2_FB25 ((uint32_t)0x02000000)
#define CAN_F10R2_FB26 ((uint32_t)0x04000000)
#define CAN_F10R2_FB27 ((uint32_t)0x08000000)
#define CAN_F10R2_FB28 ((uint32_t)0x10000000)
#define CAN_F10R2_FB29 ((uint32_t)0x20000000)
#define CAN_F10R2_FB30 ((uint32_t)0x40000000)
#define CAN_F10R2_FB31 ((uint32_t)0x80000000)


#define CAN_F11R2_FB0 ((uint32_t)0x00000001)
#define CAN_F11R2_FB1 ((uint32_t)0x00000002)
#define CAN_F11R2_FB2 ((uint32_t)0x00000004)
#define CAN_F11R2_FB3 ((uint32_t)0x00000008)
#define CAN_F11R2_FB4 ((uint32_t)0x00000010)
#define CAN_F11R2_FB5 ((uint32_t)0x00000020)
#define CAN_F11R2_FB6 ((uint32_t)0x00000040)
#define CAN_F11R2_FB7 ((uint32_t)0x00000080)
#define CAN_F11R2_FB8 ((uint32_t)0x00000100)
#define CAN_F11R2_FB9 ((uint32_t)0x00000200)
#define CAN_F11R2_FB10 ((uint32_t)0x00000400)
#define CAN_F11R2_FB11 ((uint32_t)0x00000800)
#define CAN_F11R2_FB12 ((uint32_t)0x00001000)
#define CAN_F11R2_FB13 ((uint32_t)0x00002000)
#define CAN_F11R2_FB14 ((uint32_t)0x00004000)
#define CAN_F11R2_FB15 ((uint32_t)0x00008000)
#define CAN_F11R2_FB16 ((uint32_t)0x00010000)
#define CAN_F11R2_FB17 ((uint32_t)0x00020000)
#define CAN_F11R2_FB18 ((uint32_t)0x00040000)
#define CAN_F11R2_FB19 ((uint32_t)0x00080000)
#define CAN_F11R2_FB20 ((uint32_t)0x00100000)
#define CAN_F11R2_FB21 ((uint32_t)0x00200000)
#define CAN_F11R2_FB22 ((uint32_t)0x00400000)
#define CAN_F11R2_FB23 ((uint32_t)0x00800000)
#define CAN_F11R2_FB24 ((uint32_t)0x01000000)
#define CAN_F11R2_FB25 ((uint32_t)0x02000000)
#define CAN_F11R2_FB26 ((uint32_t)0x04000000)
#define CAN_F11R2_FB27 ((uint32_t)0x08000000)
#define CAN_F11R2_FB28 ((uint32_t)0x10000000)
#define CAN_F11R2_FB29 ((uint32_t)0x20000000)
#define CAN_F11R2_FB30 ((uint32_t)0x40000000)
#define CAN_F11R2_FB31 ((uint32_t)0x80000000)


#define CAN_F12R2_FB0 ((uint32_t)0x00000001)
#define CAN_F12R2_FB1 ((uint32_t)0x00000002)
#define CAN_F12R2_FB2 ((uint32_t)0x00000004)
#define CAN_F12R2_FB3 ((uint32_t)0x00000008)
#define CAN_F12R2_FB4 ((uint32_t)0x00000010)
#define CAN_F12R2_FB5 ((uint32_t)0x00000020)
#define CAN_F12R2_FB6 ((uint32_t)0x00000040)
#define CAN_F12R2_FB7 ((uint32_t)0x00000080)
#define CAN_F12R2_FB8 ((uint32_t)0x00000100)
#define CAN_F12R2_FB9 ((uint32_t)0x00000200)
#define CAN_F12R2_FB10 ((uint32_t)0x00000400)
#define CAN_F12R2_FB11 ((uint32_t)0x00000800)
#define CAN_F12R2_FB12 ((uint32_t)0x00001000)
#define CAN_F12R2_FB13 ((uint32_t)0x00002000)
#define CAN_F12R2_FB14 ((uint32_t)0x00004000)
#define CAN_F12R2_FB15 ((uint32_t)0x00008000)
#define CAN_F12R2_FB16 ((uint32_t)0x00010000)
#define CAN_F12R2_FB17 ((uint32_t)0x00020000)
#define CAN_F12R2_FB18 ((uint32_t)0x00040000)
#define CAN_F12R2_FB19 ((uint32_t)0x00080000)
#define CAN_F12R2_FB20 ((uint32_t)0x00100000)
#define CAN_F12R2_FB21 ((uint32_t)0x00200000)
#define CAN_F12R2_FB22 ((uint32_t)0x00400000)
#define CAN_F12R2_FB23 ((uint32_t)0x00800000)
#define CAN_F12R2_FB24 ((uint32_t)0x01000000)
#define CAN_F12R2_FB25 ((uint32_t)0x02000000)
#define CAN_F12R2_FB26 ((uint32_t)0x04000000)
#define CAN_F12R2_FB27 ((uint32_t)0x08000000)
#define CAN_F12R2_FB28 ((uint32_t)0x10000000)
#define CAN_F12R2_FB29 ((uint32_t)0x20000000)
#define CAN_F12R2_FB30 ((uint32_t)0x40000000)
#define CAN_F12R2_FB31 ((uint32_t)0x80000000)


#define CAN_F13R2_FB0 ((uint32_t)0x00000001)
#define CAN_F13R2_FB1 ((uint32_t)0x00000002)
#define CAN_F13R2_FB2 ((uint32_t)0x00000004)
#define CAN_F13R2_FB3 ((uint32_t)0x00000008)
#define CAN_F13R2_FB4 ((uint32_t)0x00000010)
#define CAN_F13R2_FB5 ((uint32_t)0x00000020)
#define CAN_F13R2_FB6 ((uint32_t)0x00000040)
#define CAN_F13R2_FB7 ((uint32_t)0x00000080)
#define CAN_F13R2_FB8 ((uint32_t)0x00000100)
#define CAN_F13R2_FB9 ((uint32_t)0x00000200)
#define CAN_F13R2_FB10 ((uint32_t)0x00000400)
#define CAN_F13R2_FB11 ((uint32_t)0x00000800)
#define CAN_F13R2_FB12 ((uint32_t)0x00001000)
#define CAN_F13R2_FB13 ((uint32_t)0x00002000)
#define CAN_F13R2_FB14 ((uint32_t)0x00004000)
#define CAN_F13R2_FB15 ((uint32_t)0x00008000)
#define CAN_F13R2_FB16 ((uint32_t)0x00010000)
#define CAN_F13R2_FB17 ((uint32_t)0x00020000)
#define CAN_F13R2_FB18 ((uint32_t)0x00040000)
#define CAN_F13R2_FB19 ((uint32_t)0x00080000)
#define CAN_F13R2_FB20 ((uint32_t)0x00100000)
#define CAN_F13R2_FB21 ((uint32_t)0x00200000)
#define CAN_F13R2_FB22 ((uint32_t)0x00400000)
#define CAN_F13R2_FB23 ((uint32_t)0x00800000)
#define CAN_F13R2_FB24 ((uint32_t)0x01000000)
#define CAN_F13R2_FB25 ((uint32_t)0x02000000)
#define CAN_F13R2_FB26 ((uint32_t)0x04000000)
#define CAN_F13R2_FB27 ((uint32_t)0x08000000)
#define CAN_F13R2_FB28 ((uint32_t)0x10000000)
#define CAN_F13R2_FB29 ((uint32_t)0x20000000)
#define CAN_F13R2_FB30 ((uint32_t)0x40000000)
#define CAN_F13R2_FB31 ((uint32_t)0x80000000)







#define CRC_DR_DR ((uint32_t)0xFFFFFFFF)


#define CRC_IDR_IDR ((uint8_t)0xFF)


#define CRC_CR_RESET ((uint32_t)0x00000001)
#define CRC_CR_POLSIZE ((uint32_t)0x00000018)
#define CRC_CR_POLSIZE_0 ((uint32_t)0x00000008)
#define CRC_CR_POLSIZE_1 ((uint32_t)0x00000010)
#define CRC_CR_REV_IN ((uint32_t)0x00000060)
#define CRC_CR_REV_IN_0 ((uint32_t)0x00000020)
#define CRC_CR_REV_IN_1 ((uint32_t)0x00000040)
#define CRC_CR_REV_OUT ((uint32_t)0x00000080)


#define CRC_INIT_INIT ((uint32_t)0xFFFFFFFF)


#define CRC_POL_POL ((uint32_t)0xFFFFFFFF)






#define DAC_CR_EN1 ((uint32_t)0x00000001)
#define DAC_CR_BOFF1 ((uint32_t)0x00000002)
#define DAC_CR_TEN1 ((uint32_t)0x00000004)

#define DAC_CR_TSEL1 ((uint32_t)0x00000038)
#define DAC_CR_TSEL1_0 ((uint32_t)0x00000008)
#define DAC_CR_TSEL1_1 ((uint32_t)0x00000010)
#define DAC_CR_TSEL1_2 ((uint32_t)0x00000020)

#define DAC_CR_WAVE1 ((uint32_t)0x000000C0)
#define DAC_CR_WAVE1_0 ((uint32_t)0x00000040)
#define DAC_CR_WAVE1_1 ((uint32_t)0x00000080)

#define DAC_CR_MAMP1 ((uint32_t)0x00000F00)
#define DAC_CR_MAMP1_0 ((uint32_t)0x00000100)
#define DAC_CR_MAMP1_1 ((uint32_t)0x00000200)
#define DAC_CR_MAMP1_2 ((uint32_t)0x00000400)
#define DAC_CR_MAMP1_3 ((uint32_t)0x00000800)

#define DAC_CR_DMAEN1 ((uint32_t)0x00001000)
#define DAC_CR_EN2 ((uint32_t)0x00010000)
#define DAC_CR_BOFF2 ((uint32_t)0x00020000)
#define DAC_CR_TEN2 ((uint32_t)0x00040000)

#define DAC_CR_TSEL2 ((uint32_t)0x00380000)
#define DAC_CR_TSEL2_0 ((uint32_t)0x00080000)
#define DAC_CR_TSEL2_1 ((uint32_t)0x00100000)
#define DAC_CR_TSEL2_2 ((uint32_t)0x00200000)

#define DAC_CR_WAVE2 ((uint32_t)0x00C00000)
#define DAC_CR_WAVE2_0 ((uint32_t)0x00400000)
#define DAC_CR_WAVE2_1 ((uint32_t)0x00800000)

#define DAC_CR_MAMP2 ((uint32_t)0x0F000000)
#define DAC_CR_MAMP2_0 ((uint32_t)0x01000000)
#define DAC_CR_MAMP2_1 ((uint32_t)0x02000000)
#define DAC_CR_MAMP2_2 ((uint32_t)0x04000000)
#define DAC_CR_MAMP2_3 ((uint32_t)0x08000000)

#define DAC_CR_DMAEN2 ((uint32_t)0x10000000)


#define DAC_SWTRIGR_SWTRIG1 ((uint8_t)0x01)
#define DAC_SWTRIGR_SWTRIG2 ((uint8_t)0x02)


#define DAC_DHR12R1_DACC1DHR ((uint16_t)0x0FFF)


#define DAC_DHR12L1_DACC1DHR ((uint16_t)0xFFF0)


#define DAC_DHR8R1_DACC1DHR ((uint8_t)0xFF)


#define DAC_DHR12R2_DACC2DHR ((uint16_t)0x0FFF)


#define DAC_DHR12L2_DACC2DHR ((uint16_t)0xFFF0)


#define DAC_DHR8R2_DACC2DHR ((uint8_t)0xFF)


#define DAC_DHR12RD_DACC1DHR ((uint32_t)0x00000FFF)
#define DAC_DHR12RD_DACC2DHR ((uint32_t)0x0FFF0000)


#define DAC_DHR12LD_DACC1DHR ((uint32_t)0x0000FFF0)
#define DAC_DHR12LD_DACC2DHR ((uint32_t)0xFFF00000)


#define DAC_DHR8RD_DACC1DHR ((uint16_t)0x00FF)
#define DAC_DHR8RD_DACC2DHR ((uint16_t)0xFF00)


#define DAC_DOR1_DACC1DOR ((uint16_t)0x0FFF)


#define DAC_DOR2_DACC2DOR ((uint16_t)0x0FFF)


#define DAC_SR_DMAUDR1 ((uint32_t)0x00002000)
#define DAC_SR_DMAUDR2 ((uint32_t)0x20000000)







#define DBGMCU_IDCODE_DEV_ID ((uint32_t)0x00000FFF)
#define DBGMCU_IDCODE_REV_ID ((uint32_t)0xFFFF0000)


#define DBGMCU_CR_DBG_SLEEP ((uint32_t)0x00000001)
#define DBGMCU_CR_DBG_STOP ((uint32_t)0x00000002)
#define DBGMCU_CR_DBG_STANDBY ((uint32_t)0x00000004)
#define DBGMCU_CR_TRACE_IOEN ((uint32_t)0x00000020)

#define DBGMCU_CR_TRACE_MODE ((uint32_t)0x000000C0)
#define DBGMCU_CR_TRACE_MODE_0 ((uint32_t)0x00000040)
#define DBGMCU_CR_TRACE_MODE_1 ((uint32_t)0x00000080)


#define DBGMCU_APB1_FZ_DBG_TIM2_STOP ((uint32_t)0x00000001)
#define DBGMCU_APB1_FZ_DBG_TIM3_STOP ((uint32_t)0x00000002)
#define DBGMCU_APB1_FZ_DBG_TIM4_STOP ((uint32_t)0x00000004)
#define DBGMCU_APB1_FZ_DBG_TIM6_STOP ((uint32_t)0x00000010)
#define DBGMCU_APB1_FZ_DBG_TIM7_STOP ((uint32_t)0x00000020)
#define DBGMCU_APB1_FZ_DBG_RTC_STOP ((uint32_t)0x00000400)
#define DBGMCU_APB1_FZ_DBG_WWDG_STOP ((uint32_t)0x00000800)
#define DBGMCU_APB1_FZ_DBG_IWDG_STOP ((uint32_t)0x00001000)
#define DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT ((uint32_t)0x00200000)
#define DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT ((uint32_t)0x00400000)
#define DBGMCU_APB1_FZ_DBG_CAN1_STOP ((uint32_t)0x02000000)


#define DBGMCU_APB2_FZ_DBG_TIM1_STOP ((uint32_t)0x00000001)
#define DBGMCU_APB2_FZ_DBG_TIM8_STOP ((uint32_t)0x00000002)
#define DBGMCU_APB2_FZ_DBG_TIM15_STOP ((uint32_t)0x00000004)
#define DBGMCU_APB2_FZ_DBG_TIM16_STOP ((uint32_t)0x00000008)
#define DBGMCU_APB2_FZ_DBG_TIM17_STOP ((uint32_t)0x00000010)







#define DMA_ISR_GIF1 ((uint32_t)0x00000001)
#define DMA_ISR_TCIF1 ((uint32_t)0x00000002)
#define DMA_ISR_HTIF1 ((uint32_t)0x00000004)
#define DMA_ISR_TEIF1 ((uint32_t)0x00000008)
#define DMA_ISR_GIF2 ((uint32_t)0x00000010)
#define DMA_ISR_TCIF2 ((uint32_t)0x00000020)
#define DMA_ISR_HTIF2 ((uint32_t)0x00000040)
#define DMA_ISR_TEIF2 ((uint32_t)0x00000080)
#define DMA_ISR_GIF3 ((uint32_t)0x00000100)
#define DMA_ISR_TCIF3 ((uint32_t)0x00000200)
#define DMA_ISR_HTIF3 ((uint32_t)0x00000400)
#define DMA_ISR_TEIF3 ((uint32_t)0x00000800)
#define DMA_ISR_GIF4 ((uint32_t)0x00001000)
#define DMA_ISR_TCIF4 ((uint32_t)0x00002000)
#define DMA_ISR_HTIF4 ((uint32_t)0x00004000)
#define DMA_ISR_TEIF4 ((uint32_t)0x00008000)
#define DMA_ISR_GIF5 ((uint32_t)0x00010000)
#define DMA_ISR_TCIF5 ((uint32_t)0x00020000)
#define DMA_ISR_HTIF5 ((uint32_t)0x00040000)
#define DMA_ISR_TEIF5 ((uint32_t)0x00080000)
#define DMA_ISR_GIF6 ((uint32_t)0x00100000)
#define DMA_ISR_TCIF6 ((uint32_t)0x00200000)
#define DMA_ISR_HTIF6 ((uint32_t)0x00400000)
#define DMA_ISR_TEIF6 ((uint32_t)0x00800000)
#define DMA_ISR_GIF7 ((uint32_t)0x01000000)
#define DMA_ISR_TCIF7 ((uint32_t)0x02000000)
#define DMA_ISR_HTIF7 ((uint32_t)0x04000000)
#define DMA_ISR_TEIF7 ((uint32_t)0x08000000)


#define DMA_IFCR_CGIF1 ((uint32_t)0x00000001)
#define DMA_IFCR_CTCIF1 ((uint32_t)0x00000002)
#define DMA_IFCR_CHTIF1 ((uint32_t)0x00000004)
#define DMA_IFCR_CTEIF1 ((uint32_t)0x00000008)
#define DMA_IFCR_CGIF2 ((uint32_t)0x00000010)
#define DMA_IFCR_CTCIF2 ((uint32_t)0x00000020)
#define DMA_IFCR_CHTIF2 ((uint32_t)0x00000040)
#define DMA_IFCR_CTEIF2 ((uint32_t)0x00000080)
#define DMA_IFCR_CGIF3 ((uint32_t)0x00000100)
#define DMA_IFCR_CTCIF3 ((uint32_t)0x00000200)
#define DMA_IFCR_CHTIF3 ((uint32_t)0x00000400)
#define DMA_IFCR_CTEIF3 ((uint32_t)0x00000800)
#define DMA_IFCR_CGIF4 ((uint32_t)0x00001000)
#define DMA_IFCR_CTCIF4 ((uint32_t)0x00002000)
#define DMA_IFCR_CHTIF4 ((uint32_t)0x00004000)
#define DMA_IFCR_CTEIF4 ((uint32_t)0x00008000)
#define DMA_IFCR_CGIF5 ((uint32_t)0x00010000)
#define DMA_IFCR_CTCIF5 ((uint32_t)0x00020000)
#define DMA_IFCR_CHTIF5 ((uint32_t)0x00040000)
#define DMA_IFCR_CTEIF5 ((uint32_t)0x00080000)
#define DMA_IFCR_CGIF6 ((uint32_t)0x00100000)
#define DMA_IFCR_CTCIF6 ((uint32_t)0x00200000)
#define DMA_IFCR_CHTIF6 ((uint32_t)0x00400000)
#define DMA_IFCR_CTEIF6 ((uint32_t)0x00800000)
#define DMA_IFCR_CGIF7 ((uint32_t)0x01000000)
#define DMA_IFCR_CTCIF7 ((uint32_t)0x02000000)
#define DMA_IFCR_CHTIF7 ((uint32_t)0x04000000)
#define DMA_IFCR_CTEIF7 ((uint32_t)0x08000000)


#define DMA_CCR_EN ((uint32_t)0x00000001)
#define DMA_CCR_TCIE ((uint32_t)0x00000002)
#define DMA_CCR_HTIE ((uint32_t)0x00000004)
#define DMA_CCR_TEIE ((uint32_t)0x00000008)
#define DMA_CCR_DIR ((uint32_t)0x00000010)
#define DMA_CCR_CIRC ((uint32_t)0x00000020)
#define DMA_CCR_PINC ((uint32_t)0x00000040)
#define DMA_CCR_MINC ((uint32_t)0x00000080)

#define DMA_CCR_PSIZE ((uint32_t)0x00000300)
#define DMA_CCR_PSIZE_0 ((uint32_t)0x00000100)
#define DMA_CCR_PSIZE_1 ((uint32_t)0x00000200)

#define DMA_CCR_MSIZE ((uint32_t)0x00000C00)
#define DMA_CCR_MSIZE_0 ((uint32_t)0x00000400)
#define DMA_CCR_MSIZE_1 ((uint32_t)0x00000800)

#define DMA_CCR_PL ((uint32_t)0x00003000)
#define DMA_CCR_PL_0 ((uint32_t)0x00001000)
#define DMA_CCR_PL_1 ((uint32_t)0x00002000)

#define DMA_CCR_MEM2MEM ((uint32_t)0x00004000)


#define DMA_CNDTR_NDT ((uint32_t)0x0000FFFF)


#define DMA_CPAR_PA ((uint32_t)0xFFFFFFFF)


#define DMA_CMAR_MA ((uint32_t)0xFFFFFFFF)







#define EXTI_IMR_MR0 ((uint32_t)0x00000001)
#define EXTI_IMR_MR1 ((uint32_t)0x00000002)
#define EXTI_IMR_MR2 ((uint32_t)0x00000004)
#define EXTI_IMR_MR3 ((uint32_t)0x00000008)
#define EXTI_IMR_MR4 ((uint32_t)0x00000010)
#define EXTI_IMR_MR5 ((uint32_t)0x00000020)
#define EXTI_IMR_MR6 ((uint32_t)0x00000040)
#define EXTI_IMR_MR7 ((uint32_t)0x00000080)
#define EXTI_IMR_MR8 ((uint32_t)0x00000100)
#define EXTI_IMR_MR9 ((uint32_t)0x00000200)
#define EXTI_IMR_MR10 ((uint32_t)0x00000400)
#define EXTI_IMR_MR11 ((uint32_t)0x00000800)
#define EXTI_IMR_MR12 ((uint32_t)0x00001000)
#define EXTI_IMR_MR13 ((uint32_t)0x00002000)
#define EXTI_IMR_MR14 ((uint32_t)0x00004000)
#define EXTI_IMR_MR15 ((uint32_t)0x00008000)
#define EXTI_IMR_MR16 ((uint32_t)0x00010000)
#define EXTI_IMR_MR17 ((uint32_t)0x00020000)
#define EXTI_IMR_MR18 ((uint32_t)0x00040000)
#define EXTI_IMR_MR19 ((uint32_t)0x00080000)
#define EXTI_IMR_MR20 ((uint32_t)0x00100000)
#define EXTI_IMR_MR21 ((uint32_t)0x00200000)
#define EXTI_IMR_MR22 ((uint32_t)0x00400000)
#define EXTI_IMR_MR23 ((uint32_t)0x00800000)
#define EXTI_IMR_MR24 ((uint32_t)0x01000000)
#define EXTI_IMR_MR25 ((uint32_t)0x02000000)
#define EXTI_IMR_MR26 ((uint32_t)0x04000000)
#define EXTI_IMR_MR27 ((uint32_t)0x08000000)
#define EXTI_IMR_MR28 ((uint32_t)0x10000000)


#define EXTI_EMR_MR0 ((uint32_t)0x00000001)
#define EXTI_EMR_MR1 ((uint32_t)0x00000002)
#define EXTI_EMR_MR2 ((uint32_t)0x00000004)
#define EXTI_EMR_MR3 ((uint32_t)0x00000008)
#define EXTI_EMR_MR4 ((uint32_t)0x00000010)
#define EXTI_EMR_MR5 ((uint32_t)0x00000020)
#define EXTI_EMR_MR6 ((uint32_t)0x00000040)
#define EXTI_EMR_MR7 ((uint32_t)0x00000080)
#define EXTI_EMR_MR8 ((uint32_t)0x00000100)
#define EXTI_EMR_MR9 ((uint32_t)0x00000200)
#define EXTI_EMR_MR10 ((uint32_t)0x00000400)
#define EXTI_EMR_MR11 ((uint32_t)0x00000800)
#define EXTI_EMR_MR12 ((uint32_t)0x00001000)
#define EXTI_EMR_MR13 ((uint32_t)0x00002000)
#define EXTI_EMR_MR14 ((uint32_t)0x00004000)
#define EXTI_EMR_MR15 ((uint32_t)0x00008000)
#define EXTI_EMR_MR16 ((uint32_t)0x00010000)
#define EXTI_EMR_MR17 ((uint32_t)0x00020000)
#define EXTI_EMR_MR18 ((uint32_t)0x00040000)
#define EXTI_EMR_MR19 ((uint32_t)0x00080000)
#define EXTI_EMR_MR20 ((uint32_t)0x00100000)
#define EXTI_EMR_MR21 ((uint32_t)0x00200000)
#define EXTI_EMR_MR22 ((uint32_t)0x00400000)
#define EXTI_EMR_MR23 ((uint32_t)0x00800000)
#define EXTI_EMR_MR24 ((uint32_t)0x01000000)
#define EXTI_EMR_MR25 ((uint32_t)0x02000000)
#define EXTI_EMR_MR26 ((uint32_t)0x04000000)
#define EXTI_EMR_MR27 ((uint32_t)0x08000000)
#define EXTI_EMR_MR28 ((uint32_t)0x10000000)


#define EXTI_RTSR_TR0 ((uint32_t)0x00000001)
#define EXTI_RTSR_TR1 ((uint32_t)0x00000002)
#define EXTI_RTSR_TR2 ((uint32_t)0x00000004)
#define EXTI_RTSR_TR3 ((uint32_t)0x00000008)
#define EXTI_RTSR_TR4 ((uint32_t)0x00000010)
#define EXTI_RTSR_TR5 ((uint32_t)0x00000020)
#define EXTI_RTSR_TR6 ((uint32_t)0x00000040)
#define EXTI_RTSR_TR7 ((uint32_t)0x00000080)
#define EXTI_RTSR_TR8 ((uint32_t)0x00000100)
#define EXTI_RTSR_TR9 ((uint32_t)0x00000200)
#define EXTI_RTSR_TR10 ((uint32_t)0x00000400)
#define EXTI_RTSR_TR11 ((uint32_t)0x00000800)
#define EXTI_RTSR_TR12 ((uint32_t)0x00001000)
#define EXTI_RTSR_TR13 ((uint32_t)0x00002000)
#define EXTI_RTSR_TR14 ((uint32_t)0x00004000)
#define EXTI_RTSR_TR15 ((uint32_t)0x00008000)
#define EXTI_RTSR_TR16 ((uint32_t)0x00010000)
#define EXTI_RTSR_TR17 ((uint32_t)0x00020000)
#define EXTI_RTSR_TR18 ((uint32_t)0x00040000)
#define EXTI_RTSR_TR19 ((uint32_t)0x00080000)
#define EXTI_RTSR_TR20 ((uint32_t)0x00100000)
#define EXTI_RTSR_TR21 ((uint32_t)0x00200000)
#define EXTI_RTSR_TR22 ((uint32_t)0x00400000)
#define EXTI_RTSR_TR23 ((uint32_t)0x00800000)
#define EXTI_RTSR_TR24 ((uint32_t)0x01000000)
#define EXTI_RTSR_TR25 ((uint32_t)0x02000000)
#define EXTI_RTSR_TR26 ((uint32_t)0x04000000)
#define EXTI_RTSR_TR27 ((uint32_t)0x08000000)
#define EXTI_RTSR_TR28 ((uint32_t)0x10000000)


#define EXTI_FTSR_TR0 ((uint32_t)0x00000001)
#define EXTI_FTSR_TR1 ((uint32_t)0x00000002)
#define EXTI_FTSR_TR2 ((uint32_t)0x00000004)
#define EXTI_FTSR_TR3 ((uint32_t)0x00000008)
#define EXTI_FTSR_TR4 ((uint32_t)0x00000010)
#define EXTI_FTSR_TR5 ((uint32_t)0x00000020)
#define EXTI_FTSR_TR6 ((uint32_t)0x00000040)
#define EXTI_FTSR_TR7 ((uint32_t)0x00000080)
#define EXTI_FTSR_TR8 ((uint32_t)0x00000100)
#define EXTI_FTSR_TR9 ((uint32_t)0x00000200)
#define EXTI_FTSR_TR10 ((uint32_t)0x00000400)
#define EXTI_FTSR_TR11 ((uint32_t)0x00000800)
#define EXTI_FTSR_TR12 ((uint32_t)0x00001000)
#define EXTI_FTSR_TR13 ((uint32_t)0x00002000)
#define EXTI_FTSR_TR14 ((uint32_t)0x00004000)
#define EXTI_FTSR_TR15 ((uint32_t)0x00008000)
#define EXTI_FTSR_TR16 ((uint32_t)0x00010000)
#define EXTI_FTSR_TR17 ((uint32_t)0x00020000)
#define EXTI_FTSR_TR18 ((uint32_t)0x00040000)
#define EXTI_FTSR_TR19 ((uint32_t)0x00080000)
#define EXTI_FTSR_TR20 ((uint32_t)0x00100000)
#define EXTI_FTSR_TR21 ((uint32_t)0x00200000)
#define EXTI_FTSR_TR22 ((uint32_t)0x00400000)
#define EXTI_FTSR_TR23 ((uint32_t)0x00800000)
#define EXTI_FTSR_TR24 ((uint32_t)0x01000000)
#define EXTI_FTSR_TR25 ((uint32_t)0x02000000)
#define EXTI_FTSR_TR26 ((uint32_t)0x04000000)
#define EXTI_FTSR_TR27 ((uint32_t)0x08000000)
#define EXTI_FTSR_TR28 ((uint32_t)0x10000000)


#define EXTI_SWIER_SWIER0 ((uint32_t)0x00000001)
#define EXTI_SWIER_SWIER1 ((uint32_t)0x00000002)
#define EXTI_SWIER_SWIER2 ((uint32_t)0x00000004)
#define EXTI_SWIER_SWIER3 ((uint32_t)0x00000008)
#define EXTI_SWIER_SWIER4 ((uint32_t)0x00000010)
#define EXTI_SWIER_SWIER5 ((uint32_t)0x00000020)
#define EXTI_SWIER_SWIER6 ((uint32_t)0x00000040)
#define EXTI_SWIER_SWIER7 ((uint32_t)0x00000080)
#define EXTI_SWIER_SWIER8 ((uint32_t)0x00000100)
#define EXTI_SWIER_SWIER9 ((uint32_t)0x00000200)
#define EXTI_SWIER_SWIER10 ((uint32_t)0x00000400)
#define EXTI_SWIER_SWIER11 ((uint32_t)0x00000800)
#define EXTI_SWIER_SWIER12 ((uint32_t)0x00001000)
#define EXTI_SWIER_SWIER13 ((uint32_t)0x00002000)
#define EXTI_SWIER_SWIER14 ((uint32_t)0x00004000)
#define EXTI_SWIER_SWIER15 ((uint32_t)0x00008000)
#define EXTI_SWIER_SWIER16 ((uint32_t)0x00010000)
#define EXTI_SWIER_SWIER17 ((uint32_t)0x00020000)
#define EXTI_SWIER_SWIER18 ((uint32_t)0x00040000)
#define EXTI_SWIER_SWIER19 ((uint32_t)0x00080000)
#define EXTI_SWIER_SWIER20 ((uint32_t)0x00100000)
#define EXTI_SWIER_SWIER21 ((uint32_t)0x00200000)
#define EXTI_SWIER_SWIER22 ((uint32_t)0x00400000)
#define EXTI_SWIER_SWIER23 ((uint32_t)0x00800000)
#define EXTI_SWIER_SWIER24 ((uint32_t)0x01000000)
#define EXTI_SWIER_SWIER25 ((uint32_t)0x02000000)
#define EXTI_SWIER_SWIER26 ((uint32_t)0x04000000)
#define EXTI_SWIER_SWIER27 ((uint32_t)0x08000000)
#define EXTI_SWIER_SWIER28 ((uint32_t)0x10000000)


#define EXTI_PR_PR0 ((uint32_t)0x00000001)
#define EXTI_PR_PR1 ((uint32_t)0x00000002)
#define EXTI_PR_PR2 ((uint32_t)0x00000004)
#define EXTI_PR_PR3 ((uint32_t)0x00000008)
#define EXTI_PR_PR4 ((uint32_t)0x00000010)
#define EXTI_PR_PR5 ((uint32_t)0x00000020)
#define EXTI_PR_PR6 ((uint32_t)0x00000040)
#define EXTI_PR_PR7 ((uint32_t)0x00000080)
#define EXTI_PR_PR8 ((uint32_t)0x00000100)
#define EXTI_PR_PR9 ((uint32_t)0x00000200)
#define EXTI_PR_PR10 ((uint32_t)0x00000400)
#define EXTI_PR_PR11 ((uint32_t)0x00000800)
#define EXTI_PR_PR12 ((uint32_t)0x00001000)
#define EXTI_PR_PR13 ((uint32_t)0x00002000)
#define EXTI_PR_PR14 ((uint32_t)0x00004000)
#define EXTI_PR_PR15 ((uint32_t)0x00008000)
#define EXTI_PR_PR16 ((uint32_t)0x00010000)
#define EXTI_PR_PR17 ((uint32_t)0x00020000)
#define EXTI_PR_PR18 ((uint32_t)0x00040000)
#define EXTI_PR_PR19 ((uint32_t)0x00080000)
#define EXTI_PR_PR20 ((uint32_t)0x00100000)
#define EXTI_PR_PR21 ((uint32_t)0x00200000)
#define EXTI_PR_PR22 ((uint32_t)0x00400000)
#define EXTI_PR_PR23 ((uint32_t)0x00800000)
#define EXTI_PR_PR24 ((uint32_t)0x01000000)
#define EXTI_PR_PR25 ((uint32_t)0x02000000)
#define EXTI_PR_PR26 ((uint32_t)0x04000000)
#define EXTI_PR_PR27 ((uint32_t)0x08000000)
#define EXTI_PR_PR28 ((uint32_t)0x10000000)







#define FLASH_ACR_LATENCY ((uint8_t)0x03)
#define FLASH_ACR_LATENCY_0 ((uint8_t)0x01)
#define FLASH_ACR_LATENCY_1 ((uint8_t)0x02)

#define FLASH_ACR_HLFCYA ((uint8_t)0x08)
#define FLASH_ACR_PRFTBE ((uint8_t)0x10)
#define FLASH_ACR_PRFTBS ((uint8_t)0x20)


#define FLASH_KEYR_FKEYR ((uint32_t)0xFFFFFFFF)

#define RDP_KEY ((uint16_t)0x00A5)
#define FLASH_KEY1 ((uint32_t)0x45670123)
#define FLASH_KEY2 ((uint32_t)0xCDEF89AB)


#define FLASH_OPTKEYR_OPTKEYR ((uint32_t)0xFFFFFFFF)

#define FLASH_OPTKEY1 FLASH_KEY1
#define FLASH_OPTKEY2 FLASH_KEY2


#define FLASH_SR_BSY ((uint32_t)0x00000001)
#define FLASH_SR_PGERR ((uint32_t)0x00000004)
#define FLASH_SR_WRPERR ((uint32_t)0x00000010)
#define FLASH_SR_EOP ((uint32_t)0x00000020)


#define FLASH_CR_PG ((uint32_t)0x00000001)
#define FLASH_CR_PER ((uint32_t)0x00000002)
#define FLASH_CR_MER ((uint32_t)0x00000004)
#define FLASH_CR_OPTPG ((uint32_t)0x00000010)
#define FLASH_CR_OPTER ((uint32_t)0x00000020)
#define FLASH_CR_STRT ((uint32_t)0x00000040)
#define FLASH_CR_LOCK ((uint32_t)0x00000080)
#define FLASH_CR_OPTWRE ((uint32_t)0x00000200)
#define FLASH_CR_ERRIE ((uint32_t)0x00000400)
#define FLASH_CR_EOPIE ((uint32_t)0x00001000)
#define FLASH_CR_OBL_LAUNCH ((uint32_t)0x00002000)


#define FLASH_AR_FAR ((uint32_t)0xFFFFFFFF)


#define FLASH_OBR_OPTERR ((uint32_t)0x00000001)
#define FLASH_OBR_RDPRT1 ((uint32_t)0x00000002)
#define FLASH_OBR_RDPRT2 ((uint32_t)0x00000004)

#define FLASH_OBR_USER ((uint32_t)0x00003700)
#define FLASH_OBR_IWDG_SW ((uint32_t)0x00000100)
#define FLASH_OBR_nRST_STOP ((uint32_t)0x00000200)
#define FLASH_OBR_nRST_STDBY ((uint32_t)0x00000400)


#define FLASH_WRPR_WRP ((uint32_t)0xFFFFFFFF)




#define OB_RDP_RDP ((uint32_t)0x000000FF)
#define OB_RDP_nRDP ((uint32_t)0x0000FF00)


#define OB_USER_USER ((uint32_t)0x00FF0000)
#define OB_USER_nUSER ((uint32_t)0xFF000000)


#define OB_WRP0_WRP0 ((uint32_t)0x000000FF)
#define OB_WRP0_nWRP0 ((uint32_t)0x0000FF00)


#define OB_WRP1_WRP1 ((uint32_t)0x00FF0000)
#define OB_WRP1_nWRP1 ((uint32_t)0xFF000000)


#define OB_WRP2_WRP2 ((uint32_t)0x000000FF)
#define OB_WRP2_nWRP2 ((uint32_t)0x0000FF00)


#define OB_WRP3_WRP3 ((uint32_t)0x00FF0000)
#define OB_WRP3_nWRP3 ((uint32_t)0xFF000000)






#define GPIO_MODER_MODER0 ((uint32_t)0x00000003)
#define GPIO_MODER_MODER0_0 ((uint32_t)0x00000001)
#define GPIO_MODER_MODER0_1 ((uint32_t)0x00000002)
#define GPIO_MODER_MODER1 ((uint32_t)0x0000000C)
#define GPIO_MODER_MODER1_0 ((uint32_t)0x00000004)
#define GPIO_MODER_MODER1_1 ((uint32_t)0x00000008)
#define GPIO_MODER_MODER2 ((uint32_t)0x00000030)
#define GPIO_MODER_MODER2_0 ((uint32_t)0x00000010)
#define GPIO_MODER_MODER2_1 ((uint32_t)0x00000020)
#define GPIO_MODER_MODER3 ((uint32_t)0x000000C0)
#define GPIO_MODER_MODER3_0 ((uint32_t)0x00000040)
#define GPIO_MODER_MODER3_1 ((uint32_t)0x00000080)
#define GPIO_MODER_MODER4 ((uint32_t)0x00000300)
#define GPIO_MODER_MODER4_0 ((uint32_t)0x00000100)
#define GPIO_MODER_MODER4_1 ((uint32_t)0x00000200)
#define GPIO_MODER_MODER5 ((uint32_t)0x00000C00)
#define GPIO_MODER_MODER5_0 ((uint32_t)0x00000400)
#define GPIO_MODER_MODER5_1 ((uint32_t)0x00000800)
#define GPIO_MODER_MODER6 ((uint32_t)0x00003000)
#define GPIO_MODER_MODER6_0 ((uint32_t)0x00001000)
#define GPIO_MODER_MODER6_1 ((uint32_t)0x00002000)
#define GPIO_MODER_MODER7 ((uint32_t)0x0000C000)
#define GPIO_MODER_MODER7_0 ((uint32_t)0x00004000)
#define GPIO_MODER_MODER7_1 ((uint32_t)0x00008000)
#define GPIO_MODER_MODER8 ((uint32_t)0x00030000)
#define GPIO_MODER_MODER8_0 ((uint32_t)0x00010000)
#define GPIO_MODER_MODER8_1 ((uint32_t)0x00020000)
#define GPIO_MODER_MODER9 ((uint32_t)0x000C0000)
#define GPIO_MODER_MODER9_0 ((uint32_t)0x00040000)
#define GPIO_MODER_MODER9_1 ((uint32_t)0x00080000)
#define GPIO_MODER_MODER10 ((uint32_t)0x00300000)
#define GPIO_MODER_MODER10_0 ((uint32_t)0x00100000)
#define GPIO_MODER_MODER10_1 ((uint32_t)0x00200000)
#define GPIO_MODER_MODER11 ((uint32_t)0x00C00000)
#define GPIO_MODER_MODER11_0 ((uint32_t)0x00400000)
#define GPIO_MODER_MODER11_1 ((uint32_t)0x00800000)
#define GPIO_MODER_MODER12 ((uint32_t)0x03000000)
#define GPIO_MODER_MODER12_0 ((uint32_t)0x01000000)
#define GPIO_MODER_MODER12_1 ((uint32_t)0x02000000)
#define GPIO_MODER_MODER13 ((uint32_t)0x0C000000)
#define GPIO_MODER_MODER13_0 ((uint32_t)0x04000000)
#define GPIO_MODER_MODER13_1 ((uint32_t)0x08000000)
#define GPIO_MODER_MODER14 ((uint32_t)0x30000000)
#define GPIO_MODER_MODER14_0 ((uint32_t)0x10000000)
#define GPIO_MODER_MODER14_1 ((uint32_t)0x20000000)
#define GPIO_MODER_MODER15 ((uint32_t)0xC0000000)
#define GPIO_MODER_MODER15_0 ((uint32_t)0x40000000)
#define GPIO_MODER_MODER15_1 ((uint32_t)0x80000000)



#define GPIO_OTYPER_OT_0 ((uint32_t)0x00000001)
#define GPIO_OTYPER_OT_1 ((uint32_t)0x00000002)
#define GPIO_OTYPER_OT_2 ((uint32_t)0x00000004)
#define GPIO_OTYPER_OT_3 ((uint32_t)0x00000008)
#define GPIO_OTYPER_OT_4 ((uint32_t)0x00000010)
#define GPIO_OTYPER_OT_5 ((uint32_t)0x00000020)
#define GPIO_OTYPER_OT_6 ((uint32_t)0x00000040)
#define GPIO_OTYPER_OT_7 ((uint32_t)0x00000080)
#define GPIO_OTYPER_OT_8 ((uint32_t)0x00000100)
#define GPIO_OTYPER_OT_9 ((uint32_t)0x00000200)
#define GPIO_OTYPER_OT_10 ((uint32_t)0x00000400)
#define GPIO_OTYPER_OT_11 ((uint32_t)0x00000800)
#define GPIO_OTYPER_OT_12 ((uint32_t)0x00001000)
#define GPIO_OTYPER_OT_13 ((uint32_t)0x00002000)
#define GPIO_OTYPER_OT_14 ((uint32_t)0x00004000)
#define GPIO_OTYPER_OT_15 ((uint32_t)0x00008000)



#define GPIO_OSPEEDER_OSPEEDR0 ((uint32_t)0x00000003)
#define GPIO_OSPEEDER_OSPEEDR0_0 ((uint32_t)0x00000001)
#define GPIO_OSPEEDER_OSPEEDR0_1 ((uint32_t)0x00000002)
#define GPIO_OSPEEDER_OSPEEDR1 ((uint32_t)0x0000000C)
#define GPIO_OSPEEDER_OSPEEDR1_0 ((uint32_t)0x00000004)
#define GPIO_OSPEEDER_OSPEEDR1_1 ((uint32_t)0x00000008)
#define GPIO_OSPEEDER_OSPEEDR2 ((uint32_t)0x00000030)
#define GPIO_OSPEEDER_OSPEEDR2_0 ((uint32_t)0x00000010)
#define GPIO_OSPEEDER_OSPEEDR2_1 ((uint32_t)0x00000020)
#define GPIO_OSPEEDER_OSPEEDR3 ((uint32_t)0x000000C0)
#define GPIO_OSPEEDER_OSPEEDR3_0 ((uint32_t)0x00000040)
#define GPIO_OSPEEDER_OSPEEDR3_1 ((uint32_t)0x00000080)
#define GPIO_OSPEEDER_OSPEEDR4 ((uint32_t)0x00000300)
#define GPIO_OSPEEDER_OSPEEDR4_0 ((uint32_t)0x00000100)
#define GPIO_OSPEEDER_OSPEEDR4_1 ((uint32_t)0x00000200)
#define GPIO_OSPEEDER_OSPEEDR5 ((uint32_t)0x00000C00)
#define GPIO_OSPEEDER_OSPEEDR5_0 ((uint32_t)0x00000400)
#define GPIO_OSPEEDER_OSPEEDR5_1 ((uint32_t)0x00000800)
#define GPIO_OSPEEDER_OSPEEDR6 ((uint32_t)0x00003000)
#define GPIO_OSPEEDER_OSPEEDR6_0 ((uint32_t)0x00001000)
#define GPIO_OSPEEDER_OSPEEDR6_1 ((uint32_t)0x00002000)
#define GPIO_OSPEEDER_OSPEEDR7 ((uint32_t)0x0000C000)
#define GPIO_OSPEEDER_OSPEEDR7_0 ((uint32_t)0x00004000)
#define GPIO_OSPEEDER_OSPEEDR7_1 ((uint32_t)0x00008000)
#define GPIO_OSPEEDER_OSPEEDR8 ((uint32_t)0x00030000)
#define GPIO_OSPEEDER_OSPEEDR8_0 ((uint32_t)0x00010000)
#define GPIO_OSPEEDER_OSPEEDR8_1 ((uint32_t)0x00020000)
#define GPIO_OSPEEDER_OSPEEDR9 ((uint32_t)0x000C0000)
#define GPIO_OSPEEDER_OSPEEDR9_0 ((uint32_t)0x00040000)
#define GPIO_OSPEEDER_OSPEEDR9_1 ((uint32_t)0x00080000)
#define GPIO_OSPEEDER_OSPEEDR10 ((uint32_t)0x00300000)
#define GPIO_OSPEEDER_OSPEEDR10_0 ((uint32_t)0x00100000)
#define GPIO_OSPEEDER_OSPEEDR10_1 ((uint32_t)0x00200000)
#define GPIO_OSPEEDER_OSPEEDR11 ((uint32_t)0x00C00000)
#define GPIO_OSPEEDER_OSPEEDR11_0 ((uint32_t)0x00400000)
#define GPIO_OSPEEDER_OSPEEDR11_1 ((uint32_t)0x00800000)
#define GPIO_OSPEEDER_OSPEEDR12 ((uint32_t)0x03000000)
#define GPIO_OSPEEDER_OSPEEDR12_0 ((uint32_t)0x01000000)
#define GPIO_OSPEEDER_OSPEEDR12_1 ((uint32_t)0x02000000)
#define GPIO_OSPEEDER_OSPEEDR13 ((uint32_t)0x0C000000)
#define GPIO_OSPEEDER_OSPEEDR13_0 ((uint32_t)0x04000000)
#define GPIO_OSPEEDER_OSPEEDR13_1 ((uint32_t)0x08000000)
#define GPIO_OSPEEDER_OSPEEDR14 ((uint32_t)0x30000000)
#define GPIO_OSPEEDER_OSPEEDR14_0 ((uint32_t)0x10000000)
#define GPIO_OSPEEDER_OSPEEDR14_1 ((uint32_t)0x20000000)
#define GPIO_OSPEEDER_OSPEEDR15 ((uint32_t)0xC0000000)
#define GPIO_OSPEEDER_OSPEEDR15_0 ((uint32_t)0x40000000)
#define GPIO_OSPEEDER_OSPEEDR15_1 ((uint32_t)0x80000000)


#define GPIO_PUPDR_PUPDR0 ((uint32_t)0x00000003)
#define GPIO_PUPDR_PUPDR0_0 ((uint32_t)0x00000001)
#define GPIO_PUPDR_PUPDR0_1 ((uint32_t)0x00000002)
#define GPIO_PUPDR_PUPDR1 ((uint32_t)0x0000000C)
#define GPIO_PUPDR_PUPDR1_0 ((uint32_t)0x00000004)
#define GPIO_PUPDR_PUPDR1_1 ((uint32_t)0x00000008)
#define GPIO_PUPDR_PUPDR2 ((uint32_t)0x00000030)
#define GPIO_PUPDR_PUPDR2_0 ((uint32_t)0x00000010)
#define GPIO_PUPDR_PUPDR2_1 ((uint32_t)0x00000020)
#define GPIO_PUPDR_PUPDR3 ((uint32_t)0x000000C0)
#define GPIO_PUPDR_PUPDR3_0 ((uint32_t)0x00000040)
#define GPIO_PUPDR_PUPDR3_1 ((uint32_t)0x00000080)
#define GPIO_PUPDR_PUPDR4 ((uint32_t)0x00000300)
#define GPIO_PUPDR_PUPDR4_0 ((uint32_t)0x00000100)
#define GPIO_PUPDR_PUPDR4_1 ((uint32_t)0x00000200)
#define GPIO_PUPDR_PUPDR5 ((uint32_t)0x00000C00)
#define GPIO_PUPDR_PUPDR5_0 ((uint32_t)0x00000400)
#define GPIO_PUPDR_PUPDR5_1 ((uint32_t)0x00000800)
#define GPIO_PUPDR_PUPDR6 ((uint32_t)0x00003000)
#define GPIO_PUPDR_PUPDR6_0 ((uint32_t)0x00001000)
#define GPIO_PUPDR_PUPDR6_1 ((uint32_t)0x00002000)
#define GPIO_PUPDR_PUPDR7 ((uint32_t)0x0000C000)
#define GPIO_PUPDR_PUPDR7_0 ((uint32_t)0x00004000)
#define GPIO_PUPDR_PUPDR7_1 ((uint32_t)0x00008000)
#define GPIO_PUPDR_PUPDR8 ((uint32_t)0x00030000)
#define GPIO_PUPDR_PUPDR8_0 ((uint32_t)0x00010000)
#define GPIO_PUPDR_PUPDR8_1 ((uint32_t)0x00020000)
#define GPIO_PUPDR_PUPDR9 ((uint32_t)0x000C0000)
#define GPIO_PUPDR_PUPDR9_0 ((uint32_t)0x00040000)
#define GPIO_PUPDR_PUPDR9_1 ((uint32_t)0x00080000)
#define GPIO_PUPDR_PUPDR10 ((uint32_t)0x00300000)
#define GPIO_PUPDR_PUPDR10_0 ((uint32_t)0x00100000)
#define GPIO_PUPDR_PUPDR10_1 ((uint32_t)0x00200000)
#define GPIO_PUPDR_PUPDR11 ((uint32_t)0x00C00000)
#define GPIO_PUPDR_PUPDR11_0 ((uint32_t)0x00400000)
#define GPIO_PUPDR_PUPDR11_1 ((uint32_t)0x00800000)
#define GPIO_PUPDR_PUPDR12 ((uint32_t)0x03000000)
#define GPIO_PUPDR_PUPDR12_0 ((uint32_t)0x01000000)
#define GPIO_PUPDR_PUPDR12_1 ((uint32_t)0x02000000)
#define GPIO_PUPDR_PUPDR13 ((uint32_t)0x0C000000)
#define GPIO_PUPDR_PUPDR13_0 ((uint32_t)0x04000000)
#define GPIO_PUPDR_PUPDR13_1 ((uint32_t)0x08000000)
#define GPIO_PUPDR_PUPDR14 ((uint32_t)0x30000000)
#define GPIO_PUPDR_PUPDR14_0 ((uint32_t)0x10000000)
#define GPIO_PUPDR_PUPDR14_1 ((uint32_t)0x20000000)
#define GPIO_PUPDR_PUPDR15 ((uint32_t)0xC0000000)
#define GPIO_PUPDR_PUPDR15_0 ((uint32_t)0x40000000)
#define GPIO_PUPDR_PUPDR15_1 ((uint32_t)0x80000000)


#define GPIO_IDR_0 ((uint32_t)0x00000001)
#define GPIO_IDR_1 ((uint32_t)0x00000002)
#define GPIO_IDR_2 ((uint32_t)0x00000004)
#define GPIO_IDR_3 ((uint32_t)0x00000008)
#define GPIO_IDR_4 ((uint32_t)0x00000010)
#define GPIO_IDR_5 ((uint32_t)0x00000020)
#define GPIO_IDR_6 ((uint32_t)0x00000040)
#define GPIO_IDR_7 ((uint32_t)0x00000080)
#define GPIO_IDR_8 ((uint32_t)0x00000100)
#define GPIO_IDR_9 ((uint32_t)0x00000200)
#define GPIO_IDR_10 ((uint32_t)0x00000400)
#define GPIO_IDR_11 ((uint32_t)0x00000800)
#define GPIO_IDR_12 ((uint32_t)0x00001000)
#define GPIO_IDR_13 ((uint32_t)0x00002000)
#define GPIO_IDR_14 ((uint32_t)0x00004000)
#define GPIO_IDR_15 ((uint32_t)0x00008000)


#define GPIO_ODR_0 ((uint32_t)0x00000001)
#define GPIO_ODR_1 ((uint32_t)0x00000002)
#define GPIO_ODR_2 ((uint32_t)0x00000004)
#define GPIO_ODR_3 ((uint32_t)0x00000008)
#define GPIO_ODR_4 ((uint32_t)0x00000010)
#define GPIO_ODR_5 ((uint32_t)0x00000020)
#define GPIO_ODR_6 ((uint32_t)0x00000040)
#define GPIO_ODR_7 ((uint32_t)0x00000080)
#define GPIO_ODR_8 ((uint32_t)0x00000100)
#define GPIO_ODR_9 ((uint32_t)0x00000200)
#define GPIO_ODR_10 ((uint32_t)0x00000400)
#define GPIO_ODR_11 ((uint32_t)0x00000800)
#define GPIO_ODR_12 ((uint32_t)0x00001000)
#define GPIO_ODR_13 ((uint32_t)0x00002000)
#define GPIO_ODR_14 ((uint32_t)0x00004000)
#define GPIO_ODR_15 ((uint32_t)0x00008000)


#define GPIO_BSRR_BS_0 ((uint32_t)0x00000001)
#define GPIO_BSRR_BS_1 ((uint32_t)0x00000002)
#define GPIO_BSRR_BS_2 ((uint32_t)0x00000004)
#define GPIO_BSRR_BS_3 ((uint32_t)0x00000008)
#define GPIO_BSRR_BS_4 ((uint32_t)0x00000010)
#define GPIO_BSRR_BS_5 ((uint32_t)0x00000020)
#define GPIO_BSRR_BS_6 ((uint32_t)0x00000040)
#define GPIO_BSRR_BS_7 ((uint32_t)0x00000080)
#define GPIO_BSRR_BS_8 ((uint32_t)0x00000100)
#define GPIO_BSRR_BS_9 ((uint32_t)0x00000200)
#define GPIO_BSRR_BS_10 ((uint32_t)0x00000400)
#define GPIO_BSRR_BS_11 ((uint32_t)0x00000800)
#define GPIO_BSRR_BS_12 ((uint32_t)0x00001000)
#define GPIO_BSRR_BS_13 ((uint32_t)0x00002000)
#define GPIO_BSRR_BS_14 ((uint32_t)0x00004000)
#define GPIO_BSRR_BS_15 ((uint32_t)0x00008000)
#define GPIO_BSRR_BR_0 ((uint32_t)0x00010000)
#define GPIO_BSRR_BR_1 ((uint32_t)0x00020000)
#define GPIO_BSRR_BR_2 ((uint32_t)0x00040000)
#define GPIO_BSRR_BR_3 ((uint32_t)0x00080000)
#define GPIO_BSRR_BR_4 ((uint32_t)0x00100000)
#define GPIO_BSRR_BR_5 ((uint32_t)0x00200000)
#define GPIO_BSRR_BR_6 ((uint32_t)0x00400000)
#define GPIO_BSRR_BR_7 ((uint32_t)0x00800000)
#define GPIO_BSRR_BR_8 ((uint32_t)0x01000000)
#define GPIO_BSRR_BR_9 ((uint32_t)0x02000000)
#define GPIO_BSRR_BR_10 ((uint32_t)0x04000000)
#define GPIO_BSRR_BR_11 ((uint32_t)0x08000000)
#define GPIO_BSRR_BR_12 ((uint32_t)0x10000000)
#define GPIO_BSRR_BR_13 ((uint32_t)0x20000000)
#define GPIO_BSRR_BR_14 ((uint32_t)0x40000000)
#define GPIO_BSRR_BR_15 ((uint32_t)0x80000000)


#define GPIO_LCKR_LCK0 ((uint32_t)0x00000001)
#define GPIO_LCKR_LCK1 ((uint32_t)0x00000002)
#define GPIO_LCKR_LCK2 ((uint32_t)0x00000004)
#define GPIO_LCKR_LCK3 ((uint32_t)0x00000008)
#define GPIO_LCKR_LCK4 ((uint32_t)0x00000010)
#define GPIO_LCKR_LCK5 ((uint32_t)0x00000020)
#define GPIO_LCKR_LCK6 ((uint32_t)0x00000040)
#define GPIO_LCKR_LCK7 ((uint32_t)0x00000080)
#define GPIO_LCKR_LCK8 ((uint32_t)0x00000100)
#define GPIO_LCKR_LCK9 ((uint32_t)0x00000200)
#define GPIO_LCKR_LCK10 ((uint32_t)0x00000400)
#define GPIO_LCKR_LCK11 ((uint32_t)0x00000800)
#define GPIO_LCKR_LCK12 ((uint32_t)0x00001000)
#define GPIO_LCKR_LCK13 ((uint32_t)0x00002000)
#define GPIO_LCKR_LCK14 ((uint32_t)0x00004000)
#define GPIO_LCKR_LCK15 ((uint32_t)0x00008000)
#define GPIO_LCKR_LCKK ((uint32_t)0x00010000)


#define GPIO_AFRL_AFRL0 ((uint32_t)0x0000000F)
#define GPIO_AFRL_AFRL1 ((uint32_t)0x000000F0)
#define GPIO_AFRL_AFRL2 ((uint32_t)0x00000F00)
#define GPIO_AFRL_AFRL3 ((uint32_t)0x0000F000)
#define GPIO_AFRL_AFRL4 ((uint32_t)0x000F0000)
#define GPIO_AFRL_AFRL5 ((uint32_t)0x00F00000)
#define GPIO_AFRL_AFRL6 ((uint32_t)0x0F000000)
#define GPIO_AFRL_AFRL7 ((uint32_t)0xF0000000)


#define GPIO_AFRH_AFRH0 ((uint32_t)0x0000000F)
#define GPIO_AFRH_AFRH1 ((uint32_t)0x000000F0)
#define GPIO_AFRH_AFRH2 ((uint32_t)0x00000F00)
#define GPIO_AFRH_AFRH3 ((uint32_t)0x0000F000)
#define GPIO_AFRH_AFRH4 ((uint32_t)0x000F0000)
#define GPIO_AFRH_AFRH5 ((uint32_t)0x00F00000)
#define GPIO_AFRH_AFRH6 ((uint32_t)0x0F000000)
#define GPIO_AFRH_AFRH7 ((uint32_t)0xF0000000)


#define GPIO_BRR_BR_0 ((uint32_t)0x00000001)
#define GPIO_BRR_BR_1 ((uint32_t)0x00000002)
#define GPIO_BRR_BR_2 ((uint32_t)0x00000004)
#define GPIO_BRR_BR_3 ((uint32_t)0x00000008)
#define GPIO_BRR_BR_4 ((uint32_t)0x00000010)
#define GPIO_BRR_BR_5 ((uint32_t)0x00000020)
#define GPIO_BRR_BR_6 ((uint32_t)0x00000040)
#define GPIO_BRR_BR_7 ((uint32_t)0x00000080)
#define GPIO_BRR_BR_8 ((uint32_t)0x00000100)
#define GPIO_BRR_BR_9 ((uint32_t)0x00000200)
#define GPIO_BRR_BR_10 ((uint32_t)0x00000400)
#define GPIO_BRR_BR_11 ((uint32_t)0x00000800)
#define GPIO_BRR_BR_12 ((uint32_t)0x00001000)
#define GPIO_BRR_BR_13 ((uint32_t)0x00002000)
#define GPIO_BRR_BR_14 ((uint32_t)0x00004000)
#define GPIO_BRR_BR_15 ((uint32_t)0x00008000)







#define I2C_CR1_PE ((uint32_t)0x00000001)
#define I2C_CR1_TXIE ((uint32_t)0x00000002)
#define I2C_CR1_RXIE ((uint32_t)0x00000004)
#define I2C_CR1_ADDRIE ((uint32_t)0x00000008)
#define I2C_CR1_NACKIE ((uint32_t)0x00000010)
#define I2C_CR1_STOPIE ((uint32_t)0x00000020)
#define I2C_CR1_TCIE ((uint32_t)0x00000040)
#define I2C_CR1_ERRIE ((uint32_t)0x00000080)
#define I2C_CR1_DFN ((uint32_t)0x00000F00)
#define I2C_CR1_ANFOFF ((uint32_t)0x00001000)
#define I2C_CR1_SWRST ((uint32_t)0x00002000)
#define I2C_CR1_TXDMAEN ((uint32_t)0x00004000)
#define I2C_CR1_RXDMAEN ((uint32_t)0x00008000)
#define I2C_CR1_SBC ((uint32_t)0x00010000)
#define I2C_CR1_NOSTRETCH ((uint32_t)0x00020000)
#define I2C_CR1_WUPEN ((uint32_t)0x00040000)
#define I2C_CR1_GCEN ((uint32_t)0x00080000)
#define I2C_CR1_SMBHEN ((uint32_t)0x00100000)
#define I2C_CR1_SMBDEN ((uint32_t)0x00200000)
#define I2C_CR1_ALERTEN ((uint32_t)0x00400000)
#define I2C_CR1_PECEN ((uint32_t)0x00800000)


#define I2C_CR2_SADD ((uint32_t)0x000003FF)
#define I2C_CR2_RD_WRN ((uint32_t)0x00000400)
#define I2C_CR2_ADD10 ((uint32_t)0x00000800)
#define I2C_CR2_HEAD10R ((uint32_t)0x00001000)
#define I2C_CR2_START ((uint32_t)0x00002000)
#define I2C_CR2_STOP ((uint32_t)0x00004000)
#define I2C_CR2_NACK ((uint32_t)0x00008000)
#define I2C_CR2_NBYTES ((uint32_t)0x00FF0000)
#define I2C_CR2_RELOAD ((uint32_t)0x01000000)
#define I2C_CR2_AUTOEND ((uint32_t)0x02000000)
#define I2C_CR2_PECBYTE ((uint32_t)0x04000000)


#define I2C_OAR1_OA1 ((uint32_t)0x000003FF)
#define I2C_OAR1_OA1MODE ((uint32_t)0x00000400)
#define I2C_OAR1_OA1EN ((uint32_t)0x00008000)


#define I2C_OAR2_OA2 ((uint32_t)0x000000FE)
#define I2C_OAR2_OA2MSK ((uint32_t)0x00000700)
#define I2C_OAR2_OA2EN ((uint32_t)0x00008000)


#define I2C_TIMINGR_SCLL ((uint32_t)0x000000FF)
#define I2C_TIMINGR_SCLH ((uint32_t)0x0000FF00)
#define I2C_TIMINGR_SDADEL ((uint32_t)0x000F0000)
#define I2C_TIMINGR_SCLDEL ((uint32_t)0x00F00000)
#define I2C_TIMINGR_PRESC ((uint32_t)0xF0000000)


#define I2C_TIMEOUTR_TIMEOUTA ((uint32_t)0x00000FFF)
#define I2C_TIMEOUTR_TIDLE ((uint32_t)0x00001000)
#define I2C_TIMEOUTR_TIMOUTEN ((uint32_t)0x00008000)
#define I2C_TIMEOUTR_TIMEOUTB ((uint32_t)0x0FFF0000)
#define I2C_TIMEOUTR_TEXTEN ((uint32_t)0x80000000)


#define I2C_ISR_TXE ((uint32_t)0x00000001)
#define I2C_ISR_TXIS ((uint32_t)0x00000002)
#define I2C_ISR_RXNE ((uint32_t)0x00000004)
#define I2C_ISR_ADDR ((uint32_t)0x00000008)
#define I2C_ISR_NACKF ((uint32_t)0x00000010)
#define I2C_ISR_STOPF ((uint32_t)0x00000020)
#define I2C_ISR_TC ((uint32_t)0x00000040)
#define I2C_ISR_TCR ((uint32_t)0x00000080)
#define I2C_ISR_BERR ((uint32_t)0x00000100)
#define I2C_ISR_ARLO ((uint32_t)0x00000200)
#define I2C_ISR_OVR ((uint32_t)0x00000400)
#define I2C_ISR_PECERR ((uint32_t)0x00000800)
#define I2C_ISR_TIMEOUT ((uint32_t)0x00001000)
#define I2C_ISR_ALERT ((uint32_t)0x00002000)
#define I2C_ISR_BUSY ((uint32_t)0x00008000)
#define I2C_ISR_DIR ((uint32_t)0x00010000)
#define I2C_ISR_ADDCODE ((uint32_t)0x00FE0000)


#define I2C_ICR_ADDRCF ((uint32_t)0x00000008)
#define I2C_ICR_NACKCF ((uint32_t)0x00000010)
#define I2C_ICR_STOPCF ((uint32_t)0x00000020)
#define I2C_ICR_BERRCF ((uint32_t)0x00000100)
#define I2C_ICR_ARLOCF ((uint32_t)0x00000200)
#define I2C_ICR_OVRCF ((uint32_t)0x00000400)
#define I2C_ICR_PECCF ((uint32_t)0x00000800)
#define I2C_ICR_TIMOUTCF ((uint32_t)0x00001000)
#define I2C_ICR_ALERTCF ((uint32_t)0x00002000)


#define I2C_PECR_PEC ((uint32_t)0x000000FF)


#define I2C_RXDR_RXDATA ((uint32_t)0x000000FF)


#define I2C_TXDR_TXDATA ((uint32_t)0x000000FF)
# 5902 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
#define IWDG_KR_KEY ((uint16_t)0xFFFF)


#define IWDG_PR_PR ((uint8_t)0x07)
#define IWDG_PR_PR_0 ((uint8_t)0x01)
#define IWDG_PR_PR_1 ((uint8_t)0x02)
#define IWDG_PR_PR_2 ((uint8_t)0x04)


#define IWDG_RLR_RL ((uint16_t)0x0FFF)


#define IWDG_SR_PVU ((uint8_t)0x01)
#define IWDG_SR_RVU ((uint8_t)0x02)
#define IWDG_SR_WVU ((uint8_t)0x04)


#define IWDG_WINR_WIN ((uint16_t)0x0FFF)







#define PWR_CR_LPSDSR ((uint16_t)0x0001)
#define PWR_CR_PDDS ((uint16_t)0x0002)
#define PWR_CR_CWUF ((uint16_t)0x0004)
#define PWR_CR_CSBF ((uint16_t)0x0008)
#define PWR_CR_PVDE ((uint16_t)0x0010)

#define PWR_CR_PLS ((uint16_t)0x00E0)
#define PWR_CR_PLS_0 ((uint16_t)0x0020)
#define PWR_CR_PLS_1 ((uint16_t)0x0040)
#define PWR_CR_PLS_2 ((uint16_t)0x0080)


#define PWR_CR_PLS_LEV0 ((uint16_t)0x0000)
#define PWR_CR_PLS_LEV1 ((uint16_t)0x0020)
#define PWR_CR_PLS_LEV2 ((uint16_t)0x0040)
#define PWR_CR_PLS_LEV3 ((uint16_t)0x0060)
#define PWR_CR_PLS_LEV4 ((uint16_t)0x0080)
#define PWR_CR_PLS_LEV5 ((uint16_t)0x00A0)
#define PWR_CR_PLS_LEV6 ((uint16_t)0x00C0)
#define PWR_CR_PLS_LEV7 ((uint16_t)0x00E0)

#define PWR_CR_DBP ((uint16_t)0x0100)


#define PWR_CSR_WUF ((uint16_t)0x0001)
#define PWR_CSR_SBF ((uint16_t)0x0002)
#define PWR_CSR_PVDO ((uint16_t)0x0004)
#define PWR_CSR_VREFINTRDYF ((uint16_t)0x0008)

#define PWR_CSR_EWUP1 ((uint16_t)0x0100)
#define PWR_CSR_EWUP2 ((uint16_t)0x0200)
#define PWR_CSR_EWUP3 ((uint16_t)0x0400)







#define RCC_CR_HSION ((uint32_t)0x00000001)
#define RCC_CR_HSIRDY ((uint32_t)0x00000002)

#define RCC_CR_HSITRIM ((uint32_t)0x000000F8)
#define RCC_CR_HSITRIM_0 ((uint32_t)0x00000008)
#define RCC_CR_HSITRIM_1 ((uint32_t)0x00000010)
#define RCC_CR_HSITRIM_2 ((uint32_t)0x00000020)
#define RCC_CR_HSITRIM_3 ((uint32_t)0x00000040)
#define RCC_CR_HSITRIM_4 ((uint32_t)0x00000080)

#define RCC_CR_HSICAL ((uint32_t)0x0000FF00)
#define RCC_CR_HSICAL_0 ((uint32_t)0x00000100)
#define RCC_CR_HSICAL_1 ((uint32_t)0x00000200)
#define RCC_CR_HSICAL_2 ((uint32_t)0x00000400)
#define RCC_CR_HSICAL_3 ((uint32_t)0x00000800)
#define RCC_CR_HSICAL_4 ((uint32_t)0x00001000)
#define RCC_CR_HSICAL_5 ((uint32_t)0x00002000)
#define RCC_CR_HSICAL_6 ((uint32_t)0x00004000)
#define RCC_CR_HSICAL_7 ((uint32_t)0x00008000)

#define RCC_CR_HSEON ((uint32_t)0x00010000)
#define RCC_CR_HSERDY ((uint32_t)0x00020000)
#define RCC_CR_HSEBYP ((uint32_t)0x00040000)
#define RCC_CR_CSSON ((uint32_t)0x00080000)

#define RCC_CR_PLLON ((uint32_t)0x01000000)
#define RCC_CR_PLLRDY ((uint32_t)0x02000000)



#define RCC_CFGR_SW ((uint32_t)0x00000003)
#define RCC_CFGR_SW_0 ((uint32_t)0x00000001)
#define RCC_CFGR_SW_1 ((uint32_t)0x00000002)

#define RCC_CFGR_SW_HSI ((uint32_t)0x00000000)
#define RCC_CFGR_SW_HSE ((uint32_t)0x00000001)
#define RCC_CFGR_SW_PLL ((uint32_t)0x00000002)


#define RCC_CFGR_SWS ((uint32_t)0x0000000C)
#define RCC_CFGR_SWS_0 ((uint32_t)0x00000004)
#define RCC_CFGR_SWS_1 ((uint32_t)0x00000008)

#define RCC_CFGR_SWS_HSI ((uint32_t)0x00000000)
#define RCC_CFGR_SWS_HSE ((uint32_t)0x00000004)
#define RCC_CFGR_SWS_PLL ((uint32_t)0x00000008)


#define RCC_CFGR_HPRE ((uint32_t)0x000000F0)
#define RCC_CFGR_HPRE_0 ((uint32_t)0x00000010)
#define RCC_CFGR_HPRE_1 ((uint32_t)0x00000020)
#define RCC_CFGR_HPRE_2 ((uint32_t)0x00000040)
#define RCC_CFGR_HPRE_3 ((uint32_t)0x00000080)

#define RCC_CFGR_HPRE_DIV1 ((uint32_t)0x00000000)
#define RCC_CFGR_HPRE_DIV2 ((uint32_t)0x00000080)
#define RCC_CFGR_HPRE_DIV4 ((uint32_t)0x00000090)
#define RCC_CFGR_HPRE_DIV8 ((uint32_t)0x000000A0)
#define RCC_CFGR_HPRE_DIV16 ((uint32_t)0x000000B0)
#define RCC_CFGR_HPRE_DIV64 ((uint32_t)0x000000C0)
#define RCC_CFGR_HPRE_DIV128 ((uint32_t)0x000000D0)
#define RCC_CFGR_HPRE_DIV256 ((uint32_t)0x000000E0)
#define RCC_CFGR_HPRE_DIV512 ((uint32_t)0x000000F0)


#define RCC_CFGR_PPRE1 ((uint32_t)0x00000700)
#define RCC_CFGR_PPRE1_0 ((uint32_t)0x00000100)
#define RCC_CFGR_PPRE1_1 ((uint32_t)0x00000200)
#define RCC_CFGR_PPRE1_2 ((uint32_t)0x00000400)

#define RCC_CFGR_PPRE1_DIV1 ((uint32_t)0x00000000)
#define RCC_CFGR_PPRE1_DIV2 ((uint32_t)0x00000400)
#define RCC_CFGR_PPRE1_DIV4 ((uint32_t)0x00000500)
#define RCC_CFGR_PPRE1_DIV8 ((uint32_t)0x00000600)
#define RCC_CFGR_PPRE1_DIV16 ((uint32_t)0x00000700)


#define RCC_CFGR_PPRE2 ((uint32_t)0x00003800)
#define RCC_CFGR_PPRE2_0 ((uint32_t)0x00000800)
#define RCC_CFGR_PPRE2_1 ((uint32_t)0x00001000)
#define RCC_CFGR_PPRE2_2 ((uint32_t)0x00002000)

#define RCC_CFGR_PPRE2_DIV1 ((uint32_t)0x00000000)
#define RCC_CFGR_PPRE2_DIV2 ((uint32_t)0x00002000)
#define RCC_CFGR_PPRE2_DIV4 ((uint32_t)0x00002800)
#define RCC_CFGR_PPRE2_DIV8 ((uint32_t)0x00003000)
#define RCC_CFGR_PPRE2_DIV16 ((uint32_t)0x00003800)

#define RCC_CFGR_PLLSRC ((uint32_t)0x00010000)

#define RCC_CFGR_PLLXTPRE ((uint32_t)0x00020000)


#define RCC_CFGR_PLLMULL ((uint32_t)0x003C0000)
#define RCC_CFGR_PLLMULL_0 ((uint32_t)0x00040000)
#define RCC_CFGR_PLLMULL_1 ((uint32_t)0x00080000)
#define RCC_CFGR_PLLMULL_2 ((uint32_t)0x00100000)
#define RCC_CFGR_PLLMULL_3 ((uint32_t)0x00200000)

#define RCC_CFGR_PLLSRC_HSI_Div2 ((uint32_t)0x00000000)
#define RCC_CFGR_PLLSRC_PREDIV1 ((uint32_t)0x00010000)

#define RCC_CFGR_PLLXTPRE_PREDIV1 ((uint32_t)0x00000000)
#define RCC_CFGR_PLLXTPRE_PREDIV1_Div2 ((uint32_t)0x00020000)

#define RCC_CFGR_PLLMULL2 ((uint32_t)0x00000000)
#define RCC_CFGR_PLLMULL3 ((uint32_t)0x00040000)
#define RCC_CFGR_PLLMULL4 ((uint32_t)0x00080000)
#define RCC_CFGR_PLLMULL5 ((uint32_t)0x000C0000)
#define RCC_CFGR_PLLMULL6 ((uint32_t)0x00100000)
#define RCC_CFGR_PLLMULL7 ((uint32_t)0x00140000)
#define RCC_CFGR_PLLMULL8 ((uint32_t)0x00180000)
#define RCC_CFGR_PLLMULL9 ((uint32_t)0x001C0000)
#define RCC_CFGR_PLLMULL10 ((uint32_t)0x00200000)
#define RCC_CFGR_PLLMULL11 ((uint32_t)0x00240000)
#define RCC_CFGR_PLLMULL12 ((uint32_t)0x00280000)
#define RCC_CFGR_PLLMULL13 ((uint32_t)0x002C0000)
#define RCC_CFGR_PLLMULL14 ((uint32_t)0x00300000)
#define RCC_CFGR_PLLMULL15 ((uint32_t)0x00340000)
#define RCC_CFGR_PLLMULL16 ((uint32_t)0x00380000)


#define RCC_CFGR_USBPRE ((uint32_t)0x00400000)


#define RCC_CFGR_I2SSRC ((uint32_t)0x00800000)


#define RCC_CFGR_MCO ((uint32_t)0x07000000)
#define RCC_CFGR_MCO_0 ((uint32_t)0x01000000)
#define RCC_CFGR_MCO_1 ((uint32_t)0x02000000)
#define RCC_CFGR_MCO_2 ((uint32_t)0x04000000)

#define RCC_CFGR_MCO_NOCLOCK ((uint32_t)0x00000000)
#define RCC_CFGR_MCO_LSI ((uint32_t)0x02000000)
#define RCC_CFGR_MCO_LSE ((uint32_t)0x03000000)
#define RCC_CFGR_MCO_SYSCLK ((uint32_t)0x04000000)
#define RCC_CFGR_MCO_HSI ((uint32_t)0x05000000)
#define RCC_CFGR_MCO_HSE ((uint32_t)0x06000000)
#define RCC_CFGR_MCO_PLL ((uint32_t)0x07000000)

#define RCC_CFGR_MCOF ((uint32_t)0x10000000)

#define RCC_CFGR_MCO_PRE ((uint32_t)0x70000000)
#define RCC_CFGR_MCO_PRE_1 ((uint32_t)0x00000000)
#define RCC_CFGR_MCO_PRE_2 ((uint32_t)0x10000000)
#define RCC_CFGR_MCO_PRE_4 ((uint32_t)0x20000000)
#define RCC_CFGR_MCO_PRE_8 ((uint32_t)0x30000000)
#define RCC_CFGR_MCO_PRE_16 ((uint32_t)0x40000000)
#define RCC_CFGR_MCO_PRE_32 ((uint32_t)0x50000000)
#define RCC_CFGR_MCO_PRE_64 ((uint32_t)0x60000000)
#define RCC_CFGR_MCO_PRE_128 ((uint32_t)0x70000000)

#define RCC_CFGR_PLLNODIV ((uint32_t)0x80000000)


#define RCC_CIR_LSIRDYF ((uint32_t)0x00000001)
#define RCC_CIR_LSERDYF ((uint32_t)0x00000002)
#define RCC_CIR_HSIRDYF ((uint32_t)0x00000004)
#define RCC_CIR_HSERDYF ((uint32_t)0x00000008)
#define RCC_CIR_PLLRDYF ((uint32_t)0x00000010)
#define RCC_CIR_CSSF ((uint32_t)0x00000080)
#define RCC_CIR_LSIRDYIE ((uint32_t)0x00000100)
#define RCC_CIR_LSERDYIE ((uint32_t)0x00000200)
#define RCC_CIR_HSIRDYIE ((uint32_t)0x00000400)
#define RCC_CIR_HSERDYIE ((uint32_t)0x00000800)
#define RCC_CIR_PLLRDYIE ((uint32_t)0x00001000)
#define RCC_CIR_LSIRDYC ((uint32_t)0x00010000)
#define RCC_CIR_LSERDYC ((uint32_t)0x00020000)
#define RCC_CIR_HSIRDYC ((uint32_t)0x00040000)
#define RCC_CIR_HSERDYC ((uint32_t)0x00080000)
#define RCC_CIR_PLLRDYC ((uint32_t)0x00100000)
#define RCC_CIR_CSSC ((uint32_t)0x00800000)


#define RCC_APB2RSTR_SYSCFGRST ((uint32_t)0x00000001)
#define RCC_APB2RSTR_TIM1RST ((uint32_t)0x00000200)
#define RCC_APB2RSTR_SPI1RST ((uint32_t)0x00001000)
#define RCC_APB2RSTR_TIM8RST ((uint32_t)0x00000200)
#define RCC_APB2RSTR_USART1RST ((uint32_t)0x00004000)
#define RCC_APB2RSTR_TIM15RST ((uint32_t)0x00010000)
#define RCC_APB2RSTR_TIM16RST ((uint32_t)0x00020000)
#define RCC_APB2RSTR_TIM17RST ((uint32_t)0x00040000)
#define RCC_APB2RSTR_HRTIM1RST ((uint32_t)0x20000000)


#define RCC_APB1RSTR_TIM2RST ((uint32_t)0x00000001)
#define RCC_APB1RSTR_TIM3RST ((uint32_t)0x00000002)
#define RCC_APB1RSTR_TIM4RST ((uint32_t)0x00000004)
#define RCC_APB1RSTR_TIM6RST ((uint32_t)0x00000010)
#define RCC_APB1RSTR_TIM7RST ((uint32_t)0x00000020)
#define RCC_APB1RSTR_WWDGRST ((uint32_t)0x00000800)
#define RCC_APB1RSTR_SPI2RST ((uint32_t)0x00004000)
#define RCC_APB1RSTR_SPI3RST ((uint32_t)0x00008000)
#define RCC_APB1RSTR_USART2RST ((uint32_t)0x00020000)
#define RCC_APB1RSTR_USART3RST ((uint32_t)0x00040000)
#define RCC_APB1RSTR_UART4RST ((uint32_t)0x00080000)
#define RCC_APB1RSTR_UART5RST ((uint32_t)0x00100000)
#define RCC_APB1RSTR_I2C1RST ((uint32_t)0x00200000)
#define RCC_APB1RSTR_I2C2RST ((uint32_t)0x00400000)
#define RCC_APB1RSTR_USBRST ((uint32_t)0x00800000)
#define RCC_APB1RSTR_CAN1RST ((uint32_t)0x02000000)
#define RCC_APB1RSTR_PWRRST ((uint32_t)0x10000000)
#define RCC_APB1RSTR_DAC1RST ((uint32_t)0x20000000)
#define RCC_APB1RSTR_I2C3RST ((uint32_t)0x40000000)
#define RCC_APB1RSTR_DAC2RST ((uint32_t)0x04000000)
#define RCC_APB1RSTR_DACRST RCC_APB1RSTR_DAC1RST


#define RCC_AHBENR_DMA1EN ((uint32_t)0x00000001)
#define RCC_AHBENR_DMA2EN ((uint32_t)0x00000002)
#define RCC_AHBENR_SRAMEN ((uint32_t)0x00000004)
#define RCC_AHBENR_FLITFEN ((uint32_t)0x00000010)
#define RCC_AHBENR_CRCEN ((uint32_t)0x00000040)
#define RCC_AHBENR_GPIOAEN ((uint32_t)0x00020000)
#define RCC_AHBENR_GPIOBEN ((uint32_t)0x00040000)
#define RCC_AHBENR_GPIOCEN ((uint32_t)0x00080000)
#define RCC_AHBENR_GPIODEN ((uint32_t)0x00100000)
#define RCC_AHBENR_GPIOEEN ((uint32_t)0x00200000)
#define RCC_AHBENR_GPIOFEN ((uint32_t)0x00400000)
#define RCC_AHBENR_TSEN ((uint32_t)0x01000000)
#define RCC_AHBENR_ADC12EN ((uint32_t)0x10000000)
#define RCC_AHBENR_ADC34EN ((uint32_t)0x20000000)


#define RCC_APB2ENR_SYSCFGEN ((uint32_t)0x00000001)
#define RCC_APB2ENR_TIM1EN ((uint32_t)0x00000800)
#define RCC_APB2ENR_SPI1EN ((uint32_t)0x00001000)
#define RCC_APB2ENR_TIM8EN ((uint32_t)0x00002000)
#define RCC_APB2ENR_USART1EN ((uint32_t)0x00004000)
#define RCC_APB2ENR_TIM15EN ((uint32_t)0x00010000)
#define RCC_APB2ENR_TIM16EN ((uint32_t)0x00020000)
#define RCC_APB2ENR_TIM17EN ((uint32_t)0x00040000)
#define RCC_APB2ENR_HRTIM1 ((uint32_t)0x20000000)


#define RCC_APB1ENR_TIM2EN ((uint32_t)0x00000001)
#define RCC_APB1ENR_TIM3EN ((uint32_t)0x00000002)
#define RCC_APB1ENR_TIM4EN ((uint32_t)0x00000004)
#define RCC_APB1ENR_TIM6EN ((uint32_t)0x00000010)
#define RCC_APB1ENR_TIM7EN ((uint32_t)0x00000020)
#define RCC_APB1ENR_WWDGEN ((uint32_t)0x00000800)
#define RCC_APB1ENR_SPI2EN ((uint32_t)0x00004000)
#define RCC_APB1ENR_SPI3EN ((uint32_t)0x00008000)
#define RCC_APB1ENR_USART2EN ((uint32_t)0x00020000)
#define RCC_APB1ENR_USART3EN ((uint32_t)0x00040000)
#define RCC_APB1ENR_UART4EN ((uint32_t)0x00080000)
#define RCC_APB1ENR_UART5EN ((uint32_t)0x00100000)
#define RCC_APB1ENR_I2C1EN ((uint32_t)0x00200000)
#define RCC_APB1ENR_I2C2EN ((uint32_t)0x00400000)
#define RCC_APB1ENR_USBEN ((uint32_t)0x00800000)
#define RCC_APB1ENR_CAN1EN ((uint32_t)0x02000000)
#define RCC_APB1ENR_DAC2EN ((uint32_t)0x04000000)
#define RCC_APB1ENR_PWREN ((uint32_t)0x10000000)
#define RCC_APB1ENR_DAC1EN ((uint32_t)0x20000000)
#define RCC_APB1ENR_I2C3EN ((uint32_t)0x40000000)
#define RCC_APB1ENR_DACEN RCC_APB1ENR_DAC1EN


#define RCC_BDCR_LSEON ((uint32_t)0x00000001)
#define RCC_BDCR_LSERDY ((uint32_t)0x00000002)
#define RCC_BDCR_LSEBYP ((uint32_t)0x00000004)

#define RCC_BDCR_LSEDRV ((uint32_t)0x00000018)
#define RCC_BDCR_LSEDRV_0 ((uint32_t)0x00000008)
#define RCC_BDCR_LSEDRV_1 ((uint32_t)0x00000010)


#define RCC_BDCR_RTCSEL ((uint32_t)0x00000300)
#define RCC_BDCR_RTCSEL_0 ((uint32_t)0x00000100)
#define RCC_BDCR_RTCSEL_1 ((uint32_t)0x00000200)


#define RCC_BDCR_RTCSEL_NOCLOCK ((uint32_t)0x00000000)
#define RCC_BDCR_RTCSEL_LSE ((uint32_t)0x00000100)
#define RCC_BDCR_RTCSEL_LSI ((uint32_t)0x00000200)
#define RCC_BDCR_RTCSEL_HSE ((uint32_t)0x00000300)

#define RCC_BDCR_RTCEN ((uint32_t)0x00008000)
#define RCC_BDCR_BDRST ((uint32_t)0x00010000)


#define RCC_CSR_LSION ((uint32_t)0x00000001)
#define RCC_CSR_LSIRDY ((uint32_t)0x00000002)
#define RCC_CSR_RMVF ((uint32_t)0x01000000)
#define RCC_CSR_OBLRSTF ((uint32_t)0x02000000)
#define RCC_CSR_PINRSTF ((uint32_t)0x04000000)
#define RCC_CSR_PORRSTF ((uint32_t)0x08000000)
#define RCC_CSR_SFTRSTF ((uint32_t)0x10000000)
#define RCC_CSR_IWDGRSTF ((uint32_t)0x20000000)
#define RCC_CSR_WWDGRSTF ((uint32_t)0x40000000)
#define RCC_CSR_LPWRRSTF ((uint32_t)0x80000000)


#define RCC_AHBRSTR_GPIOARST ((uint32_t)0x00020000)
#define RCC_AHBRSTR_GPIOBRST ((uint32_t)0x00040000)
#define RCC_AHBRSTR_GPIOCRST ((uint32_t)0x00080000)
#define RCC_AHBRSTR_GPIODRST ((uint32_t)0x00010000)
#define RCC_AHBRSTR_GPIOFRST ((uint32_t)0x00040000)
#define RCC_AHBRSTR_TSRST ((uint32_t)0x00100000)
#define RCC_AHBRSTR_ADC12RST ((uint32_t)0x01000000)
#define RCC_AHBRSTR_ADC34RST ((uint32_t)0x02000000)



#define RCC_CFGR2_PREDIV1 ((uint32_t)0x0000000F)
#define RCC_CFGR2_PREDIV1_0 ((uint32_t)0x00000001)
#define RCC_CFGR2_PREDIV1_1 ((uint32_t)0x00000002)
#define RCC_CFGR2_PREDIV1_2 ((uint32_t)0x00000004)
#define RCC_CFGR2_PREDIV1_3 ((uint32_t)0x00000008)

#define RCC_CFGR2_PREDIV1_DIV1 ((uint32_t)0x00000000)
#define RCC_CFGR2_PREDIV1_DIV2 ((uint32_t)0x00000001)
#define RCC_CFGR2_PREDIV1_DIV3 ((uint32_t)0x00000002)
#define RCC_CFGR2_PREDIV1_DIV4 ((uint32_t)0x00000003)
#define RCC_CFGR2_PREDIV1_DIV5 ((uint32_t)0x00000004)
#define RCC_CFGR2_PREDIV1_DIV6 ((uint32_t)0x00000005)
#define RCC_CFGR2_PREDIV1_DIV7 ((uint32_t)0x00000006)
#define RCC_CFGR2_PREDIV1_DIV8 ((uint32_t)0x00000007)
#define RCC_CFGR2_PREDIV1_DIV9 ((uint32_t)0x00000008)
#define RCC_CFGR2_PREDIV1_DIV10 ((uint32_t)0x00000009)
#define RCC_CFGR2_PREDIV1_DIV11 ((uint32_t)0x0000000A)
#define RCC_CFGR2_PREDIV1_DIV12 ((uint32_t)0x0000000B)
#define RCC_CFGR2_PREDIV1_DIV13 ((uint32_t)0x0000000C)
#define RCC_CFGR2_PREDIV1_DIV14 ((uint32_t)0x0000000D)
#define RCC_CFGR2_PREDIV1_DIV15 ((uint32_t)0x0000000E)
#define RCC_CFGR2_PREDIV1_DIV16 ((uint32_t)0x0000000F)


#define RCC_CFGR2_ADCPRE12 ((uint32_t)0x000001F0)
#define RCC_CFGR2_ADCPRE12_0 ((uint32_t)0x00000010)
#define RCC_CFGR2_ADCPRE12_1 ((uint32_t)0x00000020)
#define RCC_CFGR2_ADCPRE12_2 ((uint32_t)0x00000040)
#define RCC_CFGR2_ADCPRE12_3 ((uint32_t)0x00000080)
#define RCC_CFGR2_ADCPRE12_4 ((uint32_t)0x00000100)

#define RCC_CFGR2_ADCPRE12_NO ((uint32_t)0x00000000)
#define RCC_CFGR2_ADCPRE12_DIV1 ((uint32_t)0x00000100)
#define RCC_CFGR2_ADCPRE12_DIV2 ((uint32_t)0x00000110)
#define RCC_CFGR2_ADCPRE12_DIV4 ((uint32_t)0x00000120)
#define RCC_CFGR2_ADCPRE12_DIV6 ((uint32_t)0x00000130)
#define RCC_CFGR2_ADCPRE12_DIV8 ((uint32_t)0x00000140)
#define RCC_CFGR2_ADCPRE12_DIV10 ((uint32_t)0x00000150)
#define RCC_CFGR2_ADCPRE12_DIV12 ((uint32_t)0x00000160)
#define RCC_CFGR2_ADCPRE12_DIV16 ((uint32_t)0x00000170)
#define RCC_CFGR2_ADCPRE12_DIV32 ((uint32_t)0x00000180)
#define RCC_CFGR2_ADCPRE12_DIV64 ((uint32_t)0x00000190)
#define RCC_CFGR2_ADCPRE12_DIV128 ((uint32_t)0x000001A0)
#define RCC_CFGR2_ADCPRE12_DIV256 ((uint32_t)0x000001B0)


#define RCC_CFGR2_ADCPRE34 ((uint32_t)0x00003E00)
#define RCC_CFGR2_ADCPRE34_0 ((uint32_t)0x00000200)
#define RCC_CFGR2_ADCPRE34_1 ((uint32_t)0x00000400)
#define RCC_CFGR2_ADCPRE34_2 ((uint32_t)0x00000800)
#define RCC_CFGR2_ADCPRE34_3 ((uint32_t)0x00001000)
#define RCC_CFGR2_ADCPRE34_4 ((uint32_t)0x00002000)

#define RCC_CFGR2_ADCPRE34_NO ((uint32_t)0x00000000)
#define RCC_CFGR2_ADCPRE34_DIV1 ((uint32_t)0x00002000)
#define RCC_CFGR2_ADCPRE34_DIV2 ((uint32_t)0x00002200)
#define RCC_CFGR2_ADCPRE34_DIV4 ((uint32_t)0x00002400)
#define RCC_CFGR2_ADCPRE34_DIV6 ((uint32_t)0x00002600)
#define RCC_CFGR2_ADCPRE34_DIV8 ((uint32_t)0x00002800)
#define RCC_CFGR2_ADCPRE34_DIV10 ((uint32_t)0x00002A00)
#define RCC_CFGR2_ADCPRE34_DIV12 ((uint32_t)0x00002C00)
#define RCC_CFGR2_ADCPRE34_DIV16 ((uint32_t)0x00002E00)
#define RCC_CFGR2_ADCPRE34_DIV32 ((uint32_t)0x00003000)
#define RCC_CFGR2_ADCPRE34_DIV64 ((uint32_t)0x00003200)
#define RCC_CFGR2_ADCPRE34_DIV128 ((uint32_t)0x00003400)
#define RCC_CFGR2_ADCPRE34_DIV256 ((uint32_t)0x00003600)


#define RCC_CFGR3_USART1SW ((uint32_t)0x00000003)
#define RCC_CFGR3_USART1SW_0 ((uint32_t)0x00000001)
#define RCC_CFGR3_USART1SW_1 ((uint32_t)0x00000002)

#define RCC_CFGR3_I2CSW ((uint32_t)0x00000070)
#define RCC_CFGR3_I2C1SW ((uint32_t)0x00000010)
#define RCC_CFGR3_I2C2SW ((uint32_t)0x00000020)
#define RCC_CFGR3_I2C3SW ((uint32_t)0x00000040)

#define RCC_CFGR3_TIMSW ((uint32_t)0x00002F00)
#define RCC_CFGR3_TIM1SW ((uint32_t)0x00000100)
#define RCC_CFGR3_TIM8SW ((uint32_t)0x00000200)
#define RCC_CFGR3_TIM15SW ((uint32_t)0x00000400)
#define RCC_CFGR3_TIM16SW ((uint32_t)0x00000800)
#define RCC_CFGR3_TIM17SW ((uint32_t)0x00002000)

#define RCC_CFGR3_HRTIM1SW ((uint32_t)0x00001000)

#define RCC_CFGR3_USART2SW ((uint32_t)0x00030000)
#define RCC_CFGR3_USART2SW_0 ((uint32_t)0x00010000)
#define RCC_CFGR3_USART2SW_1 ((uint32_t)0x00020000)

#define RCC_CFGR3_USART3SW ((uint32_t)0x000C0000)
#define RCC_CFGR3_USART3SW_0 ((uint32_t)0x00040000)
#define RCC_CFGR3_USART3SW_1 ((uint32_t)0x00080000)

#define RCC_CFGR3_UART4SW ((uint32_t)0x00300000)
#define RCC_CFGR3_UART4SW_0 ((uint32_t)0x00100000)
#define RCC_CFGR3_UART4SW_1 ((uint32_t)0x00200000)

#define RCC_CFGR3_UART5SW ((uint32_t)0x00C00000)
#define RCC_CFGR3_UART5SW_0 ((uint32_t)0x00400000)
#define RCC_CFGR3_UART5SW_1 ((uint32_t)0x00800000)







#define RTC_TR_PM ((uint32_t)0x00400000)
#define RTC_TR_HT ((uint32_t)0x00300000)
#define RTC_TR_HT_0 ((uint32_t)0x00100000)
#define RTC_TR_HT_1 ((uint32_t)0x00200000)
#define RTC_TR_HU ((uint32_t)0x000F0000)
#define RTC_TR_HU_0 ((uint32_t)0x00010000)
#define RTC_TR_HU_1 ((uint32_t)0x00020000)
#define RTC_TR_HU_2 ((uint32_t)0x00040000)
#define RTC_TR_HU_3 ((uint32_t)0x00080000)
#define RTC_TR_MNT ((uint32_t)0x00007000)
#define RTC_TR_MNT_0 ((uint32_t)0x00001000)
#define RTC_TR_MNT_1 ((uint32_t)0x00002000)
#define RTC_TR_MNT_2 ((uint32_t)0x00004000)
#define RTC_TR_MNU ((uint32_t)0x00000F00)
#define RTC_TR_MNU_0 ((uint32_t)0x00000100)
#define RTC_TR_MNU_1 ((uint32_t)0x00000200)
#define RTC_TR_MNU_2 ((uint32_t)0x00000400)
#define RTC_TR_MNU_3 ((uint32_t)0x00000800)
#define RTC_TR_ST ((uint32_t)0x00000070)
#define RTC_TR_ST_0 ((uint32_t)0x00000010)
#define RTC_TR_ST_1 ((uint32_t)0x00000020)
#define RTC_TR_ST_2 ((uint32_t)0x00000040)
#define RTC_TR_SU ((uint32_t)0x0000000F)
#define RTC_TR_SU_0 ((uint32_t)0x00000001)
#define RTC_TR_SU_1 ((uint32_t)0x00000002)
#define RTC_TR_SU_2 ((uint32_t)0x00000004)
#define RTC_TR_SU_3 ((uint32_t)0x00000008)


#define RTC_DR_YT ((uint32_t)0x00F00000)
#define RTC_DR_YT_0 ((uint32_t)0x00100000)
#define RTC_DR_YT_1 ((uint32_t)0x00200000)
#define RTC_DR_YT_2 ((uint32_t)0x00400000)
#define RTC_DR_YT_3 ((uint32_t)0x00800000)
#define RTC_DR_YU ((uint32_t)0x000F0000)
#define RTC_DR_YU_0 ((uint32_t)0x00010000)
#define RTC_DR_YU_1 ((uint32_t)0x00020000)
#define RTC_DR_YU_2 ((uint32_t)0x00040000)
#define RTC_DR_YU_3 ((uint32_t)0x00080000)
#define RTC_DR_WDU ((uint32_t)0x0000E000)
#define RTC_DR_WDU_0 ((uint32_t)0x00002000)
#define RTC_DR_WDU_1 ((uint32_t)0x00004000)
#define RTC_DR_WDU_2 ((uint32_t)0x00008000)
#define RTC_DR_MT ((uint32_t)0x00001000)
#define RTC_DR_MU ((uint32_t)0x00000F00)
#define RTC_DR_MU_0 ((uint32_t)0x00000100)
#define RTC_DR_MU_1 ((uint32_t)0x00000200)
#define RTC_DR_MU_2 ((uint32_t)0x00000400)
#define RTC_DR_MU_3 ((uint32_t)0x00000800)
#define RTC_DR_DT ((uint32_t)0x00000030)
#define RTC_DR_DT_0 ((uint32_t)0x00000010)
#define RTC_DR_DT_1 ((uint32_t)0x00000020)
#define RTC_DR_DU ((uint32_t)0x0000000F)
#define RTC_DR_DU_0 ((uint32_t)0x00000001)
#define RTC_DR_DU_1 ((uint32_t)0x00000002)
#define RTC_DR_DU_2 ((uint32_t)0x00000004)
#define RTC_DR_DU_3 ((uint32_t)0x00000008)


#define RTC_CR_COE ((uint32_t)0x00800000)
#define RTC_CR_OSEL ((uint32_t)0x00600000)
#define RTC_CR_OSEL_0 ((uint32_t)0x00200000)
#define RTC_CR_OSEL_1 ((uint32_t)0x00400000)
#define RTC_CR_POL ((uint32_t)0x00100000)
#define RTC_CR_COSEL ((uint32_t)0x00080000)
#define RTC_CR_BCK ((uint32_t)0x00040000)
#define RTC_CR_SUB1H ((uint32_t)0x00020000)
#define RTC_CR_ADD1H ((uint32_t)0x00010000)
#define RTC_CR_TSIE ((uint32_t)0x00008000)
#define RTC_CR_WUTIE ((uint32_t)0x00004000)
#define RTC_CR_ALRBIE ((uint32_t)0x00002000)
#define RTC_CR_ALRAIE ((uint32_t)0x00001000)
#define RTC_CR_TSE ((uint32_t)0x00000800)
#define RTC_CR_WUTE ((uint32_t)0x00000400)
#define RTC_CR_ALRBE ((uint32_t)0x00000200)
#define RTC_CR_ALRAE ((uint32_t)0x00000100)
#define RTC_CR_FMT ((uint32_t)0x00000040)
#define RTC_CR_BYPSHAD ((uint32_t)0x00000020)
#define RTC_CR_REFCKON ((uint32_t)0x00000010)
#define RTC_CR_TSEDGE ((uint32_t)0x00000008)
#define RTC_CR_WUCKSEL ((uint32_t)0x00000007)
#define RTC_CR_WUCKSEL_0 ((uint32_t)0x00000001)
#define RTC_CR_WUCKSEL_1 ((uint32_t)0x00000002)
#define RTC_CR_WUCKSEL_2 ((uint32_t)0x00000004)


#define RTC_ISR_RECALPF ((uint32_t)0x00010000)
#define RTC_ISR_TAMP3F ((uint32_t)0x00008000)
#define RTC_ISR_TAMP2F ((uint32_t)0x00004000)
#define RTC_ISR_TAMP1F ((uint32_t)0x00002000)
#define RTC_ISR_TSOVF ((uint32_t)0x00001000)
#define RTC_ISR_TSF ((uint32_t)0x00000800)
#define RTC_ISR_WUTF ((uint32_t)0x00000400)
#define RTC_ISR_ALRBF ((uint32_t)0x00000200)
#define RTC_ISR_ALRAF ((uint32_t)0x00000100)
#define RTC_ISR_INIT ((uint32_t)0x00000080)
#define RTC_ISR_INITF ((uint32_t)0x00000040)
#define RTC_ISR_RSF ((uint32_t)0x00000020)
#define RTC_ISR_INITS ((uint32_t)0x00000010)
#define RTC_ISR_SHPF ((uint32_t)0x00000008)
#define RTC_ISR_WUTWF ((uint32_t)0x00000004)
#define RTC_ISR_ALRBWF ((uint32_t)0x00000002)
#define RTC_ISR_ALRAWF ((uint32_t)0x00000001)


#define RTC_PRER_PREDIV_A ((uint32_t)0x007F0000)
#define RTC_PRER_PREDIV_S ((uint32_t)0x00007FFF)


#define RTC_WUTR_WUT ((uint32_t)0x0000FFFF)


#define RTC_ALRMAR_MSK4 ((uint32_t)0x80000000)
#define RTC_ALRMAR_WDSEL ((uint32_t)0x40000000)
#define RTC_ALRMAR_DT ((uint32_t)0x30000000)
#define RTC_ALRMAR_DT_0 ((uint32_t)0x10000000)
#define RTC_ALRMAR_DT_1 ((uint32_t)0x20000000)
#define RTC_ALRMAR_DU ((uint32_t)0x0F000000)
#define RTC_ALRMAR_DU_0 ((uint32_t)0x01000000)
#define RTC_ALRMAR_DU_1 ((uint32_t)0x02000000)
#define RTC_ALRMAR_DU_2 ((uint32_t)0x04000000)
#define RTC_ALRMAR_DU_3 ((uint32_t)0x08000000)
#define RTC_ALRMAR_MSK3 ((uint32_t)0x00800000)
#define RTC_ALRMAR_PM ((uint32_t)0x00400000)
#define RTC_ALRMAR_HT ((uint32_t)0x00300000)
#define RTC_ALRMAR_HT_0 ((uint32_t)0x00100000)
#define RTC_ALRMAR_HT_1 ((uint32_t)0x00200000)
#define RTC_ALRMAR_HU ((uint32_t)0x000F0000)
#define RTC_ALRMAR_HU_0 ((uint32_t)0x00010000)
#define RTC_ALRMAR_HU_1 ((uint32_t)0x00020000)
#define RTC_ALRMAR_HU_2 ((uint32_t)0x00040000)
#define RTC_ALRMAR_HU_3 ((uint32_t)0x00080000)
#define RTC_ALRMAR_MSK2 ((uint32_t)0x00008000)
#define RTC_ALRMAR_MNT ((uint32_t)0x00007000)
#define RTC_ALRMAR_MNT_0 ((uint32_t)0x00001000)
#define RTC_ALRMAR_MNT_1 ((uint32_t)0x00002000)
#define RTC_ALRMAR_MNT_2 ((uint32_t)0x00004000)
#define RTC_ALRMAR_MNU ((uint32_t)0x00000F00)
#define RTC_ALRMAR_MNU_0 ((uint32_t)0x00000100)
#define RTC_ALRMAR_MNU_1 ((uint32_t)0x00000200)
#define RTC_ALRMAR_MNU_2 ((uint32_t)0x00000400)
#define RTC_ALRMAR_MNU_3 ((uint32_t)0x00000800)
#define RTC_ALRMAR_MSK1 ((uint32_t)0x00000080)
#define RTC_ALRMAR_ST ((uint32_t)0x00000070)
#define RTC_ALRMAR_ST_0 ((uint32_t)0x00000010)
#define RTC_ALRMAR_ST_1 ((uint32_t)0x00000020)
#define RTC_ALRMAR_ST_2 ((uint32_t)0x00000040)
#define RTC_ALRMAR_SU ((uint32_t)0x0000000F)
#define RTC_ALRMAR_SU_0 ((uint32_t)0x00000001)
#define RTC_ALRMAR_SU_1 ((uint32_t)0x00000002)
#define RTC_ALRMAR_SU_2 ((uint32_t)0x00000004)
#define RTC_ALRMAR_SU_3 ((uint32_t)0x00000008)


#define RTC_ALRMBR_MSK4 ((uint32_t)0x80000000)
#define RTC_ALRMBR_WDSEL ((uint32_t)0x40000000)
#define RTC_ALRMBR_DT ((uint32_t)0x30000000)
#define RTC_ALRMBR_DT_0 ((uint32_t)0x10000000)
#define RTC_ALRMBR_DT_1 ((uint32_t)0x20000000)
#define RTC_ALRMBR_DU ((uint32_t)0x0F000000)
#define RTC_ALRMBR_DU_0 ((uint32_t)0x01000000)
#define RTC_ALRMBR_DU_1 ((uint32_t)0x02000000)
#define RTC_ALRMBR_DU_2 ((uint32_t)0x04000000)
#define RTC_ALRMBR_DU_3 ((uint32_t)0x08000000)
#define RTC_ALRMBR_MSK3 ((uint32_t)0x00800000)
#define RTC_ALRMBR_PM ((uint32_t)0x00400000)
#define RTC_ALRMBR_HT ((uint32_t)0x00300000)
#define RTC_ALRMBR_HT_0 ((uint32_t)0x00100000)
#define RTC_ALRMBR_HT_1 ((uint32_t)0x00200000)
#define RTC_ALRMBR_HU ((uint32_t)0x000F0000)
#define RTC_ALRMBR_HU_0 ((uint32_t)0x00010000)
#define RTC_ALRMBR_HU_1 ((uint32_t)0x00020000)
#define RTC_ALRMBR_HU_2 ((uint32_t)0x00040000)
#define RTC_ALRMBR_HU_3 ((uint32_t)0x00080000)
#define RTC_ALRMBR_MSK2 ((uint32_t)0x00008000)
#define RTC_ALRMBR_MNT ((uint32_t)0x00007000)
#define RTC_ALRMBR_MNT_0 ((uint32_t)0x00001000)
#define RTC_ALRMBR_MNT_1 ((uint32_t)0x00002000)
#define RTC_ALRMBR_MNT_2 ((uint32_t)0x00004000)
#define RTC_ALRMBR_MNU ((uint32_t)0x00000F00)
#define RTC_ALRMBR_MNU_0 ((uint32_t)0x00000100)
#define RTC_ALRMBR_MNU_1 ((uint32_t)0x00000200)
#define RTC_ALRMBR_MNU_2 ((uint32_t)0x00000400)
#define RTC_ALRMBR_MNU_3 ((uint32_t)0x00000800)
#define RTC_ALRMBR_MSK1 ((uint32_t)0x00000080)
#define RTC_ALRMBR_ST ((uint32_t)0x00000070)
#define RTC_ALRMBR_ST_0 ((uint32_t)0x00000010)
#define RTC_ALRMBR_ST_1 ((uint32_t)0x00000020)
#define RTC_ALRMBR_ST_2 ((uint32_t)0x00000040)
#define RTC_ALRMBR_SU ((uint32_t)0x0000000F)
#define RTC_ALRMBR_SU_0 ((uint32_t)0x00000001)
#define RTC_ALRMBR_SU_1 ((uint32_t)0x00000002)
#define RTC_ALRMBR_SU_2 ((uint32_t)0x00000004)
#define RTC_ALRMBR_SU_3 ((uint32_t)0x00000008)


#define RTC_WPR_KEY ((uint32_t)0x000000FF)


#define RTC_SSR_SS ((uint32_t)0x0000FFFF)


#define RTC_SHIFTR_SUBFS ((uint32_t)0x00007FFF)
#define RTC_SHIFTR_ADD1S ((uint32_t)0x80000000)


#define RTC_TSTR_PM ((uint32_t)0x00400000)
#define RTC_TSTR_HT ((uint32_t)0x00300000)
#define RTC_TSTR_HT_0 ((uint32_t)0x00100000)
#define RTC_TSTR_HT_1 ((uint32_t)0x00200000)
#define RTC_TSTR_HU ((uint32_t)0x000F0000)
#define RTC_TSTR_HU_0 ((uint32_t)0x00010000)
#define RTC_TSTR_HU_1 ((uint32_t)0x00020000)
#define RTC_TSTR_HU_2 ((uint32_t)0x00040000)
#define RTC_TSTR_HU_3 ((uint32_t)0x00080000)
#define RTC_TSTR_MNT ((uint32_t)0x00007000)
#define RTC_TSTR_MNT_0 ((uint32_t)0x00001000)
#define RTC_TSTR_MNT_1 ((uint32_t)0x00002000)
#define RTC_TSTR_MNT_2 ((uint32_t)0x00004000)
#define RTC_TSTR_MNU ((uint32_t)0x00000F00)
#define RTC_TSTR_MNU_0 ((uint32_t)0x00000100)
#define RTC_TSTR_MNU_1 ((uint32_t)0x00000200)
#define RTC_TSTR_MNU_2 ((uint32_t)0x00000400)
#define RTC_TSTR_MNU_3 ((uint32_t)0x00000800)
#define RTC_TSTR_ST ((uint32_t)0x00000070)
#define RTC_TSTR_ST_0 ((uint32_t)0x00000010)
#define RTC_TSTR_ST_1 ((uint32_t)0x00000020)
#define RTC_TSTR_ST_2 ((uint32_t)0x00000040)
#define RTC_TSTR_SU ((uint32_t)0x0000000F)
#define RTC_TSTR_SU_0 ((uint32_t)0x00000001)
#define RTC_TSTR_SU_1 ((uint32_t)0x00000002)
#define RTC_TSTR_SU_2 ((uint32_t)0x00000004)
#define RTC_TSTR_SU_3 ((uint32_t)0x00000008)


#define RTC_TSDR_WDU ((uint32_t)0x0000E000)
#define RTC_TSDR_WDU_0 ((uint32_t)0x00002000)
#define RTC_TSDR_WDU_1 ((uint32_t)0x00004000)
#define RTC_TSDR_WDU_2 ((uint32_t)0x00008000)
#define RTC_TSDR_MT ((uint32_t)0x00001000)
#define RTC_TSDR_MU ((uint32_t)0x00000F00)
#define RTC_TSDR_MU_0 ((uint32_t)0x00000100)
#define RTC_TSDR_MU_1 ((uint32_t)0x00000200)
#define RTC_TSDR_MU_2 ((uint32_t)0x00000400)
#define RTC_TSDR_MU_3 ((uint32_t)0x00000800)
#define RTC_TSDR_DT ((uint32_t)0x00000030)
#define RTC_TSDR_DT_0 ((uint32_t)0x00000010)
#define RTC_TSDR_DT_1 ((uint32_t)0x00000020)
#define RTC_TSDR_DU ((uint32_t)0x0000000F)
#define RTC_TSDR_DU_0 ((uint32_t)0x00000001)
#define RTC_TSDR_DU_1 ((uint32_t)0x00000002)
#define RTC_TSDR_DU_2 ((uint32_t)0x00000004)
#define RTC_TSDR_DU_3 ((uint32_t)0x00000008)


#define RTC_TSSSR_SS ((uint32_t)0x0000FFFF)


#define RTC_CALR_CALP ((uint32_t)0x00008000)
#define RTC_CALR_CALW8 ((uint32_t)0x00004000)
#define RTC_CALR_CALW16 ((uint32_t)0x00002000)
#define RTC_CALR_CALM ((uint32_t)0x000001FF)
#define RTC_CALR_CALM_0 ((uint32_t)0x00000001)
#define RTC_CALR_CALM_1 ((uint32_t)0x00000002)
#define RTC_CALR_CALM_2 ((uint32_t)0x00000004)
#define RTC_CALR_CALM_3 ((uint32_t)0x00000008)
#define RTC_CALR_CALM_4 ((uint32_t)0x00000010)
#define RTC_CALR_CALM_5 ((uint32_t)0x00000020)
#define RTC_CALR_CALM_6 ((uint32_t)0x00000040)
#define RTC_CALR_CALM_7 ((uint32_t)0x00000080)
#define RTC_CALR_CALM_8 ((uint32_t)0x00000100)


#define RTC_TAFCR_ALARMOUTTYPE ((uint32_t)0x00040000)
#define RTC_TAFCR_TAMPPUDIS ((uint32_t)0x00008000)
#define RTC_TAFCR_TAMPPRCH ((uint32_t)0x00006000)
#define RTC_TAFCR_TAMPPRCH_0 ((uint32_t)0x00002000)
#define RTC_TAFCR_TAMPPRCH_1 ((uint32_t)0x00004000)
#define RTC_TAFCR_TAMPFLT ((uint32_t)0x00001800)
#define RTC_TAFCR_TAMPFLT_0 ((uint32_t)0x00000800)
#define RTC_TAFCR_TAMPFLT_1 ((uint32_t)0x00001000)
#define RTC_TAFCR_TAMPFREQ ((uint32_t)0x00000700)
#define RTC_TAFCR_TAMPFREQ_0 ((uint32_t)0x00000100)
#define RTC_TAFCR_TAMPFREQ_1 ((uint32_t)0x00000200)
#define RTC_TAFCR_TAMPFREQ_2 ((uint32_t)0x00000400)
#define RTC_TAFCR_TAMPTS ((uint32_t)0x00000080)
#define RTC_TAFCR_TAMP3TRG ((uint32_t)0x00000040)
#define RTC_TAFCR_TAMP3E ((uint32_t)0x00000020)
#define RTC_TAFCR_TAMP2TRG ((uint32_t)0x00000010)
#define RTC_TAFCR_TAMP2E ((uint32_t)0x00000008)
#define RTC_TAFCR_TAMPIE ((uint32_t)0x00000004)
#define RTC_TAFCR_TAMP1TRG ((uint32_t)0x00000002)
#define RTC_TAFCR_TAMP1E ((uint32_t)0x00000001)


#define RTC_ALRMASSR_MASKSS ((uint32_t)0x0F000000)
#define RTC_ALRMASSR_MASKSS_0 ((uint32_t)0x01000000)
#define RTC_ALRMASSR_MASKSS_1 ((uint32_t)0x02000000)
#define RTC_ALRMASSR_MASKSS_2 ((uint32_t)0x04000000)
#define RTC_ALRMASSR_MASKSS_3 ((uint32_t)0x08000000)
#define RTC_ALRMASSR_SS ((uint32_t)0x00007FFF)


#define RTC_ALRMBSSR_MASKSS ((uint32_t)0x0F000000)
#define RTC_ALRMBSSR_MASKSS_0 ((uint32_t)0x01000000)
#define RTC_ALRMBSSR_MASKSS_1 ((uint32_t)0x02000000)
#define RTC_ALRMBSSR_MASKSS_2 ((uint32_t)0x04000000)
#define RTC_ALRMBSSR_MASKSS_3 ((uint32_t)0x08000000)
#define RTC_ALRMBSSR_SS ((uint32_t)0x00007FFF)


#define RTC_BKP0R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP1R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP2R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP3R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP4R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP5R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP6R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP7R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP8R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP9R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP10R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP11R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP12R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP13R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP14R ((uint32_t)0xFFFFFFFF)


#define RTC_BKP15R ((uint32_t)0xFFFFFFFF)







#define SPI_CR1_CPHA ((uint16_t)0x0001)
#define SPI_CR1_CPOL ((uint16_t)0x0002)
#define SPI_CR1_MSTR ((uint16_t)0x0004)

#define SPI_CR1_BR ((uint16_t)0x0038)
#define SPI_CR1_BR_0 ((uint16_t)0x0008)
#define SPI_CR1_BR_1 ((uint16_t)0x0010)
#define SPI_CR1_BR_2 ((uint16_t)0x0020)

#define SPI_CR1_SPE ((uint16_t)0x0040)
#define SPI_CR1_LSBFIRST ((uint16_t)0x0080)
#define SPI_CR1_SSI ((uint16_t)0x0100)
#define SPI_CR1_SSM ((uint16_t)0x0200)
#define SPI_CR1_RXONLY ((uint16_t)0x0400)
#define SPI_CR1_CRCL ((uint16_t)0x0800)
#define SPI_CR1_CRCNEXT ((uint16_t)0x1000)
#define SPI_CR1_CRCEN ((uint16_t)0x2000)
#define SPI_CR1_BIDIOE ((uint16_t)0x4000)
#define SPI_CR1_BIDIMODE ((uint16_t)0x8000)


#define SPI_CR2_RXDMAEN ((uint16_t)0x0001)
#define SPI_CR2_TXDMAEN ((uint16_t)0x0002)
#define SPI_CR2_SSOE ((uint16_t)0x0004)
#define SPI_CR2_NSSP ((uint16_t)0x0008)
#define SPI_CR2_FRF ((uint16_t)0x0010)
#define SPI_CR2_ERRIE ((uint16_t)0x0020)
#define SPI_CR2_RXNEIE ((uint16_t)0x0040)
#define SPI_CR2_TXEIE ((uint16_t)0x0080)

#define SPI_CR2_DS ((uint16_t)0x0F00)
#define SPI_CR2_DS_0 ((uint16_t)0x0100)
#define SPI_CR2_DS_1 ((uint16_t)0x0200)
#define SPI_CR2_DS_2 ((uint16_t)0x0400)
#define SPI_CR2_DS_3 ((uint16_t)0x0800)

#define SPI_CR2_FRXTH ((uint16_t)0x1000)
#define SPI_CR2_LDMARX ((uint16_t)0x2000)
#define SPI_CR2_LDMATX ((uint16_t)0x4000)


#define SPI_SR_RXNE ((uint16_t)0x0001)
#define SPI_SR_TXE ((uint16_t)0x0002)
#define SPI_SR_CRCERR ((uint16_t)0x0010)
#define SPI_SR_MODF ((uint16_t)0x0020)
#define SPI_SR_OVR ((uint16_t)0x0040)
#define SPI_SR_BSY ((uint16_t)0x0080)
#define SPI_SR_FRE ((uint16_t)0x0100)
#define SPI_SR_FRLVL ((uint16_t)0x0600)
#define SPI_SR_FRLVL_0 ((uint16_t)0x0200)
#define SPI_SR_FRLVL_1 ((uint16_t)0x0400)
#define SPI_SR_FTLVL ((uint16_t)0x1800)
#define SPI_SR_FTLVL_0 ((uint16_t)0x0800)
#define SPI_SR_FTLVL_1 ((uint16_t)0x1000)


#define SPI_DR_DR ((uint16_t)0xFFFF)


#define SPI_CRCPR_CRCPOLY ((uint16_t)0xFFFF)


#define SPI_RXCRCR_RXCRC ((uint16_t)0xFFFF)


#define SPI_TXCRCR_TXCRC ((uint16_t)0xFFFF)


#define SPI_I2SCFGR_CHLEN ((uint16_t)0x0001)

#define SPI_I2SCFGR_DATLEN ((uint16_t)0x0006)
#define SPI_I2SCFGR_DATLEN_0 ((uint16_t)0x0002)
#define SPI_I2SCFGR_DATLEN_1 ((uint16_t)0x0004)

#define SPI_I2SCFGR_CKPOL ((uint16_t)0x0008)

#define SPI_I2SCFGR_I2SSTD ((uint16_t)0x0030)
#define SPI_I2SCFGR_I2SSTD_0 ((uint16_t)0x0010)
#define SPI_I2SCFGR_I2SSTD_1 ((uint16_t)0x0020)

#define SPI_I2SCFGR_PCMSYNC ((uint16_t)0x0080)

#define SPI_I2SCFGR_I2SCFG ((uint16_t)0x0300)
#define SPI_I2SCFGR_I2SCFG_0 ((uint16_t)0x0100)
#define SPI_I2SCFGR_I2SCFG_1 ((uint16_t)0x0200)

#define SPI_I2SCFGR_I2SE ((uint16_t)0x0400)
#define SPI_I2SCFGR_I2SMOD ((uint16_t)0x0800)


#define SPI_I2SPR_I2SDIV ((uint16_t)0x00FF)
#define SPI_I2SPR_ODD ((uint16_t)0x0100)
#define SPI_I2SPR_MCKOE ((uint16_t)0x0200)







#define SYSCFG_CFGR1_MEM_MODE ((uint32_t)0x00000003)
#define SYSCFG_CFGR1_MEM_MODE_0 ((uint32_t)0x00000001)
#define SYSCFG_CFGR1_MEM_MODE_1 ((uint32_t)0x00000002)
#define SYSCFG_CFGR1_USB_IT_RMP ((uint32_t)0x00000020)
#define SYSCFG_CFGR1_TIM1_ITR3_RMP ((uint32_t)0x00000040)
#define SYSCFG_CFGR1_DAC1_TRIG1_RMP ((uint32_t)0x00000080)
#define SYSCFG_CFGR1_ADC24_DMA_RMP ((uint32_t)0x00000100)
#define SYSCFG_CFGR1_TIM16_DMA_RMP ((uint32_t)0x00000800)
#define SYSCFG_CFGR1_TIM17_DMA_RMP ((uint32_t)0x00001000)
#define SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP ((uint32_t)0x00002000)
#define SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP ((uint32_t)0x00004000)
#define SYSCFG_CFGR1_DAC2Ch1_DMA_RMP ((uint32_t)0x00008000)
#define SYSCFG_CFGR1_I2C_PB6_FMP ((uint32_t)0x00010000)
#define SYSCFG_CFGR1_I2C_PB7_FMP ((uint32_t)0x00020000)
#define SYSCFG_CFGR1_I2C_PB8_FMP ((uint32_t)0x00040000)
#define SYSCFG_CFGR1_I2C_PB9_FMP ((uint32_t)0x00080000)
#define SYSCFG_CFGR1_I2C1_FMP ((uint32_t)0x00100000)
#define SYSCFG_CFGR1_I2C2_FMP ((uint32_t)0x00200000)
#define SYSCFG_CFGR1_ENCODER_MODE ((uint32_t)0x00C00000)
#define SYSCFG_CFGR1_ENCODER_MODE_0 ((uint32_t)0x00400000)
#define SYSCFG_CFGR1_ENCODER_MODE_1 ((uint32_t)0x00800000)
#define SYSCFG_CFGR1_FPU_IE ((uint32_t)0xFC000000)
#define SYSCFG_CFGR1_FPU_IE_0 ((uint32_t)0x04000000)
#define SYSCFG_CFGR1_FPU_IE_1 ((uint32_t)0x08000000)
#define SYSCFG_CFGR1_FPU_IE_2 ((uint32_t)0x10000000)
#define SYSCFG_CFGR1_FPU_IE_3 ((uint32_t)0x20000000)
#define SYSCFG_CFGR1_FPU_IE_4 ((uint32_t)0x40000000)
#define SYSCFG_CFGR1_FPU_IE_5 ((uint32_t)0x80000000)
#define SYSCFG_CFGR1_DAC_TRIG_RMP SYSCFG_CFGR1_DAC1_TRIG1_RMP
#define SYSCFG_CFGR1_TIM6DAC1 SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP
#define SYSCFG_CFGR1_TIM7DAC2 SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP

#define SYSCFG_RCR_PAGE0 ((uint32_t)0x00000001)
#define SYSCFG_RCR_PAGE1 ((uint32_t)0x00000002)
#define SYSCFG_RCR_PAGE2 ((uint32_t)0x00000004)
#define SYSCFG_RCR_PAGE3 ((uint32_t)0x00000008)
#define SYSCFG_RCR_PAGE4 ((uint32_t)0x00000010)
#define SYSCFG_RCR_PAGE5 ((uint32_t)0x00000020)
#define SYSCFG_RCR_PAGE6 ((uint32_t)0x00000040)
#define SYSCFG_RCR_PAGE7 ((uint32_t)0x00000080)


#define SYSCFG_EXTICR1_EXTI0 ((uint16_t)0x000F)
#define SYSCFG_EXTICR1_EXTI1 ((uint16_t)0x00F0)
#define SYSCFG_EXTICR1_EXTI2 ((uint16_t)0x0F00)
#define SYSCFG_EXTICR1_EXTI3 ((uint16_t)0xF000)




#define SYSCFG_EXTICR1_EXTI0_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR1_EXTI0_PB ((uint16_t)0x0001)
#define SYSCFG_EXTICR1_EXTI0_PC ((uint16_t)0x0002)
#define SYSCFG_EXTICR1_EXTI0_PD ((uint16_t)0x0003)
#define SYSCFG_EXTICR1_EXTI0_PE ((uint16_t)0x0004)
#define SYSCFG_EXTICR1_EXTI0_PF ((uint16_t)0x0005)




#define SYSCFG_EXTICR1_EXTI1_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR1_EXTI1_PB ((uint16_t)0x0010)
#define SYSCFG_EXTICR1_EXTI1_PC ((uint16_t)0x0020)
#define SYSCFG_EXTICR1_EXTI1_PD ((uint16_t)0x0030)
#define SYSCFG_EXTICR1_EXTI1_PE ((uint16_t)0x0040)
#define SYSCFG_EXTICR1_EXTI1_PF ((uint16_t)0x0050)




#define SYSCFG_EXTICR1_EXTI2_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR1_EXTI2_PB ((uint16_t)0x0100)
#define SYSCFG_EXTICR1_EXTI2_PC ((uint16_t)0x0200)
#define SYSCFG_EXTICR1_EXTI2_PD ((uint16_t)0x0300)
#define SYSCFG_EXTICR1_EXTI2_PE ((uint16_t)0x0400)
#define SYSCFG_EXTICR1_EXTI2_PF ((uint16_t)0x0500)




#define SYSCFG_EXTICR1_EXTI3_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR1_EXTI3_PB ((uint16_t)0x1000)
#define SYSCFG_EXTICR1_EXTI3_PC ((uint16_t)0x2000)
#define SYSCFG_EXTICR1_EXTI3_PD ((uint16_t)0x3000)
#define SYSCFG_EXTICR1_EXTI3_PE ((uint16_t)0x4000)


#define SYSCFG_EXTIRCR_EXTI4 ((uint16_t)0x000F)
#define SYSCFG_EXTIRCR_EXTI5 ((uint16_t)0x00F0)
#define SYSCFG_EXTIRCR_EXTI6 ((uint16_t)0x0F00)
#define SYSCFG_EXTIRCR_EXTI7 ((uint16_t)0xF000)




#define SYSCFG_EXTIRCR_EXTI4_PA ((uint16_t)0x0000)
#define SYSCFG_EXTIRCR_EXTI4_PB ((uint16_t)0x0001)
#define SYSCFG_EXTIRCR_EXTI4_PC ((uint16_t)0x0002)
#define SYSCFG_EXTIRCR_EXTI4_PD ((uint16_t)0x0003)
#define SYSCFG_EXTIRCR_EXTI4_PE ((uint16_t)0x0004)
#define SYSCFG_EXTIRCR_EXTI4_PF ((uint16_t)0x0005)




#define SYSCFG_EXTIRCR_EXTI5_PA ((uint16_t)0x0000)
#define SYSCFG_EXTIRCR_EXTI5_PB ((uint16_t)0x0010)
#define SYSCFG_EXTIRCR_EXTI5_PC ((uint16_t)0x0020)
#define SYSCFG_EXTIRCR_EXTI5_PD ((uint16_t)0x0030)
#define SYSCFG_EXTIRCR_EXTI5_PE ((uint16_t)0x0040)
#define SYSCFG_EXTIRCR_EXTI5_PF ((uint16_t)0x0050)




#define SYSCFG_EXTIRCR_EXTI6_PA ((uint16_t)0x0000)
#define SYSCFG_EXTIRCR_EXTI6_PB ((uint16_t)0x0100)
#define SYSCFG_EXTIRCR_EXTI6_PC ((uint16_t)0x0200)
#define SYSCFG_EXTIRCR_EXTI6_PD ((uint16_t)0x0300)
#define SYSCFG_EXTIRCR_EXTI6_PE ((uint16_t)0x0400)
#define SYSCFG_EXTIRCR_EXTI6_PF ((uint16_t)0x0500)




#define SYSCFG_EXTIRCR_EXTI7_PA ((uint16_t)0x0000)
#define SYSCFG_EXTIRCR_EXTI7_PB ((uint16_t)0x1000)
#define SYSCFG_EXTIRCR_EXTI7_PC ((uint16_t)0x2000)
#define SYSCFG_EXTIRCR_EXTI7_PD ((uint16_t)0x3000)
#define SYSCFG_EXTIRCR_EXTI7_PE ((uint16_t)0x4000)


#define SYSCFG_EXTICR3_EXTI8 ((uint16_t)0x000F)
#define SYSCFG_EXTICR3_EXTI9 ((uint16_t)0x00F0)
#define SYSCFG_EXTICR3_EXTI10 ((uint16_t)0x0F00)
#define SYSCFG_EXTICR3_EXTI11 ((uint16_t)0xF000)




#define SYSCFG_EXTICR3_EXTI8_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR3_EXTI8_PB ((uint16_t)0x0001)
#define SYSCFG_EXTICR3_EXTI8_PC ((uint16_t)0x0002)
#define SYSCFG_EXTICR3_EXTI8_PD ((uint16_t)0x0003)
#define SYSCFG_EXTICR3_EXTI8_PE ((uint16_t)0x0004)




#define SYSCFG_EXTICR3_EXTI9_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR3_EXTI9_PB ((uint16_t)0x0010)
#define SYSCFG_EXTICR3_EXTI9_PC ((uint16_t)0x0020)
#define SYSCFG_EXTICR3_EXTI9_PD ((uint16_t)0x0030)
#define SYSCFG_EXTICR3_EXTI9_PE ((uint16_t)0x0040)
#define SYSCFG_EXTICR3_EXTI9_PF ((uint16_t)0x0050)




#define SYSCFG_EXTICR3_EXTI10_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR3_EXTI10_PB ((uint16_t)0x0100)
#define SYSCFG_EXTICR3_EXTI10_PC ((uint16_t)0x0200)
#define SYSCFG_EXTICR3_EXTI10_PD ((uint16_t)0x0300)
#define SYSCFG_EXTICR3_EXTI10_PE ((uint16_t)0x0400)
#define SYSCFG_EXTICR3_EXTI10_PF ((uint16_t)0x0500)




#define SYSCFG_EXTICR3_EXTI11_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR3_EXTI11_PB ((uint16_t)0x1000)
#define SYSCFG_EXTICR3_EXTI11_PC ((uint16_t)0x2000)
#define SYSCFG_EXTICR3_EXTI11_PD ((uint16_t)0x3000)
#define SYSCFG_EXTICR3_EXTI11_PE ((uint16_t)0x4000)


#define SYSCFG_EXTICR4_EXTI12 ((uint16_t)0x000F)
#define SYSCFG_EXTICR4_EXTI13 ((uint16_t)0x00F0)
#define SYSCFG_EXTICR4_EXTI14 ((uint16_t)0x0F00)
#define SYSCFG_EXTICR4_EXTI15 ((uint16_t)0xF000)




#define SYSCFG_EXTICR4_EXTI12_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR4_EXTI12_PB ((uint16_t)0x0001)
#define SYSCFG_EXTICR4_EXTI12_PC ((uint16_t)0x0002)
#define SYSCFG_EXTICR4_EXTI12_PD ((uint16_t)0x0003)
#define SYSCFG_EXTICR4_EXTI12_PE ((uint16_t)0x0004)




#define SYSCFG_EXTICR4_EXTI13_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR4_EXTI13_PB ((uint16_t)0x0010)
#define SYSCFG_EXTICR4_EXTI13_PC ((uint16_t)0x0020)
#define SYSCFG_EXTICR4_EXTI13_PD ((uint16_t)0x0030)
#define SYSCFG_EXTICR4_EXTI13_PE ((uint16_t)0x0040)




#define SYSCFG_EXTICR4_EXTI14_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR4_EXTI14_PB ((uint16_t)0x0100)
#define SYSCFG_EXTICR4_EXTI14_PC ((uint16_t)0x0200)
#define SYSCFG_EXTICR4_EXTI14_PD ((uint16_t)0x0300)
#define SYSCFG_EXTICR4_EXTI14_PE ((uint16_t)0x0400)




#define SYSCFG_EXTICR4_EXTI15_PA ((uint16_t)0x0000)
#define SYSCFG_EXTICR4_EXTI15_PB ((uint16_t)0x1000)
#define SYSCFG_EXTICR4_EXTI15_PC ((uint16_t)0x2000)
#define SYSCFG_EXTICR4_EXTI15_PD ((uint16_t)0x3000)
#define SYSCFG_EXTICR4_EXTI15_PE ((uint16_t)0x4000)


#define SYSCFG_CFGR2_LOCKUP_LOCK ((uint32_t)0x00000001)
#define SYSCFG_CFGR2_SRAM_PARITY_LOCK ((uint32_t)0x00000002)
#define SYSCFG_CFGR2_PVD_LOCK ((uint32_t)0x00000004)
#define SYSCFG_CFGR2_BYP_ADDR_PAR ((uint32_t)0x00000010)
#define SYSCFG_CFGR2_SRAM_PE ((uint32_t)0x00000100)


#define SYSCFG_CFGR3_SPI1_RX_DMA_RMP ((uint32_t)0x00000003)
#define SYSCFG_CFGR3_SPI1_RX_DMA_RMP_0 ((uint32_t)0x00000001)
#define SYSCFG_CFGR3_SPI1_RX_DMA_RMP_1 ((uint32_t)0x00000002)
#define SYSCFG_CFGR3_SPI1_TX_DMA_RMP ((uint32_t)0x0000000C)
#define SYSCFG_CFGR3_SPI1_TX_DMA_RMP_0 ((uint32_t)0x00000004)
#define SYSCFG_CFGR3_SPI1_TX_DMA_RMP_1 ((uint32_t)0x00000008)
#define SYSCFG_CFGR3_I2C1_RX_DMA_RMP ((uint32_t)0x00000030)
#define SYSCFG_CFGR3_I2C1_RX_DMA_RMP_0 ((uint32_t)0x00000010)
#define SYSCFG_CFGR3_I2C1_RX_DMA_RMP_1 ((uint32_t)0x00000020)
#define SYSCFG_CFGR3_I2C1_TX_DMA_RMP ((uint32_t)0x000000C0)
#define SYSCFG_CFGR3_I2C1_TX_DMA_RMP_0 ((uint32_t)0x00000040)
#define SYSCFG_CFGR3_I2C1_TX_DMA_RMP_1 ((uint32_t)0x00000080)
#define SYSCFG_CFGR3_ADC2_DMA_RMP ((uint32_t)0x00000300)
#define SYSCFG_CFGR3_ADC2_DMA_RMP_0 ((uint32_t)0x00000100)
#define SYSCFG_CFGR3_ADC2_DMA_RMP_1 ((uint32_t)0x00000200)
#define SYSCFG_CFGR3_DAC1_TRG3_RMP ((uint32_t)0x00010000)
#define SYSCFG_CFGR3_DAC1_TRG5_RMP ((uint32_t)0x00020000)







#define TIM_CR1_CEN ((uint16_t)0x0001)
#define TIM_CR1_UDIS ((uint16_t)0x0002)
#define TIM_CR1_URS ((uint16_t)0x0004)
#define TIM_CR1_OPM ((uint16_t)0x0008)
#define TIM_CR1_DIR ((uint16_t)0x0010)

#define TIM_CR1_CMS ((uint16_t)0x0060)
#define TIM_CR1_CMS_0 ((uint16_t)0x0020)
#define TIM_CR1_CMS_1 ((uint16_t)0x0040)

#define TIM_CR1_ARPE ((uint16_t)0x0080)

#define TIM_CR1_CKD ((uint16_t)0x0300)
#define TIM_CR1_CKD_0 ((uint16_t)0x0100)
#define TIM_CR1_CKD_1 ((uint16_t)0x0200)

#define TIM_CR1_UIFREMAP ((uint16_t)0x0800)


#define TIM_CR2_CCPC ((uint32_t)0x00000001)
#define TIM_CR2_CCUS ((uint32_t)0x00000004)
#define TIM_CR2_CCDS ((uint32_t)0x00000008)

#define TIM_CR2_MMS ((uint32_t)0x00000070)
#define TIM_CR2_MMS_0 ((uint32_t)0x00000010)
#define TIM_CR2_MMS_1 ((uint32_t)0x00000020)
#define TIM_CR2_MMS_2 ((uint32_t)0x00000040)

#define TIM_CR2_TI1S ((uint32_t)0x00000080)
#define TIM_CR2_OIS1 ((uint32_t)0x00000100)
#define TIM_CR2_OIS1N ((uint32_t)0x00000200)
#define TIM_CR2_OIS2 ((uint32_t)0x00000400)
#define TIM_CR2_OIS2N ((uint32_t)0x00000800)
#define TIM_CR2_OIS3 ((uint32_t)0x00001000)
#define TIM_CR2_OIS3N ((uint32_t)0x00002000)
#define TIM_CR2_OIS4 ((uint32_t)0x00004000)
#define TIM_CR2_OIS5 ((uint32_t)0x00010000)
#define TIM_CR2_OIS6 ((uint32_t)0x00020000)

#define TIM_CR2_MMS2 ((uint32_t)0x00F00000)
#define TIM_CR2_MMS2_0 ((uint32_t)0x00100000)
#define TIM_CR2_MMS2_1 ((uint32_t)0x00200000)
#define TIM_CR2_MMS2_2 ((uint32_t)0x00400000)
#define TIM_CR2_MMS2_3 ((uint32_t)0x00800000)


#define TIM_SMCR_SMS ((uint32_t)0x00010007)
#define TIM_SMCR_SMS_0 ((uint32_t)0x00000001)
#define TIM_SMCR_SMS_1 ((uint32_t)0x00000002)
#define TIM_SMCR_SMS_2 ((uint32_t)0x00000004)
#define TIM_SMCR_SMS_3 ((uint32_t)0x00010000)

#define TIM_SMCR_OCCS ((uint32_t)0x00000008)

#define TIM_SMCR_TS ((uint32_t)0x00000070)
#define TIM_SMCR_TS_0 ((uint32_t)0x00000010)
#define TIM_SMCR_TS_1 ((uint32_t)0x00000020)
#define TIM_SMCR_TS_2 ((uint32_t)0x00000040)

#define TIM_SMCR_MSM ((uint32_t)0x00000080)

#define TIM_SMCR_ETF ((uint32_t)0x00000F00)
#define TIM_SMCR_ETF_0 ((uint32_t)0x00000100)
#define TIM_SMCR_ETF_1 ((uint32_t)0x00000200)
#define TIM_SMCR_ETF_2 ((uint32_t)0x00000400)
#define TIM_SMCR_ETF_3 ((uint32_t)0x00000800)

#define TIM_SMCR_ETPS ((uint32_t)0x00003000)
#define TIM_SMCR_ETPS_0 ((uint32_t)0x00001000)
#define TIM_SMCR_ETPS_1 ((uint32_t)0x00002000)

#define TIM_SMCR_ECE ((uint32_t)0x00004000)
#define TIM_SMCR_ETP ((uint32_t)0x00008000)


#define TIM_DIER_UIE ((uint16_t)0x0001)
#define TIM_DIER_CC1IE ((uint16_t)0x0002)
#define TIM_DIER_CC2IE ((uint16_t)0x0004)
#define TIM_DIER_CC3IE ((uint16_t)0x0008)
#define TIM_DIER_CC4IE ((uint16_t)0x0010)
#define TIM_DIER_COMIE ((uint16_t)0x0020)
#define TIM_DIER_TIE ((uint16_t)0x0040)
#define TIM_DIER_BIE ((uint16_t)0x0080)
#define TIM_DIER_UDE ((uint16_t)0x0100)
#define TIM_DIER_CC1DE ((uint16_t)0x0200)
#define TIM_DIER_CC2DE ((uint16_t)0x0400)
#define TIM_DIER_CC3DE ((uint16_t)0x0800)
#define TIM_DIER_CC4DE ((uint16_t)0x1000)
#define TIM_DIER_COMDE ((uint16_t)0x2000)
#define TIM_DIER_TDE ((uint16_t)0x4000)


#define TIM_SR_UIF ((uint32_t)0x00000001)
#define TIM_SR_CC1IF ((uint32_t)0x00000002)
#define TIM_SR_CC2IF ((uint32_t)0x00000004)
#define TIM_SR_CC3IF ((uint32_t)0x00000008)
#define TIM_SR_CC4IF ((uint32_t)0x00000010)
#define TIM_SR_COMIF ((uint32_t)0x00000020)
#define TIM_SR_TIF ((uint32_t)0x00000040)
#define TIM_SR_BIF ((uint32_t)0x00000080)
#define TIM_SR_B2IF ((uint32_t)0x00000100)
#define TIM_SR_CC1OF ((uint32_t)0x00000200)
#define TIM_SR_CC2OF ((uint32_t)0x00000400)
#define TIM_SR_CC3OF ((uint32_t)0x00000800)
#define TIM_SR_CC4OF ((uint32_t)0x00001000)
#define TIM_SR_CC5IF ((uint32_t)0x00010000)
#define TIM_SR_CC6IF ((uint32_t)0x00020000)



#define TIM_EGR_UG ((uint16_t)0x0001)
#define TIM_EGR_CC1G ((uint16_t)0x0002)
#define TIM_EGR_CC2G ((uint16_t)0x0004)
#define TIM_EGR_CC3G ((uint16_t)0x0008)
#define TIM_EGR_CC4G ((uint16_t)0x0010)
#define TIM_EGR_COMG ((uint16_t)0x0020)
#define TIM_EGR_TG ((uint16_t)0x0040)
#define TIM_EGR_BG ((uint16_t)0x0080)
#define TIM_EGR_B2G ((uint16_t)0x0100)



#define TIM_CCMR1_CC1S ((uint32_t)0x00000003)
#define TIM_CCMR1_CC1S_0 ((uint32_t)0x00000001)
#define TIM_CCMR1_CC1S_1 ((uint32_t)0x00000002)

#define TIM_CCMR1_OC1FE ((uint32_t)0x00000004)
#define TIM_CCMR1_OC1PE ((uint32_t)0x00000008)

#define TIM_CCMR1_OC1M ((uint32_t)0x00010070)
#define TIM_CCMR1_OC1M_0 ((uint32_t)0x00000010)
#define TIM_CCMR1_OC1M_1 ((uint32_t)0x00000020)
#define TIM_CCMR1_OC1M_2 ((uint32_t)0x00000040)
#define TIM_CCMR1_OC1M_3 ((uint32_t)0x00010000)

#define TIM_CCMR1_OC1CE ((uint32_t)0x00000080)

#define TIM_CCMR1_CC2S ((uint32_t)0x00000300)
#define TIM_CCMR1_CC2S_0 ((uint32_t)0x00000100)
#define TIM_CCMR1_CC2S_1 ((uint32_t)0x00000200)

#define TIM_CCMR1_OC2FE ((uint32_t)0x00000400)
#define TIM_CCMR1_OC2PE ((uint32_t)0x00000800)

#define TIM_CCMR1_OC2M ((uint32_t)0x01007000)
#define TIM_CCMR1_OC2M_0 ((uint32_t)0x00001000)
#define TIM_CCMR1_OC2M_1 ((uint32_t)0x00002000)
#define TIM_CCMR1_OC2M_2 ((uint32_t)0x00004000)
#define TIM_CCMR1_OC2M_3 ((uint32_t)0x01000000)

#define TIM_CCMR1_OC2CE ((uint32_t)0x00008000)



#define TIM_CCMR1_IC1PSC ((uint32_t)0x0000000C)
#define TIM_CCMR1_IC1PSC_0 ((uint32_t)0x00000004)
#define TIM_CCMR1_IC1PSC_1 ((uint32_t)0x00000008)

#define TIM_CCMR1_IC1F ((uint32_t)0x000000F0)
#define TIM_CCMR1_IC1F_0 ((uint32_t)0x00000010)
#define TIM_CCMR1_IC1F_1 ((uint32_t)0x00000020)
#define TIM_CCMR1_IC1F_2 ((uint32_t)0x00000040)
#define TIM_CCMR1_IC1F_3 ((uint32_t)0x00000080)

#define TIM_CCMR1_IC2PSC ((uint32_t)0x00000C00)
#define TIM_CCMR1_IC2PSC_0 ((uint32_t)0x00000400)
#define TIM_CCMR1_IC2PSC_1 ((uint32_t)0x00000800)

#define TIM_CCMR1_IC2F ((uint32_t)0x0000F000)
#define TIM_CCMR1_IC2F_0 ((uint32_t)0x00001000)
#define TIM_CCMR1_IC2F_1 ((uint32_t)0x00002000)
#define TIM_CCMR1_IC2F_2 ((uint32_t)0x00004000)
#define TIM_CCMR1_IC2F_3 ((uint32_t)0x00008000)


#define TIM_CCMR2_CC3S ((uint32_t)0x00000003)
#define TIM_CCMR2_CC3S_0 ((uint32_t)0x00000001)
#define TIM_CCMR2_CC3S_1 ((uint32_t)0x00000002)

#define TIM_CCMR2_OC3FE ((uint32_t)0x00000004)
#define TIM_CCMR2_OC3PE ((uint32_t)0x00000008)

#define TIM_CCMR2_OC3M ((uint32_t)0x00000070)
#define TIM_CCMR2_OC3M_0 ((uint32_t)0x00000010)
#define TIM_CCMR2_OC3M_1 ((uint32_t)0x00000020)
#define TIM_CCMR2_OC3M_2 ((uint32_t)0x00000040)
#define TIM_CCMR2_OC3M_3 ((uint32_t)0x00010000)

#define TIM_CCMR2_OC3CE ((uint32_t)0x00000080)

#define TIM_CCMR2_CC4S ((uint32_t)0x00000300)
#define TIM_CCMR2_CC4S_0 ((uint32_t)0x00000100)
#define TIM_CCMR2_CC4S_1 ((uint32_t)0x00000200)

#define TIM_CCMR2_OC4FE ((uint32_t)0x00000400)
#define TIM_CCMR2_OC4PE ((uint32_t)0x00000800)

#define TIM_CCMR2_OC4M ((uint32_t)0x00007000)
#define TIM_CCMR2_OC4M_0 ((uint32_t)0x00001000)
#define TIM_CCMR2_OC4M_1 ((uint32_t)0x00002000)
#define TIM_CCMR2_OC4M_2 ((uint32_t)0x00004000)
#define TIM_CCMR2_OC4M_3 ((uint32_t)0x00100000)

#define TIM_CCMR2_OC4CE ((uint32_t)0x00008000)



#define TIM_CCMR2_IC3PSC ((uint16_t)0x0000000C)
#define TIM_CCMR2_IC3PSC_0 ((uint16_t)0x00000004)
#define TIM_CCMR2_IC3PSC_1 ((uint16_t)0x00000008)

#define TIM_CCMR2_IC3F ((uint16_t)0x000000F0)
#define TIM_CCMR2_IC3F_0 ((uint16_t)0x00000010)
#define TIM_CCMR2_IC3F_1 ((uint16_t)0x00000020)
#define TIM_CCMR2_IC3F_2 ((uint16_t)0x00000040)
#define TIM_CCMR2_IC3F_3 ((uint16_t)0x00000080)

#define TIM_CCMR2_IC4PSC ((uint16_t)0x00000C00)
#define TIM_CCMR2_IC4PSC_0 ((uint16_t)0x00000400)
#define TIM_CCMR2_IC4PSC_1 ((uint16_t)0x00000800)

#define TIM_CCMR2_IC4F ((uint16_t)0x0000F000)
#define TIM_CCMR2_IC4F_0 ((uint16_t)0x00001000)
#define TIM_CCMR2_IC4F_1 ((uint16_t)0x00002000)
#define TIM_CCMR2_IC4F_2 ((uint16_t)0x00004000)
#define TIM_CCMR2_IC4F_3 ((uint16_t)0x00008000)


#define TIM_CCER_CC1E ((uint32_t)0x00000001)
#define TIM_CCER_CC1P ((uint32_t)0x00000002)
#define TIM_CCER_CC1NE ((uint32_t)0x00000004)
#define TIM_CCER_CC1NP ((uint32_t)0x00000008)
#define TIM_CCER_CC2E ((uint32_t)0x00000010)
#define TIM_CCER_CC2P ((uint32_t)0x00000020)
#define TIM_CCER_CC2NE ((uint32_t)0x00000040)
#define TIM_CCER_CC2NP ((uint32_t)0x00000080)
#define TIM_CCER_CC3E ((uint32_t)0x00000100)
#define TIM_CCER_CC3P ((uint32_t)0x00000200)
#define TIM_CCER_CC3NE ((uint32_t)0x00000400)
#define TIM_CCER_CC3NP ((uint32_t)0x00000800)
#define TIM_CCER_CC4E ((uint32_t)0x00001000)
#define TIM_CCER_CC4P ((uint32_t)0x00002000)
#define TIM_CCER_CC4NP ((uint32_t)0x00008000)
#define TIM_CCER_CC5E ((uint32_t)0x00010000)
#define TIM_CCER_CC5P ((uint32_t)0x00020000)
#define TIM_CCER_CC6E ((uint32_t)0x00100000)
#define TIM_CCER_CC6P ((uint32_t)0x00200000)

#define TIM_CNT_CNT ((uint32_t)0xFFFFFFFF)
#define TIM_CNT_UIFCPY ((uint32_t)0x80000000)

#define TIM_PSC_PSC ((uint16_t)0xFFFF)


#define TIM_ARR_ARR ((uint32_t)0xFFFFFFFF)


#define TIM_RCR_REP ((uint8_t)0xFF)


#define TIM_CCR1_CCR1 ((uint16_t)0xFFFF)


#define TIM_CCR2_CCR2 ((uint16_t)0xFFFF)


#define TIM_CCR3_CCR3 ((uint16_t)0xFFFF)


#define TIM_CCR4_CCR4 ((uint16_t)0xFFFF)


#define TIM_CCR5_CCR5 ((uint32_t)0xFFFFFFFF)
#define TIM_CCR5_GC5C1 ((uint32_t)0x20000000)
#define TIM_CCR5_GC5C2 ((uint32_t)0x40000000)
#define TIM_CCR5_GC5C3 ((uint32_t)0x80000000)


#define TIM_CCR6_CCR6 ((uint16_t)0xFFFF)


#define TIM_BDTR_DTG ((uint32_t)0x000000FF)
#define TIM_BDTR_DTG_0 ((uint32_t)0x00000001)
#define TIM_BDTR_DTG_1 ((uint32_t)0x00000002)
#define TIM_BDTR_DTG_2 ((uint32_t)0x00000004)
#define TIM_BDTR_DTG_3 ((uint32_t)0x00000008)
#define TIM_BDTR_DTG_4 ((uint32_t)0x00000010)
#define TIM_BDTR_DTG_5 ((uint32_t)0x00000020)
#define TIM_BDTR_DTG_6 ((uint32_t)0x00000040)
#define TIM_BDTR_DTG_7 ((uint32_t)0x00000080)

#define TIM_BDTR_LOCK ((uint32_t)0x00000300)
#define TIM_BDTR_LOCK_0 ((uint32_t)0x00000100)
#define TIM_BDTR_LOCK_1 ((uint32_t)0x00000200)

#define TIM_BDTR_OSSI ((uint32_t)0x00000400)
#define TIM_BDTR_OSSR ((uint32_t)0x00000800)
#define TIM_BDTR_BKE ((uint32_t)0x00001000)
#define TIM_BDTR_BKP ((uint32_t)0x00002000)
#define TIM_BDTR_AOE ((uint32_t)0x00004000)
#define TIM_BDTR_MOE ((uint32_t)0x00008000)

#define TIM_BDTR_BKF ((uint32_t)0x000F0000)
#define TIM_BDTR_BK2F ((uint32_t)0x00F00000)

#define TIM_BDTR_BK2E ((uint32_t)0x01000000)
#define TIM_BDTR_BK2P ((uint32_t)0x02000000)


#define TIM_DCR_DBA ((uint16_t)0x001F)
#define TIM_DCR_DBA_0 ((uint16_t)0x0001)
#define TIM_DCR_DBA_1 ((uint16_t)0x0002)
#define TIM_DCR_DBA_2 ((uint16_t)0x0004)
#define TIM_DCR_DBA_3 ((uint16_t)0x0008)
#define TIM_DCR_DBA_4 ((uint16_t)0x0010)

#define TIM_DCR_DBL ((uint16_t)0x1F00)
#define TIM_DCR_DBL_0 ((uint16_t)0x0100)
#define TIM_DCR_DBL_1 ((uint16_t)0x0200)
#define TIM_DCR_DBL_2 ((uint16_t)0x0400)
#define TIM_DCR_DBL_3 ((uint16_t)0x0800)
#define TIM_DCR_DBL_4 ((uint16_t)0x1000)


#define TIM_DMAR_DMAB ((uint16_t)0xFFFF)


#define TIM16_OR_TI1_RMP ((uint16_t)0x00C0)
#define TIM16_OR_TI1_RMP_0 ((uint16_t)0x0040)
#define TIM16_OR_TI1_RMP_1 ((uint16_t)0x0080)


#define TIM1_OR_ETR_RMP ((uint16_t)0x000F)
#define TIM1_OR_ETR_RMP_0 ((uint16_t)0x0001)
#define TIM1_OR_ETR_RMP_1 ((uint16_t)0x0002)
#define TIM1_OR_ETR_RMP_2 ((uint16_t)0x0004)
#define TIM1_OR_ETR_RMP_3 ((uint16_t)0x0008)


#define TIM8_OR_ETR_RMP ((uint16_t)0x000F)
#define TIM8_OR_ETR_RMP_0 ((uint16_t)0x0001)
#define TIM8_OR_ETR_RMP_1 ((uint16_t)0x0002)
#define TIM8_OR_ETR_RMP_2 ((uint16_t)0x0004)
#define TIM8_OR_ETR_RMP_3 ((uint16_t)0x0008)


#define TIM_CCMR3_OC5FE ((uint32_t)0x00000004)
#define TIM_CCMR3_OC5PE ((uint32_t)0x00000008)

#define TIM_CCMR3_OC5M ((uint32_t)0x00000070)
#define TIM_CCMR3_OC5M_0 ((uint32_t)0x00000010)
#define TIM_CCMR3_OC5M_1 ((uint32_t)0x00000020)
#define TIM_CCMR3_OC5M_2 ((uint32_t)0x00000040)
#define TIM_CCMR3_OC5M_3 ((uint32_t)0x00010000)

#define TIM_CCMR3_OC5CE ((uint32_t)0x00000080)

#define TIM_CCMR3_OC6FE ((uint32_t)0x00000400)
#define TIM_CCMR3_OC6PE ((uint32_t)0x00000800)

#define TIM_CCMR3_OC6M ((uint32_t)0x00007000)
#define TIM_CCMR3_OC6M_0 ((uint32_t)0x00001000)
#define TIM_CCMR3_OC6M_1 ((uint32_t)0x00002000)
#define TIM_CCMR3_OC6M_2 ((uint32_t)0x00004000)
#define TIM_CCMR3_OC6M_3 ((uint32_t)0x00100000)

#define TIM_CCMR3_OC6CE ((uint32_t)0x00008000)







#define USART_CR1_UE ((uint32_t)0x00000001)
#define USART_CR1_UESM ((uint32_t)0x00000002)
#define USART_CR1_RE ((uint32_t)0x00000004)
#define USART_CR1_TE ((uint32_t)0x00000008)
#define USART_CR1_IDLEIE ((uint32_t)0x00000010)
#define USART_CR1_RXNEIE ((uint32_t)0x00000020)
#define USART_CR1_TCIE ((uint32_t)0x00000040)
#define USART_CR1_TXEIE ((uint32_t)0x00000080)
#define USART_CR1_PEIE ((uint32_t)0x00000100)
#define USART_CR1_PS ((uint32_t)0x00000200)
#define USART_CR1_PCE ((uint32_t)0x00000400)
#define USART_CR1_WAKE ((uint32_t)0x00000800)
#define USART_CR1_M ((uint32_t)0x00001000)
#define USART_CR1_MME ((uint32_t)0x00002000)
#define USART_CR1_CMIE ((uint32_t)0x00004000)
#define USART_CR1_OVER8 ((uint32_t)0x00008000)
#define USART_CR1_DEDT ((uint32_t)0x001F0000)
#define USART_CR1_DEDT_0 ((uint32_t)0x00010000)
#define USART_CR1_DEDT_1 ((uint32_t)0x00020000)
#define USART_CR1_DEDT_2 ((uint32_t)0x00040000)
#define USART_CR1_DEDT_3 ((uint32_t)0x00080000)
#define USART_CR1_DEDT_4 ((uint32_t)0x00100000)
#define USART_CR1_DEAT ((uint32_t)0x03E00000)
#define USART_CR1_DEAT_0 ((uint32_t)0x00200000)
#define USART_CR1_DEAT_1 ((uint32_t)0x00400000)
#define USART_CR1_DEAT_2 ((uint32_t)0x00800000)
#define USART_CR1_DEAT_3 ((uint32_t)0x01000000)
#define USART_CR1_DEAT_4 ((uint32_t)0x02000000)
#define USART_CR1_RTOIE ((uint32_t)0x04000000)
#define USART_CR1_EOBIE ((uint32_t)0x08000000)


#define USART_CR2_ADDM7 ((uint32_t)0x00000010)
#define USART_CR2_LBDL ((uint32_t)0x00000020)
#define USART_CR2_LBDIE ((uint32_t)0x00000040)
#define USART_CR2_LBCL ((uint32_t)0x00000100)
#define USART_CR2_CPHA ((uint32_t)0x00000200)
#define USART_CR2_CPOL ((uint32_t)0x00000400)
#define USART_CR2_CLKEN ((uint32_t)0x00000800)
#define USART_CR2_STOP ((uint32_t)0x00003000)
#define USART_CR2_STOP_0 ((uint32_t)0x00001000)
#define USART_CR2_STOP_1 ((uint32_t)0x00002000)
#define USART_CR2_LINEN ((uint32_t)0x00004000)
#define USART_CR2_SWAP ((uint32_t)0x00008000)
#define USART_CR2_RXINV ((uint32_t)0x00010000)
#define USART_CR2_TXINV ((uint32_t)0x00020000)
#define USART_CR2_DATAINV ((uint32_t)0x00040000)
#define USART_CR2_MSBFIRST ((uint32_t)0x00080000)
#define USART_CR2_ABREN ((uint32_t)0x00100000)
#define USART_CR2_ABRMODE ((uint32_t)0x00600000)
#define USART_CR2_ABRMODE_0 ((uint32_t)0x00200000)
#define USART_CR2_ABRMODE_1 ((uint32_t)0x00400000)
#define USART_CR2_RTOEN ((uint32_t)0x00800000)
#define USART_CR2_ADD ((uint32_t)0xFF000000)


#define USART_CR3_EIE ((uint32_t)0x00000001)
#define USART_CR3_IREN ((uint32_t)0x00000002)
#define USART_CR3_IRLP ((uint32_t)0x00000004)
#define USART_CR3_HDSEL ((uint32_t)0x00000008)
#define USART_CR3_NACK ((uint32_t)0x00000010)
#define USART_CR3_SCEN ((uint32_t)0x00000020)
#define USART_CR3_DMAR ((uint32_t)0x00000040)
#define USART_CR3_DMAT ((uint32_t)0x00000080)
#define USART_CR3_RTSE ((uint32_t)0x00000100)
#define USART_CR3_CTSE ((uint32_t)0x00000200)
#define USART_CR3_CTSIE ((uint32_t)0x00000400)
#define USART_CR3_ONEBIT ((uint32_t)0x00000800)
#define USART_CR3_OVRDIS ((uint32_t)0x00001000)
#define USART_CR3_DDRE ((uint32_t)0x00002000)
#define USART_CR3_DEM ((uint32_t)0x00004000)
#define USART_CR3_DEP ((uint32_t)0x00008000)
#define USART_CR3_SCARCNT ((uint32_t)0x000E0000)
#define USART_CR3_SCARCNT_0 ((uint32_t)0x00020000)
#define USART_CR3_SCARCNT_1 ((uint32_t)0x00040000)
#define USART_CR3_SCARCNT_2 ((uint32_t)0x00080000)
#define USART_CR3_WUS ((uint32_t)0x00300000)
#define USART_CR3_WUS_0 ((uint32_t)0x00100000)
#define USART_CR3_WUS_1 ((uint32_t)0x00200000)
#define USART_CR3_WUFIE ((uint32_t)0x00400000)


#define USART_BRR_DIV_FRACTION ((uint16_t)0x000F)
#define USART_BRR_DIV_MANTISSA ((uint16_t)0xFFF0)


#define USART_GTPR_PSC ((uint16_t)0x00FF)
#define USART_GTPR_GT ((uint16_t)0xFF00)



#define USART_RTOR_RTO ((uint32_t)0x00FFFFFF)
#define USART_RTOR_BLEN ((uint32_t)0xFF000000)


#define USART_RQR_ABRRQ ((uint16_t)0x0001)
#define USART_RQR_SBKRQ ((uint16_t)0x0002)
#define USART_RQR_MMRQ ((uint16_t)0x0004)
#define USART_RQR_RXFRQ ((uint16_t)0x0008)
#define USART_RQR_TXFRQ ((uint16_t)0x0010)


#define USART_ISR_PE ((uint32_t)0x00000001)
#define USART_ISR_FE ((uint32_t)0x00000002)
#define USART_ISR_NE ((uint32_t)0x00000004)
#define USART_ISR_ORE ((uint32_t)0x00000008)
#define USART_ISR_IDLE ((uint32_t)0x00000010)
#define USART_ISR_RXNE ((uint32_t)0x00000020)
#define USART_ISR_TC ((uint32_t)0x00000040)
#define USART_ISR_TXE ((uint32_t)0x00000080)
#define USART_ISR_LBD ((uint32_t)0x00000100)
#define USART_ISR_CTSIF ((uint32_t)0x00000200)
#define USART_ISR_CTS ((uint32_t)0x00000400)
#define USART_ISR_RTOF ((uint32_t)0x00000800)
#define USART_ISR_EOBF ((uint32_t)0x00001000)
#define USART_ISR_ABRE ((uint32_t)0x00004000)
#define USART_ISR_ABRF ((uint32_t)0x00008000)
#define USART_ISR_BUSY ((uint32_t)0x00010000)
#define USART_ISR_CMF ((uint32_t)0x00020000)
#define USART_ISR_SBKF ((uint32_t)0x00040000)
#define USART_ISR_RWU ((uint32_t)0x00080000)
#define USART_ISR_WUF ((uint32_t)0x00100000)
#define USART_ISR_TEACK ((uint32_t)0x00200000)
#define USART_ISR_REACK ((uint32_t)0x00400000)


#define USART_ICR_PECF ((uint32_t)0x00000001)
#define USART_ICR_FECF ((uint32_t)0x00000002)
#define USART_ICR_NCF ((uint32_t)0x00000004)
#define USART_ICR_ORECF ((uint32_t)0x00000008)
#define USART_ICR_IDLECF ((uint32_t)0x00000010)
#define USART_ICR_TCCF ((uint32_t)0x00000040)
#define USART_ICR_LBDCF ((uint32_t)0x00000100)
#define USART_ICR_CTSCF ((uint32_t)0x00000200)
#define USART_ICR_RTOCF ((uint32_t)0x00000800)
#define USART_ICR_EOBCF ((uint32_t)0x00001000)
#define USART_ICR_CMCF ((uint32_t)0x00020000)
#define USART_ICR_WUCF ((uint32_t)0x00100000)


#define USART_RDR_RDR ((uint16_t)0x01FF)


#define USART_TDR_TDR ((uint16_t)0x01FF)







#define WWDG_CR_T ((uint8_t)0x7F)
#define WWDG_CR_T0 ((uint8_t)0x01)
#define WWDG_CR_T1 ((uint8_t)0x02)
#define WWDG_CR_T2 ((uint8_t)0x04)
#define WWDG_CR_T3 ((uint8_t)0x08)
#define WWDG_CR_T4 ((uint8_t)0x10)
#define WWDG_CR_T5 ((uint8_t)0x20)
#define WWDG_CR_T6 ((uint8_t)0x40)

#define WWDG_CR_WDGA ((uint8_t)0x80)


#define WWDG_CFR_W ((uint16_t)0x007F)
#define WWDG_CFR_W0 ((uint16_t)0x0001)
#define WWDG_CFR_W1 ((uint16_t)0x0002)
#define WWDG_CFR_W2 ((uint16_t)0x0004)
#define WWDG_CFR_W3 ((uint16_t)0x0008)
#define WWDG_CFR_W4 ((uint16_t)0x0010)
#define WWDG_CFR_W5 ((uint16_t)0x0020)
#define WWDG_CFR_W6 ((uint16_t)0x0040)

#define WWDG_CFR_WDGTB ((uint16_t)0x0180)
#define WWDG_CFR_WDGTB0 ((uint16_t)0x0080)
#define WWDG_CFR_WDGTB1 ((uint16_t)0x0100)

#define WWDG_CFR_EWI ((uint16_t)0x0200)


#define WWDG_SR_EWIF ((uint8_t)0x01)
# 7656 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h"
# 1 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 1
# 7657 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h" 2






#define SET_BIT(REG,BIT) ((REG) |= (BIT))

#define CLEAR_BIT(REG,BIT) ((REG) &= ~(BIT))

#define READ_BIT(REG,BIT) ((REG) & (BIT))

#define CLEAR_REG(REG) ((REG) = (0x0))

#define WRITE_REG(REG,VAL) ((REG) = (VAL))

#define READ_REG(REG) ((REG))

#define MODIFY_REG(REG,CLEARMASK,SETMASK) WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
# 39 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h" 2
# 53 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
typedef struct
{

  uint32_t ADC_ContinuousConvMode;


  uint32_t ADC_Resolution;

  uint32_t ADC_ExternalTrigConvEvent;


  uint32_t ADC_ExternalTrigEventEdge;


  uint32_t ADC_DataAlign;

  uint32_t ADC_OverrunMode;

  uint32_t ADC_AutoInjMode;


  uint8_t ADC_NbrOfRegChannel;


}ADC_InitTypeDef;







typedef struct
{

   uint32_t ADC_ExternalTrigInjecConvEvent;


  uint32_t ADC_ExternalTrigInjecEventEdge;


  uint8_t ADC_NbrOfInjecChannel;


  uint32_t ADC_InjecSequence1;
  uint32_t ADC_InjecSequence2;
  uint32_t ADC_InjecSequence3;
  uint32_t ADC_InjecSequence4;
}ADC_InjectedInitTypeDef;




typedef struct
{
  uint32_t ADC_Mode;


  uint32_t ADC_Clock;


  uint32_t ADC_DMAAccessMode;


  uint32_t ADC_DMAMode;

  uint8_t ADC_TwoSamplingDelay;


}ADC_CommonInitTypeDef;







#define IS_ADC_ALL_PERIPH(PERIPH) (((PERIPH) == ADC1) || ((PERIPH) == ADC2) || ((PERIPH) == ADC3) || ((PERIPH) == ADC4))




#define IS_ADC_DMA_PERIPH(PERIPH) (((PERIPH) == ADC1) || ((PERIPH) == ADC2) || ((PERIPH) == ADC3) || ((PERIPH) == ADC4))







#define ADC_ContinuousConvMode_Enable ((uint32_t)0x00002000)
#define ADC_ContinuousConvMode_Disable ((uint32_t)0x00000000)
#define IS_ADC_CONVMODE(MODE) (((MODE) == ADC_ContinuousConvMode_Enable) || ((MODE) == ADC_ContinuousConvMode_Disable))







#define ADC_OverrunMode_Enable ((uint32_t)0x00001000)
#define ADC_OverrunMode_Disable ((uint32_t)0x00000000)
#define IS_ADC_OVRUNMODE(MODE) (((MODE) == ADC_OverrunMode_Enable) || ((MODE) == ADC_OverrunMode_Disable))







#define ADC_AutoInjec_Enable ((uint32_t)0x02000000)
#define ADC_AutoInjec_Disable ((uint32_t)0x00000000)
#define IS_ADC_AUTOINJECMODE(MODE) (((MODE) == ADC_AutoInjec_Enable) || ((MODE) == ADC_AutoInjec_Disable))







#define ADC_Resolution_12b ((uint32_t)0x00000000)
#define ADC_Resolution_10b ((uint32_t)0x00000008)
#define ADC_Resolution_8b ((uint32_t)0x00000010)
#define ADC_Resolution_6b ((uint32_t)0x00000018)
#define IS_ADC_RESOLUTION(RESOLUTION) (((RESOLUTION) == ADC_Resolution_12b) || ((RESOLUTION) == ADC_Resolution_10b) || ((RESOLUTION) == ADC_Resolution_8b) || ((RESOLUTION) == ADC_Resolution_6b))
# 190 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_ExternalTrigEventEdge_None ((uint16_t)0x0000)
#define ADC_ExternalTrigEventEdge_RisingEdge ((uint16_t)0x0400)
#define ADC_ExternalTrigEventEdge_FallingEdge ((uint16_t)0x0800)
#define ADC_ExternalTrigEventEdge_BothEdge ((uint16_t)0x0C00)

#define IS_EXTERNALTRIG_EDGE(EDGE) (((EDGE) == ADC_ExternalTrigEventEdge_None) || ((EDGE) == ADC_ExternalTrigEventEdge_RisingEdge) || ((EDGE) == ADC_ExternalTrigEventEdge_FallingEdge) || ((EDGE) == ADC_ExternalTrigEventEdge_BothEdge))
# 207 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_ExternalTrigInjecEventEdge_None ((uint16_t)0x0000)
#define ADC_ExternalTrigInjecEventEdge_RisingEdge ((uint16_t)0x0040)
#define ADC_ExternalTrigInjecEventEdge_FallingEdge ((uint16_t)0x0080)
#define ADC_ExternalTrigInjecEventEdge_BothEdge ((uint16_t)0x00C0)

#define IS_EXTERNALTRIGINJ_EDGE(EDGE) (((EDGE) == ADC_ExternalTrigInjecEventEdge_None) || ((EDGE) == ADC_ExternalTrigInjecEventEdge_RisingEdge) || ((EDGE) == ADC_ExternalTrigInjecEventEdge_FallingEdge) || ((EDGE) == ADC_ExternalTrigInjecEventEdge_BothEdge))







#define ADC_ExternalTrigConvEvent_0 ((uint16_t)0x0000)
#define ADC_ExternalTrigConvEvent_1 ((uint16_t)0x0040)
#define ADC_ExternalTrigConvEvent_2 ((uint16_t)0x0080)
#define ADC_ExternalTrigConvEvent_3 ((uint16_t)0x00C0)
#define ADC_ExternalTrigConvEvent_4 ((uint16_t)0x0100)
#define ADC_ExternalTrigConvEvent_5 ((uint16_t)0x0140)
#define ADC_ExternalTrigConvEvent_6 ((uint16_t)0x0180)
#define ADC_ExternalTrigConvEvent_7 ((uint16_t)0x01C0)
#define ADC_ExternalTrigConvEvent_8 ((uint16_t)0x0200)
#define ADC_ExternalTrigConvEvent_9 ((uint16_t)0x0240)
#define ADC_ExternalTrigConvEvent_10 ((uint16_t)0x0280)
#define ADC_ExternalTrigConvEvent_11 ((uint16_t)0x02C0)
#define ADC_ExternalTrigConvEvent_12 ((uint16_t)0x0300)
#define ADC_ExternalTrigConvEvent_13 ((uint16_t)0x0340)
#define ADC_ExternalTrigConvEvent_14 ((uint16_t)0x0380)
#define ADC_ExternalTrigConvEvent_15 ((uint16_t)0x03C0)

#define IS_ADC_EXT_TRIG(REGTRIG) (((REGTRIG) == ADC_ExternalTrigConvEvent_0) || ((REGTRIG) == ADC_ExternalTrigConvEvent_1) || ((REGTRIG) == ADC_ExternalTrigConvEvent_2) || ((REGTRIG) == ADC_ExternalTrigConvEvent_3) || ((REGTRIG) == ADC_ExternalTrigConvEvent_4) || ((REGTRIG) == ADC_ExternalTrigConvEvent_5) || ((REGTRIG) == ADC_ExternalTrigConvEvent_6) || ((REGTRIG) == ADC_ExternalTrigConvEvent_7) || ((REGTRIG) == ADC_ExternalTrigConvEvent_8) || ((REGTRIG) == ADC_ExternalTrigConvEvent_9) || ((REGTRIG) == ADC_ExternalTrigConvEvent_10) || ((REGTRIG) == ADC_ExternalTrigConvEvent_11) || ((REGTRIG) == ADC_ExternalTrigConvEvent_12) || ((REGTRIG) == ADC_ExternalTrigConvEvent_13) || ((REGTRIG) == ADC_ExternalTrigConvEvent_14) || ((REGTRIG) == ADC_ExternalTrigConvEvent_15))
# 262 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_ExternalTrigInjecConvEvent_0 ((uint16_t)0x0000)
#define ADC_ExternalTrigInjecConvEvent_1 ((uint16_t)0x0004)
#define ADC_ExternalTrigInjecConvEvent_2 ((uint16_t)0x0008)
#define ADC_ExternalTrigInjecConvEvent_3 ((uint16_t)0x000C)
#define ADC_ExternalTrigInjecConvEvent_4 ((uint16_t)0x0010)
#define ADC_ExternalTrigInjecConvEvent_5 ((uint16_t)0x0014)
#define ADC_ExternalTrigInjecConvEvent_6 ((uint16_t)0x0018)
#define ADC_ExternalTrigInjecConvEvent_7 ((uint16_t)0x001C)
#define ADC_ExternalTrigInjecConvEvent_8 ((uint16_t)0x0020)
#define ADC_ExternalTrigInjecConvEvent_9 ((uint16_t)0x0024)
#define ADC_ExternalTrigInjecConvEvent_10 ((uint16_t)0x0028)
#define ADC_ExternalTrigInjecConvEvent_11 ((uint16_t)0x002C)
#define ADC_ExternalTrigInjecConvEvent_12 ((uint16_t)0x0030)
#define ADC_ExternalTrigInjecConvEvent_13 ((uint16_t)0x0034)
#define ADC_ExternalTrigInjecConvEvent_14 ((uint16_t)0x0038)
#define ADC_ExternalTrigInjecConvEvent_15 ((uint16_t)0x003C)

#define IS_ADC_EXT_INJEC_TRIG(INJTRIG) (((INJTRIG) == ADC_ExternalTrigInjecConvEvent_0) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_1) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_2) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_3) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_4) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_5) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_6) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_7) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_8) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_9) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_10) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_11) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_12) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_13) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_14) || ((INJTRIG) == ADC_ExternalTrigInjecConvEvent_15))
# 302 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_DataAlign_Right ((uint32_t)0x00000000)
#define ADC_DataAlign_Left ((uint32_t)0x00000020)
#define IS_ADC_DATA_ALIGN(ALIGN) (((ALIGN) == ADC_DataAlign_Right) || ((ALIGN) == ADC_DataAlign_Left))
# 314 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_Channel_1 ((uint8_t)0x01)
#define ADC_Channel_2 ((uint8_t)0x02)
#define ADC_Channel_3 ((uint8_t)0x03)
#define ADC_Channel_4 ((uint8_t)0x04)
#define ADC_Channel_5 ((uint8_t)0x05)
#define ADC_Channel_6 ((uint8_t)0x06)
#define ADC_Channel_7 ((uint8_t)0x07)
#define ADC_Channel_8 ((uint8_t)0x08)
#define ADC_Channel_9 ((uint8_t)0x09)
#define ADC_Channel_10 ((uint8_t)0x0A)
#define ADC_Channel_11 ((uint8_t)0x0B)
#define ADC_Channel_12 ((uint8_t)0x0C)
#define ADC_Channel_13 ((uint8_t)0x0D)
#define ADC_Channel_14 ((uint8_t)0x0E)
#define ADC_Channel_15 ((uint8_t)0x0F)
#define ADC_Channel_16 ((uint8_t)0x10)
#define ADC_Channel_17 ((uint8_t)0x11)
#define ADC_Channel_18 ((uint8_t)0x12)

#define ADC_Channel_TempSensor ((uint8_t)ADC_Channel_16)
#define ADC_Channel_Vrefint ((uint8_t)ADC_Channel_18)
#define ADC_Channel_Vbat ((uint8_t)ADC_Channel_17)

#define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_Channel_1) || ((CHANNEL) == ADC_Channel_2) || ((CHANNEL) == ADC_Channel_3) || ((CHANNEL) == ADC_Channel_4) || ((CHANNEL) == ADC_Channel_5) || ((CHANNEL) == ADC_Channel_6) || ((CHANNEL) == ADC_Channel_7) || ((CHANNEL) == ADC_Channel_8) || ((CHANNEL) == ADC_Channel_9) || ((CHANNEL) == ADC_Channel_10) || ((CHANNEL) == ADC_Channel_11) || ((CHANNEL) == ADC_Channel_12) || ((CHANNEL) == ADC_Channel_13) || ((CHANNEL) == ADC_Channel_14) || ((CHANNEL) == ADC_Channel_15) || ((CHANNEL) == ADC_Channel_16) || ((CHANNEL) == ADC_Channel_17) || ((CHANNEL) == ADC_Channel_18))
# 355 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define IS_ADC_DIFFCHANNEL(CHANNEL) (((CHANNEL) == ADC_Channel_1) || ((CHANNEL) == ADC_Channel_2) || ((CHANNEL) == ADC_Channel_3) || ((CHANNEL) == ADC_Channel_4) || ((CHANNEL) == ADC_Channel_5) || ((CHANNEL) == ADC_Channel_6) || ((CHANNEL) == ADC_Channel_7) || ((CHANNEL) == ADC_Channel_8) || ((CHANNEL) == ADC_Channel_9) || ((CHANNEL) == ADC_Channel_10) || ((CHANNEL) == ADC_Channel_11) || ((CHANNEL) == ADC_Channel_12) || ((CHANNEL) == ADC_Channel_13) || ((CHANNEL) == ADC_Channel_14))
# 376 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_Mode_Independent ((uint32_t)0x00000000)
#define ADC_Mode_CombRegSimulInjSimul ((uint32_t)0x00000001)
#define ADC_Mode_CombRegSimulAltTrig ((uint32_t)0x00000002)
#define ADC_Mode_InjSimul ((uint32_t)0x00000005)
#define ADC_Mode_RegSimul ((uint32_t)0x00000006)
#define ADC_Mode_Interleave ((uint32_t)0x00000007)
#define ADC_Mode_AltTrig ((uint32_t)0x00000009)

#define IS_ADC_MODE(MODE) (((MODE) == ADC_Mode_Independent) || ((MODE) == ADC_Mode_CombRegSimulInjSimul) || ((MODE) == ADC_Mode_CombRegSimulAltTrig) || ((MODE) == ADC_Mode_InjSimul) || ((MODE) == ADC_Mode_RegSimul) || ((MODE) == ADC_Mode_Interleave) || ((MODE) == ADC_Mode_AltTrig))
# 399 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_Clock_AsynClkMode ((uint32_t)0x00000000)
#define ADC_Clock_SynClkModeDiv1 ((uint32_t)0x00010000)
#define ADC_Clock_SynClkModeDiv2 ((uint32_t)0x00020000)
#define ADC_Clock_SynClkModeDiv4 ((uint32_t)0x00030000)
#define IS_ADC_CLOCKMODE(CLOCK) (((CLOCK) == ADC_Clock_AsynClkMode) || ((CLOCK) == ADC_Clock_SynClkModeDiv1) || ((CLOCK) == ADC_Clock_SynClkModeDiv2)|| ((CLOCK) == ADC_Clock_SynClkModeDiv4))
# 413 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_DMAAccessMode_Disabled ((uint32_t)0x00000000)
#define ADC_DMAAccessMode_1 ((uint32_t)0x00008000)
#define ADC_DMAAccessMode_2 ((uint32_t)0x0000C000)
#define IS_ADC_DMA_ACCESS_MODE(MODE) (((MODE) == ADC_DMAAccessMode_Disabled) || ((MODE) == ADC_DMAAccessMode_1) || ((MODE) == ADC_DMAAccessMode_2))
# 427 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_SampleTime_1Cycles5 ((uint8_t)0x00)
#define ADC_SampleTime_2Cycles5 ((uint8_t)0x01)
#define ADC_SampleTime_4Cycles5 ((uint8_t)0x02)
#define ADC_SampleTime_7Cycles5 ((uint8_t)0x03)
#define ADC_SampleTime_19Cycles5 ((uint8_t)0x04)
#define ADC_SampleTime_61Cycles5 ((uint8_t)0x05)
#define ADC_SampleTime_181Cycles5 ((uint8_t)0x06)
#define ADC_SampleTime_601Cycles5 ((uint8_t)0x07)
#define IS_ADC_SAMPLE_TIME(TIME) (((TIME) == ADC_SampleTime_1Cycles5) || ((TIME) == ADC_SampleTime_2Cycles5) || ((TIME) == ADC_SampleTime_4Cycles5) || ((TIME) == ADC_SampleTime_7Cycles5) || ((TIME) == ADC_SampleTime_19Cycles5) || ((TIME) == ADC_SampleTime_61Cycles5) || ((TIME) == ADC_SampleTime_181Cycles5) || ((TIME) == ADC_SampleTime_601Cycles5))
# 451 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_InjectedChannel_1 ADC_Channel_1
#define ADC_InjectedChannel_2 ADC_Channel_2
#define ADC_InjectedChannel_3 ADC_Channel_3
#define ADC_InjectedChannel_4 ADC_Channel_4
#define ADC_InjectedChannel_5 ADC_Channel_5
#define ADC_InjectedChannel_6 ADC_Channel_6
#define ADC_InjectedChannel_7 ADC_Channel_7
#define ADC_InjectedChannel_8 ADC_Channel_8
#define ADC_InjectedChannel_9 ADC_Channel_9
#define ADC_InjectedChannel_10 ADC_Channel_10
#define ADC_InjectedChannel_11 ADC_Channel_11
#define ADC_InjectedChannel_12 ADC_Channel_12
#define ADC_InjectedChannel_13 ADC_Channel_13
#define ADC_InjectedChannel_14 ADC_Channel_14
#define ADC_InjectedChannel_15 ADC_Channel_15
#define ADC_InjectedChannel_16 ADC_Channel_16
#define ADC_InjectedChannel_17 ADC_Channel_17
#define ADC_InjectedChannel_18 ADC_Channel_18

#define IS_ADC_INJECTED_CHANNEL(CHANNEL) (((CHANNEL) == ADC_InjectedChannel_1) || ((CHANNEL) == ADC_InjectedChannel_2) || ((CHANNEL) == ADC_InjectedChannel_3) || ((CHANNEL) == ADC_InjectedChannel_4) || ((CHANNEL) == ADC_InjectedChannel_5) || ((CHANNEL) == ADC_InjectedChannel_6) || ((CHANNEL) == ADC_InjectedChannel_7) || ((CHANNEL) == ADC_InjectedChannel_8) || ((CHANNEL) == ADC_InjectedChannel_9) || ((CHANNEL) == ADC_InjectedChannel_10) || ((CHANNEL) == ADC_InjectedChannel_11) || ((CHANNEL) == ADC_InjectedChannel_12) || ((CHANNEL) == ADC_InjectedChannel_13) || ((CHANNEL) == ADC_InjectedChannel_14) || ((CHANNEL) == ADC_InjectedChannel_15) || ((CHANNEL) == ADC_InjectedChannel_16) || ((CHANNEL) == ADC_InjectedChannel_17) || ((CHANNEL) == ADC_InjectedChannel_18))
# 496 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_InjectedSequence_1 ADC_Channel_1
#define ADC_InjectedSequence_2 ADC_Channel_2
#define ADC_InjectedSequence_3 ADC_Channel_3
#define ADC_InjectedSequence_4 ADC_Channel_4
#define IS_ADC_INJECTED_SEQUENCE(SEQUENCE) (((SEQUENCE) == ADC_InjectedSequence_1) || ((SEQUENCE) == ADC_InjectedSequence_2) || ((SEQUENCE) == ADC_InjectedSequence_3) || ((SEQUENCE) == ADC_InjectedSequence_4))
# 512 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_AnalogWatchdog_SingleRegEnable ((uint32_t)0x00C00000)
#define ADC_AnalogWatchdog_SingleInjecEnable ((uint32_t)0x01400000)
#define ADC_AnalogWatchdog_SingleRegOrInjecEnable ((uint32_t)0x01C00000)
#define ADC_AnalogWatchdog_AllRegEnable ((uint32_t)0x00800000)
#define ADC_AnalogWatchdog_AllInjecEnable ((uint32_t)0x01000000)
#define ADC_AnalogWatchdog_AllRegAllInjecEnable ((uint32_t)0x01800000)
#define ADC_AnalogWatchdog_None ((uint32_t)0x00000000)

#define IS_ADC_ANALOG_WATCHDOG(WATCHDOG) (((WATCHDOG) == ADC_AnalogWatchdog_SingleRegEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_SingleInjecEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_SingleRegOrInjecEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_AllRegEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_AllInjecEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_AllRegAllInjecEnable) || ((WATCHDOG) == ADC_AnalogWatchdog_None))
# 534 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_CalibrationMode_Single ((uint32_t)0x00000000)
#define ADC_CalibrationMode_Differential ((uint32_t)0x40000000)

#define IS_ADC_CALIBRATION_MODE(MODE) (((MODE) == ADC_CalibrationMode_Single) ||((MODE) == ADC_CalibrationMode_Differential))
# 546 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_DMAMode_OneShot ((uint32_t)0x00000000)
#define ADC_DMAMode_Circular ((uint32_t)0x00000002)

#define IS_ADC_DMA_MODE(MODE) (((MODE) == ADC_DMAMode_OneShot) || ((MODE) == ADC_DMAMode_Circular))
# 558 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_IT_RDY ((uint16_t)0x0001)
#define ADC_IT_EOSMP ((uint16_t)0x0002)
#define ADC_IT_EOC ((uint16_t)0x0004)
#define ADC_IT_EOS ((uint16_t)0x0008)
#define ADC_IT_OVR ((uint16_t)0x0010)
#define ADC_IT_JEOC ((uint16_t)0x0020)
#define ADC_IT_JEOS ((uint16_t)0x0040)
#define ADC_IT_AWD1 ((uint16_t)0x0080)
#define ADC_IT_AWD2 ((uint16_t)0x0100)
#define ADC_IT_AWD3 ((uint16_t)0x0200)
#define ADC_IT_JQOVF ((uint16_t)0x0400)


#define IS_ADC_IT(IT) ((((IT) & (uint16_t)0xF800) == 0x0000) && ((IT) != 0x0000))

#define IS_ADC_GET_IT(IT) (((IT) == ADC_IT_RDY) || ((IT) == ADC_IT_EOSMP) || ((IT) == ADC_IT_EOC) || ((IT) == ADC_IT_EOS) || ((IT) == ADC_IT_OVR) || ((IT) == ADC_IT_EOS) || ((IT) == ADC_IT_JEOS) || ((IT) == ADC_IT_AWD1) || ((IT) == ADC_IT_AWD2) || ((IT) == ADC_IT_AWD3) || ((IT) == ADC_IT_JQOVF))
# 587 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_FLAG_RDY ((uint16_t)0x0001)
#define ADC_FLAG_EOSMP ((uint16_t)0x0002)
#define ADC_FLAG_EOC ((uint16_t)0x0004)
#define ADC_FLAG_EOS ((uint16_t)0x0008)
#define ADC_FLAG_OVR ((uint16_t)0x0010)
#define ADC_FLAG_JEOC ((uint16_t)0x0020)
#define ADC_FLAG_JEOS ((uint16_t)0x0040)
#define ADC_FLAG_AWD1 ((uint16_t)0x0080)
#define ADC_FLAG_AWD2 ((uint16_t)0x0100)
#define ADC_FLAG_AWD3 ((uint16_t)0x0200)
#define ADC_FLAG_JQOVF ((uint16_t)0x0400)

#define IS_ADC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0xF800) == 0x0000) && ((FLAG) != 0x0000))
#define IS_ADC_GET_FLAG(FLAG) (((FLAG) == ADC_FLAG_RDY) || ((FLAG) == ADC_FLAG_EOSMP) || ((FLAG) == ADC_FLAG_EOC) || ((FLAG) == ADC_FLAG_EOS) || ((FLAG) == ADC_FLAG_OVR) || ((FLAG) == ADC_FLAG_JEOC) || ((FLAG) == ADC_FLAG_JEOS) || ((FLAG) == ADC_FLAG_AWD1) || ((FLAG) == ADC_FLAG_AWD2) || ((FLAG) == ADC_FLAG_AWD3) || ((FLAG) == ADC_FLAG_JQOVF))
# 614 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define ADC_FLAG_MSTRDY ((uint32_t)0x00000001)
#define ADC_FLAG_MSTEOSMP ((uint32_t)0x00000002)
#define ADC_FLAG_MSTEOC ((uint32_t)0x00000004)
#define ADC_FLAG_MSTEOS ((uint32_t)0x00000008)
#define ADC_FLAG_MSTOVR ((uint32_t)0x00000010)
#define ADC_FLAG_MSTJEOC ((uint32_t)0x00000020)
#define ADC_FLAG_MSTJEOS ((uint32_t)0x00000040)
#define ADC_FLAG_MSTAWD1 ((uint32_t)0x00000080)
#define ADC_FLAG_MSTAWD2 ((uint32_t)0x00000100)
#define ADC_FLAG_MSTAWD3 ((uint32_t)0x00000200)
#define ADC_FLAG_MSTJQOVF ((uint32_t)0x00000400)

#define ADC_FLAG_SLVRDY ((uint32_t)0x00010000)
#define ADC_FLAG_SLVEOSMP ((uint32_t)0x00020000)
#define ADC_FLAG_SLVEOC ((uint32_t)0x00040000)
#define ADC_FLAG_SLVEOS ((uint32_t)0x00080000)
#define ADC_FLAG_SLVOVR ((uint32_t)0x00100000)
#define ADC_FLAG_SLVJEOC ((uint32_t)0x00200000)
#define ADC_FLAG_SLVJEOS ((uint32_t)0x00400000)
#define ADC_FLAG_SLVAWD1 ((uint32_t)0x00800000)
#define ADC_FLAG_SLVAWD2 ((uint32_t)0x01000000)
#define ADC_FLAG_SLVAWD3 ((uint32_t)0x02000000)
#define ADC_FLAG_SLVJQOVF ((uint32_t)0x04000000)

#define IS_ADC_CLEAR_COMMONFLAG(FLAG) ((((FLAG) & (uint32_t)0xF800F800) == 0x0000) && ((FLAG) != 0x00000000))
#define IS_ADC_GET_COMMONFLAG(FLAG) (((FLAG) == ADC_FLAG_MSTRDY) || ((FLAG) == ADC_FLAG_MSTEOSMP) || ((FLAG) == ADC_FLAG_MSTEOC) || ((FLAG) == ADC_FLAG_MSTEOS) || ((FLAG) == ADC_FLAG_MSTOVR) || ((FLAG) == ADC_FLAG_MSTEOS) || ((FLAG) == ADC_FLAG_MSTJEOS) || ((FLAG) == ADC_FLAG_MSTAWD1) || ((FLAG) == ADC_FLAG_MSTAWD2) || ((FLAG) == ADC_FLAG_MSTAWD3) || ((FLAG) == ADC_FLAG_MSTJQOVF) || ((FLAG) == ADC_FLAG_SLVRDY) || ((FLAG) == ADC_FLAG_SLVEOSMP) || ((FLAG) == ADC_FLAG_SLVEOC) || ((FLAG) == ADC_FLAG_SLVEOS) || ((FLAG) == ADC_FLAG_SLVOVR) || ((FLAG) == ADC_FLAG_SLVEOS) || ((FLAG) == ADC_FLAG_SLVJEOS) || ((FLAG) == ADC_FLAG_SLVAWD1) || ((FLAG) == ADC_FLAG_SLVAWD2) || ((FLAG) == ADC_FLAG_SLVAWD3) || ((FLAG) == ADC_FLAG_SLVJQOVF))
# 659 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define IS_ADC_THRESHOLD(THRESHOLD) ((THRESHOLD) <= 0xFFF)
# 669 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define IS_ADC_OFFSET(OFFSET) ((OFFSET) <= 0xFFF)
# 679 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define IS_ADC_INJECTED_LENGTH(LENGTH) (((LENGTH) >= 0x1) && ((LENGTH) <= 0x4))
# 690 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define IS_ADC_REGULAR_LENGTH(LENGTH) (((LENGTH) >= 0x1) && ((LENGTH) <= 0x10))
# 699 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define IS_ADC_REGULAR_DISC_NUMBER(NUMBER) (((NUMBER) >= 0x1) && ((NUMBER) <= 0x8))
# 708 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
#define IS_ADC_TWOSAMPLING_DELAY(DELAY) (((DELAY) <= 0xF))
# 722 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h"
void ADC_DeInit(ADC_TypeDef* ADCx);


void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct);
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct);
void ADC_InjectedInit(ADC_TypeDef* ADCx, ADC_InjectedInitTypeDef* ADC_InjectedInitStruct);
void ADC_InjectedStructInit(ADC_InjectedInitTypeDef* ADC_InjectedInitStruct);
void ADC_CommonInit(ADC_TypeDef* ADCx, ADC_CommonInitTypeDef* ADC_CommonInitStruct);
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct);

void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_StartCalibration(ADC_TypeDef* ADCx);
uint32_t ADC_GetCalibrationValue(ADC_TypeDef* ADCx);
void ADC_SetCalibrationValue(ADC_TypeDef* ADCx, uint32_t ADC_Calibration);
void ADC_SelectCalibrationMode(ADC_TypeDef* ADCx, uint32_t ADC_CalibrationMode);
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx);
void ADC_DisableCmd(ADC_TypeDef* ADCx);
FlagStatus ADC_GetDisableCmdStatus(ADC_TypeDef* ADCx);
void ADC_VoltageRegulatorCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_SelectDifferentialMode(ADC_TypeDef* ADCx, uint8_t ADC_Channel, FunctionalState NewState);
void ADC_SelectQueueOfContextMode(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_AutoDelayCmd(ADC_TypeDef* ADCx, FunctionalState NewState);


void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog);
void ADC_AnalogWatchdog1ThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold, uint16_t LowThreshold);
void ADC_AnalogWatchdog2ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold, uint8_t LowThreshold);
void ADC_AnalogWatchdog3ThresholdsConfig(ADC_TypeDef* ADCx, uint8_t HighThreshold, uint8_t LowThreshold);
void ADC_AnalogWatchdog1SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);
void ADC_AnalogWatchdog2SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);
void ADC_AnalogWatchdog3SingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);


void ADC_TempSensorCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_VrefintCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_VbatCmd(ADC_TypeDef* ADCx, FunctionalState NewState);


void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
void ADC_RegularChannelSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t SequencerLength);
void ADC_ExternalTriggerConfig(ADC_TypeDef* ADCx, uint16_t ADC_ExternalTrigConvEvent, uint16_t ADC_ExternalTrigEventEdge);

void ADC_StartConversion(ADC_TypeDef* ADCx);
FlagStatus ADC_GetStartConversionStatus(ADC_TypeDef* ADCx);
void ADC_StopConversion(ADC_TypeDef* ADCx);
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number);
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx);
uint32_t ADC_GetDualModeConversionValue(ADC_TypeDef* ADCx);

void ADC_SetChannelOffset1(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset);
void ADC_SetChannelOffset2(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset);
void ADC_SetChannelOffset3(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset);
void ADC_SetChannelOffset4(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint16_t Offset);

void ADC_ChannelOffset1Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ChannelOffset2Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ChannelOffset3Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ChannelOffset4Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);


void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_DMAConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMAMode);


void ADC_InjectedChannelSampleTimeConfig(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint8_t ADC_SampleTime);
void ADC_StartInjectedConversion(ADC_TypeDef* ADCx);
FlagStatus ADC_GetStartInjectedConversionStatus(ADC_TypeDef* ADCx);
void ADC_StopInjectedConversion(ADC_TypeDef* ADCx);
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel);


FlagStatus ADC_GetCommonFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG);
void ADC_ClearCommonFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG);


void ADC_ITConfig(ADC_TypeDef* ADCx, uint32_t ADC_IT, FunctionalState NewState);
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG);
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint32_t ADC_FLAG);
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint32_t ADC_IT);
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint32_t ADC_IT);
# 35 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2


# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define __STM32F30x_COMP_H 
# 54 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
typedef struct
{

  uint32_t COMP_InvertingInput;


  uint32_t COMP_NonInvertingInput;


  uint32_t COMP_Output;


  uint32_t COMP_BlankingSrce;


  uint32_t COMP_OutputPol;


  uint32_t COMP_Hysteresis;


  uint32_t COMP_Mode;


}COMP_InitTypeDef;
# 90 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_Selection_COMP1 ((uint32_t)0x00000000)
#define COMP_Selection_COMP2 ((uint32_t)0x00000004)
#define COMP_Selection_COMP3 ((uint32_t)0x00000008)
#define COMP_Selection_COMP4 ((uint32_t)0x0000000C)
#define COMP_Selection_COMP5 ((uint32_t)0x00000010)
#define COMP_Selection_COMP6 ((uint32_t)0x00000014)
#define COMP_Selection_COMP7 ((uint32_t)0x00000018)

#define IS_COMP_ALL_PERIPH(PERIPH) (((PERIPH) == COMP_Selection_COMP1) || ((PERIPH) == COMP_Selection_COMP2) || ((PERIPH) == COMP_Selection_COMP3) || ((PERIPH) == COMP_Selection_COMP4) || ((PERIPH) == COMP_Selection_COMP5) || ((PERIPH) == COMP_Selection_COMP6) || ((PERIPH) == COMP_Selection_COMP7))
# 114 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_InvertingInput_1_4VREFINT ((uint32_t)0x00000000)
#define COMP_InvertingInput_1_2VREFINT COMP_CSR_COMPxINSEL_0
#define COMP_InvertingInput_3_4VREFINT COMP_CSR_COMPxINSEL_1
#define COMP_InvertingInput_VREFINT ((uint32_t)0x00000030)
#define COMP_InvertingInput_DAC1OUT1 COMP_CSR_COMPxINSEL_2
#define COMP_InvertingInput_DAC1OUT2 ((uint32_t)0x00000050)

#define COMP_InvertingInput_IO1 ((uint32_t)0x00000060)



#define COMP_InvertingInput_IO2 COMP_CSR_COMPxINSEL


#define COMP_InvertingInput_DAC2OUT1 COMP_CSR_COMPxINSEL_3

#define IS_COMP_INVERTING_INPUT(INPUT) (((INPUT) == COMP_InvertingInput_1_4VREFINT) || ((INPUT) == COMP_InvertingInput_1_2VREFINT) || ((INPUT) == COMP_InvertingInput_3_4VREFINT) || ((INPUT) == COMP_InvertingInput_VREFINT) || ((INPUT) == COMP_InvertingInput_DAC1OUT1) || ((INPUT) == COMP_InvertingInput_DAC1OUT2) || ((INPUT) == COMP_InvertingInput_IO1) || ((INPUT) == COMP_InvertingInput_IO2) || ((INPUT) == COMP_InvertingInput_DAC2OUT1))
# 147 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_NonInvertingInput_IO1 ((uint32_t)0x00000000)



#define COMP_NonInvertingInput_IO2 COMP_CSR_COMPxNONINSEL


#define IS_COMP_NONINVERTING_INPUT(INPUT) (((INPUT) == COMP_NonInvertingInput_IO1) || ((INPUT) == COMP_NonInvertingInput_IO2))
# 164 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_Output_None ((uint32_t)0x00000000)


#define COMP_Output_TIM1BKIN COMP_CSR_COMPxOUTSEL_0
#define COMP_Output_TIM1BKIN2 ((uint32_t)0x00000800)
#define COMP_Output_TIM8BKIN ((uint32_t)0x00000C00)
#define COMP_Output_TIM8BKIN2 ((uint32_t)0x00001000)
#define COMP_Output_TIM1BKIN2_TIM8BKIN2 ((uint32_t)0x00001400)


#define COMP_Output_TIM1OCREFCLR ((uint32_t)0x00001800)
#define COMP_Output_TIM1IC1 ((uint32_t)0x00001C00)
#define COMP_Output_TIM2IC4 ((uint32_t)0x00002000)
#define COMP_Output_TIM2OCREFCLR ((uint32_t)0x00002400)
#define COMP_Output_TIM3IC1 ((uint32_t)0x00002800)
#define COMP_Output_TIM3OCREFCLR ((uint32_t)0x00002C00)


#define COMP_Output_HRTIM1_FLT6 ((uint32_t)0x00003000)
#define COMP_Output_HRTIM1_EE1_2 ((uint32_t)0x00003400)
#define COMP_Output_HRTIM1_EE6_2 ((uint32_t)0x00003800)


#define COMP_Output_TIM4IC1 ((uint32_t)0x00001C00)
#define COMP_Output_TIM3IC2 ((uint32_t)0x00002000)
#define COMP_Output_TIM15IC1 ((uint32_t)0x00002800)
#define COMP_Output_TIM15BKIN ((uint32_t)0x00002C00)


#define COMP_Output_TIM3IC3 ((uint32_t)0x00001800)
#define COMP_Output_TIM8OCREFCLR ((uint32_t)0x00001C00)
#define COMP_Output_TIM15IC2 ((uint32_t)0x00002000)
#define COMP_Output_TIM4IC2 ((uint32_t)0x00002400)
#define COMP_Output_TIM15OCREFCLR ((uint32_t)0x00002800)

#define COMP_Output_HRTIM1_FLT7 ((uint32_t)0x00003000)
#define COMP_Output_HRTIM1_EE2_2 ((uint32_t)0x00003400)
#define COMP_Output_HRTIM1_EE7_2 ((uint32_t)0x00003800)


#define COMP_Output_TIM2IC1 ((uint32_t)0x00001800)
#define COMP_Output_TIM17IC1 ((uint32_t)0x00002000)
#define COMP_Output_TIM4IC3 ((uint32_t)0x00002400)
#define COMP_Output_TIM16BKIN ((uint32_t)0x00002800)


#define COMP_Output_TIM2IC2 ((uint32_t)0x00001800)
#define COMP_Output_COMP6TIM2OCREFCLR ((uint32_t)0x00002000)
#define COMP_Output_TIM16OCREFCLR ((uint32_t)0x00002400)
#define COMP_Output_TIM16IC1 ((uint32_t)0x00002800)
#define COMP_Output_TIM4IC4 ((uint32_t)0x00002C00)

#define COMP_Output_HRTIM1_FLT8 ((uint32_t)0x00003000)
#define COMP_Output_HRTIM1_EE3_2 ((uint32_t)0x00003400)
#define COMP_Output_HRTIM1_EE8_2 ((uint32_t)0x00003800)


#define COMP_Output_TIM2IC3 ((uint32_t)0x00002000)
#define COMP_Output_TIM1IC2 ((uint32_t)0x00002400)
#define COMP_Output_TIM17OCREFCLR ((uint32_t)0x00002800)
#define COMP_Output_TIM17BKIN ((uint32_t)0x00002C00)

#define IS_COMP_OUTPUT(OUTPUT) (((OUTPUT) == COMP_Output_None) || ((OUTPUT) == COMP_Output_TIM1BKIN) || ((OUTPUT) == COMP_Output_TIM1IC1) || ((OUTPUT) == COMP_Output_TIM1OCREFCLR) || ((OUTPUT) == COMP_Output_TIM2IC4) || ((OUTPUT) == COMP_Output_TIM2OCREFCLR) || ((OUTPUT) == COMP_Output_COMP6TIM2OCREFCLR) || ((OUTPUT) == COMP_Output_TIM3IC1) || ((OUTPUT) == COMP_Output_TIM3OCREFCLR) || ((OUTPUT) == COMP_Output_TIM8BKIN) || ((OUTPUT) == COMP_Output_TIM1BKIN2) || ((OUTPUT) == COMP_Output_TIM8BKIN2) || ((OUTPUT) == COMP_Output_TIM2OCREFCLR) || ((OUTPUT) == COMP_Output_TIM1BKIN2_TIM8BKIN2) || ((OUTPUT) == COMP_Output_TIM3IC2) || ((OUTPUT) == COMP_Output_TIM4IC1) || ((OUTPUT) == COMP_Output_TIM15IC1) || ((OUTPUT) == COMP_Output_TIM15BKIN) || ((OUTPUT) == COMP_Output_TIM8OCREFCLR) || ((OUTPUT) == COMP_Output_TIM3IC3) || ((OUTPUT) == COMP_Output_TIM4IC1) || ((OUTPUT) == COMP_Output_TIM15IC1) || ((OUTPUT) == COMP_Output_TIM2IC1) || ((OUTPUT) == COMP_Output_TIM4IC3) || ((OUTPUT) == COMP_Output_TIM16BKIN) || ((OUTPUT) == COMP_Output_TIM17IC1) || ((OUTPUT) == COMP_Output_TIM2IC2) || ((OUTPUT) == COMP_Output_TIM16IC1) || ((OUTPUT) == COMP_Output_TIM4IC4) || ((OUTPUT) == COMP_Output_TIM16OCREFCLR) || ((OUTPUT) == COMP_Output_TIM2IC3) || ((OUTPUT) == COMP_Output_TIM1IC2) || ((OUTPUT) == COMP_Output_TIM17BKIN) || ((OUTPUT) == COMP_Output_TIM17OCREFCLR) || ((OUTPUT) == COMP_Output_HRTIM1_FLT6) || ((OUTPUT) == COMP_Output_HRTIM1_EE1_2) || ((OUTPUT) == COMP_Output_HRTIM1_EE6_2) || ((OUTPUT) == COMP_Output_HRTIM1_FLT7) || ((OUTPUT) == COMP_Output_HRTIM1_EE2_2) || ((OUTPUT) == COMP_Output_HRTIM1_EE7_2) || ((OUTPUT) == COMP_Output_HRTIM1_FLT8) || ((OUTPUT) == COMP_Output_HRTIM1_EE3_2) || ((OUTPUT) == COMP_Output_HRTIM1_EE8_2))
# 279 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_BlankingSrce_None ((uint32_t)0x00000000)


#define COMP_BlankingSrce_TIM1OC5 COMP_CSR_COMPxBLANKING_0


#define COMP_BlankingSrce_TIM2OC3 COMP_CSR_COMPxBLANKING_1


#define COMP_BlankingSrce_TIM3OC3 ((uint32_t)0x000C0000)


#define COMP_BlankingSrce_TIM2OC4 ((uint32_t)0x000C0000)


#define COMP_BlankingSrce_TIM8OC5 COMP_CSR_COMPxBLANKING_1


#define COMP_BlankingSrce_TIM3OC4 COMP_CSR_COMPxBLANKING_0
#define COMP_BlankingSrce_TIM15OC1 ((uint32_t)0x000C0000)


#define COMP_BlankingSrce_TIM15OC2 COMP_CSR_COMPxBLANKING_2

#define IS_COMP_BLANKING_SOURCE(SOURCE) (((SOURCE) == COMP_BlankingSrce_None) || ((SOURCE) == COMP_BlankingSrce_TIM1OC5) || ((SOURCE) == COMP_BlankingSrce_TIM2OC3) || ((SOURCE) == COMP_BlankingSrce_TIM3OC3) || ((SOURCE) == COMP_BlankingSrce_TIM2OC4) || ((SOURCE) == COMP_BlankingSrce_TIM8OC5) || ((SOURCE) == COMP_BlankingSrce_TIM3OC4) || ((SOURCE) == COMP_BlankingSrce_TIM15OC1) || ((SOURCE) == COMP_BlankingSrce_TIM15OC2))
# 319 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_OutputPol_NonInverted ((uint32_t)0x00000000)
#define COMP_OutputPol_Inverted COMP_CSR_COMPxPOL

#define IS_COMP_OUTPUT_POL(POL) (((POL) == COMP_OutputPol_NonInverted) || ((POL) == COMP_OutputPol_Inverted))
# 334 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_Hysteresis_No 0x00000000
#define COMP_Hysteresis_Low COMP_CSR_COMPxHYST_0
#define COMP_Hysteresis_Medium COMP_CSR_COMPxHYST_1
#define COMP_Hysteresis_High COMP_CSR_COMPxHYST

#define IS_COMP_HYSTERESIS(HYSTERESIS) (((HYSTERESIS) == COMP_Hysteresis_No) || ((HYSTERESIS) == COMP_Hysteresis_Low) || ((HYSTERESIS) == COMP_Hysteresis_Medium) || ((HYSTERESIS) == COMP_Hysteresis_High))
# 352 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_Mode_HighSpeed 0x00000000
#define COMP_Mode_MediumSpeed COMP_CSR_COMPxMODE_0
#define COMP_Mode_LowPower COMP_CSR_COMPxMODE_1
#define COMP_Mode_UltraLowPower COMP_CSR_COMPxMODE

#define IS_COMP_MODE(MODE) (((MODE) == COMP_Mode_UltraLowPower) || ((MODE) == COMP_Mode_LowPower) || ((MODE) == COMP_Mode_MediumSpeed) || ((MODE) == COMP_Mode_HighSpeed))
# 370 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define COMP_OutputLevel_High COMP_CSR_COMPxOUT


#define COMP_OutputLevel_Low ((uint32_t)0x00000000)
# 382 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
#define IS_COMP_WINDOW(WINDOW) (((WINDOW) == COMP_Selection_COMP2) || ((WINDOW) == COMP_Selection_COMP4) || ((WINDOW) == COMP_Selection_COMP6))
# 397 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h"
void COMP_DeInit(uint32_t COMP_Selection);


void COMP_Init(uint32_t COMP_Selection, COMP_InitTypeDef* COMP_InitStruct);
void COMP_StructInit(COMP_InitTypeDef* COMP_InitStruct);
void COMP_Cmd(uint32_t COMP_Selection, FunctionalState NewState);
void COMP_SwitchCmd(uint32_t COMP_Selection, FunctionalState NewState);
uint32_t COMP_GetOutputLevel(uint32_t COMP_Selection);


void COMP_WindowCmd(uint32_t COMP_Selection, FunctionalState NewState);


void COMP_LockConfig(uint32_t COMP_Selection);
# 38 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define __STM32F30x_DAC_H 
# 49 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define DAC_CR_DMAUDRIE ((uint32_t)0x00002000)





typedef struct
{
  uint32_t DAC_Trigger;


  uint32_t DAC_WaveGeneration;



  uint32_t DAC_LFSRUnmask_TriangleAmplitude;



  uint32_t DAC_Buffer_Switch;


}DAC_InitTypeDef;







#define IS_DAC_ALL_PERIPH(PERIPH) (((PERIPH) == DAC1) || ((PERIPH) == DAC2))


#define IS_DAC_LIST1_PERIPH(PERIPH) (((PERIPH) == DAC1))





#define DAC_Trigger_None ((uint32_t)0x00000000)

#define DAC_Trigger_T6_TRGO ((uint32_t)0x00000004)
#define DAC_Trigger_T3_TRGO ((uint32_t)0x0000000C)
#define DAC_Trigger_T8_TRGO ((uint32_t)0x0000000C)
#define DAC_Trigger_T7_TRGO ((uint32_t)0x00000014)
#define DAC_Trigger_T15_TRGO ((uint32_t)0x0000001C)
#define DAC_Trigger_HRTIM1_DACTRG1 ((uint32_t)0x0000001C)
#define DAC_Trigger_T2_TRGO ((uint32_t)0x00000024)
#define DAC_Trigger_T4_TRGO ((uint32_t)0x0000002C)
#define DAC_Trigger_HRTIM1_DACTRG2 ((uint32_t)0x0000002C)
#define DAC_Trigger_HRTIM1_DACTRG3 ((uint32_t)0x0000002C)
#define DAC_Trigger_Ext_IT9 ((uint32_t)0x00000034)
#define DAC_Trigger_Software ((uint32_t)0x0000003C)

#define IS_DAC_TRIGGER(TRIGGER) (((TRIGGER) == DAC_Trigger_None) || ((TRIGGER) == DAC_Trigger_T6_TRGO) || ((TRIGGER) == DAC_Trigger_T3_TRGO) || ((TRIGGER) == DAC_Trigger_T8_TRGO) || ((TRIGGER) == DAC_Trigger_T7_TRGO) || ((TRIGGER) == DAC_Trigger_T15_TRGO) || ((TRIGGER) == DAC_Trigger_HRTIM1_DACTRG1)|| ((TRIGGER) == DAC_Trigger_T2_TRGO) || ((TRIGGER) == DAC_Trigger_T4_TRGO) || ((TRIGGER) == DAC_Trigger_HRTIM1_DACTRG2)|| ((TRIGGER) == DAC_Trigger_HRTIM1_DACTRG3)|| ((TRIGGER) == DAC_Trigger_Ext_IT9) || ((TRIGGER) == DAC_Trigger_Software))
# 125 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define DAC_WaveGeneration_None ((uint32_t)0x00000000)
#define DAC_WaveGeneration_Noise ((uint32_t)0x00000040)
#define DAC_WaveGeneration_Triangle ((uint32_t)0x00000080)

#define IS_DAC_GENERATE_WAVE(WAVE) (((WAVE) == DAC_WaveGeneration_None) || ((WAVE) == DAC_WaveGeneration_Noise) || ((WAVE) == DAC_WaveGeneration_Triangle))
# 140 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define DAC_LFSRUnmask_Bit0 ((uint32_t)0x00000000)
#define DAC_LFSRUnmask_Bits1_0 ((uint32_t)0x00000100)
#define DAC_LFSRUnmask_Bits2_0 ((uint32_t)0x00000200)
#define DAC_LFSRUnmask_Bits3_0 ((uint32_t)0x00000300)
#define DAC_LFSRUnmask_Bits4_0 ((uint32_t)0x00000400)
#define DAC_LFSRUnmask_Bits5_0 ((uint32_t)0x00000500)
#define DAC_LFSRUnmask_Bits6_0 ((uint32_t)0x00000600)
#define DAC_LFSRUnmask_Bits7_0 ((uint32_t)0x00000700)
#define DAC_LFSRUnmask_Bits8_0 ((uint32_t)0x00000800)
#define DAC_LFSRUnmask_Bits9_0 ((uint32_t)0x00000900)
#define DAC_LFSRUnmask_Bits10_0 ((uint32_t)0x00000A00)
#define DAC_LFSRUnmask_Bits11_0 ((uint32_t)0x00000B00)
#define DAC_TriangleAmplitude_1 ((uint32_t)0x00000000)
#define DAC_TriangleAmplitude_3 ((uint32_t)0x00000100)
#define DAC_TriangleAmplitude_7 ((uint32_t)0x00000200)
#define DAC_TriangleAmplitude_15 ((uint32_t)0x00000300)
#define DAC_TriangleAmplitude_31 ((uint32_t)0x00000400)
#define DAC_TriangleAmplitude_63 ((uint32_t)0x00000500)
#define DAC_TriangleAmplitude_127 ((uint32_t)0x00000600)
#define DAC_TriangleAmplitude_255 ((uint32_t)0x00000700)
#define DAC_TriangleAmplitude_511 ((uint32_t)0x00000800)
#define DAC_TriangleAmplitude_1023 ((uint32_t)0x00000900)
#define DAC_TriangleAmplitude_2047 ((uint32_t)0x00000A00)
#define DAC_TriangleAmplitude_4095 ((uint32_t)0x00000B00)

#define IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(VALUE) (((VALUE) == DAC_LFSRUnmask_Bit0) || ((VALUE) == DAC_LFSRUnmask_Bits1_0) || ((VALUE) == DAC_LFSRUnmask_Bits2_0) || ((VALUE) == DAC_LFSRUnmask_Bits3_0) || ((VALUE) == DAC_LFSRUnmask_Bits4_0) || ((VALUE) == DAC_LFSRUnmask_Bits5_0) || ((VALUE) == DAC_LFSRUnmask_Bits6_0) || ((VALUE) == DAC_LFSRUnmask_Bits7_0) || ((VALUE) == DAC_LFSRUnmask_Bits8_0) || ((VALUE) == DAC_LFSRUnmask_Bits9_0) || ((VALUE) == DAC_LFSRUnmask_Bits10_0) || ((VALUE) == DAC_LFSRUnmask_Bits11_0) || ((VALUE) == DAC_TriangleAmplitude_1) || ((VALUE) == DAC_TriangleAmplitude_3) || ((VALUE) == DAC_TriangleAmplitude_7) || ((VALUE) == DAC_TriangleAmplitude_15) || ((VALUE) == DAC_TriangleAmplitude_31) || ((VALUE) == DAC_TriangleAmplitude_63) || ((VALUE) == DAC_TriangleAmplitude_127) || ((VALUE) == DAC_TriangleAmplitude_255) || ((VALUE) == DAC_TriangleAmplitude_511) || ((VALUE) == DAC_TriangleAmplitude_1023) || ((VALUE) == DAC_TriangleAmplitude_2047) || ((VALUE) == DAC_TriangleAmplitude_4095))
# 197 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define DAC_BufferSwitch_Disable ((uint32_t)0x00000000)
#define DAC_BufferSwitch_Enable ((uint32_t)0x00000002)

#define IS_DAC_BUFFER_SWITCH_STATE(STATE) (((STATE) == DAC_BufferSwitch_Enable) || ((STATE) == DAC_BufferSwitch_Disable))
# 209 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define DAC_Channel_1 ((uint32_t)0x00000000)
#define DAC_Channel_2 ((uint32_t)0x00000010)

#define IS_DAC_CHANNEL(CHANNEL) (((CHANNEL) == DAC_Channel_1) || ((CHANNEL) == DAC_Channel_2))
# 222 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define DAC_Align_12b_R ((uint32_t)0x00000000)
#define DAC_Align_12b_L ((uint32_t)0x00000004)
#define DAC_Align_8b_R ((uint32_t)0x00000008)

#define IS_DAC_ALIGN(ALIGN) (((ALIGN) == DAC_Align_12b_R) || ((ALIGN) == DAC_Align_12b_L) || ((ALIGN) == DAC_Align_8b_R))
# 237 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define DAC_Wave_Noise ((uint32_t)0x00000040)
#define DAC_Wave_Triangle ((uint32_t)0x00000080)

#define IS_DAC_WAVE(WAVE) (((WAVE) == DAC_Wave_Noise) || ((WAVE) == DAC_Wave_Triangle))
# 250 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define IS_DAC_DATA(DATA) ((DATA) <= 0xFFF0)







#define DAC_IT_DMAUDR ((uint32_t)0x00002000)
#define IS_DAC_IT(IT) (((IT) == DAC_IT_DMAUDR))
# 269 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
#define DAC_FLAG_DMAUDR ((uint32_t)0x00002000)
#define IS_DAC_FLAG(FLAG) (((FLAG) == DAC_FLAG_DMAUDR))
# 284 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h"
void DAC_DeInit(DAC_TypeDef* DACx);


void DAC_Init(DAC_TypeDef* DACx, uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct);
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct);
void DAC_Cmd(DAC_TypeDef* DACx, uint32_t DAC_Channel, FunctionalState NewState);
void DAC_SoftwareTriggerCmd(DAC_TypeDef* DACx, uint32_t DAC_Channel, FunctionalState NewState);
void DAC_DualSoftwareTriggerCmd(DAC_TypeDef* DACx, FunctionalState NewState);
void DAC_WaveGenerationCmd(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState);
void DAC_SetChannel1Data(DAC_TypeDef* DACx, uint32_t DAC_Align, uint16_t Data);
void DAC_SetChannel2Data(DAC_TypeDef* DACx, uint32_t DAC_Align, uint16_t Data);
void DAC_SetDualChannelData(DAC_TypeDef* DACx, uint32_t DAC_Align, uint16_t Data2, uint16_t Data1);
uint16_t DAC_GetDataOutputValue(DAC_TypeDef* DACx, uint32_t DAC_Channel);


void DAC_DMACmd(DAC_TypeDef* DACx, uint32_t DAC_Channel, FunctionalState NewState);


void DAC_ITConfig(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState);
FlagStatus DAC_GetFlagStatus(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_FLAG);
void DAC_ClearFlag(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_FLAG);
ITStatus DAC_GetITStatus(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_IT);
void DAC_ClearITPendingBit(DAC_TypeDef* DACx, uint32_t DAC_Channel, uint32_t DAC_IT);
# 39 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dbgmcu.h" 1
# 30 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dbgmcu.h"
#define __STM32F30x_DBGMCU_H 
# 53 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dbgmcu.h"
#define DBGMCU_SLEEP ((uint32_t)0x00000001)
#define DBGMCU_STOP ((uint32_t)0x00000002)
#define DBGMCU_STANDBY ((uint32_t)0x00000004)
#define IS_DBGMCU_PERIPH(PERIPH) ((((PERIPH) & 0xFFFFFFF8) == 0x00) && ((PERIPH) != 0x00))

#define DBGMCU_TIM2_STOP ((uint32_t)0x00000001)
#define DBGMCU_TIM3_STOP ((uint32_t)0x00000002)
#define DBGMCU_TIM4_STOP ((uint32_t)0x00000004)
#define DBGMCU_TIM6_STOP ((uint32_t)0x00000010)
#define DBGMCU_TIM7_STOP ((uint32_t)0x00000020)
#define DBGMCU_RTC_STOP ((uint32_t)0x00000400)
#define DBGMCU_WWDG_STOP ((uint32_t)0x00000800)
#define DBGMCU_IWDG_STOP ((uint32_t)0x00001000)
#define DBGMCU_I2C1_SMBUS_TIMEOUT ((uint32_t)0x00200000)
#define DBGMCU_I2C2_SMBUS_TIMEOUT ((uint32_t)0x00400000)
#define DBGMCU_CAN1_STOP ((uint32_t)0x02000000)

#define IS_DBGMCU_APB1PERIPH(PERIPH) ((((PERIPH) & 0xFD9FE3C8) == 0x00) && ((PERIPH) != 0x00))

#define DBGMCU_TIM1_STOP ((uint32_t)0x00000001)
#define DBGMCU_TIM8_STOP ((uint32_t)0x00000002)
#define DBGMCU_TIM15_STOP ((uint32_t)0x00000004)
#define DBGMCU_TIM16_STOP ((uint32_t)0x00000008)
#define DBGMCU_TIM17_STOP ((uint32_t)0x00000010)
#define IS_DBGMCU_APB2PERIPH(PERIPH) ((((PERIPH) & 0xFFFFFFE0) == 0x00) && ((PERIPH) != 0x00))
# 86 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dbgmcu.h"
uint32_t DBGMCU_GetREVID(void);
uint32_t DBGMCU_GetDEVID(void);


void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState);
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState);
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState);
# 40 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define __STM32F30x_DMA_H 
# 53 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
typedef struct
{
  uint32_t DMA_PeripheralBaseAddr;

  uint32_t DMA_MemoryBaseAddr;

  uint32_t DMA_DIR;


  uint16_t DMA_BufferSize;



  uint32_t DMA_PeripheralInc;


  uint32_t DMA_MemoryInc;


  uint32_t DMA_PeripheralDataSize;


  uint32_t DMA_MemoryDataSize;


  uint32_t DMA_Mode;




  uint32_t DMA_Priority;


  uint32_t DMA_M2M;

}DMA_InitTypeDef;







#define IS_DMA_ALL_PERIPH(PERIPH) (((PERIPH) == DMA1_Channel1) || ((PERIPH) == DMA1_Channel2) || ((PERIPH) == DMA1_Channel3) || ((PERIPH) == DMA1_Channel4) || ((PERIPH) == DMA1_Channel5) || ((PERIPH) == DMA1_Channel6) || ((PERIPH) == DMA1_Channel7) || ((PERIPH) == DMA2_Channel1) || ((PERIPH) == DMA2_Channel2) || ((PERIPH) == DMA2_Channel3) || ((PERIPH) == DMA2_Channel4) || ((PERIPH) == DMA2_Channel5))
# 113 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_DIR_PeripheralSRC ((uint32_t)0x00000000)
#define DMA_DIR_PeripheralDST DMA_CCR_DIR

#define IS_DMA_DIR(DIR) (((DIR) == DMA_DIR_PeripheralSRC) || ((DIR) == DMA_DIR_PeripheralDST))
# 127 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_PeripheralInc_Disable ((uint32_t)0x00000000)
#define DMA_PeripheralInc_Enable DMA_CCR_PINC

#define IS_DMA_PERIPHERAL_INC_STATE(STATE) (((STATE) == DMA_PeripheralInc_Disable) || ((STATE) == DMA_PeripheralInc_Enable))
# 140 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_MemoryInc_Disable ((uint32_t)0x00000000)
#define DMA_MemoryInc_Enable DMA_CCR_MINC

#define IS_DMA_MEMORY_INC_STATE(STATE) (((STATE) == DMA_MemoryInc_Disable) || ((STATE) == DMA_MemoryInc_Enable))
# 153 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_PeripheralDataSize_Byte ((uint32_t)0x00000000)
#define DMA_PeripheralDataSize_HalfWord DMA_CCR_PSIZE_0
#define DMA_PeripheralDataSize_Word DMA_CCR_PSIZE_1

#define IS_DMA_PERIPHERAL_DATA_SIZE(SIZE) (((SIZE) == DMA_PeripheralDataSize_Byte) || ((SIZE) == DMA_PeripheralDataSize_HalfWord) || ((SIZE) == DMA_PeripheralDataSize_Word))
# 168 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_MemoryDataSize_Byte ((uint32_t)0x00000000)
#define DMA_MemoryDataSize_HalfWord DMA_CCR_MSIZE_0
#define DMA_MemoryDataSize_Word DMA_CCR_MSIZE_1

#define IS_DMA_MEMORY_DATA_SIZE(SIZE) (((SIZE) == DMA_MemoryDataSize_Byte) || ((SIZE) == DMA_MemoryDataSize_HalfWord) || ((SIZE) == DMA_MemoryDataSize_Word))
# 183 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_Mode_Normal ((uint32_t)0x00000000)
#define DMA_Mode_Circular DMA_CCR_CIRC

#define IS_DMA_MODE(MODE) (((MODE) == DMA_Mode_Normal) || ((MODE) == DMA_Mode_Circular))
# 195 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_Priority_VeryHigh DMA_CCR_PL
#define DMA_Priority_High DMA_CCR_PL_1
#define DMA_Priority_Medium DMA_CCR_PL_0
#define DMA_Priority_Low ((uint32_t)0x00000000)

#define IS_DMA_PRIORITY(PRIORITY) (((PRIORITY) == DMA_Priority_VeryHigh) || ((PRIORITY) == DMA_Priority_High) || ((PRIORITY) == DMA_Priority_Medium) || ((PRIORITY) == DMA_Priority_Low))
# 212 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_M2M_Disable ((uint32_t)0x00000000)
#define DMA_M2M_Enable DMA_CCR_MEM2MEM

#define IS_DMA_M2M_STATE(STATE) (((STATE) == DMA_M2M_Disable) || ((STATE) == DMA_M2M_Enable))
# 225 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA_IT_TC ((uint32_t)0x00000002)
#define DMA_IT_HT ((uint32_t)0x00000004)
#define DMA_IT_TE ((uint32_t)0x00000008)
#define IS_DMA_CONFIG_IT(IT) ((((IT) & 0xFFFFFFF1) == 0x00) && ((IT) != 0x00))

#define DMA1_IT_GL1 ((uint32_t)0x00000001)
#define DMA1_IT_TC1 ((uint32_t)0x00000002)
#define DMA1_IT_HT1 ((uint32_t)0x00000004)
#define DMA1_IT_TE1 ((uint32_t)0x00000008)
#define DMA1_IT_GL2 ((uint32_t)0x00000010)
#define DMA1_IT_TC2 ((uint32_t)0x00000020)
#define DMA1_IT_HT2 ((uint32_t)0x00000040)
#define DMA1_IT_TE2 ((uint32_t)0x00000080)
#define DMA1_IT_GL3 ((uint32_t)0x00000100)
#define DMA1_IT_TC3 ((uint32_t)0x00000200)
#define DMA1_IT_HT3 ((uint32_t)0x00000400)
#define DMA1_IT_TE3 ((uint32_t)0x00000800)
#define DMA1_IT_GL4 ((uint32_t)0x00001000)
#define DMA1_IT_TC4 ((uint32_t)0x00002000)
#define DMA1_IT_HT4 ((uint32_t)0x00004000)
#define DMA1_IT_TE4 ((uint32_t)0x00008000)
#define DMA1_IT_GL5 ((uint32_t)0x00010000)
#define DMA1_IT_TC5 ((uint32_t)0x00020000)
#define DMA1_IT_HT5 ((uint32_t)0x00040000)
#define DMA1_IT_TE5 ((uint32_t)0x00080000)
#define DMA1_IT_GL6 ((uint32_t)0x00100000)
#define DMA1_IT_TC6 ((uint32_t)0x00200000)
#define DMA1_IT_HT6 ((uint32_t)0x00400000)
#define DMA1_IT_TE6 ((uint32_t)0x00800000)
#define DMA1_IT_GL7 ((uint32_t)0x01000000)
#define DMA1_IT_TC7 ((uint32_t)0x02000000)
#define DMA1_IT_HT7 ((uint32_t)0x04000000)
#define DMA1_IT_TE7 ((uint32_t)0x08000000)

#define DMA2_IT_GL1 ((uint32_t)0x10000001)
#define DMA2_IT_TC1 ((uint32_t)0x10000002)
#define DMA2_IT_HT1 ((uint32_t)0x10000004)
#define DMA2_IT_TE1 ((uint32_t)0x10000008)
#define DMA2_IT_GL2 ((uint32_t)0x10000010)
#define DMA2_IT_TC2 ((uint32_t)0x10000020)
#define DMA2_IT_HT2 ((uint32_t)0x10000040)
#define DMA2_IT_TE2 ((uint32_t)0x10000080)
#define DMA2_IT_GL3 ((uint32_t)0x10000100)
#define DMA2_IT_TC3 ((uint32_t)0x10000200)
#define DMA2_IT_HT3 ((uint32_t)0x10000400)
#define DMA2_IT_TE3 ((uint32_t)0x10000800)
#define DMA2_IT_GL4 ((uint32_t)0x10001000)
#define DMA2_IT_TC4 ((uint32_t)0x10002000)
#define DMA2_IT_HT4 ((uint32_t)0x10004000)
#define DMA2_IT_TE4 ((uint32_t)0x10008000)
#define DMA2_IT_GL5 ((uint32_t)0x10010000)
#define DMA2_IT_TC5 ((uint32_t)0x10020000)
#define DMA2_IT_HT5 ((uint32_t)0x10040000)
#define DMA2_IT_TE5 ((uint32_t)0x10080000)

#define IS_DMA_CLEAR_IT(IT) (((((IT) & 0xF0000000) == 0x00) || (((IT) & 0xEFF00000) == 0x00)) && ((IT) != 0x00))

#define IS_DMA_GET_IT(IT) (((IT) == DMA1_IT_GL1) || ((IT) == DMA1_IT_TC1) || ((IT) == DMA1_IT_HT1) || ((IT) == DMA1_IT_TE1) || ((IT) == DMA1_IT_GL2) || ((IT) == DMA1_IT_TC2) || ((IT) == DMA1_IT_HT2) || ((IT) == DMA1_IT_TE2) || ((IT) == DMA1_IT_GL3) || ((IT) == DMA1_IT_TC3) || ((IT) == DMA1_IT_HT3) || ((IT) == DMA1_IT_TE3) || ((IT) == DMA1_IT_GL4) || ((IT) == DMA1_IT_TC4) || ((IT) == DMA1_IT_HT4) || ((IT) == DMA1_IT_TE4) || ((IT) == DMA1_IT_GL5) || ((IT) == DMA1_IT_TC5) || ((IT) == DMA1_IT_HT5) || ((IT) == DMA1_IT_TE5) || ((IT) == DMA1_IT_GL6) || ((IT) == DMA1_IT_TC6) || ((IT) == DMA1_IT_HT6) || ((IT) == DMA1_IT_TE6) || ((IT) == DMA1_IT_GL7) || ((IT) == DMA1_IT_TC7) || ((IT) == DMA1_IT_HT7) || ((IT) == DMA1_IT_TE7) || ((IT) == DMA2_IT_GL1) || ((IT) == DMA2_IT_TC1) || ((IT) == DMA2_IT_HT1) || ((IT) == DMA2_IT_TE1) || ((IT) == DMA2_IT_GL2) || ((IT) == DMA2_IT_TC2) || ((IT) == DMA2_IT_HT2) || ((IT) == DMA2_IT_TE2) || ((IT) == DMA2_IT_GL3) || ((IT) == DMA2_IT_TC3) || ((IT) == DMA2_IT_HT3) || ((IT) == DMA2_IT_TE3) || ((IT) == DMA2_IT_GL4) || ((IT) == DMA2_IT_TC4) || ((IT) == DMA2_IT_HT4) || ((IT) == DMA2_IT_TE4) || ((IT) == DMA2_IT_GL5) || ((IT) == DMA2_IT_TC5) || ((IT) == DMA2_IT_HT5) || ((IT) == DMA2_IT_TE5))
# 315 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
#define DMA1_FLAG_GL1 ((uint32_t)0x00000001)
#define DMA1_FLAG_TC1 ((uint32_t)0x00000002)
#define DMA1_FLAG_HT1 ((uint32_t)0x00000004)
#define DMA1_FLAG_TE1 ((uint32_t)0x00000008)
#define DMA1_FLAG_GL2 ((uint32_t)0x00000010)
#define DMA1_FLAG_TC2 ((uint32_t)0x00000020)
#define DMA1_FLAG_HT2 ((uint32_t)0x00000040)
#define DMA1_FLAG_TE2 ((uint32_t)0x00000080)
#define DMA1_FLAG_GL3 ((uint32_t)0x00000100)
#define DMA1_FLAG_TC3 ((uint32_t)0x00000200)
#define DMA1_FLAG_HT3 ((uint32_t)0x00000400)
#define DMA1_FLAG_TE3 ((uint32_t)0x00000800)
#define DMA1_FLAG_GL4 ((uint32_t)0x00001000)
#define DMA1_FLAG_TC4 ((uint32_t)0x00002000)
#define DMA1_FLAG_HT4 ((uint32_t)0x00004000)
#define DMA1_FLAG_TE4 ((uint32_t)0x00008000)
#define DMA1_FLAG_GL5 ((uint32_t)0x00010000)
#define DMA1_FLAG_TC5 ((uint32_t)0x00020000)
#define DMA1_FLAG_HT5 ((uint32_t)0x00040000)
#define DMA1_FLAG_TE5 ((uint32_t)0x00080000)
#define DMA1_FLAG_GL6 ((uint32_t)0x00100000)
#define DMA1_FLAG_TC6 ((uint32_t)0x00200000)
#define DMA1_FLAG_HT6 ((uint32_t)0x00400000)
#define DMA1_FLAG_TE6 ((uint32_t)0x00800000)
#define DMA1_FLAG_GL7 ((uint32_t)0x01000000)
#define DMA1_FLAG_TC7 ((uint32_t)0x02000000)
#define DMA1_FLAG_HT7 ((uint32_t)0x04000000)
#define DMA1_FLAG_TE7 ((uint32_t)0x08000000)

#define DMA2_FLAG_GL1 ((uint32_t)0x10000001)
#define DMA2_FLAG_TC1 ((uint32_t)0x10000002)
#define DMA2_FLAG_HT1 ((uint32_t)0x10000004)
#define DMA2_FLAG_TE1 ((uint32_t)0x10000008)
#define DMA2_FLAG_GL2 ((uint32_t)0x10000010)
#define DMA2_FLAG_TC2 ((uint32_t)0x10000020)
#define DMA2_FLAG_HT2 ((uint32_t)0x10000040)
#define DMA2_FLAG_TE2 ((uint32_t)0x10000080)
#define DMA2_FLAG_GL3 ((uint32_t)0x10000100)
#define DMA2_FLAG_TC3 ((uint32_t)0x10000200)
#define DMA2_FLAG_HT3 ((uint32_t)0x10000400)
#define DMA2_FLAG_TE3 ((uint32_t)0x10000800)
#define DMA2_FLAG_GL4 ((uint32_t)0x10001000)
#define DMA2_FLAG_TC4 ((uint32_t)0x10002000)
#define DMA2_FLAG_HT4 ((uint32_t)0x10004000)
#define DMA2_FLAG_TE4 ((uint32_t)0x10008000)
#define DMA2_FLAG_GL5 ((uint32_t)0x10010000)
#define DMA2_FLAG_TC5 ((uint32_t)0x10020000)
#define DMA2_FLAG_HT5 ((uint32_t)0x10040000)
#define DMA2_FLAG_TE5 ((uint32_t)0x10080000)

#define IS_DMA_CLEAR_FLAG(FLAG) (((((FLAG) & 0xF0000000) == 0x00) || (((FLAG) & 0xEFF00000) == 0x00)) && ((FLAG) != 0x00))

#define IS_DMA_GET_FLAG(FLAG) (((FLAG) == DMA1_FLAG_GL1) || ((FLAG) == DMA1_FLAG_TC1) || ((FLAG) == DMA1_FLAG_HT1) || ((FLAG) == DMA1_FLAG_TE1) || ((FLAG) == DMA1_FLAG_GL2) || ((FLAG) == DMA1_FLAG_TC2) || ((FLAG) == DMA1_FLAG_HT2) || ((FLAG) == DMA1_FLAG_TE2) || ((FLAG) == DMA1_FLAG_GL3) || ((FLAG) == DMA1_FLAG_TC3) || ((FLAG) == DMA1_FLAG_HT3) || ((FLAG) == DMA1_FLAG_TE3) || ((FLAG) == DMA1_FLAG_GL4) || ((FLAG) == DMA1_FLAG_TC4) || ((FLAG) == DMA1_FLAG_HT4) || ((FLAG) == DMA1_FLAG_TE4) || ((FLAG) == DMA1_FLAG_GL5) || ((FLAG) == DMA1_FLAG_TC5) || ((FLAG) == DMA1_FLAG_HT5) || ((FLAG) == DMA1_FLAG_TE5) || ((FLAG) == DMA1_FLAG_GL6) || ((FLAG) == DMA1_FLAG_TC6) || ((FLAG) == DMA1_FLAG_HT6) || ((FLAG) == DMA1_FLAG_TE6) || ((FLAG) == DMA1_FLAG_GL7) || ((FLAG) == DMA1_FLAG_TC7) || ((FLAG) == DMA1_FLAG_HT7) || ((FLAG) == DMA1_FLAG_TE7) || ((FLAG) == DMA2_FLAG_GL1) || ((FLAG) == DMA2_FLAG_TC1) || ((FLAG) == DMA2_FLAG_HT1) || ((FLAG) == DMA2_FLAG_TE1) || ((FLAG) == DMA2_FLAG_GL2) || ((FLAG) == DMA2_FLAG_TC2) || ((FLAG) == DMA2_FLAG_HT2) || ((FLAG) == DMA2_FLAG_TE2) || ((FLAG) == DMA2_FLAG_GL3) || ((FLAG) == DMA2_FLAG_TC3) || ((FLAG) == DMA2_FLAG_HT3) || ((FLAG) == DMA2_FLAG_TE3) || ((FLAG) == DMA2_FLAG_GL4) || ((FLAG) == DMA2_FLAG_TC4) || ((FLAG) == DMA2_FLAG_HT4) || ((FLAG) == DMA2_FLAG_TE4) || ((FLAG) == DMA2_FLAG_GL5) || ((FLAG) == DMA2_FLAG_TC5) || ((FLAG) == DMA2_FLAG_HT5) || ((FLAG) == DMA2_FLAG_TE5))
# 404 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h"
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx);


void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct);
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct);
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState);


void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber);
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx);


void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState);
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG);
void DMA_ClearFlag(uint32_t DMAy_FLAG);
ITStatus DMA_GetITStatus(uint32_t DMAy_IT);
void DMA_ClearITPendingBit(uint32_t DMAy_IT);
# 41 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_exti.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_exti.h"
#define __STM32F30x_EXTI_H 
# 54 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_exti.h"
typedef enum
{
  EXTI_Mode_Interrupt = 0x00,
  EXTI_Mode_Event = 0x04
}EXTIMode_TypeDef;

#define IS_EXTI_MODE(MODE) (((MODE) == EXTI_Mode_Interrupt) || ((MODE) == EXTI_Mode_Event))





typedef enum
{
  EXTI_Trigger_Rising = 0x08,
  EXTI_Trigger_Falling = 0x0C,
  EXTI_Trigger_Rising_Falling = 0x10
}EXTITrigger_TypeDef;

#define IS_EXTI_TRIGGER(TRIGGER) (((TRIGGER) == EXTI_Trigger_Rising) || ((TRIGGER) == EXTI_Trigger_Falling) || ((TRIGGER) == EXTI_Trigger_Rising_Falling))






typedef struct
{
  uint32_t EXTI_Line;


  EXTIMode_TypeDef EXTI_Mode;


  EXTITrigger_TypeDef EXTI_Trigger;


  FunctionalState EXTI_LineCmd;

}EXTI_InitTypeDef;
# 104 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_exti.h"
#define EXTI_Line0 ((uint32_t)0x00)
#define EXTI_Line1 ((uint32_t)0x01)
#define EXTI_Line2 ((uint32_t)0x02)
#define EXTI_Line3 ((uint32_t)0x03)
#define EXTI_Line4 ((uint32_t)0x04)
#define EXTI_Line5 ((uint32_t)0x05)
#define EXTI_Line6 ((uint32_t)0x06)
#define EXTI_Line7 ((uint32_t)0x07)
#define EXTI_Line8 ((uint32_t)0x08)
#define EXTI_Line9 ((uint32_t)0x09)
#define EXTI_Line10 ((uint32_t)0x0A)
#define EXTI_Line11 ((uint32_t)0x0B)
#define EXTI_Line12 ((uint32_t)0x0C)
#define EXTI_Line13 ((uint32_t)0x0D)
#define EXTI_Line14 ((uint32_t)0x0E)
#define EXTI_Line15 ((uint32_t)0x0F)
#define EXTI_Line16 ((uint32_t)0x10)

#define EXTI_Line17 ((uint32_t)0x11)


#define EXTI_Line18 ((uint32_t)0x12)


#define EXTI_Line19 ((uint32_t)0x13)


#define EXTI_Line20 ((uint32_t)0x14)


#define EXTI_Line21 ((uint32_t)0x15)


#define EXTI_Line22 ((uint32_t)0x16)


#define EXTI_Line23 ((uint32_t)0x17)


#define EXTI_Line24 ((uint32_t)0x18)


#define EXTI_Line25 ((uint32_t)0x19)


#define EXTI_Line26 ((uint32_t)0x1A)


#define EXTI_Line27 ((uint32_t)0x1B)

#define EXTI_Line28 ((uint32_t)0x1C)


#define EXTI_Line29 ((uint32_t)0x1D)


#define EXTI_Line30 ((uint32_t)0x1E)


#define EXTI_Line31 ((uint32_t)0x1F)


#define EXTI_Line32 ((uint32_t)0x20)


#define EXTI_Line33 ((uint32_t)0x21)


#define EXTI_Line34 ((uint32_t)0x22)


#define EXTI_Line35 ((uint32_t)0x23)



#define IS_EXTI_LINE_ALL(LINE) ((LINE) <= 0x23)
#define IS_EXTI_LINE_EXT(LINE) (((LINE) <= 0x16) || (((LINE) == EXTI_Line29) || ((LINE) == EXTI_Line30) || ((LINE) == EXTI_Line31) || ((LINE) == EXTI_Line32) || ((LINE) == EXTI_Line33)))


#define IS_GET_EXTI_LINE(LINE) (((LINE) == EXTI_Line0) || ((LINE) == EXTI_Line1) || ((LINE) == EXTI_Line2) || ((LINE) == EXTI_Line3) || ((LINE) == EXTI_Line4) || ((LINE) == EXTI_Line5) || ((LINE) == EXTI_Line6) || ((LINE) == EXTI_Line7) || ((LINE) == EXTI_Line8) || ((LINE) == EXTI_Line9) || ((LINE) == EXTI_Line10) || ((LINE) == EXTI_Line11) || ((LINE) == EXTI_Line12) || ((LINE) == EXTI_Line13) || ((LINE) == EXTI_Line14) || ((LINE) == EXTI_Line15) || ((LINE) == EXTI_Line16) || ((LINE) == EXTI_Line17) || ((LINE) == EXTI_Line18) || ((LINE) == EXTI_Line19) || ((LINE) == EXTI_Line20) || ((LINE) == EXTI_Line21) || ((LINE) == EXTI_Line22) || ((LINE) == EXTI_Line29) || ((LINE) == EXTI_Line30) || ((LINE) == EXTI_Line31) || ((LINE) == EXTI_Line32) || ((LINE) == EXTI_Line33))
# 208 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_exti.h"
void EXTI_DeInit(void);


void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);


FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);
void EXTI_ClearFlag(uint32_t EXTI_Line);
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line);
void EXTI_ClearITPendingBit(uint32_t EXTI_Line);
# 42 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define __STM32F30x_FLASH_H 
# 52 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
typedef enum
{
  FLASH_BUSY = 1,
  FLASH_ERROR_WRP,
  FLASH_ERROR_PROGRAM,
  FLASH_COMPLETE,
  FLASH_TIMEOUT
}FLASH_Status;
# 70 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define FLASH_Latency_0 ((uint8_t)0x0000)
#define FLASH_Latency_1 FLASH_ACR_LATENCY_0
#define FLASH_Latency_2 FLASH_ACR_LATENCY_1

#define IS_FLASH_LATENCY(LATENCY) (((LATENCY) == FLASH_Latency_0) || ((LATENCY) == FLASH_Latency_1) || ((LATENCY) == FLASH_Latency_2))
# 85 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define FLASH_IT_EOP FLASH_CR_EOPIE
#define FLASH_IT_ERR FLASH_CR_ERRIE
#define IS_FLASH_IT(IT) ((((IT) & (uint32_t)0xFFFFEBFF) == 0x00000000) && (((IT) != 0x00000000)))







#define IS_FLASH_PROGRAM_ADDRESS(ADDRESS) (((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0803FFFF))
# 104 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define IS_OB_DATA_ADDRESS(ADDRESS) (((ADDRESS) == 0x1FFFF804) || ((ADDRESS) == 0x1FFFF806))
# 114 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define OB_WRP_Pages0to1 ((uint32_t)0x00000001)
#define OB_WRP_Pages2to3 ((uint32_t)0x00000002)
#define OB_WRP_Pages4to5 ((uint32_t)0x00000004)
#define OB_WRP_Pages6to7 ((uint32_t)0x00000008)
#define OB_WRP_Pages8to9 ((uint32_t)0x00000010)
#define OB_WRP_Pages10to11 ((uint32_t)0x00000020)
#define OB_WRP_Pages12to13 ((uint32_t)0x00000040)
#define OB_WRP_Pages14to15 ((uint32_t)0x00000080)
#define OB_WRP_Pages16to17 ((uint32_t)0x00000100)
#define OB_WRP_Pages18to19 ((uint32_t)0x00000200)
#define OB_WRP_Pages20to21 ((uint32_t)0x00000400)
#define OB_WRP_Pages22to23 ((uint32_t)0x00000800)
#define OB_WRP_Pages24to25 ((uint32_t)0x00001000)
#define OB_WRP_Pages26to27 ((uint32_t)0x00002000)
#define OB_WRP_Pages28to29 ((uint32_t)0x00004000)
#define OB_WRP_Pages30to31 ((uint32_t)0x00008000)
#define OB_WRP_Pages32to33 ((uint32_t)0x00010000)
#define OB_WRP_Pages34to35 ((uint32_t)0x00020000)
#define OB_WRP_Pages36to37 ((uint32_t)0x00040000)
#define OB_WRP_Pages38to39 ((uint32_t)0x00080000)
#define OB_WRP_Pages40to41 ((uint32_t)0x00100000)
#define OB_WRP_Pages42to43 ((uint32_t)0x00200000)
#define OB_WRP_Pages44to45 ((uint32_t)0x00400000)
#define OB_WRP_Pages46to47 ((uint32_t)0x00800000)
#define OB_WRP_Pages48to49 ((uint32_t)0x01000000)
#define OB_WRP_Pages50to51 ((uint32_t)0x02000000)
#define OB_WRP_Pages52to53 ((uint32_t)0x04000000)
#define OB_WRP_Pages54to55 ((uint32_t)0x08000000)
#define OB_WRP_Pages56to57 ((uint32_t)0x10000000)
#define OB_WRP_Pages58to59 ((uint32_t)0x20000000)
#define OB_WRP_Pages60to61 ((uint32_t)0x40000000)
#define OB_WRP_Pages62to127 ((uint32_t)0x80000000)

#define OB_WRP_AllPages ((uint32_t)0xFFFFFFFF)

#define IS_OB_WRP(PAGE) (((PAGE) != 0x0000000))
# 162 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define OB_RDP_Level_0 ((uint8_t)0xAA)
#define OB_RDP_Level_1 ((uint8_t)0xBB)



#define IS_OB_RDP(LEVEL) (((LEVEL) == OB_RDP_Level_0)|| ((LEVEL) == OB_RDP_Level_1))
# 178 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define OB_IWDG_SW ((uint8_t)0x01)
#define OB_IWDG_HW ((uint8_t)0x00)
#define IS_OB_IWDG_SOURCE(SOURCE) (((SOURCE) == OB_IWDG_SW) || ((SOURCE) == OB_IWDG_HW))
# 190 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define OB_STOP_NoRST ((uint8_t)0x02)
#define OB_STOP_RST ((uint8_t)0x00)
#define IS_OB_STOP_SOURCE(SOURCE) (((SOURCE) == OB_STOP_NoRST) || ((SOURCE) == OB_STOP_RST))
# 202 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define OB_STDBY_NoRST ((uint8_t)0x04)
#define OB_STDBY_RST ((uint8_t)0x00)
#define IS_OB_STDBY_SOURCE(SOURCE) (((SOURCE) == OB_STDBY_NoRST) || ((SOURCE) == OB_STDBY_RST))
# 213 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define OB_BOOT1_RESET ((uint8_t)0x00)
#define OB_BOOT1_SET ((uint8_t)0x10)
#define IS_OB_BOOT1(BOOT1) (((BOOT1) == OB_BOOT1_RESET) || ((BOOT1) == OB_BOOT1_SET))
# 224 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define OB_VDDA_ANALOG_ON ((uint8_t)0x20)
#define OB_VDDA_ANALOG_OFF ((uint8_t)0x00)

#define IS_OB_VDDA_ANALOG(ANALOG) (((ANALOG) == OB_VDDA_ANALOG_ON) || ((ANALOG) == OB_VDDA_ANALOG_OFF))
# 237 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define OB_SRAM_PARITY_SET ((uint8_t)0x00)
#define OB_SRAM_PARITY_RESET ((uint8_t)0x40)

#define IS_OB_SRAM_PARITY(PARITY) (((PARITY) == OB_SRAM_PARITY_SET) || ((PARITY) == OB_SRAM_PARITY_RESET))
# 250 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
#define FLASH_FLAG_BSY FLASH_SR_BSY
#define FLASH_FLAG_PGERR FLASH_SR_PGERR
#define FLASH_FLAG_WRPERR FLASH_SR_WRPERR
#define FLASH_FLAG_EOP FLASH_SR_EOP

#define IS_FLASH_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFFFFCB) == 0x00000000) && ((FLAG) != 0x00000000))

#define IS_FLASH_GET_FLAG(FLAG) (((FLAG) == FLASH_FLAG_BSY) || ((FLAG) == FLASH_FLAG_PGERR) || ((FLAG) == FLASH_FLAG_WRPERR) || ((FLAG) == FLASH_FLAG_EOP))







#define FLASH_ER_PRG_TIMEOUT ((uint32_t)0x000B0000)
# 279 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h"
void FLASH_SetLatency(uint32_t FLASH_Latency);
void FLASH_HalfCycleAccessCmd(FunctionalState NewState);
void FLASH_PrefetchBufferCmd(FunctionalState NewState);


void FLASH_Unlock(void);
void FLASH_Lock(void);
FLASH_Status FLASH_ErasePage(uint32_t Page_Address);
FLASH_Status FLASH_EraseAllPages(void);
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data);
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data);


void FLASH_OB_Unlock(void);
void FLASH_OB_Lock(void);
void FLASH_OB_Launch(void);
FLASH_Status FLASH_OB_Erase(void);
FLASH_Status FLASH_OB_EnableWRP(uint32_t OB_WRP);
FLASH_Status FLASH_OB_RDPConfig(uint8_t OB_RDP);
FLASH_Status FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY);
FLASH_Status FLASH_OB_BOOTConfig(uint8_t OB_BOOT1);
FLASH_Status FLASH_OB_VDDAConfig(uint8_t OB_VDDA_ANALOG);
FLASH_Status FLASH_OB_SRAMParityConfig(uint8_t OB_SRAM_Parity);
FLASH_Status FLASH_OB_WriteUser(uint8_t OB_USER);
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data);
uint8_t FLASH_OB_GetUser(void);
uint32_t FLASH_OB_GetWRP(void);
FlagStatus FLASH_OB_GetRDP(void);


void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState);
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG);
void FLASH_ClearFlag(uint32_t FLASH_FLAG);
FLASH_Status FLASH_GetStatus(void);
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout);
# 43 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h" 1
# 31 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
#define __STM32F30x_GPIO_H 






# 1 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x.h" 1
# 39 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h" 2
# 50 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
#define IS_GPIO_ALL_PERIPH(PERIPH) (((PERIPH) == GPIOA) || ((PERIPH) == GPIOB) || ((PERIPH) == GPIOC) || ((PERIPH) == GPIOD) || ((PERIPH) == GPIOE) || ((PERIPH) == GPIOF))






#define IS_GPIO_LIST_PERIPH(PERIPH) (((PERIPH) == GPIOA) || ((PERIPH) == GPIOB) || ((PERIPH) == GPIOD))





typedef enum
{
  GPIO_Mode_IN = 0x00,
  GPIO_Mode_OUT = 0x01,
  GPIO_Mode_AF = 0x02,
  GPIO_Mode_AN = 0x03
}GPIOMode_TypeDef;

#define IS_GPIO_MODE(MODE) (((MODE) == GPIO_Mode_IN)|| ((MODE) == GPIO_Mode_OUT) || ((MODE) == GPIO_Mode_AF)|| ((MODE) == GPIO_Mode_AN))
# 80 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
typedef enum
{
  GPIO_OType_PP = 0x00,
  GPIO_OType_OD = 0x01
}GPIOOType_TypeDef;

#define IS_GPIO_OTYPE(OTYPE) (((OTYPE) == GPIO_OType_PP) || ((OTYPE) == GPIO_OType_OD))
# 95 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
typedef enum
{
  GPIO_Speed_Level_1 = 0x01,
  GPIO_Speed_Level_2 = 0x02,
  GPIO_Speed_Level_3 = 0x03
}GPIOSpeed_TypeDef;

#define IS_GPIO_SPEED(SPEED) (((SPEED) == GPIO_Speed_Level_1) || ((SPEED) == GPIO_Speed_Level_2) || ((SPEED) == GPIO_Speed_Level_3))
# 111 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
typedef enum
{
  GPIO_PuPd_NOPULL = 0x00,
  GPIO_PuPd_UP = 0x01,
  GPIO_PuPd_DOWN = 0x02
}GPIOPuPd_TypeDef;

#define IS_GPIO_PUPD(PUPD) (((PUPD) == GPIO_PuPd_NOPULL) || ((PUPD) == GPIO_PuPd_UP) || ((PUPD) == GPIO_PuPd_DOWN))
# 127 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
typedef enum
{
  Bit_RESET = 0,
  Bit_SET
}BitAction;

#define IS_GPIO_BIT_ACTION(ACTION) (((ACTION) == Bit_RESET) || ((ACTION) == Bit_SET))







typedef struct
{
  uint32_t GPIO_Pin;


  GPIOMode_TypeDef GPIO_Mode;


  GPIOSpeed_TypeDef GPIO_Speed;


  GPIOOType_TypeDef GPIO_OType;


  GPIOPuPd_TypeDef GPIO_PuPd;

}GPIO_InitTypeDef;
# 168 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
#define GPIO_Pin_0 ((uint16_t)0x0001)
#define GPIO_Pin_1 ((uint16_t)0x0002)
#define GPIO_Pin_2 ((uint16_t)0x0004)
#define GPIO_Pin_3 ((uint16_t)0x0008)
#define GPIO_Pin_4 ((uint16_t)0x0010)
#define GPIO_Pin_5 ((uint16_t)0x0020)
#define GPIO_Pin_6 ((uint16_t)0x0040)
#define GPIO_Pin_7 ((uint16_t)0x0080)
#define GPIO_Pin_8 ((uint16_t)0x0100)
#define GPIO_Pin_9 ((uint16_t)0x0200)
#define GPIO_Pin_10 ((uint16_t)0x0400)
#define GPIO_Pin_11 ((uint16_t)0x0800)
#define GPIO_Pin_12 ((uint16_t)0x1000)
#define GPIO_Pin_13 ((uint16_t)0x2000)
#define GPIO_Pin_14 ((uint16_t)0x4000)
#define GPIO_Pin_15 ((uint16_t)0x8000)
#define GPIO_Pin_All ((uint16_t)0xFFFF)

#define IS_GPIO_PIN(PIN) ((PIN) != (uint16_t)0x00)

#define IS_GET_GPIO_PIN(PIN) (((PIN) == GPIO_Pin_0) || ((PIN) == GPIO_Pin_1) || ((PIN) == GPIO_Pin_2) || ((PIN) == GPIO_Pin_3) || ((PIN) == GPIO_Pin_4) || ((PIN) == GPIO_Pin_5) || ((PIN) == GPIO_Pin_6) || ((PIN) == GPIO_Pin_7) || ((PIN) == GPIO_Pin_8) || ((PIN) == GPIO_Pin_9) || ((PIN) == GPIO_Pin_10) || ((PIN) == GPIO_Pin_11) || ((PIN) == GPIO_Pin_12) || ((PIN) == GPIO_Pin_13) || ((PIN) == GPIO_Pin_14) || ((PIN) == GPIO_Pin_15))
# 212 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
#define GPIO_PinSource0 ((uint8_t)0x00)
#define GPIO_PinSource1 ((uint8_t)0x01)
#define GPIO_PinSource2 ((uint8_t)0x02)
#define GPIO_PinSource3 ((uint8_t)0x03)
#define GPIO_PinSource4 ((uint8_t)0x04)
#define GPIO_PinSource5 ((uint8_t)0x05)
#define GPIO_PinSource6 ((uint8_t)0x06)
#define GPIO_PinSource7 ((uint8_t)0x07)
#define GPIO_PinSource8 ((uint8_t)0x08)
#define GPIO_PinSource9 ((uint8_t)0x09)
#define GPIO_PinSource10 ((uint8_t)0x0A)
#define GPIO_PinSource11 ((uint8_t)0x0B)
#define GPIO_PinSource12 ((uint8_t)0x0C)
#define GPIO_PinSource13 ((uint8_t)0x0D)
#define GPIO_PinSource14 ((uint8_t)0x0E)
#define GPIO_PinSource15 ((uint8_t)0x0F)

#define IS_GPIO_PIN_SOURCE(PINSOURCE) (((PINSOURCE) == GPIO_PinSource0) || ((PINSOURCE) == GPIO_PinSource1) || ((PINSOURCE) == GPIO_PinSource2) || ((PINSOURCE) == GPIO_PinSource3) || ((PINSOURCE) == GPIO_PinSource4) || ((PINSOURCE) == GPIO_PinSource5) || ((PINSOURCE) == GPIO_PinSource6) || ((PINSOURCE) == GPIO_PinSource7) || ((PINSOURCE) == GPIO_PinSource8) || ((PINSOURCE) == GPIO_PinSource9) || ((PINSOURCE) == GPIO_PinSource10) || ((PINSOURCE) == GPIO_PinSource11) || ((PINSOURCE) == GPIO_PinSource12) || ((PINSOURCE) == GPIO_PinSource13) || ((PINSOURCE) == GPIO_PinSource14) || ((PINSOURCE) == GPIO_PinSource15))
# 256 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
#define GPIO_AF_0 ((uint8_t)0x00)




#define GPIO_AF_1 ((uint8_t)0x01)




#define GPIO_AF_2 ((uint8_t)0x02)




#define GPIO_AF_3 ((uint8_t)0x03)




#define GPIO_AF_4 ((uint8_t)0x04)




#define GPIO_AF_5 ((uint8_t)0x05)




#define GPIO_AF_6 ((uint8_t)0x06)




#define GPIO_AF_7 ((uint8_t)0x07)





#define GPIO_AF_8 ((uint8_t)0x08)





#define GPIO_AF_9 ((uint8_t)0x09)




#define GPIO_AF_10 ((uint8_t)0x0A)




#define GPIO_AF_11 ((uint8_t)0x0B)




#define GPIO_AF_12 ((uint8_t)0x0C)




#define GPIO_AF_13 ((uint8_t)0x0D)




#define GPIO_AF_14 ((uint8_t)0x0E)




#define GPIO_AF_15 ((uint8_t)0x0F)

#define IS_GPIO_AF(AF) (((AF) == GPIO_AF_0)||((AF) == GPIO_AF_1)|| ((AF) == GPIO_AF_2)||((AF) == GPIO_AF_3)|| ((AF) == GPIO_AF_4)||((AF) == GPIO_AF_5)|| ((AF) == GPIO_AF_6)||((AF) == GPIO_AF_7)|| ((AF) == GPIO_AF_8)||((AF) == GPIO_AF_9)|| ((AF) == GPIO_AF_10)||((AF) == GPIO_AF_11)|| ((AF) == GPIO_AF_12)||((AF) == GPIO_AF_13)|| ((AF) == GPIO_AF_14)||((AF) == GPIO_AF_15))
# 352 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
#define GPIO_Speed_10MHz GPIO_Speed_Level_1
#define GPIO_Speed_2MHz GPIO_Speed_Level_2
#define GPIO_Speed_50MHz GPIO_Speed_Level_3
# 367 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_gpio.h"
void GPIO_DeInit(GPIO_TypeDef* GPIOx);


void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct);
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);


uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx);
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx);
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal);
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal);


void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF);
# 44 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define __STM32F30x_SYSCFG_H 
# 58 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define EXTI_PortSourceGPIOA ((uint8_t)0x00)
#define EXTI_PortSourceGPIOB ((uint8_t)0x01)
#define EXTI_PortSourceGPIOC ((uint8_t)0x02)
#define EXTI_PortSourceGPIOD ((uint8_t)0x03)
#define EXTI_PortSourceGPIOE ((uint8_t)0x04)
#define EXTI_PortSourceGPIOF ((uint8_t)0x05)

#define IS_EXTI_PORT_SOURCE(PORTSOURCE) (((PORTSOURCE) == EXTI_PortSourceGPIOA) || ((PORTSOURCE) == EXTI_PortSourceGPIOB) || ((PORTSOURCE) == EXTI_PortSourceGPIOC) || ((PORTSOURCE) == EXTI_PortSourceGPIOD) || ((PORTSOURCE) == EXTI_PortSourceGPIOE) || ((PORTSOURCE) == EXTI_PortSourceGPIOF))
# 78 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define EXTI_PinSource0 ((uint8_t)0x00)
#define EXTI_PinSource1 ((uint8_t)0x01)
#define EXTI_PinSource2 ((uint8_t)0x02)
#define EXTI_PinSource3 ((uint8_t)0x03)
#define EXTI_PinSource4 ((uint8_t)0x04)
#define EXTI_PinSource5 ((uint8_t)0x05)
#define EXTI_PinSource6 ((uint8_t)0x06)
#define EXTI_PinSource7 ((uint8_t)0x07)
#define EXTI_PinSource8 ((uint8_t)0x08)
#define EXTI_PinSource9 ((uint8_t)0x09)
#define EXTI_PinSource10 ((uint8_t)0x0A)
#define EXTI_PinSource11 ((uint8_t)0x0B)
#define EXTI_PinSource12 ((uint8_t)0x0C)
#define EXTI_PinSource13 ((uint8_t)0x0D)
#define EXTI_PinSource14 ((uint8_t)0x0E)
#define EXTI_PinSource15 ((uint8_t)0x0F)

#define IS_EXTI_PIN_SOURCE(PINSOURCE) (((PINSOURCE) == EXTI_PinSource0) || ((PINSOURCE) == EXTI_PinSource1) || ((PINSOURCE) == EXTI_PinSource2) || ((PINSOURCE) == EXTI_PinSource3) || ((PINSOURCE) == EXTI_PinSource4) || ((PINSOURCE) == EXTI_PinSource5) || ((PINSOURCE) == EXTI_PinSource6) || ((PINSOURCE) == EXTI_PinSource7) || ((PINSOURCE) == EXTI_PinSource8) || ((PINSOURCE) == EXTI_PinSource9) || ((PINSOURCE) == EXTI_PinSource10) || ((PINSOURCE) == EXTI_PinSource11) || ((PINSOURCE) == EXTI_PinSource12) || ((PINSOURCE) == EXTI_PinSource13) || ((PINSOURCE) == EXTI_PinSource14) || ((PINSOURCE) == EXTI_PinSource15))
# 118 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_MemoryRemap_Flash ((uint8_t)0x00)
#define SYSCFG_MemoryRemap_SystemMemory ((uint8_t)0x01)
#define SYSCFG_MemoryRemap_SRAM ((uint8_t)0x03)


#define IS_SYSCFG_MEMORY_REMAP(REMAP) (((REMAP) == SYSCFG_MemoryRemap_Flash) || ((REMAP) == SYSCFG_MemoryRemap_SystemMemory) || ((REMAP) == SYSCFG_MemoryRemap_SRAM))
# 134 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_DMARemap_TIM17 SYSCFG_CFGR1_TIM17_DMA_RMP
#define SYSCFG_DMARemap_TIM16 SYSCFG_CFGR1_TIM16_DMA_RMP
#define SYSCFG_DMARemap_ADC2ADC4 SYSCFG_CFGR1_ADC24_DMA_RMP

#define SYSCFG_DMARemap_TIM6DAC1Ch1 SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP
#define SYSCFG_DMARemap_TIM7DAC1Ch2 SYSCFG_CFGR1_TIM7DAC1Ch2_DMA_RMP
#define SYSCFG_DMARemap_DAC2Ch1 SYSCFG_CFGR1_DAC2Ch1_DMA_RMP

#define SYSCFG_DMARemapCh2_SPI1_RX ((uint32_t)0x80000003)
#define SYSCFG_DMARemapCh4_SPI1_RX ((uint32_t)0x80000001)
#define SYSCFG_DMARemapCh6_SPI1_RX ((uint32_t)0x80000002)

#define SYSCFG_DMARemapCh3_SPI1_TX ((uint32_t)0x8000000C)
#define SYSCFG_DMARemapCh5_SPI1_TX ((uint32_t)0x80000004)
#define SYSCFG_DMARemapCh7_SPI1_TX ((uint32_t)0x80000008)

#define SYSCFG_DMARemapCh7_I2C1_RX ((uint32_t)0x80000030)
#define SYSCFG_DMARemapCh3_I2C1_RX ((uint32_t)0x80000010)
#define SYSCFG_DMARemapCh5_I2C1_RX ((uint32_t)0x80000020)

#define SYSCFG_DMARemapCh6_I2C1_TX ((uint32_t)0x800000C0)
#define SYSCFG_DMARemapCh2_I2C1_TX ((uint32_t)0x80000040)
#define SYSCFG_DMARemapCh4_I2C1_TX ((uint32_t)0x80000080)

#define SYSCFG_DMARemapCh4_ADC2 ((uint32_t)0x80000300)
#define SYSCFG_DMARemapCh2_ADC2 ((uint32_t)0x80000200)


#define SYSCFG_DMARemap_TIM6DAC1 SYSCFG_DMARemap_TIM6DAC1Ch1
#define SYSCFG_DMARemap_TIM7DAC2 SYSCFG_DMARemap_TIM7DAC1Ch2

#define IS_SYSCFG_DMA_REMAP(REMAP) (((REMAP) == SYSCFG_DMARemap_TIM17) || ((REMAP) == SYSCFG_DMARemap_TIM16) || ((REMAP) == SYSCFG_DMARemap_ADC2ADC4) || ((REMAP) == SYSCFG_DMARemap_TIM6DAC1Ch1) || ((REMAP) == SYSCFG_DMARemap_TIM7DAC1Ch2) || ((REMAP) == SYSCFG_DMARemap_DAC2Ch1) || ((REMAP) == SYSCFG_DMARemapCh2_SPI1_RX) || ((REMAP) == SYSCFG_DMARemapCh4_SPI1_RX) || ((REMAP) == SYSCFG_DMARemapCh6_SPI1_RX) || ((REMAP) == SYSCFG_DMARemapCh5_SPI1_TX) || ((REMAP) == SYSCFG_DMARemapCh5_SPI1_TX) || ((REMAP) == SYSCFG_DMARemapCh7_SPI1_TX) || ((REMAP) == SYSCFG_DMARemapCh7_I2C1_RX) || ((REMAP) == SYSCFG_DMARemapCh3_I2C1_RX) || ((REMAP) == SYSCFG_DMARemapCh5_I2C1_RX) || ((REMAP) == SYSCFG_DMARemapCh6_I2C1_TX) || ((REMAP) == SYSCFG_DMARemapCh2_I2C1_TX) || ((REMAP) == SYSCFG_DMARemapCh4_I2C1_TX) || ((REMAP) == SYSCFG_DMARemapCh4_ADC2) || ((REMAP) == SYSCFG_DMARemapCh2_ADC2))
# 193 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_TriggerRemap_DACTIM3 SYSCFG_CFGR1_DAC1_TRIG1_RMP
#define SYSCFG_TriggerRemap_TIM1TIM17 SYSCFG_CFGR1_TIM1_ITR3_RMP
#define SYSCFG_TriggerRemap_DACHRTIM1_TRIG1 ((uint32_t)0x80010000)
#define SYSCFG_TriggerRemap_DACHRTIM1_TRIG2 ((uint32_t)0x80020000)

#define IS_SYSCFG_TRIGGER_REMAP(REMAP) (((REMAP) == SYSCFG_TriggerRemap_DACTIM3) || ((REMAP) == SYSCFG_TriggerRemap_DACHRTIM1_TRIG1) || ((REMAP) == SYSCFG_TriggerRemap_DACHRTIM1_TRIG2) || ((REMAP) == SYSCFG_TriggerRemap_TIM1TIM17))
# 210 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_EncoderRemap_No ((uint32_t)0x00000000)
#define SYSCFG_EncoderRemap_TIM2 SYSCFG_CFGR1_ENCODER_MODE_0
#define SYSCFG_EncoderRemap_TIM3 SYSCFG_CFGR1_ENCODER_MODE_1
#define SYSCFG_EncoderRemap_TIM4 SYSCFG_CFGR1_ENCODER_MODE

#define IS_SYSCFG_ENCODER_REMAP(REMAP) (((REMAP) == SYSCFG_EncoderRemap_No) || ((REMAP) == SYSCFG_EncoderRemap_TIM2) || ((REMAP) == SYSCFG_EncoderRemap_TIM3) || ((REMAP) == SYSCFG_EncoderRemap_TIM4))
# 227 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_I2CFastModePlus_PB6 SYSCFG_CFGR1_I2C_PB6_FMP
#define SYSCFG_I2CFastModePlus_PB7 SYSCFG_CFGR1_I2C_PB7_FMP
#define SYSCFG_I2CFastModePlus_PB8 SYSCFG_CFGR1_I2C_PB8_FMP
#define SYSCFG_I2CFastModePlus_PB9 SYSCFG_CFGR1_I2C_PB9_FMP
#define SYSCFG_I2CFastModePlus_I2C1 SYSCFG_CFGR1_I2C1_FMP
#define SYSCFG_I2CFastModePlus_I2C2 SYSCFG_CFGR1_I2C2_FMP

#define IS_SYSCFG_I2C_FMP(PIN) (((PIN) == SYSCFG_I2CFastModePlus_PB6) || ((PIN) == SYSCFG_I2CFastModePlus_PB7) || ((PIN) == SYSCFG_I2CFastModePlus_PB8) || ((PIN) == SYSCFG_I2CFastModePlus_PB9) || ((PIN) == SYSCFG_I2CFastModePlus_I2C1) || ((PIN) == SYSCFG_I2CFastModePlus_I2C2))
# 248 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_IT_IXC SYSCFG_CFGR1_FPU_IE_5
#define SYSCFG_IT_IDC SYSCFG_CFGR1_FPU_IE_4
#define SYSCFG_IT_OFC SYSCFG_CFGR1_FPU_IE_3
#define SYSCFG_IT_UFC SYSCFG_CFGR1_FPU_IE_2
#define SYSCFG_IT_DZC SYSCFG_CFGR1_FPU_IE_1
#define SYSCFG_IT_IOC SYSCFG_CFGR1_FPU_IE_0

#define IS_SYSCFG_IT(IT) ((((IT) & (uint32_t)0x03FFFFFF) == 0) && ((IT) != 0))
# 264 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_Break_PVD SYSCFG_CFGR2_PVD_LOCK
#define SYSCFG_Break_SRAMParity SYSCFG_CFGR2_SRAM_PARITY_LOCK
#define SYSCFG_Break_Lockup SYSCFG_CFGR2_LOCKUP_LOCK

#define IS_SYSCFG_LOCK_CONFIG(CONFIG) (((CONFIG) == SYSCFG_Break_PVD) || ((CONFIG) == SYSCFG_Break_SRAMParity) || ((CONFIG) == SYSCFG_Break_Lockup))
# 279 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_SRAMWRP_Page0 SYSCFG_RCR_PAGE0
#define SYSCFG_SRAMWRP_Page1 SYSCFG_RCR_PAGE1
#define SYSCFG_SRAMWRP_Page2 SYSCFG_RCR_PAGE2
#define SYSCFG_SRAMWRP_Page3 SYSCFG_RCR_PAGE3
#define SYSCFG_SRAMWRP_Page4 SYSCFG_RCR_PAGE4
#define SYSCFG_SRAMWRP_Page5 SYSCFG_RCR_PAGE5
#define SYSCFG_SRAMWRP_Page6 SYSCFG_RCR_PAGE6
#define SYSCFG_SRAMWRP_Page7 SYSCFG_RCR_PAGE7

#define IS_SYSCFG_PAGE(PAGE) ((((PAGE) & (uint32_t)0xFFFFFF00) == 0x00000000) && ((PAGE) != 0x00000000))
# 298 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
#define SYSCFG_FLAG_PE SYSCFG_CFGR2_SRAM_PE

#define IS_SYSCFG_FLAG(FLAG) (((FLAG) == SYSCFG_FLAG_PE))
# 314 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h"
void SYSCFG_DeInit(void);


void SYSCFG_MemoryRemapConfig(uint32_t SYSCFG_MemoryRemap);
void SYSCFG_DMAChannelRemapConfig(uint32_t SYSCFG_DMARemap, FunctionalState NewState);
void SYSCFG_TriggerRemapConfig(uint32_t SYSCFG_TriggerRemap, FunctionalState NewState);
void SYSCFG_EncoderRemapConfig(uint32_t SYSCFG_EncoderRemap);
void SYSCFG_USBInterruptLineRemapCmd(FunctionalState NewState);
void SYSCFG_I2CFastModePlusConfig(uint32_t SYSCFG_I2CFastModePlus, FunctionalState NewState);
void SYSCFG_ITConfig(uint32_t SYSCFG_IT, FunctionalState NewState);
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex);
void SYSCFG_BreakConfig(uint32_t SYSCFG_Break);
void SYSCFG_BypassParityCheckDisable(void);
void SYSCFG_SRAMWRPEnable(uint32_t SYSCFG_SRAMWRP);
FlagStatus SYSCFG_GetFlagStatus(uint32_t SYSCFG_Flag);
void SYSCFG_ClearFlag(uint32_t SYSCFG_Flag);
# 45 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define __STM32F30x_I2C_H 
# 54 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
typedef struct
{
  uint32_t I2C_Timing;



  uint32_t I2C_AnalogFilter;


  uint32_t I2C_DigitalFilter;


  uint32_t I2C_Mode;


  uint32_t I2C_OwnAddress1;


  uint32_t I2C_Ack;


  uint32_t I2C_AcknowledgedAddress;

}I2C_InitTypeDef;
# 86 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define IS_I2C_ALL_PERIPH(PERIPH) (((PERIPH) == I2C1) || ((PERIPH) == I2C2))






#define I2C_AnalogFilter_Enable ((uint32_t)0x00000000)
#define I2C_AnalogFilter_Disable I2C_CR1_ANFOFF

#define IS_I2C_ANALOG_FILTER(FILTER) (((FILTER) == I2C_AnalogFilter_Enable) || ((FILTER) == I2C_AnalogFilter_Disable))
# 106 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define IS_I2C_DIGITAL_FILTER(FILTER) ((FILTER) <= 0x0000000F)
# 115 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_Mode_I2C ((uint32_t)0x00000000)
#define I2C_Mode_SMBusDevice I2C_CR1_SMBDEN
#define I2C_Mode_SMBusHost I2C_CR1_SMBHEN

#define IS_I2C_MODE(MODE) (((MODE) == I2C_Mode_I2C) || ((MODE) == I2C_Mode_SMBusDevice) || ((MODE) == I2C_Mode_SMBusHost))
# 130 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_Ack_Enable ((uint32_t)0x00000000)
#define I2C_Ack_Disable I2C_CR2_NACK

#define IS_I2C_ACK(ACK) (((ACK) == I2C_Ack_Enable) || ((ACK) == I2C_Ack_Disable))
# 143 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_AcknowledgedAddress_7bit ((uint32_t)0x00000000)
#define I2C_AcknowledgedAddress_10bit I2C_OAR1_OA1MODE

#define IS_I2C_ACKNOWLEDGE_ADDRESS(ADDRESS) (((ADDRESS) == I2C_AcknowledgedAddress_7bit) || ((ADDRESS) == I2C_AcknowledgedAddress_10bit))
# 156 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define IS_I2C_OWN_ADDRESS1(ADDRESS1) ((ADDRESS1) <= (uint32_t)0x000003FF)
# 165 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_Direction_Transmitter ((uint16_t)0x0000)
#define I2C_Direction_Receiver ((uint16_t)0x0400)

#define IS_I2C_DIRECTION(DIRECTION) (((DIRECTION) == I2C_Direction_Transmitter) || ((DIRECTION) == I2C_Direction_Receiver))
# 178 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_DMAReq_Tx I2C_CR1_TXDMAEN
#define I2C_DMAReq_Rx I2C_CR1_RXDMAEN

#define IS_I2C_DMA_REQ(REQ) ((((REQ) & (uint32_t)0xFFFF3FFF) == 0x00) && ((REQ) != 0x00))
# 190 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define IS_I2C_SLAVE_ADDRESS(ADDRESS) ((ADDRESS) <= (uint16_t)0x03FF)
# 200 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define IS_I2C_OWN_ADDRESS2(ADDRESS2) ((ADDRESS2) <= (uint16_t)0x00FF)
# 210 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_OA2_NoMask ((uint8_t)0x00)
#define I2C_OA2_Mask01 ((uint8_t)0x01)
#define I2C_OA2_Mask02 ((uint8_t)0x02)
#define I2C_OA2_Mask03 ((uint8_t)0x03)
#define I2C_OA2_Mask04 ((uint8_t)0x04)
#define I2C_OA2_Mask05 ((uint8_t)0x05)
#define I2C_OA2_Mask06 ((uint8_t)0x06)
#define I2C_OA2_Mask07 ((uint8_t)0x07)

#define IS_I2C_OWN_ADDRESS2_MASK(MASK) (((MASK) == I2C_OA2_NoMask) || ((MASK) == I2C_OA2_Mask01) || ((MASK) == I2C_OA2_Mask02) || ((MASK) == I2C_OA2_Mask03) || ((MASK) == I2C_OA2_Mask04) || ((MASK) == I2C_OA2_Mask05) || ((MASK) == I2C_OA2_Mask06) || ((MASK) == I2C_OA2_Mask07))
# 236 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define IS_I2C_TIMEOUT(TIMEOUT) ((TIMEOUT) <= (uint16_t)0x0FFF)
# 246 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_Register_CR1 ((uint8_t)0x00)
#define I2C_Register_CR2 ((uint8_t)0x04)
#define I2C_Register_OAR1 ((uint8_t)0x08)
#define I2C_Register_OAR2 ((uint8_t)0x0C)
#define I2C_Register_TIMINGR ((uint8_t)0x10)
#define I2C_Register_TIMEOUTR ((uint8_t)0x14)
#define I2C_Register_ISR ((uint8_t)0x18)
#define I2C_Register_ICR ((uint8_t)0x1C)
#define I2C_Register_PECR ((uint8_t)0x20)
#define I2C_Register_RXDR ((uint8_t)0x24)
#define I2C_Register_TXDR ((uint8_t)0x28)

#define IS_I2C_REGISTER(REGISTER) (((REGISTER) == I2C_Register_CR1) || ((REGISTER) == I2C_Register_CR2) || ((REGISTER) == I2C_Register_OAR1) || ((REGISTER) == I2C_Register_OAR2) || ((REGISTER) == I2C_Register_TIMINGR) || ((REGISTER) == I2C_Register_TIMEOUTR) || ((REGISTER) == I2C_Register_ISR) || ((REGISTER) == I2C_Register_ICR) || ((REGISTER) == I2C_Register_PECR) || ((REGISTER) == I2C_Register_RXDR) || ((REGISTER) == I2C_Register_TXDR))
# 277 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_IT_ERRI I2C_CR1_ERRIE
#define I2C_IT_TCI I2C_CR1_TCIE
#define I2C_IT_STOPI I2C_CR1_STOPIE
#define I2C_IT_NACKI I2C_CR1_NACKIE
#define I2C_IT_ADDRI I2C_CR1_ADDRIE
#define I2C_IT_RXI I2C_CR1_RXIE
#define I2C_IT_TXI I2C_CR1_TXIE

#define IS_I2C_CONFIG_IT(IT) ((((IT) & (uint32_t)0xFFFFFF01) == 0x00) && ((IT) != 0x00))
# 295 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_FLAG_TXE I2C_ISR_TXE
#define I2C_FLAG_TXIS I2C_ISR_TXIS
#define I2C_FLAG_RXNE I2C_ISR_RXNE
#define I2C_FLAG_ADDR I2C_ISR_ADDR
#define I2C_FLAG_NACKF I2C_ISR_NACKF
#define I2C_FLAG_STOPF I2C_ISR_STOPF
#define I2C_FLAG_TC I2C_ISR_TC
#define I2C_FLAG_TCR I2C_ISR_TCR
#define I2C_FLAG_BERR I2C_ISR_BERR
#define I2C_FLAG_ARLO I2C_ISR_ARLO
#define I2C_FLAG_OVR I2C_ISR_OVR
#define I2C_FLAG_PECERR I2C_ISR_PECERR
#define I2C_FLAG_TIMEOUT I2C_ISR_TIMEOUT
#define I2C_FLAG_ALERT I2C_ISR_ALERT
#define I2C_FLAG_BUSY I2C_ISR_BUSY

#define IS_I2C_CLEAR_FLAG(FLAG) ((((FLAG) & (uint32_t)0xFFFF4000) == 0x00) && ((FLAG) != 0x00))

#define IS_I2C_GET_FLAG(FLAG) (((FLAG) == I2C_FLAG_TXE) || ((FLAG) == I2C_FLAG_TXIS) || ((FLAG) == I2C_FLAG_RXNE) || ((FLAG) == I2C_FLAG_ADDR) || ((FLAG) == I2C_FLAG_NACKF) || ((FLAG) == I2C_FLAG_STOPF) || ((FLAG) == I2C_FLAG_TC) || ((FLAG) == I2C_FLAG_TCR) || ((FLAG) == I2C_FLAG_BERR) || ((FLAG) == I2C_FLAG_ARLO) || ((FLAG) == I2C_FLAG_OVR) || ((FLAG) == I2C_FLAG_PECERR) || ((FLAG) == I2C_FLAG_TIMEOUT) || ((FLAG) == I2C_FLAG_ALERT) || ((FLAG) == I2C_FLAG_BUSY))
# 331 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_IT_TXIS I2C_ISR_TXIS
#define I2C_IT_RXNE I2C_ISR_RXNE
#define I2C_IT_ADDR I2C_ISR_ADDR
#define I2C_IT_NACKF I2C_ISR_NACKF
#define I2C_IT_STOPF I2C_ISR_STOPF
#define I2C_IT_TC I2C_ISR_TC
#define I2C_IT_TCR I2C_ISR_TCR
#define I2C_IT_BERR I2C_ISR_BERR
#define I2C_IT_ARLO I2C_ISR_ARLO
#define I2C_IT_OVR I2C_ISR_OVR
#define I2C_IT_PECERR I2C_ISR_PECERR
#define I2C_IT_TIMEOUT I2C_ISR_TIMEOUT
#define I2C_IT_ALERT I2C_ISR_ALERT

#define IS_I2C_CLEAR_IT(IT) ((((IT) & (uint32_t)0xFFFFC001) == 0x00) && ((IT) != 0x00))

#define IS_I2C_GET_IT(IT) (((IT) == I2C_IT_TXIS) || ((IT) == I2C_IT_RXNE) || ((IT) == I2C_IT_ADDR) || ((IT) == I2C_IT_NACKF) || ((IT) == I2C_IT_STOPF) || ((IT) == I2C_IT_TC) || ((IT) == I2C_IT_TCR) || ((IT) == I2C_IT_BERR) || ((IT) == I2C_IT_ARLO) || ((IT) == I2C_IT_OVR) || ((IT) == I2C_IT_PECERR) || ((IT) == I2C_IT_TIMEOUT) || ((IT) == I2C_IT_ALERT))
# 364 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_Reload_Mode I2C_CR2_RELOAD
#define I2C_AutoEnd_Mode I2C_CR2_AUTOEND
#define I2C_SoftEnd_Mode ((uint32_t)0x00000000)


#define IS_RELOAD_END_MODE(MODE) (((MODE) == I2C_Reload_Mode) || ((MODE) == I2C_AutoEnd_Mode) || ((MODE) == I2C_SoftEnd_Mode))
# 382 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
#define I2C_No_StartStop ((uint32_t)0x00000000)
#define I2C_Generate_Stop I2C_CR2_STOP
#define I2C_Generate_Start_Read (uint32_t)(I2C_CR2_START | I2C_CR2_RD_WRN)
#define I2C_Generate_Start_Write I2C_CR2_START


#define IS_START_STOP_MODE(MODE) (((MODE) == I2C_Generate_Stop) || ((MODE) == I2C_Generate_Start_Read) || ((MODE) == I2C_Generate_Start_Write) || ((MODE) == I2C_No_StartStop))
# 407 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h"
void I2C_DeInit(I2C_TypeDef* I2Cx);
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct);
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct);
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx);
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint32_t I2C_IT, FunctionalState NewState);
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_StopModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask);
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_SlaveByteControlCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_SlaveAddressConfig(I2C_TypeDef* I2Cx, uint16_t Address);
void I2C_10BitAddressingModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);


void I2C_AutoEndCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_ReloadCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_NumberOfBytesConfig(I2C_TypeDef* I2Cx, uint8_t Number_Bytes);
void I2C_MasterRequestConfig(I2C_TypeDef* I2Cx, uint16_t I2C_Direction);
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_10BitAddressHeaderCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState);
uint8_t I2C_GetAddressMatched(I2C_TypeDef* I2Cx);
uint16_t I2C_GetTransferDirection(I2C_TypeDef* I2Cx);
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode);


void I2C_SMBusAlertCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_ClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_ExtendedClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_IdleClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_TimeoutAConfig(I2C_TypeDef* I2Cx, uint16_t Timeout);
void I2C_TimeoutBConfig(I2C_TypeDef* I2Cx, uint16_t Timeout);
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState);
void I2C_PECRequestCmd(I2C_TypeDef* I2Cx, FunctionalState NewState);
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx);


uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register);


void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data);
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx);


void I2C_DMACmd(I2C_TypeDef* I2Cx, uint32_t I2C_DMAReq, FunctionalState NewState);


FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
# 46 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h"
#define __STM32F30x_IWDG_H 
# 59 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h"
#define IWDG_WriteAccess_Enable ((uint16_t)0x5555)
#define IWDG_WriteAccess_Disable ((uint16_t)0x0000)
#define IS_IWDG_WRITE_ACCESS(ACCESS) (((ACCESS) == IWDG_WriteAccess_Enable) || ((ACCESS) == IWDG_WriteAccess_Disable))
# 71 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h"
#define IWDG_Prescaler_4 ((uint8_t)0x00)
#define IWDG_Prescaler_8 ((uint8_t)0x01)
#define IWDG_Prescaler_16 ((uint8_t)0x02)
#define IWDG_Prescaler_32 ((uint8_t)0x03)
#define IWDG_Prescaler_64 ((uint8_t)0x04)
#define IWDG_Prescaler_128 ((uint8_t)0x05)
#define IWDG_Prescaler_256 ((uint8_t)0x06)
#define IS_IWDG_PRESCALER(PRESCALER) (((PRESCALER) == IWDG_Prescaler_4) || ((PRESCALER) == IWDG_Prescaler_8) || ((PRESCALER) == IWDG_Prescaler_16) || ((PRESCALER) == IWDG_Prescaler_32) || ((PRESCALER) == IWDG_Prescaler_64) || ((PRESCALER) == IWDG_Prescaler_128)|| ((PRESCALER) == IWDG_Prescaler_256))
# 93 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h"
#define IWDG_FLAG_PVU ((uint16_t)0x0001)
#define IWDG_FLAG_RVU ((uint16_t)0x0002)
#define IWDG_FLAG_WVU ((uint16_t)0x0002)
#define IS_IWDG_FLAG(FLAG) (((FLAG) == IWDG_FLAG_PVU) || ((FLAG) == IWDG_FLAG_RVU) || ((FLAG) == IWDG_FLAG_WVU))
# 105 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h"
#define IS_IWDG_RELOAD(RELOAD) ((RELOAD) <= 0xFFF)
# 114 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h"
#define IS_IWDG_WINDOW_VALUE(VALUE) ((VALUE) <= 0xFFF)
# 127 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h"
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess);
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler);
void IWDG_SetReload(uint16_t Reload);
void IWDG_ReloadCounter(void);
void IWDG_SetWindowValue(uint16_t WindowValue);


void IWDG_Enable(void);


FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG);
# 47 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define __STM32F30x_OPAMP_H 
# 54 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
typedef struct
{

  uint32_t OPAMP_InvertingInput;


  uint32_t OPAMP_NonInvertingInput;


}OPAMP_InitTypeDef;
# 75 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_Selection_OPAMP1 ((uint32_t)0x00000000)
#define OPAMP_Selection_OPAMP2 ((uint32_t)0x00000004)
#define OPAMP_Selection_OPAMP3 ((uint32_t)0x00000008)
#define OPAMP_Selection_OPAMP4 ((uint32_t)0x0000000C)

#define IS_OPAMP_ALL_PERIPH(PERIPH) (((PERIPH) == OPAMP_Selection_OPAMP1) || ((PERIPH) == OPAMP_Selection_OPAMP2) || ((PERIPH) == OPAMP_Selection_OPAMP3) || ((PERIPH) == OPAMP_Selection_OPAMP4))
# 93 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_InvertingInput_IO1 ((uint32_t)0x00000000)

#define OPAMP_InvertingInput_IO2 OPAMP_CSR_VMSEL_0

#define OPAMP_InvertingInput_PGA OPAMP_CSR_VMSEL_1
#define OPAMP_InvertingInput_Vout OPAMP_CSR_VMSEL

#define IS_OPAMP_INVERTING_INPUT(INPUT) (((INPUT) == OPAMP_InvertingInput_IO1) || ((INPUT) == OPAMP_InvertingInput_IO2) || ((INPUT) == OPAMP_InvertingInput_PGA) || ((INPUT) == OPAMP_InvertingInput_Vout))
# 112 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_NonInvertingInput_IO1 ((uint32_t)0x00000000)

#define OPAMP_NonInvertingInput_IO2 OPAMP_CSR_VPSEL_0

#define OPAMP_NonInvertingInput_IO3 OPAMP_CSR_VPSEL_1

#define OPAMP_NonInvertingInput_IO4 OPAMP_CSR_VPSEL


#define IS_OPAMP_NONINVERTING_INPUT(INPUT) (((INPUT) == OPAMP_NonInvertingInput_IO1) || ((INPUT) == OPAMP_NonInvertingInput_IO2) || ((INPUT) == OPAMP_NonInvertingInput_IO3) || ((INPUT) == OPAMP_NonInvertingInput_IO4))
# 133 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_OPAMP_PGAGain_2 ((uint32_t)0x00000000)
#define OPAMP_OPAMP_PGAGain_4 OPAMP_CSR_PGGAIN_0
#define OPAMP_OPAMP_PGAGain_8 OPAMP_CSR_PGGAIN_1
#define OPAMP_OPAMP_PGAGain_16 ((uint32_t)0x0000C000)

#define IS_OPAMP_PGAGAIN(GAIN) (((GAIN) == OPAMP_OPAMP_PGAGain_2) || ((GAIN) == OPAMP_OPAMP_PGAGain_4) || ((GAIN) == OPAMP_OPAMP_PGAGain_8) || ((GAIN) == OPAMP_OPAMP_PGAGain_16))
# 150 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_PGAConnect_No ((uint32_t)0x00000000)
#define OPAMP_PGAConnect_IO1 OPAMP_CSR_PGGAIN_3
#define OPAMP_PGAConnect_IO2 ((uint32_t)0x00030000)

#define IS_OPAMP_PGACONNECT(CONNECT) (((CONNECT) == OPAMP_PGAConnect_No) || ((CONNECT) == OPAMP_PGAConnect_IO1) || ((CONNECT) == OPAMP_PGAConnect_IO2))
# 165 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define IS_OPAMP_SECONDARY_INVINPUT(INVINPUT) (((INVINPUT) == OPAMP_InvertingInput_IO1) || ((INVINPUT) == OPAMP_InvertingInput_IO2))
# 175 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_Input_Inverting ((uint32_t)0x00000018)
#define OPAMP_Input_NonInverting ((uint32_t)0x00000013)

#define IS_OPAMP_INPUT(INPUT) (((INPUT) == OPAMP_Input_Inverting) || ((INPUT) == OPAMP_Input_NonInverting))
# 189 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_Vref_3VDDA ((uint32_t)0x00000000)
#define OPAMP_Vref_10VDDA OPAMP_CSR_CALSEL_0
#define OPAMP_Vref_50VDDA OPAMP_CSR_CALSEL_1
#define OPAMP_Vref_90VDDA OPAMP_CSR_CALSEL

#define IS_OPAMP_VREF(VREF) (((VREF) == OPAMP_Vref_3VDDA) || ((VREF) == OPAMP_Vref_10VDDA) || ((VREF) == OPAMP_Vref_50VDDA) || ((VREF) == OPAMP_Vref_90VDDA))
# 206 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_Trimming_Factory ((uint32_t)0x00000000)
#define OPAMP_Trimming_User OPAMP_CSR_USERTRIM

#define IS_OPAMP_TRIMMING(TRIMMING) (((TRIMMING) == OPAMP_Trimming_Factory) || ((TRIMMING) == OPAMP_Trimming_User))
# 220 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define IS_OPAMP_TRIMMINGVALUE(VALUE) ((VALUE) <= 0x0000001F)
# 230 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
#define OPAMP_OutputLevel_High OPAMP_CSR_OUTCAL
#define OPAMP_OutputLevel_Low ((uint32_t)0x00000000)
# 241 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h"
void OPAMP_DeInit(uint32_t OPAMP_Selection);


void OPAMP_Init(uint32_t OPAMP_Selection, OPAMP_InitTypeDef* OPAMP_InitStruct);
void OPAMP_StructInit(OPAMP_InitTypeDef* OPAMP_InitStruct);
void OPAMP_PGAConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_PGAGain, uint32_t OPAMP_PGAConnect);
void OPAMP_VrefConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_Vref);
void OPAMP_VrefConnectADCCmd(uint32_t OPAMP_Selection, FunctionalState NewState);
void OPAMP_TimerControlledMuxConfig(uint32_t OPAMP_Selection, OPAMP_InitTypeDef* OPAMP_InitStruct);
void OPAMP_TimerControlledMuxCmd(uint32_t OPAMP_Selection, FunctionalState NewState);
void OPAMP_Cmd(uint32_t OPAMP_Selection, FunctionalState NewState);
uint32_t OPAMP_GetOutputLevel(uint32_t OPAMP_Selection);


void OPAMP_VrefConnectNonInvertingInput(uint32_t OPAMP_Selection, FunctionalState NewState);
void OPAMP_OffsetTrimModeSelect(uint32_t OPAMP_Selection, uint32_t OPAMP_Trimming);
void OPAMP_OffsetTrimConfig(uint32_t OPAMP_Selection, uint32_t OPAMP_Input, uint32_t OPAMP_TrimValue);
void OPAMP_StartCalibration(uint32_t OPAMP_Selection, FunctionalState NewState);


void OPAMP_LockConfig(uint32_t OPAMP_Selection);
# 48 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h"
#define __STM32F30x_PWR_H 
# 59 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h"
#define PWR_PVDLevel_0 PWR_CR_PLS_LEV0
#define PWR_PVDLevel_1 PWR_CR_PLS_LEV1
#define PWR_PVDLevel_2 PWR_CR_PLS_LEV2
#define PWR_PVDLevel_3 PWR_CR_PLS_LEV3
#define PWR_PVDLevel_4 PWR_CR_PLS_LEV4
#define PWR_PVDLevel_5 PWR_CR_PLS_LEV5
#define PWR_PVDLevel_6 PWR_CR_PLS_LEV6
#define PWR_PVDLevel_7 PWR_CR_PLS_LEV7

#define IS_PWR_PVD_LEVEL(LEVEL) (((LEVEL) == PWR_PVDLevel_0) || ((LEVEL) == PWR_PVDLevel_1)|| ((LEVEL) == PWR_PVDLevel_2) || ((LEVEL) == PWR_PVDLevel_3)|| ((LEVEL) == PWR_PVDLevel_4) || ((LEVEL) == PWR_PVDLevel_5)|| ((LEVEL) == PWR_PVDLevel_6) || ((LEVEL) == PWR_PVDLevel_7))
# 80 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h"
#define PWR_WakeUpPin_1 PWR_CSR_EWUP1
#define PWR_WakeUpPin_2 PWR_CSR_EWUP2
#define PWR_WakeUpPin_3 PWR_CSR_EWUP3
#define IS_PWR_WAKEUP_PIN(PIN) (((PIN) == PWR_WakeUpPin_1) || ((PIN) == PWR_WakeUpPin_2) || ((PIN) == PWR_WakeUpPin_3))
# 95 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h"
#define PWR_Regulator_ON ((uint32_t)0x00000000)
#define PWR_Regulator_LowPower PWR_CR_LPSDSR
#define IS_PWR_REGULATOR(REGULATOR) (((REGULATOR) == PWR_Regulator_ON) || ((REGULATOR) == PWR_Regulator_LowPower))
# 107 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h"
#define PWR_SLEEPEntry_WFI ((uint8_t)0x01)
#define PWR_SLEEPEntry_WFE ((uint8_t)0x02)
#define IS_PWR_SLEEP_ENTRY(ENTRY) (((ENTRY) == PWR_SLEEPEntry_WFI) || ((ENTRY) == PWR_SLEEPEntry_WFE))
# 119 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h"
#define PWR_STOPEntry_WFI ((uint8_t)0x01)
#define PWR_STOPEntry_WFE ((uint8_t)0x02)
#define IS_PWR_STOP_ENTRY(ENTRY) (((ENTRY) == PWR_STOPEntry_WFI) || ((ENTRY) == PWR_STOPEntry_WFE))
# 131 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h"
#define PWR_FLAG_WU PWR_CSR_WUF
#define PWR_FLAG_SB PWR_CSR_SBF
#define PWR_FLAG_PVDO PWR_CSR_PVDO
#define PWR_FLAG_VREFINTRDY PWR_CSR_VREFINTRDYF

#define IS_PWR_GET_FLAG(FLAG) (((FLAG) == PWR_FLAG_WU) || ((FLAG) == PWR_FLAG_SB) || ((FLAG) == PWR_FLAG_PVDO) || ((FLAG) == PWR_FLAG_VREFINTRDY))


#define IS_PWR_CLEAR_FLAG(FLAG) (((FLAG) == PWR_FLAG_WU) || ((FLAG) == PWR_FLAG_SB))
# 152 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h"
void PWR_DeInit(void);


void PWR_BackupAccessCmd(FunctionalState NewState);


void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel);
void PWR_PVDCmd(FunctionalState NewState);


void PWR_WakeUpPinCmd(uint32_t PWR_WakeUpPin, FunctionalState NewState);


void PWR_EnterSleepMode(uint8_t PWR_SLEEPEntry);
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry);
void PWR_EnterSTANDBYMode(void);


FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG);
void PWR_ClearFlag(uint32_t PWR_FLAG);
# 49 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h" 1
# 31 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define __STM32F30x_RCC_H 
# 50 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
typedef struct
{
  uint32_t SYSCLK_Frequency;
  uint32_t HCLK_Frequency;
  uint32_t PCLK1_Frequency;
  uint32_t PCLK2_Frequency;
  uint32_t ADC12CLK_Frequency;
  uint32_t ADC34CLK_Frequency;
  uint32_t I2C1CLK_Frequency;
  uint32_t I2C2CLK_Frequency;
  uint32_t I2C3CLK_Frequency;
  uint32_t TIM1CLK_Frequency;
  uint32_t HRTIM1CLK_Frequency;
  uint32_t TIM8CLK_Frequency;
  uint32_t USART1CLK_Frequency;
  uint32_t USART2CLK_Frequency;
  uint32_t USART3CLK_Frequency;
  uint32_t UART4CLK_Frequency;
  uint32_t UART5CLK_Frequency;
  uint32_t TIM15CLK_Frequency;
  uint32_t TIM16CLK_Frequency;
  uint32_t TIM17CLK_Frequency;
}RCC_ClocksTypeDef;
# 84 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_HSE_OFF ((uint8_t)0x00)
#define RCC_HSE_ON ((uint8_t)0x01)
#define RCC_HSE_Bypass ((uint8_t)0x05)
#define IS_RCC_HSE(HSE) (((HSE) == RCC_HSE_OFF) || ((HSE) == RCC_HSE_ON) || ((HSE) == RCC_HSE_Bypass))
# 98 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_PLLSource_HSI_Div2 RCC_CFGR_PLLSRC_HSI_Div2
#define RCC_PLLSource_PREDIV1 RCC_CFGR_PLLSRC_PREDIV1

#define IS_RCC_PLL_SOURCE(SOURCE) (((SOURCE) == RCC_PLLSource_HSI_Div2) || ((SOURCE) == RCC_PLLSource_PREDIV1))
# 111 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_PLLMul_2 RCC_CFGR_PLLMULL2
#define RCC_PLLMul_3 RCC_CFGR_PLLMULL3
#define RCC_PLLMul_4 RCC_CFGR_PLLMULL4
#define RCC_PLLMul_5 RCC_CFGR_PLLMULL5
#define RCC_PLLMul_6 RCC_CFGR_PLLMULL6
#define RCC_PLLMul_7 RCC_CFGR_PLLMULL7
#define RCC_PLLMul_8 RCC_CFGR_PLLMULL8
#define RCC_PLLMul_9 RCC_CFGR_PLLMULL9
#define RCC_PLLMul_10 RCC_CFGR_PLLMULL10
#define RCC_PLLMul_11 RCC_CFGR_PLLMULL11
#define RCC_PLLMul_12 RCC_CFGR_PLLMULL12
#define RCC_PLLMul_13 RCC_CFGR_PLLMULL13
#define RCC_PLLMul_14 RCC_CFGR_PLLMULL14
#define RCC_PLLMul_15 RCC_CFGR_PLLMULL15
#define RCC_PLLMul_16 RCC_CFGR_PLLMULL16
#define IS_RCC_PLL_MUL(MUL) (((MUL) == RCC_PLLMul_2) || ((MUL) == RCC_PLLMul_3) || ((MUL) == RCC_PLLMul_4) || ((MUL) == RCC_PLLMul_5) || ((MUL) == RCC_PLLMul_6) || ((MUL) == RCC_PLLMul_7) || ((MUL) == RCC_PLLMul_8) || ((MUL) == RCC_PLLMul_9) || ((MUL) == RCC_PLLMul_10) || ((MUL) == RCC_PLLMul_11) || ((MUL) == RCC_PLLMul_12) || ((MUL) == RCC_PLLMul_13) || ((MUL) == RCC_PLLMul_14) || ((MUL) == RCC_PLLMul_15) || ((MUL) == RCC_PLLMul_16))
# 141 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_PREDIV1_Div1 RCC_CFGR2_PREDIV1_DIV1
#define RCC_PREDIV1_Div2 RCC_CFGR2_PREDIV1_DIV2
#define RCC_PREDIV1_Div3 RCC_CFGR2_PREDIV1_DIV3
#define RCC_PREDIV1_Div4 RCC_CFGR2_PREDIV1_DIV4
#define RCC_PREDIV1_Div5 RCC_CFGR2_PREDIV1_DIV5
#define RCC_PREDIV1_Div6 RCC_CFGR2_PREDIV1_DIV6
#define RCC_PREDIV1_Div7 RCC_CFGR2_PREDIV1_DIV7
#define RCC_PREDIV1_Div8 RCC_CFGR2_PREDIV1_DIV8
#define RCC_PREDIV1_Div9 RCC_CFGR2_PREDIV1_DIV9
#define RCC_PREDIV1_Div10 RCC_CFGR2_PREDIV1_DIV10
#define RCC_PREDIV1_Div11 RCC_CFGR2_PREDIV1_DIV11
#define RCC_PREDIV1_Div12 RCC_CFGR2_PREDIV1_DIV12
#define RCC_PREDIV1_Div13 RCC_CFGR2_PREDIV1_DIV13
#define RCC_PREDIV1_Div14 RCC_CFGR2_PREDIV1_DIV14
#define RCC_PREDIV1_Div15 RCC_CFGR2_PREDIV1_DIV15
#define RCC_PREDIV1_Div16 RCC_CFGR2_PREDIV1_DIV16

#define IS_RCC_PREDIV1(PREDIV1) (((PREDIV1) == RCC_PREDIV1_Div1) || ((PREDIV1) == RCC_PREDIV1_Div2) || ((PREDIV1) == RCC_PREDIV1_Div3) || ((PREDIV1) == RCC_PREDIV1_Div4) || ((PREDIV1) == RCC_PREDIV1_Div5) || ((PREDIV1) == RCC_PREDIV1_Div6) || ((PREDIV1) == RCC_PREDIV1_Div7) || ((PREDIV1) == RCC_PREDIV1_Div8) || ((PREDIV1) == RCC_PREDIV1_Div9) || ((PREDIV1) == RCC_PREDIV1_Div10) || ((PREDIV1) == RCC_PREDIV1_Div11) || ((PREDIV1) == RCC_PREDIV1_Div12) || ((PREDIV1) == RCC_PREDIV1_Div13) || ((PREDIV1) == RCC_PREDIV1_Div14) || ((PREDIV1) == RCC_PREDIV1_Div15) || ((PREDIV1) == RCC_PREDIV1_Div16))
# 174 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_SYSCLKSource_HSI RCC_CFGR_SW_HSI
#define RCC_SYSCLKSource_HSE RCC_CFGR_SW_HSE
#define RCC_SYSCLKSource_PLLCLK RCC_CFGR_SW_PLL
#define IS_RCC_SYSCLK_SOURCE(SOURCE) (((SOURCE) == RCC_SYSCLKSource_HSI) || ((SOURCE) == RCC_SYSCLKSource_HSE) || ((SOURCE) == RCC_SYSCLKSource_PLLCLK))
# 188 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_SYSCLK_Div1 RCC_CFGR_HPRE_DIV1
#define RCC_SYSCLK_Div2 RCC_CFGR_HPRE_DIV2
#define RCC_SYSCLK_Div4 RCC_CFGR_HPRE_DIV4
#define RCC_SYSCLK_Div8 RCC_CFGR_HPRE_DIV8
#define RCC_SYSCLK_Div16 RCC_CFGR_HPRE_DIV16
#define RCC_SYSCLK_Div64 RCC_CFGR_HPRE_DIV64
#define RCC_SYSCLK_Div128 RCC_CFGR_HPRE_DIV128
#define RCC_SYSCLK_Div256 RCC_CFGR_HPRE_DIV256
#define RCC_SYSCLK_Div512 RCC_CFGR_HPRE_DIV512
#define IS_RCC_HCLK(HCLK) (((HCLK) == RCC_SYSCLK_Div1) || ((HCLK) == RCC_SYSCLK_Div2) || ((HCLK) == RCC_SYSCLK_Div4) || ((HCLK) == RCC_SYSCLK_Div8) || ((HCLK) == RCC_SYSCLK_Div16) || ((HCLK) == RCC_SYSCLK_Div64) || ((HCLK) == RCC_SYSCLK_Div128) || ((HCLK) == RCC_SYSCLK_Div256) || ((HCLK) == RCC_SYSCLK_Div512))
# 210 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_HCLK_Div1 ((uint32_t)0x00000000)
#define RCC_HCLK_Div2 ((uint32_t)0x00000400)
#define RCC_HCLK_Div4 ((uint32_t)0x00000500)
#define RCC_HCLK_Div8 ((uint32_t)0x00000600)
#define RCC_HCLK_Div16 ((uint32_t)0x00000700)
#define IS_RCC_PCLK(PCLK) (((PCLK) == RCC_HCLK_Div1) || ((PCLK) == RCC_HCLK_Div2) || ((PCLK) == RCC_HCLK_Div4) || ((PCLK) == RCC_HCLK_Div8) || ((PCLK) == RCC_HCLK_Div16))
# 227 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_ADC12PLLCLK_OFF ((uint32_t)0x00000000)
#define RCC_ADC12PLLCLK_Div1 ((uint32_t)0x00000100)
#define RCC_ADC12PLLCLK_Div2 ((uint32_t)0x00000110)
#define RCC_ADC12PLLCLK_Div4 ((uint32_t)0x00000120)
#define RCC_ADC12PLLCLK_Div6 ((uint32_t)0x00000130)
#define RCC_ADC12PLLCLK_Div8 ((uint32_t)0x00000140)
#define RCC_ADC12PLLCLK_Div10 ((uint32_t)0x00000150)
#define RCC_ADC12PLLCLK_Div12 ((uint32_t)0x00000160)
#define RCC_ADC12PLLCLK_Div16 ((uint32_t)0x00000170)
#define RCC_ADC12PLLCLK_Div32 ((uint32_t)0x00000180)
#define RCC_ADC12PLLCLK_Div64 ((uint32_t)0x00000190)
#define RCC_ADC12PLLCLK_Div128 ((uint32_t)0x000001A0)
#define RCC_ADC12PLLCLK_Div256 ((uint32_t)0x000001B0)


#define RCC_ADC34PLLCLK_OFF ((uint32_t)0x10000000)
#define RCC_ADC34PLLCLK_Div1 ((uint32_t)0x10002000)
#define RCC_ADC34PLLCLK_Div2 ((uint32_t)0x10002200)
#define RCC_ADC34PLLCLK_Div4 ((uint32_t)0x10002400)
#define RCC_ADC34PLLCLK_Div6 ((uint32_t)0x10002600)
#define RCC_ADC34PLLCLK_Div8 ((uint32_t)0x10002800)
#define RCC_ADC34PLLCLK_Div10 ((uint32_t)0x10002A00)
#define RCC_ADC34PLLCLK_Div12 ((uint32_t)0x10002C00)
#define RCC_ADC34PLLCLK_Div16 ((uint32_t)0x10002E00)
#define RCC_ADC34PLLCLK_Div32 ((uint32_t)0x10003000)
#define RCC_ADC34PLLCLK_Div64 ((uint32_t)0x10003200)
#define RCC_ADC34PLLCLK_Div128 ((uint32_t)0x10003400)
#define RCC_ADC34PLLCLK_Div256 ((uint32_t)0x10003600)

#define IS_RCC_ADCCLK(ADCCLK) (((ADCCLK) == RCC_ADC12PLLCLK_OFF) || ((ADCCLK) == RCC_ADC12PLLCLK_Div1) || ((ADCCLK) == RCC_ADC12PLLCLK_Div2) || ((ADCCLK) == RCC_ADC12PLLCLK_Div4) || ((ADCCLK) == RCC_ADC12PLLCLK_Div6) || ((ADCCLK) == RCC_ADC12PLLCLK_Div8) || ((ADCCLK) == RCC_ADC12PLLCLK_Div10) || ((ADCCLK) == RCC_ADC12PLLCLK_Div12) || ((ADCCLK) == RCC_ADC12PLLCLK_Div16) || ((ADCCLK) == RCC_ADC12PLLCLK_Div32) || ((ADCCLK) == RCC_ADC12PLLCLK_Div64) || ((ADCCLK) == RCC_ADC12PLLCLK_Div128) || ((ADCCLK) == RCC_ADC12PLLCLK_Div256) || ((ADCCLK) == RCC_ADC34PLLCLK_OFF) || ((ADCCLK) == RCC_ADC34PLLCLK_Div1) || ((ADCCLK) == RCC_ADC34PLLCLK_Div2) || ((ADCCLK) == RCC_ADC34PLLCLK_Div4) || ((ADCCLK) == RCC_ADC34PLLCLK_Div6) || ((ADCCLK) == RCC_ADC34PLLCLK_Div8) || ((ADCCLK) == RCC_ADC34PLLCLK_Div10) || ((ADCCLK) == RCC_ADC34PLLCLK_Div12) || ((ADCCLK) == RCC_ADC34PLLCLK_Div16) || ((ADCCLK) == RCC_ADC34PLLCLK_Div32) || ((ADCCLK) == RCC_ADC34PLLCLK_Div64) || ((ADCCLK) == RCC_ADC34PLLCLK_Div128) || ((ADCCLK) == RCC_ADC34PLLCLK_Div256))
# 278 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_TIM1CLK_HCLK ((uint32_t)0x00000000)
#define RCC_TIM1CLK_PLLCLK RCC_CFGR3_TIM1SW

#define RCC_TIM8CLK_HCLK ((uint32_t)0x10000000)
#define RCC_TIM8CLK_PLLCLK ((uint32_t)0x10000200)

#define RCC_TIM15CLK_HCLK ((uint32_t)0x20000000)
#define RCC_TIM15CLK_PLLCLK ((uint32_t)0x20000400)

#define RCC_TIM16CLK_HCLK ((uint32_t)0x30000000)
#define RCC_TIM16CLK_PLLCLK ((uint32_t)0x30000800)

#define RCC_TIM17CLK_HCLK ((uint32_t)0x40000000)
#define RCC_TIM17CLK_PLLCLK ((uint32_t)0x40002000)

#define IS_RCC_TIMCLK(TIMCLK) (((TIMCLK) == RCC_TIM1CLK_HCLK) || ((TIMCLK) == RCC_TIM1CLK_PLLCLK) || ((TIMCLK) == RCC_TIM8CLK_HCLK) || ((TIMCLK) == RCC_TIM8CLK_PLLCLK) || ((TIMCLK) == RCC_TIM15CLK_HCLK) || ((TIMCLK) == RCC_TIM15CLK_PLLCLK) || ((TIMCLK) == RCC_TIM16CLK_HCLK) || ((TIMCLK) == RCC_TIM16CLK_PLLCLK) || ((TIMCLK) == RCC_TIM17CLK_HCLK) || ((TIMCLK) == RCC_TIM17CLK_PLLCLK))
# 307 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_HRTIM1CLK_HCLK ((uint32_t)0x00000000)
#define RCC_HRTIM1CLK_PLLCLK RCC_CFGR3_HRTIM1SW

#define IS_RCC_HRTIMCLK(HRTIMCLK) (((HRTIMCLK) == RCC_HRTIM1CLK_HCLK) || ((HRTIMCLK) == RCC_HRTIM1CLK_PLLCLK))
# 320 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_I2C1CLK_HSI ((uint32_t)0x00000000)
#define RCC_I2C1CLK_SYSCLK RCC_CFGR3_I2C1SW

#define RCC_I2C2CLK_HSI ((uint32_t)0x10000000)
#define RCC_I2C2CLK_SYSCLK ((uint32_t)0x10000020)

#define RCC_I2C3CLK_HSI ((uint32_t)0x20000000)
#define RCC_I2C3CLK_SYSCLK ((uint32_t)0x20000040)

#define IS_RCC_I2CCLK(I2CCLK) (((I2CCLK) == RCC_I2C1CLK_HSI) || ((I2CCLK) == RCC_I2C1CLK_SYSCLK) || ((I2CCLK) == RCC_I2C2CLK_HSI) || ((I2CCLK) == RCC_I2C2CLK_SYSCLK) || ((I2CCLK) == RCC_I2C3CLK_HSI) || ((I2CCLK) == RCC_I2C3CLK_SYSCLK))
# 341 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_USART1CLK_PCLK ((uint32_t)0x10000000)
#define RCC_USART1CLK_SYSCLK ((uint32_t)0x10000001)
#define RCC_USART1CLK_LSE ((uint32_t)0x10000002)
#define RCC_USART1CLK_HSI ((uint32_t)0x10000003)

#define RCC_USART2CLK_PCLK ((uint32_t)0x20000000)
#define RCC_USART2CLK_SYSCLK ((uint32_t)0x20010000)
#define RCC_USART2CLK_LSE ((uint32_t)0x20020000)
#define RCC_USART2CLK_HSI ((uint32_t)0x20030000)

#define RCC_USART3CLK_PCLK ((uint32_t)0x30000000)
#define RCC_USART3CLK_SYSCLK ((uint32_t)0x30040000)
#define RCC_USART3CLK_LSE ((uint32_t)0x30080000)
#define RCC_USART3CLK_HSI ((uint32_t)0x300C0000)

#define RCC_UART4CLK_PCLK ((uint32_t)0x40000000)
#define RCC_UART4CLK_SYSCLK ((uint32_t)0x40100000)
#define RCC_UART4CLK_LSE ((uint32_t)0x40200000)
#define RCC_UART4CLK_HSI ((uint32_t)0x40300000)

#define RCC_UART5CLK_PCLK ((uint32_t)0x50000000)
#define RCC_UART5CLK_SYSCLK ((uint32_t)0x50400000)
#define RCC_UART5CLK_LSE ((uint32_t)0x50800000)
#define RCC_UART5CLK_HSI ((uint32_t)0x50C00000)

#define IS_RCC_USARTCLK(USARTCLK) (((USARTCLK) == RCC_USART1CLK_PCLK) || ((USARTCLK) == RCC_USART1CLK_SYSCLK) || ((USARTCLK) == RCC_USART1CLK_LSE) || ((USARTCLK) == RCC_USART1CLK_HSI) || ((USARTCLK) == RCC_USART2CLK_PCLK) || ((USARTCLK) == RCC_USART2CLK_SYSCLK) || ((USARTCLK) == RCC_USART2CLK_LSE) || ((USARTCLK) == RCC_USART2CLK_HSI) || ((USARTCLK) == RCC_USART3CLK_PCLK) || ((USARTCLK) == RCC_USART3CLK_SYSCLK) || ((USARTCLK) == RCC_USART3CLK_LSE) || ((USARTCLK) == RCC_USART3CLK_HSI) || ((USARTCLK) == RCC_UART4CLK_PCLK) || ((USARTCLK) == RCC_UART4CLK_SYSCLK) || ((USARTCLK) == RCC_UART4CLK_LSE) || ((USARTCLK) == RCC_UART4CLK_HSI) || ((USARTCLK) == RCC_UART5CLK_PCLK) || ((USARTCLK) == RCC_UART5CLK_SYSCLK) || ((USARTCLK) == RCC_UART5CLK_LSE) || ((USARTCLK) == RCC_UART5CLK_HSI))
# 385 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_IT_LSIRDY ((uint8_t)0x01)
#define RCC_IT_LSERDY ((uint8_t)0x02)
#define RCC_IT_HSIRDY ((uint8_t)0x04)
#define RCC_IT_HSERDY ((uint8_t)0x08)
#define RCC_IT_PLLRDY ((uint8_t)0x10)
#define RCC_IT_CSS ((uint8_t)0x80)

#define IS_RCC_IT(IT) ((((IT) & (uint8_t)0xC0) == 0x00) && ((IT) != 0x00))

#define IS_RCC_GET_IT(IT) (((IT) == RCC_IT_LSIRDY) || ((IT) == RCC_IT_LSERDY) || ((IT) == RCC_IT_HSIRDY) || ((IT) == RCC_IT_HSERDY) || ((IT) == RCC_IT_PLLRDY) || ((IT) == RCC_IT_CSS))




#define IS_RCC_CLEAR_IT(IT) ((((IT) & (uint8_t)0x40) == 0x00) && ((IT) != 0x00))
# 409 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_LSE_OFF ((uint32_t)0x00000000)
#define RCC_LSE_ON RCC_BDCR_LSEON
#define RCC_LSE_Bypass ((uint32_t)(RCC_BDCR_LSEON | RCC_BDCR_LSEBYP))
#define IS_RCC_LSE(LSE) (((LSE) == RCC_LSE_OFF) || ((LSE) == RCC_LSE_ON) || ((LSE) == RCC_LSE_Bypass))
# 422 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_RTCCLKSource_LSE RCC_BDCR_RTCSEL_LSE
#define RCC_RTCCLKSource_LSI RCC_BDCR_RTCSEL_LSI
#define RCC_RTCCLKSource_HSE_Div32 RCC_BDCR_RTCSEL_HSE

#define IS_RCC_RTCCLK_SOURCE(SOURCE) (((SOURCE) == RCC_RTCCLKSource_LSE) || ((SOURCE) == RCC_RTCCLKSource_LSI) || ((SOURCE) == RCC_RTCCLKSource_HSE_Div32))
# 436 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_I2S2CLKSource_SYSCLK ((uint8_t)0x00)
#define RCC_I2S2CLKSource_Ext ((uint8_t)0x01)

#define IS_RCC_I2SCLK_SOURCE(SOURCE) (((SOURCE) == RCC_I2S2CLKSource_SYSCLK) || ((SOURCE) == RCC_I2S2CLKSource_Ext))





#define RCC_LSEDrive_Low ((uint32_t)0x00000000)
#define RCC_LSEDrive_MediumLow RCC_BDCR_LSEDRV_0
#define RCC_LSEDrive_MediumHigh RCC_BDCR_LSEDRV_1
#define RCC_LSEDrive_High RCC_BDCR_LSEDRV
#define IS_RCC_LSE_DRIVE(DRIVE) (((DRIVE) == RCC_LSEDrive_Low) || ((DRIVE) == RCC_LSEDrive_MediumLow) || ((DRIVE) == RCC_LSEDrive_MediumHigh) || ((DRIVE) == RCC_LSEDrive_High))
# 459 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_AHBPeriph_ADC34 RCC_AHBENR_ADC34EN
#define RCC_AHBPeriph_ADC12 RCC_AHBENR_ADC12EN
#define RCC_AHBPeriph_GPIOA RCC_AHBENR_GPIOAEN
#define RCC_AHBPeriph_GPIOB RCC_AHBENR_GPIOBEN
#define RCC_AHBPeriph_GPIOC RCC_AHBENR_GPIOCEN
#define RCC_AHBPeriph_GPIOD RCC_AHBENR_GPIODEN
#define RCC_AHBPeriph_GPIOE RCC_AHBENR_GPIOEEN
#define RCC_AHBPeriph_GPIOF RCC_AHBENR_GPIOFEN
#define RCC_AHBPeriph_TS RCC_AHBENR_TSEN
#define RCC_AHBPeriph_CRC RCC_AHBENR_CRCEN
#define RCC_AHBPeriph_FLITF RCC_AHBENR_FLITFEN
#define RCC_AHBPeriph_SRAM RCC_AHBENR_SRAMEN
#define RCC_AHBPeriph_DMA2 RCC_AHBENR_DMA2EN
#define RCC_AHBPeriph_DMA1 RCC_AHBENR_DMA1EN

#define IS_RCC_AHB_PERIPH(PERIPH) ((((PERIPH) & 0xCE81FFA8) == 0x00) && ((PERIPH) != 0x00))
#define IS_RCC_AHB_RST_PERIPH(PERIPH) ((((PERIPH) & 0xCE81FFFF) == 0x00) && ((PERIPH) != 0x00))
# 485 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_APB2Periph_SYSCFG RCC_APB2ENR_SYSCFGEN
#define RCC_APB2Periph_TIM1 RCC_APB2ENR_TIM1EN
#define RCC_APB2Periph_SPI1 RCC_APB2ENR_SPI1EN
#define RCC_APB2Periph_TIM8 RCC_APB2ENR_TIM8EN
#define RCC_APB2Periph_USART1 RCC_APB2ENR_USART1EN
#define RCC_APB2Periph_TIM15 RCC_APB2ENR_TIM15EN
#define RCC_APB2Periph_TIM16 RCC_APB2ENR_TIM16EN
#define RCC_APB2Periph_TIM17 RCC_APB2ENR_TIM17EN
#define RCC_APB2Periph_HRTIM1 RCC_APB2ENR_HRTIM1

#define IS_RCC_APB2_PERIPH(PERIPH) ((((PERIPH) & 0xDFF887FE) == 0x00) && ((PERIPH) != 0x00))
# 504 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_APB1Periph_TIM2 RCC_APB1ENR_TIM2EN
#define RCC_APB1Periph_TIM3 RCC_APB1ENR_TIM3EN
#define RCC_APB1Periph_TIM4 RCC_APB1ENR_TIM4EN
#define RCC_APB1Periph_TIM6 RCC_APB1ENR_TIM6EN
#define RCC_APB1Periph_TIM7 RCC_APB1ENR_TIM7EN
#define RCC_APB1Periph_WWDG RCC_APB1ENR_WWDGEN
#define RCC_APB1Periph_SPI2 RCC_APB1ENR_SPI2EN
#define RCC_APB1Periph_SPI3 RCC_APB1ENR_SPI3EN
#define RCC_APB1Periph_USART2 RCC_APB1ENR_USART2EN
#define RCC_APB1Periph_USART3 RCC_APB1ENR_USART3EN
#define RCC_APB1Periph_UART4 RCC_APB1ENR_UART4EN
#define RCC_APB1Periph_UART5 RCC_APB1ENR_UART5EN
#define RCC_APB1Periph_I2C1 RCC_APB1ENR_I2C1EN
#define RCC_APB1Periph_I2C2 RCC_APB1ENR_I2C2EN
#define RCC_APB1Periph_USB RCC_APB1ENR_USBEN
#define RCC_APB1Periph_CAN1 RCC_APB1ENR_CAN1EN
#define RCC_APB1Periph_PWR RCC_APB1ENR_PWREN
#define RCC_APB1Periph_DAC1 RCC_APB1ENR_DAC1EN
#define RCC_APB1Periph_I2C3 RCC_APB1ENR_I2C3EN
#define RCC_APB1Periph_DAC2 RCC_APB1ENR_DAC2EN
#define RCC_APB1Periph_DAC RCC_APB1Periph_DAC1


#define IS_RCC_APB1_PERIPH(PERIPH) ((((PERIPH) & 0x890137C8) == 0x00) && ((PERIPH) != 0x00))
# 536 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_MCOSource_NoClock ((uint8_t)0x00)
#define RCC_MCOSource_LSI ((uint8_t)0x02)
#define RCC_MCOSource_LSE ((uint8_t)0x03)
#define RCC_MCOSource_SYSCLK ((uint8_t)0x04)
#define RCC_MCOSource_HSI ((uint8_t)0x05)
#define RCC_MCOSource_HSE ((uint8_t)0x06)
#define RCC_MCOSource_PLLCLK_Div2 ((uint8_t)0x07)

#define IS_RCC_MCO_SOURCE(SOURCE) (((SOURCE) == RCC_MCOSource_NoClock) ||((SOURCE) == RCC_MCOSource_SYSCLK) || ((SOURCE) == RCC_MCOSource_HSI) || ((SOURCE) == RCC_MCOSource_HSE) || ((SOURCE) == RCC_MCOSource_LSI) || ((SOURCE) == RCC_MCOSource_LSE) || ((SOURCE) == RCC_MCOSource_PLLCLK_Div2))
# 556 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_MCOPrescaler_1 RCC_CFGR_MCO_PRE_1
#define RCC_MCOPrescaler_2 RCC_CFGR_MCO_PRE_2
#define RCC_MCOPrescaler_4 RCC_CFGR_MCO_PRE_4
#define RCC_MCOPrescaler_8 RCC_CFGR_MCO_PRE_8
#define RCC_MCOPrescaler_16 RCC_CFGR_MCO_PRE_16
#define RCC_MCOPrescaler_32 RCC_CFGR_MCO_PRE_32
#define RCC_MCOPrescaler_64 RCC_CFGR_MCO_PRE_64
#define RCC_MCOPrescaler_128 RCC_CFGR_MCO_PRE_128

#define IS_RCC_MCO_PRESCALER(PRESCALER) (((PRESCALER) == RCC_MCOPrescaler_1) || ((PRESCALER) == RCC_MCOPrescaler_2) || ((PRESCALER) == RCC_MCOPrescaler_4) || ((PRESCALER) == RCC_MCOPrescaler_8) || ((PRESCALER) == RCC_MCOPrescaler_16) || ((PRESCALER) == RCC_MCOPrescaler_32) || ((PRESCALER) == RCC_MCOPrescaler_64) || ((PRESCALER) == RCC_MCOPrescaler_128))
# 581 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_USBCLKSource_PLLCLK_1Div5 ((uint8_t)0x00)
#define RCC_USBCLKSource_PLLCLK_Div1 ((uint8_t)0x01)

#define IS_RCC_USBCLK_SOURCE(SOURCE) (((SOURCE) == RCC_USBCLKSource_PLLCLK_1Div5) || ((SOURCE) == RCC_USBCLKSource_PLLCLK_Div1))
# 593 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
#define RCC_FLAG_HSIRDY ((uint8_t)0x01)
#define RCC_FLAG_HSERDY ((uint8_t)0x11)
#define RCC_FLAG_PLLRDY ((uint8_t)0x19)
#define RCC_FLAG_MCOF ((uint8_t)0x9C)
#define RCC_FLAG_LSERDY ((uint8_t)0x21)
#define RCC_FLAG_LSIRDY ((uint8_t)0x41)
#define RCC_FLAG_OBLRST ((uint8_t)0x59)
#define RCC_FLAG_PINRST ((uint8_t)0x5A)
#define RCC_FLAG_PORRST ((uint8_t)0x5B)
#define RCC_FLAG_SFTRST ((uint8_t)0x5C)
#define RCC_FLAG_IWDGRST ((uint8_t)0x5D)
#define RCC_FLAG_WWDGRST ((uint8_t)0x5E)
#define RCC_FLAG_LPWRRST ((uint8_t)0x5F)

#define IS_RCC_FLAG(FLAG) (((FLAG) == RCC_FLAG_HSIRDY) || ((FLAG) == RCC_FLAG_HSERDY) || ((FLAG) == RCC_FLAG_PLLRDY) || ((FLAG) == RCC_FLAG_LSERDY) || ((FLAG) == RCC_FLAG_LSIRDY) || ((FLAG) == RCC_FLAG_OBLRST) || ((FLAG) == RCC_FLAG_PINRST) || ((FLAG) == RCC_FLAG_PORRST) || ((FLAG) == RCC_FLAG_SFTRST) || ((FLAG) == RCC_FLAG_IWDGRST)|| ((FLAG) == RCC_FLAG_WWDGRST)|| ((FLAG) == RCC_FLAG_LPWRRST)|| ((FLAG) == RCC_FLAG_MCOF))







#define IS_RCC_HSI_CALIBRATION_VALUE(VALUE) ((VALUE) <= 0x1F)
# 629 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_rcc.h"
void RCC_DeInit(void);


void RCC_HSEConfig(uint8_t RCC_HSE);
ErrorStatus RCC_WaitForHSEStartUp(void);
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue);
void RCC_HSICmd(FunctionalState NewState);
void RCC_LSEConfig(uint32_t RCC_LSE);
void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive);
void RCC_LSICmd(FunctionalState NewState);
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul);
void RCC_PLLCmd(FunctionalState NewState);
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div);
void RCC_ClockSecuritySystemCmd(FunctionalState NewState);

 void RCC_MCOConfig(uint8_t RCC_MCOSource);





void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource);
uint8_t RCC_GetSYSCLKSource(void);
void RCC_HCLKConfig(uint32_t RCC_SYSCLK);
void RCC_PCLK1Config(uint32_t RCC_HCLK);
void RCC_PCLK2Config(uint32_t RCC_HCLK);
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks);


void RCC_ADCCLKConfig(uint32_t RCC_PLLCLK);
void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK);
void RCC_TIMCLKConfig(uint32_t RCC_TIMCLK);
void RCC_HRTIM1CLKConfig(uint32_t RCC_HRTIMCLK);
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource);
void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK);
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource);

void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource);
void RCC_RTCCLKCmd(FunctionalState NewState);
void RCC_BackupResetCmd(FunctionalState NewState);

void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState);
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);

void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState);
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);


void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState);
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG);
void RCC_ClearFlag(void);
ITStatus RCC_GetITStatus(uint8_t RCC_IT);
void RCC_ClearITPendingBit(uint8_t RCC_IT);
# 50 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define __STM32F30x_RTC_H 
# 53 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
typedef struct
{
  uint32_t RTC_HourFormat;


  uint32_t RTC_AsynchPrediv;


  uint32_t RTC_SynchPrediv;

}RTC_InitTypeDef;




typedef struct
{
  uint8_t RTC_Hours;




  uint8_t RTC_Minutes;


  uint8_t RTC_Seconds;


  uint8_t RTC_H12;

}RTC_TimeTypeDef;




typedef struct
{
  uint8_t RTC_WeekDay;


  uint8_t RTC_Month;


  uint8_t RTC_Date;


  uint8_t RTC_Year;

}RTC_DateTypeDef;




typedef struct
{
  RTC_TimeTypeDef RTC_AlarmTime;

  uint32_t RTC_AlarmMask;


  uint32_t RTC_AlarmDateWeekDaySel;


  uint8_t RTC_AlarmDateWeekDay;




}RTC_AlarmTypeDef;
# 133 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_HourFormat_24 ((uint32_t)0x00000000)
#define RTC_HourFormat_12 ((uint32_t)0x00000040)
#define IS_RTC_HOUR_FORMAT(FORMAT) (((FORMAT) == RTC_HourFormat_12) || ((FORMAT) == RTC_HourFormat_24))
# 144 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define IS_RTC_ASYNCH_PREDIV(PREDIV) ((PREDIV) <= 0x7F)
# 154 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define IS_RTC_SYNCH_PREDIV(PREDIV) ((PREDIV) <= 0x7FFF)
# 163 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define IS_RTC_HOUR12(HOUR) (((HOUR) > 0) && ((HOUR) <= 12))
#define IS_RTC_HOUR24(HOUR) ((HOUR) <= 23)
#define IS_RTC_MINUTES(MINUTES) ((MINUTES) <= 59)
#define IS_RTC_SECONDS(SECONDS) ((SECONDS) <= 59)
# 175 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_H12_AM ((uint8_t)0x00)
#define RTC_H12_PM ((uint8_t)0x40)
#define IS_RTC_H12(PM) (((PM) == RTC_H12_AM) || ((PM) == RTC_H12_PM))
# 186 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define IS_RTC_YEAR(YEAR) ((YEAR) <= 99)
# 197 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_Month_January ((uint8_t)0x01)
#define RTC_Month_February ((uint8_t)0x02)
#define RTC_Month_March ((uint8_t)0x03)
#define RTC_Month_April ((uint8_t)0x04)
#define RTC_Month_May ((uint8_t)0x05)
#define RTC_Month_June ((uint8_t)0x06)
#define RTC_Month_July ((uint8_t)0x07)
#define RTC_Month_August ((uint8_t)0x08)
#define RTC_Month_September ((uint8_t)0x09)
#define RTC_Month_October ((uint8_t)0x10)
#define RTC_Month_November ((uint8_t)0x11)
#define RTC_Month_December ((uint8_t)0x12)
#define IS_RTC_MONTH(MONTH) (((MONTH) >= 1) && ((MONTH) <= 12))
#define IS_RTC_DATE(DATE) (((DATE) >= 1) && ((DATE) <= 31))
# 220 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_Weekday_Monday ((uint8_t)0x01)
#define RTC_Weekday_Tuesday ((uint8_t)0x02)
#define RTC_Weekday_Wednesday ((uint8_t)0x03)
#define RTC_Weekday_Thursday ((uint8_t)0x04)
#define RTC_Weekday_Friday ((uint8_t)0x05)
#define RTC_Weekday_Saturday ((uint8_t)0x06)
#define RTC_Weekday_Sunday ((uint8_t)0x07)
#define IS_RTC_WEEKDAY(WEEKDAY) (((WEEKDAY) == RTC_Weekday_Monday) || ((WEEKDAY) == RTC_Weekday_Tuesday) || ((WEEKDAY) == RTC_Weekday_Wednesday) || ((WEEKDAY) == RTC_Weekday_Thursday) || ((WEEKDAY) == RTC_Weekday_Friday) || ((WEEKDAY) == RTC_Weekday_Saturday) || ((WEEKDAY) == RTC_Weekday_Sunday))
# 242 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define IS_RTC_ALARM_DATE_WEEKDAY_DATE(DATE) (((DATE) > 0) && ((DATE) <= 31))
#define IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(WEEKDAY) (((WEEKDAY) == RTC_Weekday_Monday) || ((WEEKDAY) == RTC_Weekday_Tuesday) || ((WEEKDAY) == RTC_Weekday_Wednesday) || ((WEEKDAY) == RTC_Weekday_Thursday) || ((WEEKDAY) == RTC_Weekday_Friday) || ((WEEKDAY) == RTC_Weekday_Saturday) || ((WEEKDAY) == RTC_Weekday_Sunday))
# 259 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_AlarmDateWeekDaySel_Date ((uint32_t)0x00000000)
#define RTC_AlarmDateWeekDaySel_WeekDay ((uint32_t)0x40000000)

#define IS_RTC_ALARM_DATE_WEEKDAY_SEL(SEL) (((SEL) == RTC_AlarmDateWeekDaySel_Date) || ((SEL) == RTC_AlarmDateWeekDaySel_WeekDay))
# 273 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_AlarmMask_None ((uint32_t)0x00000000)
#define RTC_AlarmMask_DateWeekDay ((uint32_t)0x80000000)
#define RTC_AlarmMask_Hours ((uint32_t)0x00800000)
#define RTC_AlarmMask_Minutes ((uint32_t)0x00008000)
#define RTC_AlarmMask_Seconds ((uint32_t)0x00000080)
#define RTC_AlarmMask_All ((uint32_t)0x80808080)
#define IS_ALARM_MASK(MASK) (((MASK) & 0x7F7F7F7F) == (uint32_t)RESET)
# 288 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_Alarm_A ((uint32_t)0x00000100)
#define RTC_Alarm_B ((uint32_t)0x00000200)
#define IS_RTC_ALARM(ALARM) (((ALARM) == RTC_Alarm_A) || ((ALARM) == RTC_Alarm_B))
#define IS_RTC_CMD_ALARM(ALARM) (((ALARM) & (RTC_Alarm_A | RTC_Alarm_B)) != (uint32_t)RESET)
# 300 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_AlarmSubSecondMask_All ((uint32_t)0x00000000)


#define RTC_AlarmSubSecondMask_SS14_1 ((uint32_t)0x01000000)

#define RTC_AlarmSubSecondMask_SS14_2 ((uint32_t)0x02000000)

#define RTC_AlarmSubSecondMask_SS14_3 ((uint32_t)0x03000000)

#define RTC_AlarmSubSecondMask_SS14_4 ((uint32_t)0x04000000)

#define RTC_AlarmSubSecondMask_SS14_5 ((uint32_t)0x05000000)

#define RTC_AlarmSubSecondMask_SS14_6 ((uint32_t)0x06000000)

#define RTC_AlarmSubSecondMask_SS14_7 ((uint32_t)0x07000000)

#define RTC_AlarmSubSecondMask_SS14_8 ((uint32_t)0x08000000)

#define RTC_AlarmSubSecondMask_SS14_9 ((uint32_t)0x09000000)

#define RTC_AlarmSubSecondMask_SS14_10 ((uint32_t)0x0A000000)

#define RTC_AlarmSubSecondMask_SS14_11 ((uint32_t)0x0B000000)

#define RTC_AlarmSubSecondMask_SS14_12 ((uint32_t)0x0C000000)

#define RTC_AlarmSubSecondMask_SS14_13 ((uint32_t)0x0D000000)

#define RTC_AlarmSubSecondMask_SS14 ((uint32_t)0x0E000000)

#define RTC_AlarmSubSecondMask_None ((uint32_t)0x0F000000)

#define IS_RTC_ALARM_SUB_SECOND_MASK(MASK) (((MASK) == RTC_AlarmSubSecondMask_All) || ((MASK) == RTC_AlarmSubSecondMask_SS14_1) || ((MASK) == RTC_AlarmSubSecondMask_SS14_2) || ((MASK) == RTC_AlarmSubSecondMask_SS14_3) || ((MASK) == RTC_AlarmSubSecondMask_SS14_4) || ((MASK) == RTC_AlarmSubSecondMask_SS14_5) || ((MASK) == RTC_AlarmSubSecondMask_SS14_6) || ((MASK) == RTC_AlarmSubSecondMask_SS14_7) || ((MASK) == RTC_AlarmSubSecondMask_SS14_8) || ((MASK) == RTC_AlarmSubSecondMask_SS14_9) || ((MASK) == RTC_AlarmSubSecondMask_SS14_10) || ((MASK) == RTC_AlarmSubSecondMask_SS14_11) || ((MASK) == RTC_AlarmSubSecondMask_SS14_12) || ((MASK) == RTC_AlarmSubSecondMask_SS14_13) || ((MASK) == RTC_AlarmSubSecondMask_SS14) || ((MASK) == RTC_AlarmSubSecondMask_None))
# 357 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define IS_RTC_ALARM_SUB_SECOND_VALUE(VALUE) ((VALUE) <= 0x00007FFF)
# 366 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_WakeUpClock_RTCCLK_Div16 ((uint32_t)0x00000000)
#define RTC_WakeUpClock_RTCCLK_Div8 ((uint32_t)0x00000001)
#define RTC_WakeUpClock_RTCCLK_Div4 ((uint32_t)0x00000002)
#define RTC_WakeUpClock_RTCCLK_Div2 ((uint32_t)0x00000003)
#define RTC_WakeUpClock_CK_SPRE_16bits ((uint32_t)0x00000004)
#define RTC_WakeUpClock_CK_SPRE_17bits ((uint32_t)0x00000006)
#define IS_RTC_WAKEUP_CLOCK(CLOCK) (((CLOCK) == RTC_WakeUpClock_RTCCLK_Div16) || ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div8) || ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div4) || ((CLOCK) == RTC_WakeUpClock_RTCCLK_Div2) || ((CLOCK) == RTC_WakeUpClock_CK_SPRE_16bits) || ((CLOCK) == RTC_WakeUpClock_CK_SPRE_17bits))





#define IS_RTC_WAKEUP_COUNTER(COUNTER) ((COUNTER) <= 0xFFFF)







#define RTC_TimeStampEdge_Rising ((uint32_t)0x00000000)
#define RTC_TimeStampEdge_Falling ((uint32_t)0x00000008)
#define IS_RTC_TIMESTAMP_EDGE(EDGE) (((EDGE) == RTC_TimeStampEdge_Rising) || ((EDGE) == RTC_TimeStampEdge_Falling))
# 397 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_Output_Disable ((uint32_t)0x00000000)
#define RTC_Output_AlarmA ((uint32_t)0x00200000)
#define RTC_Output_AlarmB ((uint32_t)0x00400000)
#define RTC_Output_WakeUp ((uint32_t)0x00600000)

#define IS_RTC_OUTPUT(OUTPUT) (((OUTPUT) == RTC_Output_Disable) || ((OUTPUT) == RTC_Output_AlarmA) || ((OUTPUT) == RTC_Output_AlarmB) || ((OUTPUT) == RTC_Output_WakeUp))
# 414 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_OutputPolarity_High ((uint32_t)0x00000000)
#define RTC_OutputPolarity_Low ((uint32_t)0x00100000)
#define IS_RTC_OUTPUT_POL(POL) (((POL) == RTC_OutputPolarity_High) || ((POL) == RTC_OutputPolarity_Low))
# 425 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_CalibSign_Positive ((uint32_t)0x00000000)
#define RTC_CalibSign_Negative ((uint32_t)0x00000080)
#define IS_RTC_CALIB_SIGN(SIGN) (((SIGN) == RTC_CalibSign_Positive) || ((SIGN) == RTC_CalibSign_Negative))

#define IS_RTC_CALIB_VALUE(VALUE) ((VALUE) < 0x20)
# 438 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_CalibOutput_512Hz ((uint32_t)0x00000000)
#define RTC_CalibOutput_1Hz ((uint32_t)0x00080000)
#define IS_RTC_CALIB_OUTPUT(OUTPUT) (((OUTPUT) == RTC_CalibOutput_512Hz) || ((OUTPUT) == RTC_CalibOutput_1Hz))
# 449 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_SmoothCalibPeriod_32sec ((uint32_t)0x00000000)

#define RTC_SmoothCalibPeriod_16sec ((uint32_t)0x00002000)

#define RTC_SmoothCalibPeriod_8sec ((uint32_t)0x00004000)

#define IS_RTC_SMOOTH_CALIB_PERIOD(PERIOD) (((PERIOD) == RTC_SmoothCalibPeriod_32sec) || ((PERIOD) == RTC_SmoothCalibPeriod_16sec) || ((PERIOD) == RTC_SmoothCalibPeriod_8sec))
# 466 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_SmoothCalibPlusPulses_Set ((uint32_t)0x00008000)


#define RTC_SmoothCalibPlusPulses_Reset ((uint32_t)0x00000000)

#define IS_RTC_SMOOTH_CALIB_PLUS(PLUS) (((PLUS) == RTC_SmoothCalibPlusPulses_Set) || ((PLUS) == RTC_SmoothCalibPlusPulses_Reset))
# 481 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define IS_RTC_SMOOTH_CALIB_MINUS(VALUE) ((VALUE) <= 0x000001FF)
# 490 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_DayLightSaving_SUB1H ((uint32_t)0x00020000)
#define RTC_DayLightSaving_ADD1H ((uint32_t)0x00010000)
#define IS_RTC_DAYLIGHT_SAVING(SAVE) (((SAVE) == RTC_DayLightSaving_SUB1H) || ((SAVE) == RTC_DayLightSaving_ADD1H))


#define RTC_StoreOperation_Reset ((uint32_t)0x00000000)
#define RTC_StoreOperation_Set ((uint32_t)0x00040000)
#define IS_RTC_STORE_OPERATION(OPERATION) (((OPERATION) == RTC_StoreOperation_Reset) || ((OPERATION) == RTC_StoreOperation_Set))
# 506 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_TamperTrigger_RisingEdge ((uint32_t)0x00000000)
#define RTC_TamperTrigger_FallingEdge ((uint32_t)0x00000001)
#define RTC_TamperTrigger_LowLevel ((uint32_t)0x00000000)
#define RTC_TamperTrigger_HighLevel ((uint32_t)0x00000001)
#define IS_RTC_TAMPER_TRIGGER(TRIGGER) (((TRIGGER) == RTC_TamperTrigger_RisingEdge) || ((TRIGGER) == RTC_TamperTrigger_FallingEdge) || ((TRIGGER) == RTC_TamperTrigger_LowLevel) || ((TRIGGER) == RTC_TamperTrigger_HighLevel))
# 522 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_TamperFilter_Disable ((uint32_t)0x00000000)

#define RTC_TamperFilter_2Sample ((uint32_t)0x00000800)

#define RTC_TamperFilter_4Sample ((uint32_t)0x00001000)

#define RTC_TamperFilter_8Sample ((uint32_t)0x00001800)

#define IS_RTC_TAMPER_FILTER(FILTER) (((FILTER) == RTC_TamperFilter_Disable) || ((FILTER) == RTC_TamperFilter_2Sample) || ((FILTER) == RTC_TamperFilter_4Sample) || ((FILTER) == RTC_TamperFilter_8Sample))
# 541 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_TamperSamplingFreq_RTCCLK_Div32768 ((uint32_t)0x00000000)

#define RTC_TamperSamplingFreq_RTCCLK_Div16384 ((uint32_t)0x000000100)

#define RTC_TamperSamplingFreq_RTCCLK_Div8192 ((uint32_t)0x00000200)

#define RTC_TamperSamplingFreq_RTCCLK_Div4096 ((uint32_t)0x00000300)

#define RTC_TamperSamplingFreq_RTCCLK_Div2048 ((uint32_t)0x00000400)

#define RTC_TamperSamplingFreq_RTCCLK_Div1024 ((uint32_t)0x00000500)

#define RTC_TamperSamplingFreq_RTCCLK_Div512 ((uint32_t)0x00000600)

#define RTC_TamperSamplingFreq_RTCCLK_Div256 ((uint32_t)0x00000700)

#define IS_RTC_TAMPER_SAMPLING_FREQ(FREQ) (((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div32768) || ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div16384) || ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div8192) || ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div4096) || ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div2048) || ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div1024) || ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div512) || ((FREQ) ==RTC_TamperSamplingFreq_RTCCLK_Div256))
# 573 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_TamperPrechargeDuration_1RTCCLK ((uint32_t)0x00000000)

#define RTC_TamperPrechargeDuration_2RTCCLK ((uint32_t)0x00002000)

#define RTC_TamperPrechargeDuration_4RTCCLK ((uint32_t)0x00004000)

#define RTC_TamperPrechargeDuration_8RTCCLK ((uint32_t)0x00006000)


#define IS_RTC_TAMPER_PRECHARGE_DURATION(DURATION) (((DURATION) == RTC_TamperPrechargeDuration_1RTCCLK) || ((DURATION) == RTC_TamperPrechargeDuration_2RTCCLK) || ((DURATION) == RTC_TamperPrechargeDuration_4RTCCLK) || ((DURATION) == RTC_TamperPrechargeDuration_8RTCCLK))
# 593 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_Tamper_1 RTC_TAFCR_TAMP1E

#define RTC_Tamper_2 RTC_TAFCR_TAMP2E

#define RTC_Tamper_3 RTC_TAFCR_TAMP3E


#define IS_RTC_TAMPER(TAMPER) ((((TAMPER) & (uint32_t)0xFFFFFFD6) == 0x00) && ((TAMPER) != (uint32_t)RESET))
# 610 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_OutputType_OpenDrain ((uint32_t)0x00000000)
#define RTC_OutputType_PushPull ((uint32_t)0x00040000)
#define IS_RTC_OUTPUT_TYPE(TYPE) (((TYPE) == RTC_OutputType_OpenDrain) || ((TYPE) == RTC_OutputType_PushPull))
# 622 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_ShiftAdd1S_Reset ((uint32_t)0x00000000)
#define RTC_ShiftAdd1S_Set ((uint32_t)0x80000000)
#define IS_RTC_SHIFT_ADD1S(SEL) (((SEL) == RTC_ShiftAdd1S_Reset) || ((SEL) == RTC_ShiftAdd1S_Set))
# 633 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define IS_RTC_SHIFT_SUBFS(FS) ((FS) <= 0x00007FFF)
# 643 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_BKP_DR0 ((uint32_t)0x00000000)
#define RTC_BKP_DR1 ((uint32_t)0x00000001)
#define RTC_BKP_DR2 ((uint32_t)0x00000002)
#define RTC_BKP_DR3 ((uint32_t)0x00000003)
#define RTC_BKP_DR4 ((uint32_t)0x00000004)
#define RTC_BKP_DR5 ((uint32_t)0x00000005)
#define RTC_BKP_DR6 ((uint32_t)0x00000006)
#define RTC_BKP_DR7 ((uint32_t)0x00000007)
#define RTC_BKP_DR8 ((uint32_t)0x00000008)
#define RTC_BKP_DR9 ((uint32_t)0x00000009)
#define RTC_BKP_DR10 ((uint32_t)0x0000000A)
#define RTC_BKP_DR11 ((uint32_t)0x0000000B)
#define RTC_BKP_DR12 ((uint32_t)0x0000000C)
#define RTC_BKP_DR13 ((uint32_t)0x0000000D)
#define RTC_BKP_DR14 ((uint32_t)0x0000000E)
#define RTC_BKP_DR15 ((uint32_t)0x0000000F)
#define IS_RTC_BKP(BKP) (((BKP) == RTC_BKP_DR0) || ((BKP) == RTC_BKP_DR1) || ((BKP) == RTC_BKP_DR2) || ((BKP) == RTC_BKP_DR3) || ((BKP) == RTC_BKP_DR4) || ((BKP) == RTC_BKP_DR5) || ((BKP) == RTC_BKP_DR6) || ((BKP) == RTC_BKP_DR7) || ((BKP) == RTC_BKP_DR8) || ((BKP) == RTC_BKP_DR9) || ((BKP) == RTC_BKP_DR10) || ((BKP) == RTC_BKP_DR11) || ((BKP) == RTC_BKP_DR12) || ((BKP) == RTC_BKP_DR13) || ((BKP) == RTC_BKP_DR14) || ((BKP) == RTC_BKP_DR15))
# 682 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_Format_BIN ((uint32_t)0x000000000)
#define RTC_Format_BCD ((uint32_t)0x000000001)
#define IS_RTC_FORMAT(FORMAT) (((FORMAT) == RTC_Format_BIN) || ((FORMAT) == RTC_Format_BCD))
# 693 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_FLAG_RECALPF ((uint32_t)0x00010000)
#define RTC_FLAG_TAMP3F ((uint32_t)0x00008000)
#define RTC_FLAG_TAMP2F ((uint32_t)0x00004000)
#define RTC_FLAG_TAMP1F ((uint32_t)0x00002000)
#define RTC_FLAG_TSOVF ((uint32_t)0x00001000)
#define RTC_FLAG_TSF ((uint32_t)0x00000800)
#define RTC_FLAG_WUTF ((uint32_t)0x00000400)
#define RTC_FLAG_ALRBF ((uint32_t)0x00000200)
#define RTC_FLAG_ALRAF ((uint32_t)0x00000100)
#define RTC_FLAG_INITF ((uint32_t)0x00000040)
#define RTC_FLAG_RSF ((uint32_t)0x00000020)
#define RTC_FLAG_INITS ((uint32_t)0x00000010)
#define RTC_FLAG_SHPF ((uint32_t)0x00000008)
#define RTC_FLAG_WUTWF ((uint32_t)0x00000004)
#define RTC_FLAG_ALRBWF ((uint32_t)0x00000002)
#define RTC_FLAG_ALRAWF ((uint32_t)0x00000001)
#define IS_RTC_GET_FLAG(FLAG) (((FLAG) == RTC_FLAG_TSOVF) || ((FLAG) == RTC_FLAG_TSF) || ((FLAG) == RTC_FLAG_WUTF) || ((FLAG) == RTC_FLAG_ALRBF) || ((FLAG) == RTC_FLAG_ALRAF) || ((FLAG) == RTC_FLAG_INITF) || ((FLAG) == RTC_FLAG_RSF) || ((FLAG) == RTC_FLAG_WUTWF) || ((FLAG) == RTC_FLAG_ALRBWF) || ((FLAG) == RTC_FLAG_ALRAWF) || ((FLAG) == RTC_FLAG_TAMP1F) || ((FLAG) == RTC_FLAG_TAMP2F) || ((FLAG) == RTC_FLAG_TAMP3F) || ((FLAG) == RTC_FLAG_RECALPF) || ((FLAG) == RTC_FLAG_SHPF))







#define IS_RTC_CLEAR_FLAG(FLAG) (((FLAG) != (uint32_t)RESET) && (((FLAG) & 0xFFFF00DF) == (uint32_t)RESET))
# 726 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
#define RTC_IT_TS ((uint32_t)0x00008000)
#define RTC_IT_WUT ((uint32_t)0x00004000)
#define RTC_IT_ALRB ((uint32_t)0x00002000)
#define RTC_IT_ALRA ((uint32_t)0x00001000)
#define RTC_IT_TAMP ((uint32_t)0x00000004)
#define RTC_IT_TAMP1 ((uint32_t)0x00020000)
#define RTC_IT_TAMP2 ((uint32_t)0x00040000)
#define RTC_IT_TAMP3 ((uint32_t)0x00080000)


#define IS_RTC_CONFIG_IT(IT) (((IT) != (uint32_t)RESET) && (((IT) & 0xFFFF0FFB) == (uint32_t)RESET))
#define IS_RTC_GET_IT(IT) (((IT) == RTC_IT_TS) || ((IT) == RTC_IT_WUT) || ((IT) == RTC_IT_ALRB) || ((IT) == RTC_IT_ALRA) || ((IT) == RTC_IT_TAMP1) || ((IT) == RTC_IT_TAMP2) || ((IT) == RTC_IT_TAMP3))



#define IS_RTC_CLEAR_IT(IT) (((IT) != (uint32_t)RESET) && (((IT) & 0xFFF10FFF) == (uint32_t)RESET))
# 756 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h"
ErrorStatus RTC_DeInit(void);



ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct);
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct);
void RTC_WriteProtectionCmd(FunctionalState NewState);
ErrorStatus RTC_EnterInitMode(void);
void RTC_ExitInitMode(void);
ErrorStatus RTC_WaitForSynchro(void);
ErrorStatus RTC_RefClockCmd(FunctionalState NewState);
void RTC_BypassShadowCmd(FunctionalState NewState);


ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct);
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct);
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct);
uint32_t RTC_GetSubSecond(void);
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct);
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct);
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct);


void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct);
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct);
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct);
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState);
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask);
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm);


void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock);
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter);
uint32_t RTC_GetWakeUpCounter(void);
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState);


void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation);
uint32_t RTC_GetStoreOperation(void);


void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity);


void RTC_CalibOutputCmd(FunctionalState NewState);
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput);
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue);


void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState);
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct,
                                      RTC_DateTypeDef* RTC_StampDateStruct);
uint32_t RTC_GetTimeStampSubSecond(void);


void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger);
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState);
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter);
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq);
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration);
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState);
void RTC_TamperPullUpCmd(FunctionalState NewState);


void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data);
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR);


void RTC_OutputTypeConfig(uint32_t RTC_OutputType);


ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS);


void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState);
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG);
void RTC_ClearFlag(uint32_t RTC_FLAG);
ITStatus RTC_GetITStatus(uint32_t RTC_IT);
void RTC_ClearITPendingBit(uint32_t RTC_IT);
# 51 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define __STM32F30x_SPI_H 
# 54 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
typedef struct
{
  uint16_t SPI_Direction;


  uint16_t SPI_Mode;


  uint16_t SPI_DataSize;


  uint16_t SPI_CPOL;


  uint16_t SPI_CPHA;


  uint16_t SPI_NSS;



  uint16_t SPI_BaudRatePrescaler;





  uint16_t SPI_FirstBit;


  uint16_t SPI_CRCPolynomial;
}SPI_InitTypeDef;






typedef struct
{
  uint16_t I2S_Mode;


  uint16_t I2S_Standard;


  uint16_t I2S_DataFormat;


  uint16_t I2S_MCLKOutput;


  uint32_t I2S_AudioFreq;


  uint16_t I2S_CPOL;

}I2S_InitTypeDef;







#define IS_SPI_ALL_PERIPH(PERIPH) (((PERIPH) == SPI1) || ((PERIPH) == SPI2) || ((PERIPH) == SPI3))



#define IS_SPI_ALL_PERIPH_EXT(PERIPH) (((PERIPH) == SPI1) || ((PERIPH) == SPI2) || ((PERIPH) == SPI3) || ((PERIPH) == I2S2ext) || ((PERIPH) == I2S3ext))





#define IS_SPI_23_PERIPH(PERIPH) (((PERIPH) == SPI2) || ((PERIPH) == SPI3))


#define IS_SPI_23_PERIPH_EXT(PERIPH) (((PERIPH) == SPI2) || ((PERIPH) == SPI3) || ((PERIPH) == I2S2ext) || ((PERIPH) == I2S3ext))




#define IS_I2S_EXT_PERIPH(PERIPH) (((PERIPH) == I2S2ext) || ((PERIPH) == I2S3ext))






#define SPI_Direction_2Lines_FullDuplex ((uint16_t)0x0000)
#define SPI_Direction_2Lines_RxOnly ((uint16_t)0x0400)
#define SPI_Direction_1Line_Rx ((uint16_t)0x8000)
#define SPI_Direction_1Line_Tx ((uint16_t)0xC000)
#define IS_SPI_DIRECTION_MODE(MODE) (((MODE) == SPI_Direction_2Lines_FullDuplex) || ((MODE) == SPI_Direction_2Lines_RxOnly) || ((MODE) == SPI_Direction_1Line_Rx) || ((MODE) == SPI_Direction_1Line_Tx))
# 160 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_Mode_Master ((uint16_t)0x0104)
#define SPI_Mode_Slave ((uint16_t)0x0000)
#define IS_SPI_MODE(MODE) (((MODE) == SPI_Mode_Master) || ((MODE) == SPI_Mode_Slave))
# 172 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_DataSize_4b ((uint16_t)0x0300)
#define SPI_DataSize_5b ((uint16_t)0x0400)
#define SPI_DataSize_6b ((uint16_t)0x0500)
#define SPI_DataSize_7b ((uint16_t)0x0600)
#define SPI_DataSize_8b ((uint16_t)0x0700)
#define SPI_DataSize_9b ((uint16_t)0x0800)
#define SPI_DataSize_10b ((uint16_t)0x0900)
#define SPI_DataSize_11b ((uint16_t)0x0A00)
#define SPI_DataSize_12b ((uint16_t)0x0B00)
#define SPI_DataSize_13b ((uint16_t)0x0C00)
#define SPI_DataSize_14b ((uint16_t)0x0D00)
#define SPI_DataSize_15b ((uint16_t)0x0E00)
#define SPI_DataSize_16b ((uint16_t)0x0F00)
#define IS_SPI_DATA_SIZE(SIZE) (((SIZE) == SPI_DataSize_4b) || ((SIZE) == SPI_DataSize_5b) || ((SIZE) == SPI_DataSize_6b) || ((SIZE) == SPI_DataSize_7b) || ((SIZE) == SPI_DataSize_8b) || ((SIZE) == SPI_DataSize_9b) || ((SIZE) == SPI_DataSize_10b) || ((SIZE) == SPI_DataSize_11b) || ((SIZE) == SPI_DataSize_12b) || ((SIZE) == SPI_DataSize_13b) || ((SIZE) == SPI_DataSize_14b) || ((SIZE) == SPI_DataSize_15b) || ((SIZE) == SPI_DataSize_16b))
# 206 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_CRCLength_8b ((uint16_t)0x0000)
#define SPI_CRCLength_16b ((uint16_t)0x0800)
#define IS_SPI_CRC_LENGTH(LENGTH) (((LENGTH) == SPI_CRCLength_8b) || ((LENGTH) == SPI_CRCLength_16b))
# 218 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_CPOL_Low ((uint16_t)0x0000)
#define SPI_CPOL_High ((uint16_t)0x0002)
#define IS_SPI_CPOL(CPOL) (((CPOL) == SPI_CPOL_Low) || ((CPOL) == SPI_CPOL_High))
# 230 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_CPHA_1Edge ((uint16_t)0x0000)
#define SPI_CPHA_2Edge ((uint16_t)0x0001)
#define IS_SPI_CPHA(CPHA) (((CPHA) == SPI_CPHA_1Edge) || ((CPHA) == SPI_CPHA_2Edge))
# 242 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_NSS_Soft ((uint16_t)0x0200)
#define SPI_NSS_Hard ((uint16_t)0x0000)
#define IS_SPI_NSS(NSS) (((NSS) == SPI_NSS_Soft) || ((NSS) == SPI_NSS_Hard))
# 254 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_BaudRatePrescaler_2 ((uint16_t)0x0000)
#define SPI_BaudRatePrescaler_4 ((uint16_t)0x0008)
#define SPI_BaudRatePrescaler_8 ((uint16_t)0x0010)
#define SPI_BaudRatePrescaler_16 ((uint16_t)0x0018)
#define SPI_BaudRatePrescaler_32 ((uint16_t)0x0020)
#define SPI_BaudRatePrescaler_64 ((uint16_t)0x0028)
#define SPI_BaudRatePrescaler_128 ((uint16_t)0x0030)
#define SPI_BaudRatePrescaler_256 ((uint16_t)0x0038)
#define IS_SPI_BAUDRATE_PRESCALER(PRESCALER) (((PRESCALER) == SPI_BaudRatePrescaler_2) || ((PRESCALER) == SPI_BaudRatePrescaler_4) || ((PRESCALER) == SPI_BaudRatePrescaler_8) || ((PRESCALER) == SPI_BaudRatePrescaler_16) || ((PRESCALER) == SPI_BaudRatePrescaler_32) || ((PRESCALER) == SPI_BaudRatePrescaler_64) || ((PRESCALER) == SPI_BaudRatePrescaler_128) || ((PRESCALER) == SPI_BaudRatePrescaler_256))
# 278 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_FirstBit_MSB ((uint16_t)0x0000)
#define SPI_FirstBit_LSB ((uint16_t)0x0080)
#define IS_SPI_FIRST_BIT(BIT) (((BIT) == SPI_FirstBit_MSB) || ((BIT) == SPI_FirstBit_LSB))
# 290 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define I2S_Mode_SlaveTx ((uint16_t)0x0000)
#define I2S_Mode_SlaveRx ((uint16_t)0x0100)
#define I2S_Mode_MasterTx ((uint16_t)0x0200)
#define I2S_Mode_MasterRx ((uint16_t)0x0300)
#define IS_I2S_MODE(MODE) (((MODE) == I2S_Mode_SlaveTx) || ((MODE) == I2S_Mode_SlaveRx) || ((MODE) == I2S_Mode_MasterTx)|| ((MODE) == I2S_Mode_MasterRx))
# 306 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define I2S_Standard_Phillips ((uint16_t)0x0000)
#define I2S_Standard_MSB ((uint16_t)0x0010)
#define I2S_Standard_LSB ((uint16_t)0x0020)
#define I2S_Standard_PCMShort ((uint16_t)0x0030)
#define I2S_Standard_PCMLong ((uint16_t)0x00B0)
#define IS_I2S_STANDARD(STANDARD) (((STANDARD) == I2S_Standard_Phillips) || ((STANDARD) == I2S_Standard_MSB) || ((STANDARD) == I2S_Standard_LSB) || ((STANDARD) == I2S_Standard_PCMShort) || ((STANDARD) == I2S_Standard_PCMLong))
# 324 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define I2S_DataFormat_16b ((uint16_t)0x0000)
#define I2S_DataFormat_16bextended ((uint16_t)0x0001)
#define I2S_DataFormat_24b ((uint16_t)0x0003)
#define I2S_DataFormat_32b ((uint16_t)0x0005)
#define IS_I2S_DATA_FORMAT(FORMAT) (((FORMAT) == I2S_DataFormat_16b) || ((FORMAT) == I2S_DataFormat_16bextended) || ((FORMAT) == I2S_DataFormat_24b) || ((FORMAT) == I2S_DataFormat_32b))
# 340 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define I2S_MCLKOutput_Enable ((uint16_t)0x0200)
#define I2S_MCLKOutput_Disable ((uint16_t)0x0000)
#define IS_I2S_MCLK_OUTPUT(OUTPUT) (((OUTPUT) == I2S_MCLKOutput_Enable) || ((OUTPUT) == I2S_MCLKOutput_Disable))
# 352 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define I2S_AudioFreq_192k ((uint32_t)192000)
#define I2S_AudioFreq_96k ((uint32_t)96000)
#define I2S_AudioFreq_48k ((uint32_t)48000)
#define I2S_AudioFreq_44k ((uint32_t)44100)
#define I2S_AudioFreq_32k ((uint32_t)32000)
#define I2S_AudioFreq_22k ((uint32_t)22050)
#define I2S_AudioFreq_16k ((uint32_t)16000)
#define I2S_AudioFreq_11k ((uint32_t)11025)
#define I2S_AudioFreq_8k ((uint32_t)8000)
#define I2S_AudioFreq_Default ((uint32_t)2)

#define IS_I2S_AUDIO_FREQ(FREQ) ((((FREQ) >= I2S_AudioFreq_8k) && ((FREQ) <= I2S_AudioFreq_192k)) || ((FREQ) == I2S_AudioFreq_Default))
# 374 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define I2S_CPOL_Low ((uint16_t)0x0000)
#define I2S_CPOL_High ((uint16_t)0x0008)
#define IS_I2S_CPOL(CPOL) (((CPOL) == I2S_CPOL_Low) || ((CPOL) == I2S_CPOL_High))
# 386 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_RxFIFOThreshold_HF ((uint16_t)0x0000)
#define SPI_RxFIFOThreshold_QF ((uint16_t)0x1000)
#define IS_SPI_RX_FIFO_THRESHOLD(THRESHOLD) (((THRESHOLD) == SPI_RxFIFOThreshold_HF) || ((THRESHOLD) == SPI_RxFIFOThreshold_QF))
# 398 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_I2S_DMAReq_Tx ((uint16_t)0x0002)
#define SPI_I2S_DMAReq_Rx ((uint16_t)0x0001)
#define IS_SPI_I2S_DMA_REQ(REQ) ((((REQ) & (uint16_t)0xFFFC) == 0x00) && ((REQ) != 0x00))
# 409 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_LastDMATransfer_TxEvenRxEven ((uint16_t)0x0000)
#define SPI_LastDMATransfer_TxOddRxEven ((uint16_t)0x4000)
#define SPI_LastDMATransfer_TxEvenRxOdd ((uint16_t)0x2000)
#define SPI_LastDMATransfer_TxOddRxOdd ((uint16_t)0x6000)
#define IS_SPI_LAST_DMA_TRANSFER(TRANSFER) (((TRANSFER) == SPI_LastDMATransfer_TxEvenRxEven) || ((TRANSFER) == SPI_LastDMATransfer_TxOddRxEven) || ((TRANSFER) == SPI_LastDMATransfer_TxEvenRxOdd) || ((TRANSFER) == SPI_LastDMATransfer_TxOddRxOdd))
# 424 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_NSSInternalSoft_Set ((uint16_t)0x0100)
#define SPI_NSSInternalSoft_Reset ((uint16_t)0xFEFF)
#define IS_SPI_NSS_INTERNAL(INTERNAL) (((INTERNAL) == SPI_NSSInternalSoft_Set) || ((INTERNAL) == SPI_NSSInternalSoft_Reset))
# 436 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_CRC_Tx ((uint8_t)0x00)
#define SPI_CRC_Rx ((uint8_t)0x01)
#define IS_SPI_CRC(CRC) (((CRC) == SPI_CRC_Tx) || ((CRC) == SPI_CRC_Rx))
# 447 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_Direction_Rx ((uint16_t)0xBFFF)
#define SPI_Direction_Tx ((uint16_t)0x4000)
#define IS_SPI_DIRECTION(DIRECTION) (((DIRECTION) == SPI_Direction_Rx) || ((DIRECTION) == SPI_Direction_Tx))
# 459 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_I2S_IT_TXE ((uint8_t)0x71)
#define SPI_I2S_IT_RXNE ((uint8_t)0x60)
#define SPI_I2S_IT_ERR ((uint8_t)0x50)

#define IS_SPI_I2S_CONFIG_IT(IT) (((IT) == SPI_I2S_IT_TXE) || ((IT) == SPI_I2S_IT_RXNE) || ((IT) == SPI_I2S_IT_ERR))



#define I2S_IT_UDR ((uint8_t)0x53)
#define SPI_IT_MODF ((uint8_t)0x55)
#define SPI_I2S_IT_OVR ((uint8_t)0x56)
#define SPI_I2S_IT_FRE ((uint8_t)0x58)

#define IS_SPI_I2S_GET_IT(IT) (((IT) == SPI_I2S_IT_RXNE) || ((IT) == SPI_I2S_IT_TXE) || ((IT) == SPI_I2S_IT_OVR) || ((IT) == SPI_IT_MODF) || ((IT) == SPI_I2S_IT_FRE)|| ((IT) == I2S_IT_UDR))
# 484 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_TransmissionFIFOStatus_Empty ((uint16_t)0x0000)
#define SPI_TransmissionFIFOStatus_1QuarterFull ((uint16_t)0x0800)
#define SPI_TransmissionFIFOStatus_HalfFull ((uint16_t)0x1000)
#define SPI_TransmissionFIFOStatus_Full ((uint16_t)0x1800)
# 496 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_ReceptionFIFOStatus_Empty ((uint16_t)0x0000)
#define SPI_ReceptionFIFOStatus_1QuarterFull ((uint16_t)0x0200)
#define SPI_ReceptionFIFOStatus_HalfFull ((uint16_t)0x0400)
#define SPI_ReceptionFIFOStatus_Full ((uint16_t)0x0600)
# 510 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define SPI_I2S_FLAG_RXNE ((uint16_t)0x0001)
#define SPI_I2S_FLAG_TXE ((uint16_t)0x0002)
#define I2S_FLAG_CHSIDE ((uint16_t)0x0004)
#define I2S_FLAG_UDR ((uint16_t)0x0008)
#define SPI_FLAG_CRCERR ((uint16_t)0x0010)
#define SPI_FLAG_MODF ((uint16_t)0x0020)
#define SPI_I2S_FLAG_OVR ((uint16_t)0x0040)
#define SPI_I2S_FLAG_BSY ((uint16_t)0x0080)
#define SPI_I2S_FLAG_FRE ((uint16_t)0x0100)



#define IS_SPI_CLEAR_FLAG(FLAG) (((FLAG) == SPI_FLAG_CRCERR))
#define IS_SPI_I2S_GET_FLAG(FLAG) (((FLAG) == SPI_I2S_FLAG_BSY) || ((FLAG) == SPI_I2S_FLAG_OVR) || ((FLAG) == SPI_FLAG_MODF) || ((FLAG) == SPI_FLAG_CRCERR) || ((FLAG) == SPI_I2S_FLAG_TXE) || ((FLAG) == SPI_I2S_FLAG_RXNE)|| ((FLAG) == SPI_I2S_FLAG_FRE)|| ((FLAG) == I2S_FLAG_CHSIDE)|| ((FLAG) == I2S_FLAG_UDR))
# 536 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
#define IS_SPI_CRC_POLYNOMIAL(POLYNOMIAL) ((POLYNOMIAL) >= 0x1)
# 549 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h"
void SPI_I2S_DeInit(SPI_TypeDef* SPIx);


void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct);
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct);
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct);
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct);
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize);
void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold);
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction);
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct);


void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data);
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data);
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx);
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx);


void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength);
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState);
void SPI_TransmitCRC(SPI_TypeDef* SPIx);
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC);
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx);


void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer);


void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx);
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx);
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
# 52 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define __STM32F30x_TIM_H 
# 55 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
typedef struct
{
  uint16_t TIM_Prescaler;


  uint16_t TIM_CounterMode;


  uint32_t TIM_Period;



  uint16_t TIM_ClockDivision;


  uint16_t TIM_RepetitionCounter;







} TIM_TimeBaseInitTypeDef;





typedef struct
{
  uint32_t TIM_OCMode;


  uint16_t TIM_OutputState;


  uint16_t TIM_OutputNState;



  uint32_t TIM_Pulse;


  uint16_t TIM_OCPolarity;


  uint16_t TIM_OCNPolarity;



  uint16_t TIM_OCIdleState;



  uint16_t TIM_OCNIdleState;


} TIM_OCInitTypeDef;





typedef struct
{

  uint16_t TIM_Channel;


  uint16_t TIM_ICPolarity;


  uint16_t TIM_ICSelection;


  uint16_t TIM_ICPrescaler;


  uint16_t TIM_ICFilter;

} TIM_ICInitTypeDef;






typedef struct
{

  uint16_t TIM_OSSRState;


  uint16_t TIM_OSSIState;


  uint16_t TIM_LOCKLevel;


  uint16_t TIM_DeadTime;



  uint16_t TIM_Break;


  uint16_t TIM_BreakPolarity;


  uint16_t TIM_AutomaticOutput;

} TIM_BDTRInitTypeDef;







#define IS_TIM_ALL_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM6) || ((PERIPH) == TIM7) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15) || ((PERIPH) == TIM16) || ((PERIPH) == TIM17))
# 186 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define IS_TIM_LIST1_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15) || ((PERIPH) == TIM16) || ((PERIPH) == TIM17))
# 196 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define IS_TIM_LIST2_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15))






#define IS_TIM_LIST3_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM8))





#define IS_TIM_LIST4_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM8))


#define IS_TIM_LIST5_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM6) || ((PERIPH) == TIM7) || ((PERIPH) == TIM8))







#define IS_TIM_LIST6_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15) || ((PERIPH) == TIM16) || ((PERIPH) == TIM17))






#define IS_TIM_LIST7_PERIPH(PERIPH) (((PERIPH) == TIM1) || ((PERIPH) == TIM2) || ((PERIPH) == TIM3) || ((PERIPH) == TIM4) || ((PERIPH) == TIM6) || ((PERIPH) == TIM7) || ((PERIPH) == TIM8) || ((PERIPH) == TIM15))
# 236 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define IS_TIM_LIST8_PERIPH(PERIPH) (((PERIPH) == TIM16)|| ((PERIPH) == TIM1)|| ((PERIPH) == TIM8))







#define TIM_OCMode_Timing ((uint32_t)0x00000)
#define TIM_OCMode_Active ((uint32_t)0x00010)
#define TIM_OCMode_Inactive ((uint32_t)0x00020)
#define TIM_OCMode_Toggle ((uint32_t)0x00030)
#define TIM_OCMode_PWM1 ((uint32_t)0x00060)
#define TIM_OCMode_PWM2 ((uint32_t)0x00070)

#define TIM_OCMode_Retrigerrable_OPM1 ((uint32_t)0x10000)
#define TIM_OCMode_Retrigerrable_OPM2 ((uint32_t)0x10010)
#define TIM_OCMode_Combined_PWM1 ((uint32_t)0x10040)
#define TIM_OCMode_Combined_PWM2 ((uint32_t)0x10050)
#define TIM_OCMode_Asymmetric_PWM1 ((uint32_t)0x10060)
#define TIM_OCMode_Asymmetric_PWM2 ((uint32_t)0x10070)

#define IS_TIM_OC_MODE(MODE) (((MODE) == TIM_OCMode_Timing) || ((MODE) == TIM_OCMode_Active) || ((MODE) == TIM_OCMode_Inactive) || ((MODE) == TIM_OCMode_Toggle)|| ((MODE) == TIM_OCMode_PWM1) || ((MODE) == TIM_OCMode_PWM2) || ((MODE) == TIM_OCMode_Retrigerrable_OPM1) || ((MODE) == TIM_OCMode_Retrigerrable_OPM2) || ((MODE) == TIM_OCMode_Combined_PWM1) || ((MODE) == TIM_OCMode_Combined_PWM2) || ((MODE) == TIM_OCMode_Asymmetric_PWM1) || ((MODE) == TIM_OCMode_Asymmetric_PWM2))
# 271 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define IS_TIM_OCM(MODE) (((MODE) == TIM_OCMode_Timing) || ((MODE) == TIM_OCMode_Active) || ((MODE) == TIM_OCMode_Inactive) || ((MODE) == TIM_OCMode_Toggle)|| ((MODE) == TIM_OCMode_PWM1) || ((MODE) == TIM_OCMode_PWM2) || ((MODE) == TIM_ForcedAction_Active) || ((MODE) == TIM_ForcedAction_InActive) || ((MODE) == TIM_OCMode_Retrigerrable_OPM1) || ((MODE) == TIM_OCMode_Retrigerrable_OPM2) || ((MODE) == TIM_OCMode_Combined_PWM1) || ((MODE) == TIM_OCMode_Combined_PWM2) || ((MODE) == TIM_OCMode_Asymmetric_PWM1) || ((MODE) == TIM_OCMode_Asymmetric_PWM2))
# 293 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OPMode_Single ((uint16_t)0x0008)
#define TIM_OPMode_Repetitive ((uint16_t)0x0000)
#define IS_TIM_OPM_MODE(MODE) (((MODE) == TIM_OPMode_Single) || ((MODE) == TIM_OPMode_Repetitive))
# 305 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_Channel_1 ((uint16_t)0x0000)
#define TIM_Channel_2 ((uint16_t)0x0004)
#define TIM_Channel_3 ((uint16_t)0x0008)
#define TIM_Channel_4 ((uint16_t)0x000C)
#define TIM_Channel_5 ((uint16_t)0x0010)
#define TIM_Channel_6 ((uint16_t)0x0014)

#define IS_TIM_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || ((CHANNEL) == TIM_Channel_2) || ((CHANNEL) == TIM_Channel_3) || ((CHANNEL) == TIM_Channel_4))




#define IS_TIM_PWMI_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || ((CHANNEL) == TIM_Channel_2))

#define IS_TIM_COMPLEMENTARY_CHANNEL(CHANNEL) (((CHANNEL) == TIM_Channel_1) || ((CHANNEL) == TIM_Channel_2) || ((CHANNEL) == TIM_Channel_3))
# 330 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_CKD_DIV1 ((uint16_t)0x0000)
#define TIM_CKD_DIV2 ((uint16_t)0x0100)
#define TIM_CKD_DIV4 ((uint16_t)0x0200)
#define IS_TIM_CKD_DIV(DIV) (((DIV) == TIM_CKD_DIV1) || ((DIV) == TIM_CKD_DIV2) || ((DIV) == TIM_CKD_DIV4))
# 344 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_CounterMode_Up ((uint16_t)0x0000)
#define TIM_CounterMode_Down ((uint16_t)0x0010)
#define TIM_CounterMode_CenterAligned1 ((uint16_t)0x0020)
#define TIM_CounterMode_CenterAligned2 ((uint16_t)0x0040)
#define TIM_CounterMode_CenterAligned3 ((uint16_t)0x0060)
#define IS_TIM_COUNTER_MODE(MODE) (((MODE) == TIM_CounterMode_Up) || ((MODE) == TIM_CounterMode_Down) || ((MODE) == TIM_CounterMode_CenterAligned1) || ((MODE) == TIM_CounterMode_CenterAligned2) || ((MODE) == TIM_CounterMode_CenterAligned3))
# 362 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OCPolarity_High ((uint16_t)0x0000)
#define TIM_OCPolarity_Low ((uint16_t)0x0002)
#define IS_TIM_OC_POLARITY(POLARITY) (((POLARITY) == TIM_OCPolarity_High) || ((POLARITY) == TIM_OCPolarity_Low))
# 374 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OCNPolarity_High ((uint16_t)0x0000)
#define TIM_OCNPolarity_Low ((uint16_t)0x0008)
#define IS_TIM_OCN_POLARITY(POLARITY) (((POLARITY) == TIM_OCNPolarity_High) || ((POLARITY) == TIM_OCNPolarity_Low))
# 386 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OutputState_Disable ((uint16_t)0x0000)
#define TIM_OutputState_Enable ((uint16_t)0x0001)
#define IS_TIM_OUTPUT_STATE(STATE) (((STATE) == TIM_OutputState_Disable) || ((STATE) == TIM_OutputState_Enable))
# 398 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OutputNState_Disable ((uint16_t)0x0000)
#define TIM_OutputNState_Enable ((uint16_t)0x0004)
#define IS_TIM_OUTPUTN_STATE(STATE) (((STATE) == TIM_OutputNState_Disable) || ((STATE) == TIM_OutputNState_Enable))
# 410 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_CCx_Enable ((uint16_t)0x0001)
#define TIM_CCx_Disable ((uint16_t)0x0000)
#define IS_TIM_CCX(CCX) (((CCX) == TIM_CCx_Enable) || ((CCX) == TIM_CCx_Disable))
# 422 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_CCxN_Enable ((uint16_t)0x0004)
#define TIM_CCxN_Disable ((uint16_t)0x0000)
#define IS_TIM_CCXN(CCXN) (((CCXN) == TIM_CCxN_Enable) || ((CCXN) == TIM_CCxN_Disable))
# 434 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_Break_Enable ((uint16_t)0x1000)
#define TIM_Break_Disable ((uint16_t)0x0000)
#define IS_TIM_BREAK_STATE(STATE) (((STATE) == TIM_Break_Enable) || ((STATE) == TIM_Break_Disable))
# 446 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_Break1_Enable ((uint32_t)0x00001000)
#define TIM_Break1_Disable ((uint32_t)0x00000000)
#define IS_TIM_BREAK1_STATE(STATE) (((STATE) == TIM_Break1_Enable) || ((STATE) == TIM_Break1_Disable))
# 458 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_Break2_Enable ((uint32_t)0x01000000)
#define TIM_Break2_Disable ((uint32_t)0x00000000)
#define IS_TIM_BREAK2_STATE(STATE) (((STATE) == TIM_Break2_Enable) || ((STATE) == TIM_Break2_Disable))
# 470 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_BreakPolarity_Low ((uint16_t)0x0000)
#define TIM_BreakPolarity_High ((uint16_t)0x2000)
#define IS_TIM_BREAK_POLARITY(POLARITY) (((POLARITY) == TIM_BreakPolarity_Low) || ((POLARITY) == TIM_BreakPolarity_High))
# 482 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_Break1Polarity_Low ((uint32_t)0x00000000)
#define TIM_Break1Polarity_High ((uint32_t)0x00002000)
#define IS_TIM_BREAK1_POLARITY(POLARITY) (((POLARITY) == TIM_Break1Polarity_Low) || ((POLARITY) == TIM_Break1Polarity_High))
# 494 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_Break2Polarity_Low ((uint32_t)0x00000000)
#define TIM_Break2Polarity_High ((uint32_t)0x02000000)
#define IS_TIM_BREAK2_POLARITY(POLARITY) (((POLARITY) == TIM_Break2Polarity_Low) || ((POLARITY) == TIM_Break2Polarity_High))
# 506 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define IS_TIM_BREAK1_FILTER(FILTER) ((FILTER) <= 0xF)
# 515 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define IS_TIM_BREAK2_FILTER(FILTER) ((FILTER) <= 0xF)
# 524 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_AutomaticOutput_Enable ((uint16_t)0x4000)
#define TIM_AutomaticOutput_Disable ((uint16_t)0x0000)
#define IS_TIM_AUTOMATIC_OUTPUT_STATE(STATE) (((STATE) == TIM_AutomaticOutput_Enable) || ((STATE) == TIM_AutomaticOutput_Disable))
# 536 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_LOCKLevel_OFF ((uint16_t)0x0000)
#define TIM_LOCKLevel_1 ((uint16_t)0x0100)
#define TIM_LOCKLevel_2 ((uint16_t)0x0200)
#define TIM_LOCKLevel_3 ((uint16_t)0x0300)
#define IS_TIM_LOCK_LEVEL(LEVEL) (((LEVEL) == TIM_LOCKLevel_OFF) || ((LEVEL) == TIM_LOCKLevel_1) || ((LEVEL) == TIM_LOCKLevel_2) || ((LEVEL) == TIM_LOCKLevel_3))
# 552 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OSSIState_Enable ((uint16_t)0x0400)
#define TIM_OSSIState_Disable ((uint16_t)0x0000)
#define IS_TIM_OSSI_STATE(STATE) (((STATE) == TIM_OSSIState_Enable) || ((STATE) == TIM_OSSIState_Disable))
# 564 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OSSRState_Enable ((uint16_t)0x0800)
#define TIM_OSSRState_Disable ((uint16_t)0x0000)
#define IS_TIM_OSSR_STATE(STATE) (((STATE) == TIM_OSSRState_Enable) || ((STATE) == TIM_OSSRState_Disable))
# 576 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OCIdleState_Set ((uint16_t)0x0100)
#define TIM_OCIdleState_Reset ((uint16_t)0x0000)
#define IS_TIM_OCIDLE_STATE(STATE) (((STATE) == TIM_OCIdleState_Set) || ((STATE) == TIM_OCIdleState_Reset))
# 588 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OCNIdleState_Set ((uint16_t)0x0200)
#define TIM_OCNIdleState_Reset ((uint16_t)0x0000)
#define IS_TIM_OCNIDLE_STATE(STATE) (((STATE) == TIM_OCNIdleState_Set) || ((STATE) == TIM_OCNIdleState_Reset))
# 600 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_ICPolarity_Rising ((uint16_t)0x0000)
#define TIM_ICPolarity_Falling ((uint16_t)0x0002)
#define TIM_ICPolarity_BothEdge ((uint16_t)0x000A)
#define IS_TIM_IC_POLARITY(POLARITY) (((POLARITY) == TIM_ICPolarity_Rising) || ((POLARITY) == TIM_ICPolarity_Falling)|| ((POLARITY) == TIM_ICPolarity_BothEdge))
# 614 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_ICSelection_DirectTI ((uint16_t)0x0001)

#define TIM_ICSelection_IndirectTI ((uint16_t)0x0002)

#define TIM_ICSelection_TRC ((uint16_t)0x0003)
#define IS_TIM_IC_SELECTION(SELECTION) (((SELECTION) == TIM_ICSelection_DirectTI) || ((SELECTION) == TIM_ICSelection_IndirectTI) || ((SELECTION) == TIM_ICSelection_TRC))
# 630 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_ICPSC_DIV1 ((uint16_t)0x0000)
#define TIM_ICPSC_DIV2 ((uint16_t)0x0004)
#define TIM_ICPSC_DIV4 ((uint16_t)0x0008)
#define TIM_ICPSC_DIV8 ((uint16_t)0x000C)
#define IS_TIM_IC_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ICPSC_DIV1) || ((PRESCALER) == TIM_ICPSC_DIV2) || ((PRESCALER) == TIM_ICPSC_DIV4) || ((PRESCALER) == TIM_ICPSC_DIV8))
# 646 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_IT_Update ((uint16_t)0x0001)
#define TIM_IT_CC1 ((uint16_t)0x0002)
#define TIM_IT_CC2 ((uint16_t)0x0004)
#define TIM_IT_CC3 ((uint16_t)0x0008)
#define TIM_IT_CC4 ((uint16_t)0x0010)
#define TIM_IT_COM ((uint16_t)0x0020)
#define TIM_IT_Trigger ((uint16_t)0x0040)
#define TIM_IT_Break ((uint16_t)0x0080)
#define IS_TIM_IT(IT) ((((IT) & (uint16_t)0xFF00) == 0x0000) && ((IT) != 0x0000))

#define IS_TIM_GET_IT(IT) (((IT) == TIM_IT_Update) || ((IT) == TIM_IT_CC1) || ((IT) == TIM_IT_CC2) || ((IT) == TIM_IT_CC3) || ((IT) == TIM_IT_CC4) || ((IT) == TIM_IT_COM) || ((IT) == TIM_IT_Trigger) || ((IT) == TIM_IT_Break))
# 672 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_DMABase_CR1 ((uint16_t)0x0000)
#define TIM_DMABase_CR2 ((uint16_t)0x0001)
#define TIM_DMABase_SMCR ((uint16_t)0x0002)
#define TIM_DMABase_DIER ((uint16_t)0x0003)
#define TIM_DMABase_SR ((uint16_t)0x0004)
#define TIM_DMABase_EGR ((uint16_t)0x0005)
#define TIM_DMABase_CCMR1 ((uint16_t)0x0006)
#define TIM_DMABase_CCMR2 ((uint16_t)0x0007)
#define TIM_DMABase_CCER ((uint16_t)0x0008)
#define TIM_DMABase_CNT ((uint16_t)0x0009)
#define TIM_DMABase_PSC ((uint16_t)0x000A)
#define TIM_DMABase_ARR ((uint16_t)0x000B)
#define TIM_DMABase_RCR ((uint16_t)0x000C)
#define TIM_DMABase_CCR1 ((uint16_t)0x000D)
#define TIM_DMABase_CCR2 ((uint16_t)0x000E)
#define TIM_DMABase_CCR3 ((uint16_t)0x000F)
#define TIM_DMABase_CCR4 ((uint16_t)0x0010)
#define TIM_DMABase_BDTR ((uint16_t)0x0011)
#define TIM_DMABase_DCR ((uint16_t)0x0012)
#define TIM_DMABase_OR ((uint16_t)0x0013)
#define TIM_DMABase_CCMR3 ((uint16_t)0x0014)
#define TIM_DMABase_CCR5 ((uint16_t)0x0015)
#define TIM_DMABase_CCR6 ((uint16_t)0x0016)
#define IS_TIM_DMA_BASE(BASE) (((BASE) == TIM_DMABase_CR1) || ((BASE) == TIM_DMABase_CR2) || ((BASE) == TIM_DMABase_SMCR) || ((BASE) == TIM_DMABase_DIER) || ((BASE) == TIM_DMABase_SR) || ((BASE) == TIM_DMABase_EGR) || ((BASE) == TIM_DMABase_CCMR1) || ((BASE) == TIM_DMABase_CCMR2) || ((BASE) == TIM_DMABase_CCER) || ((BASE) == TIM_DMABase_CNT) || ((BASE) == TIM_DMABase_PSC) || ((BASE) == TIM_DMABase_ARR) || ((BASE) == TIM_DMABase_RCR) || ((BASE) == TIM_DMABase_CCR1) || ((BASE) == TIM_DMABase_CCR2) || ((BASE) == TIM_DMABase_CCR3) || ((BASE) == TIM_DMABase_CCR4) || ((BASE) == TIM_DMABase_BDTR) || ((BASE) == TIM_DMABase_DCR) || ((BASE) == TIM_DMABase_OR) || ((BASE) == TIM_DMABase_CCMR3) || ((BASE) == TIM_DMABase_CCR5) || ((BASE) == TIM_DMABase_CCR6))
# 726 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_DMABurstLength_1Transfer ((uint16_t)0x0000)
#define TIM_DMABurstLength_2Transfers ((uint16_t)0x0100)
#define TIM_DMABurstLength_3Transfers ((uint16_t)0x0200)
#define TIM_DMABurstLength_4Transfers ((uint16_t)0x0300)
#define TIM_DMABurstLength_5Transfers ((uint16_t)0x0400)
#define TIM_DMABurstLength_6Transfers ((uint16_t)0x0500)
#define TIM_DMABurstLength_7Transfers ((uint16_t)0x0600)
#define TIM_DMABurstLength_8Transfers ((uint16_t)0x0700)
#define TIM_DMABurstLength_9Transfers ((uint16_t)0x0800)
#define TIM_DMABurstLength_10Transfers ((uint16_t)0x0900)
#define TIM_DMABurstLength_11Transfers ((uint16_t)0x0A00)
#define TIM_DMABurstLength_12Transfers ((uint16_t)0x0B00)
#define TIM_DMABurstLength_13Transfers ((uint16_t)0x0C00)
#define TIM_DMABurstLength_14Transfers ((uint16_t)0x0D00)
#define TIM_DMABurstLength_15Transfers ((uint16_t)0x0E00)
#define TIM_DMABurstLength_16Transfers ((uint16_t)0x0F00)
#define TIM_DMABurstLength_17Transfers ((uint16_t)0x1000)
#define TIM_DMABurstLength_18Transfers ((uint16_t)0x1100)
#define IS_TIM_DMA_LENGTH(LENGTH) (((LENGTH) == TIM_DMABurstLength_1Transfer) || ((LENGTH) == TIM_DMABurstLength_2Transfers) || ((LENGTH) == TIM_DMABurstLength_3Transfers) || ((LENGTH) == TIM_DMABurstLength_4Transfers) || ((LENGTH) == TIM_DMABurstLength_5Transfers) || ((LENGTH) == TIM_DMABurstLength_6Transfers) || ((LENGTH) == TIM_DMABurstLength_7Transfers) || ((LENGTH) == TIM_DMABurstLength_8Transfers) || ((LENGTH) == TIM_DMABurstLength_9Transfers) || ((LENGTH) == TIM_DMABurstLength_10Transfers) || ((LENGTH) == TIM_DMABurstLength_11Transfers) || ((LENGTH) == TIM_DMABurstLength_12Transfers) || ((LENGTH) == TIM_DMABurstLength_13Transfers) || ((LENGTH) == TIM_DMABurstLength_14Transfers) || ((LENGTH) == TIM_DMABurstLength_15Transfers) || ((LENGTH) == TIM_DMABurstLength_16Transfers) || ((LENGTH) == TIM_DMABurstLength_17Transfers) || ((LENGTH) == TIM_DMABurstLength_18Transfers))
# 770 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_DMA_Update ((uint16_t)0x0100)
#define TIM_DMA_CC1 ((uint16_t)0x0200)
#define TIM_DMA_CC2 ((uint16_t)0x0400)
#define TIM_DMA_CC3 ((uint16_t)0x0800)
#define TIM_DMA_CC4 ((uint16_t)0x1000)
#define TIM_DMA_COM ((uint16_t)0x2000)
#define TIM_DMA_Trigger ((uint16_t)0x4000)
#define IS_TIM_DMA_SOURCE(SOURCE) ((((SOURCE) & (uint16_t)0x80FF) == 0x0000) && ((SOURCE) != 0x0000))
# 787 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_ExtTRGPSC_OFF ((uint16_t)0x0000)
#define TIM_ExtTRGPSC_DIV2 ((uint16_t)0x1000)
#define TIM_ExtTRGPSC_DIV4 ((uint16_t)0x2000)
#define TIM_ExtTRGPSC_DIV8 ((uint16_t)0x3000)
#define IS_TIM_EXT_PRESCALER(PRESCALER) (((PRESCALER) == TIM_ExtTRGPSC_OFF) || ((PRESCALER) == TIM_ExtTRGPSC_DIV2) || ((PRESCALER) == TIM_ExtTRGPSC_DIV4) || ((PRESCALER) == TIM_ExtTRGPSC_DIV8))
# 803 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_TS_ITR0 ((uint16_t)0x0000)
#define TIM_TS_ITR1 ((uint16_t)0x0010)
#define TIM_TS_ITR2 ((uint16_t)0x0020)
#define TIM_TS_ITR3 ((uint16_t)0x0030)
#define TIM_TS_TI1F_ED ((uint16_t)0x0040)
#define TIM_TS_TI1FP1 ((uint16_t)0x0050)
#define TIM_TS_TI2FP2 ((uint16_t)0x0060)
#define TIM_TS_ETRF ((uint16_t)0x0070)
#define IS_TIM_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3) || ((SELECTION) == TIM_TS_TI1F_ED) || ((SELECTION) == TIM_TS_TI1FP1) || ((SELECTION) == TIM_TS_TI2FP2) || ((SELECTION) == TIM_TS_ETRF))







#define IS_TIM_INTERNAL_TRIGGER_SELECTION(SELECTION) (((SELECTION) == TIM_TS_ITR0) || ((SELECTION) == TIM_TS_ITR1) || ((SELECTION) == TIM_TS_ITR2) || ((SELECTION) == TIM_TS_ITR3))
# 831 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_TIxExternalCLK1Source_TI1 ((uint16_t)0x0050)
#define TIM_TIxExternalCLK1Source_TI2 ((uint16_t)0x0060)
#define TIM_TIxExternalCLK1Source_TI1ED ((uint16_t)0x0040)
# 842 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_ExtTRGPolarity_Inverted ((uint16_t)0x8000)
#define TIM_ExtTRGPolarity_NonInverted ((uint16_t)0x0000)
#define IS_TIM_EXT_POLARITY(POLARITY) (((POLARITY) == TIM_ExtTRGPolarity_Inverted) || ((POLARITY) == TIM_ExtTRGPolarity_NonInverted))
# 854 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_PSCReloadMode_Update ((uint16_t)0x0000)
#define TIM_PSCReloadMode_Immediate ((uint16_t)0x0001)
#define IS_TIM_PRESCALER_RELOAD(RELOAD) (((RELOAD) == TIM_PSCReloadMode_Update) || ((RELOAD) == TIM_PSCReloadMode_Immediate))
# 866 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_ForcedAction_Active ((uint16_t)0x0050)
#define TIM_ForcedAction_InActive ((uint16_t)0x0040)
#define IS_TIM_FORCED_ACTION(ACTION) (((ACTION) == TIM_ForcedAction_Active) || ((ACTION) == TIM_ForcedAction_InActive))
# 878 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_EncoderMode_TI1 ((uint16_t)0x0001)
#define TIM_EncoderMode_TI2 ((uint16_t)0x0002)
#define TIM_EncoderMode_TI12 ((uint16_t)0x0003)
#define IS_TIM_ENCODER_MODE(MODE) (((MODE) == TIM_EncoderMode_TI1) || ((MODE) == TIM_EncoderMode_TI2) || ((MODE) == TIM_EncoderMode_TI12))
# 893 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_EventSource_Update ((uint16_t)0x0001)
#define TIM_EventSource_CC1 ((uint16_t)0x0002)
#define TIM_EventSource_CC2 ((uint16_t)0x0004)
#define TIM_EventSource_CC3 ((uint16_t)0x0008)
#define TIM_EventSource_CC4 ((uint16_t)0x0010)
#define TIM_EventSource_COM ((uint16_t)0x0020)
#define TIM_EventSource_Trigger ((uint16_t)0x0040)
#define TIM_EventSource_Break ((uint16_t)0x0080)
#define TIM_EventSource_Break2 ((uint16_t)0x0100)
#define IS_TIM_EVENT_SOURCE(SOURCE) ((((SOURCE) & (uint16_t)0xFE00) == 0x0000) && ((SOURCE) != 0x0000))
# 912 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_UpdateSource_Global ((uint16_t)0x0000)


#define TIM_UpdateSource_Regular ((uint16_t)0x0001)
#define IS_TIM_UPDATE_SOURCE(SOURCE) (((SOURCE) == TIM_UpdateSource_Global) || ((SOURCE) == TIM_UpdateSource_Regular))
# 926 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OCPreload_Enable ((uint16_t)0x0008)
#define TIM_OCPreload_Disable ((uint16_t)0x0000)
#define IS_TIM_OCPRELOAD_STATE(STATE) (((STATE) == TIM_OCPreload_Enable) || ((STATE) == TIM_OCPreload_Disable))
# 938 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OCFast_Enable ((uint16_t)0x0004)
#define TIM_OCFast_Disable ((uint16_t)0x0000)
#define IS_TIM_OCFAST_STATE(STATE) (((STATE) == TIM_OCFast_Enable) || ((STATE) == TIM_OCFast_Disable))
# 951 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_OCClear_Enable ((uint16_t)0x0080)
#define TIM_OCClear_Disable ((uint16_t)0x0000)
#define IS_TIM_OCCLEAR_STATE(STATE) (((STATE) == TIM_OCClear_Enable) || ((STATE) == TIM_OCClear_Disable))
# 963 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_TRGOSource_Reset ((uint16_t)0x0000)
#define TIM_TRGOSource_Enable ((uint16_t)0x0010)
#define TIM_TRGOSource_Update ((uint16_t)0x0020)
#define TIM_TRGOSource_OC1 ((uint16_t)0x0030)
#define TIM_TRGOSource_OC1Ref ((uint16_t)0x0040)
#define TIM_TRGOSource_OC2Ref ((uint16_t)0x0050)
#define TIM_TRGOSource_OC3Ref ((uint16_t)0x0060)
#define TIM_TRGOSource_OC4Ref ((uint16_t)0x0070)
#define IS_TIM_TRGO_SOURCE(SOURCE) (((SOURCE) == TIM_TRGOSource_Reset) || ((SOURCE) == TIM_TRGOSource_Enable) || ((SOURCE) == TIM_TRGOSource_Update) || ((SOURCE) == TIM_TRGOSource_OC1) || ((SOURCE) == TIM_TRGOSource_OC1Ref) || ((SOURCE) == TIM_TRGOSource_OC2Ref) || ((SOURCE) == TIM_TRGOSource_OC3Ref) || ((SOURCE) == TIM_TRGOSource_OC4Ref))
# 981 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_TRGO2Source_Reset ((uint32_t)0x00000000)
#define TIM_TRGO2Source_Enable ((uint32_t)0x00100000)
#define TIM_TRGO2Source_Update ((uint32_t)0x00200000)
#define TIM_TRGO2Source_OC1 ((uint32_t)0x00300000)
#define TIM_TRGO2Source_OC1Ref ((uint32_t)0x00400000)
#define TIM_TRGO2Source_OC2Ref ((uint32_t)0x00500000)
#define TIM_TRGO2Source_OC3Ref ((uint32_t)0x00600000)
#define TIM_TRGO2Source_OC4Ref ((uint32_t)0x00700000)
#define TIM_TRGO2Source_OC5Ref ((uint32_t)0x00800000)
#define TIM_TRGO2Source_OC6Ref ((uint32_t)0x00900000)
#define TIM_TRGO2Source_OC4Ref_RisingFalling ((uint32_t)0x00A00000)
#define TIM_TRGO2Source_OC6Ref_RisingFalling ((uint32_t)0x00B00000)
#define TIM_TRGO2Source_OC4RefRising_OC6RefRising ((uint32_t)0x00C00000)
#define TIM_TRGO2Source_OC4RefRising_OC6RefFalling ((uint32_t)0x00D00000)
#define TIM_TRGO2Source_OC5RefRising_OC6RefRising ((uint32_t)0x00E00000)
#define TIM_TRGO2Source_OC5RefRising_OC6RefFalling ((uint32_t)0x00F00000)
#define IS_TIM_TRGO2_SOURCE(SOURCE) (((SOURCE) == TIM_TRGO2Source_Reset) || ((SOURCE) == TIM_TRGO2Source_Enable) || ((SOURCE) == TIM_TRGO2Source_Update) || ((SOURCE) == TIM_TRGO2Source_OC1) || ((SOURCE) == TIM_TRGO2Source_OC1Ref) || ((SOURCE) == TIM_TRGO2Source_OC2Ref) || ((SOURCE) == TIM_TRGO2Source_OC3Ref) || ((SOURCE) == TIM_TRGO2Source_OC4Ref) || ((SOURCE) == TIM_TRGO2Source_OC5Ref) || ((SOURCE) == TIM_TRGO2Source_OC6Ref) || ((SOURCE) == TIM_TRGO2Source_OC4Ref_RisingFalling) || ((SOURCE) == TIM_TRGO2Source_OC6Ref_RisingFalling) || ((SOURCE) == TIM_TRGO2Source_OC4RefRising_OC6RefRising) || ((SOURCE) == TIM_TRGO2Source_OC4RefRising_OC6RefFalling) || ((SOURCE) == TIM_TRGO2Source_OC5RefRising_OC6RefRising) || ((SOURCE) == TIM_TRGO2Source_OC5RefRising_OC6RefFalling))
# 1021 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_SlaveMode_Reset ((uint32_t)0x00004)
#define TIM_SlaveMode_Gated ((uint32_t)0x00005)
#define TIM_SlaveMode_Trigger ((uint32_t)0x00006)
#define TIM_SlaveMode_External1 ((uint32_t)0x00007)
#define TIM_SlaveMode_Combined_ResetTrigger ((uint32_t)0x10000)
#define IS_TIM_SLAVE_MODE(MODE) (((MODE) == TIM_SlaveMode_Reset) || ((MODE) == TIM_SlaveMode_Gated) || ((MODE) == TIM_SlaveMode_Trigger) || ((MODE) == TIM_SlaveMode_External1) || ((MODE) == TIM_SlaveMode_Combined_ResetTrigger))
# 1039 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_MasterSlaveMode_Enable ((uint16_t)0x0080)
#define TIM_MasterSlaveMode_Disable ((uint16_t)0x0000)
#define IS_TIM_MSM_STATE(STATE) (((STATE) == TIM_MasterSlaveMode_Enable) || ((STATE) == TIM_MasterSlaveMode_Disable))







#define TIM16_GPIO ((uint16_t)0x0000)
#define TIM16_RTC_CLK ((uint16_t)0x0001)
#define TIM16_HSEDiv32 ((uint16_t)0x0002)
#define TIM16_MCO ((uint16_t)0x0003)

#define TIM1_ADC1_AWDG1 ((uint16_t)0x0001)
#define TIM1_ADC1_AWDG2 ((uint16_t)0x0002)
#define TIM1_ADC1_AWDG3 ((uint16_t)0x0003)
#define TIM1_ADC4_AWDG1 ((uint16_t)0x0004)
#define TIM1_ADC4_AWDG2 ((uint16_t)0x0008)
#define TIM1_ADC4_AWDG3 ((uint16_t)0x000C)

#define TIM8_ADC2_AWDG1 ((uint16_t)0x0001)
#define TIM8_ADC2_AWDG2 ((uint16_t)0x0002)
#define TIM8_ADC2_AWDG3 ((uint16_t)0x0003)
#define TIM8_ADC3_AWDG1 ((uint16_t)0x0004)
#define TIM8_ADC3_AWDG2 ((uint16_t)0x0008)
#define TIM8_ADC3_AWDG3 ((uint16_t)0x000C)

#define IS_TIM_REMAP(TIM_REMAP) (((TIM_REMAP) == TIM16_GPIO)|| ((TIM_REMAP) == TIM16_RTC_CLK) || ((TIM_REMAP) == TIM16_HSEDiv32) || ((TIM_REMAP) == TIM16_MCO) || ((TIM_REMAP) == TIM1_ADC1_AWDG1) || ((TIM_REMAP) == TIM1_ADC1_AWDG2) || ((TIM_REMAP) == TIM1_ADC1_AWDG3) || ((TIM_REMAP) == TIM1_ADC4_AWDG1) || ((TIM_REMAP) == TIM1_ADC4_AWDG2) || ((TIM_REMAP) == TIM1_ADC4_AWDG3) || ((TIM_REMAP) == TIM8_ADC2_AWDG1) || ((TIM_REMAP) == TIM8_ADC2_AWDG2) || ((TIM_REMAP) == TIM8_ADC2_AWDG3) || ((TIM_REMAP) == TIM8_ADC3_AWDG1) || ((TIM_REMAP) == TIM8_ADC3_AWDG2) || ((TIM_REMAP) == TIM8_ADC3_AWDG3))
# 1092 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_FLAG_Update ((uint32_t)0x00001)
#define TIM_FLAG_CC1 ((uint32_t)0x00002)
#define TIM_FLAG_CC2 ((uint32_t)0x00004)
#define TIM_FLAG_CC3 ((uint32_t)0x00008)
#define TIM_FLAG_CC4 ((uint32_t)0x00010)
#define TIM_FLAG_COM ((uint32_t)0x00020)
#define TIM_FLAG_Trigger ((uint32_t)0x00040)
#define TIM_FLAG_Break ((uint32_t)0x00080)
#define TIM_FLAG_Break2 ((uint32_t)0x00100)
#define TIM_FLAG_CC1OF ((uint32_t)0x00200)
#define TIM_FLAG_CC2OF ((uint32_t)0x00400)
#define TIM_FLAG_CC3OF ((uint32_t)0x00800)
#define TIM_FLAG_CC4OF ((uint32_t)0x01000)
#define TIM_FLAG_CC5 ((uint32_t)0x10000)
#define TIM_FLAG_CC6 ((uint32_t)0x20000)
#define IS_TIM_GET_FLAG(FLAG) (((FLAG) == TIM_FLAG_Update) || ((FLAG) == TIM_FLAG_CC1) || ((FLAG) == TIM_FLAG_CC2) || ((FLAG) == TIM_FLAG_CC3) || ((FLAG) == TIM_FLAG_CC4) || ((FLAG) == TIM_FLAG_COM) || ((FLAG) == TIM_FLAG_Trigger) || ((FLAG) == TIM_FLAG_Break) || ((FLAG) == TIM_FLAG_Break2) || ((FLAG) == TIM_FLAG_CC1OF) || ((FLAG) == TIM_FLAG_CC2OF) || ((FLAG) == TIM_FLAG_CC3OF) || ((FLAG) == TIM_FLAG_CC4OF) || ((FLAG) == TIM_FLAG_CC5) || ((FLAG) == TIM_FLAG_CC6))
# 1123 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define IS_TIM_CLEAR_FLAG(TIM_FLAG) ((((TIM_FLAG) & (uint32_t)0xE000) == 0x0000) && ((TIM_FLAG) != 0x0000))







#define TIM_OCReferenceClear_ETRF ((uint16_t)0x0008)
#define TIM_OCReferenceClear_OCREFCLR ((uint16_t)0x0000)
#define TIM_OCREFERENCECECLEAR_SOURCE(SOURCE) (((SOURCE) == TIM_OCReferenceClear_ETRF) || ((SOURCE) == TIM_OCReferenceClear_OCREFCLR))






#define IS_TIM_IC_FILTER(ICFILTER) ((ICFILTER) <= 0xF)
# 1149 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define IS_TIM_EXT_FILTER(EXTFILTER) ((EXTFILTER) <= 0xF)
# 1158 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
#define TIM_DMABurstLength_1Byte TIM_DMABurstLength_1Transfer
#define TIM_DMABurstLength_2Bytes TIM_DMABurstLength_2Transfers
#define TIM_DMABurstLength_3Bytes TIM_DMABurstLength_3Transfers
#define TIM_DMABurstLength_4Bytes TIM_DMABurstLength_4Transfers
#define TIM_DMABurstLength_5Bytes TIM_DMABurstLength_5Transfers
#define TIM_DMABurstLength_6Bytes TIM_DMABurstLength_6Transfers
#define TIM_DMABurstLength_7Bytes TIM_DMABurstLength_7Transfers
#define TIM_DMABurstLength_8Bytes TIM_DMABurstLength_8Transfers
#define TIM_DMABurstLength_9Bytes TIM_DMABurstLength_9Transfers
#define TIM_DMABurstLength_10Bytes TIM_DMABurstLength_10Transfers
#define TIM_DMABurstLength_11Bytes TIM_DMABurstLength_11Transfers
#define TIM_DMABurstLength_12Bytes TIM_DMABurstLength_12Transfers
#define TIM_DMABurstLength_13Bytes TIM_DMABurstLength_13Transfers
#define TIM_DMABurstLength_14Bytes TIM_DMABurstLength_14Transfers
#define TIM_DMABurstLength_15Bytes TIM_DMABurstLength_15Transfers
#define TIM_DMABurstLength_16Bytes TIM_DMABurstLength_16Transfers
#define TIM_DMABurstLength_17Bytes TIM_DMABurstLength_17Transfers
#define TIM_DMABurstLength_18Bytes TIM_DMABurstLength_18Transfers
# 1188 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h"
void TIM_DeInit(TIM_TypeDef* TIMx);
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode);
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode);
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter);
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload);
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx);
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx);
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource);
void TIM_UIFRemap(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode);
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD);
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState);


void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC5Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_OC6Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_SelectGC5C1(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectGC5C2(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectGC5C3(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct);
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint32_t TIM_OCMode);
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1);
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2);
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3);
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4);
void TIM_SetCompare5(TIM_TypeDef* TIMx, uint32_t Compare5);
void TIM_SetCompare6(TIM_TypeDef* TIMx, uint32_t Compare6);
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC5Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_ForcedOC6Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction);
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC5PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC6PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast);
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC5Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_ClearOC6Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear);
void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear);
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity);
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC5PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_OC6PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity);
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx);
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN);


void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct);
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx);
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx);
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx);
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx);
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC);


void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct);
void TIM_Break1Config(TIM_TypeDef* TIMx, uint32_t TIM_Break1Polarity, uint8_t TIM_Break1Filter);
void TIM_Break2Config(TIM_TypeDef* TIMx, uint32_t TIM_Break2Polarity, uint8_t TIM_Break2Filter);
void TIM_Break1Cmd(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_Break2Cmd(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct);
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState);
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState);


void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState);
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource);
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint32_t TIM_FLAG);
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength);
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState);
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState);


void TIM_InternalClockConfig(TIM_TypeDef* TIMx);
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter);
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter);
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);


void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource);
void TIM_SelectOutputTrigger2(TIM_TypeDef* TIMx, uint32_t TIM_TRGO2Source);
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint32_t TIM_SlaveMode);
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter);


void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity);
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState);


void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap);
# 53 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define __STM32F30x_USART_H 
# 56 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
typedef struct
{
  uint32_t USART_BaudRate;




  uint32_t USART_WordLength;


  uint32_t USART_StopBits;


  uint32_t USART_Parity;






  uint32_t USART_Mode;


  uint32_t USART_HardwareFlowControl;


} USART_InitTypeDef;





typedef struct
{
  uint32_t USART_Clock;


  uint32_t USART_CPOL;


  uint32_t USART_CPHA;


  uint32_t USART_LastBit;


} USART_ClockInitTypeDef;







#define IS_USART_ALL_PERIPH(PERIPH) (((PERIPH) == USART1) || ((PERIPH) == USART2) || ((PERIPH) == USART3) || ((PERIPH) == UART4) || ((PERIPH) == UART5))





#define IS_USART_123_PERIPH(PERIPH) (((PERIPH) == USART1) || ((PERIPH) == USART2) || ((PERIPH) == USART3))



#define IS_USART_1234_PERIPH(PERIPH) (((PERIPH) == USART1) || ((PERIPH) == USART2) || ((PERIPH) == USART3) || ((PERIPH) == UART4))
# 130 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_WordLength_8b ((uint32_t)0x00000000)
#define USART_WordLength_9b USART_CR1_M
#define IS_USART_WORD_LENGTH(LENGTH) (((LENGTH) == USART_WordLength_8b) || ((LENGTH) == USART_WordLength_9b))
# 142 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_StopBits_1 ((uint32_t)0x00000000)
#define USART_StopBits_2 USART_CR2_STOP_1
#define USART_StopBits_1_5 (USART_CR2_STOP_0 | USART_CR2_STOP_1)
#define IS_USART_STOPBITS(STOPBITS) (((STOPBITS) == USART_StopBits_1) || ((STOPBITS) == USART_StopBits_2) || ((STOPBITS) == USART_StopBits_1_5))
# 156 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_Parity_No ((uint32_t)0x00000000)
#define USART_Parity_Even USART_CR1_PCE
#define USART_Parity_Odd (USART_CR1_PCE | USART_CR1_PS)
#define IS_USART_PARITY(PARITY) (((PARITY) == USART_Parity_No) || ((PARITY) == USART_Parity_Even) || ((PARITY) == USART_Parity_Odd))
# 170 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_Mode_Rx USART_CR1_RE
#define USART_Mode_Tx USART_CR1_TE
#define IS_USART_MODE(MODE) ((((MODE) & (uint32_t)0xFFFFFFF3) == 0x00) && ((MODE) != (uint32_t)0x00))
# 182 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_HardwareFlowControl_None ((uint32_t)0x00000000)
#define USART_HardwareFlowControl_RTS USART_CR3_RTSE
#define USART_HardwareFlowControl_CTS USART_CR3_CTSE
#define USART_HardwareFlowControl_RTS_CTS (USART_CR3_RTSE | USART_CR3_CTSE)
#define IS_USART_HARDWARE_FLOW_CONTROL(CONTROL) (((CONTROL) == USART_HardwareFlowControl_None) || ((CONTROL) == USART_HardwareFlowControl_RTS) || ((CONTROL) == USART_HardwareFlowControl_CTS) || ((CONTROL) == USART_HardwareFlowControl_RTS_CTS))
# 199 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_Clock_Disable ((uint32_t)0x00000000)
#define USART_Clock_Enable USART_CR2_CLKEN
#define IS_USART_CLOCK(CLOCK) (((CLOCK) == USART_Clock_Disable) || ((CLOCK) == USART_Clock_Enable))
# 211 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_CPOL_Low ((uint32_t)0x00000000)
#define USART_CPOL_High USART_CR2_CPOL
#define IS_USART_CPOL(CPOL) (((CPOL) == USART_CPOL_Low) || ((CPOL) == USART_CPOL_High))
# 223 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_CPHA_1Edge ((uint32_t)0x00000000)
#define USART_CPHA_2Edge USART_CR2_CPHA
#define IS_USART_CPHA(CPHA) (((CPHA) == USART_CPHA_1Edge) || ((CPHA) == USART_CPHA_2Edge))
# 235 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_LastBit_Disable ((uint32_t)0x00000000)
#define USART_LastBit_Enable USART_CR2_LBCL
#define IS_USART_LASTBIT(LASTBIT) (((LASTBIT) == USART_LastBit_Disable) || ((LASTBIT) == USART_LastBit_Enable))
# 247 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_DMAReq_Tx USART_CR3_DMAT
#define USART_DMAReq_Rx USART_CR3_DMAR
#define IS_USART_DMAREQ(DMAREQ) ((((DMAREQ) & (uint32_t)0xFFFFFF3F) == 0x00) && ((DMAREQ) != (uint32_t)0x00))
# 260 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_DMAOnError_Enable ((uint32_t)0x00000000)
#define USART_DMAOnError_Disable USART_CR3_DDRE
#define IS_USART_DMAONERROR(DMAERROR) (((DMAERROR) == USART_DMAOnError_Disable)|| ((DMAERROR) == USART_DMAOnError_Enable))
# 272 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_WakeUp_IdleLine ((uint32_t)0x00000000)
#define USART_WakeUp_AddressMark USART_CR1_WAKE
#define IS_USART_MUTEMODE_WAKEUP(WAKEUP) (((WAKEUP) == USART_WakeUp_IdleLine) || ((WAKEUP) == USART_WakeUp_AddressMark))
# 284 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_AddressLength_4b ((uint32_t)0x00000000)
#define USART_AddressLength_7b USART_CR2_ADDM7
#define IS_USART_ADDRESS_DETECTION(ADDRESS) (((ADDRESS) == USART_AddressLength_4b) || ((ADDRESS) == USART_AddressLength_7b))
# 296 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_WakeUpSource_AddressMatch ((uint32_t)0x00000000)
#define USART_WakeUpSource_StartBit USART_CR3_WUS_1
#define USART_WakeUpSource_RXNE (uint32_t)(USART_CR3_WUS_0 | USART_CR3_WUS_1)
#define IS_USART_STOPMODE_WAKEUPSOURCE(SOURCE) (((SOURCE) == USART_WakeUpSource_AddressMatch) || ((SOURCE) == USART_WakeUpSource_StartBit) || ((SOURCE) == USART_WakeUpSource_RXNE))
# 310 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_LINBreakDetectLength_10b ((uint32_t)0x00000000)
#define USART_LINBreakDetectLength_11b USART_CR2_LBDL
#define IS_USART_LIN_BREAK_DETECT_LENGTH(LENGTH) (((LENGTH) == USART_LINBreakDetectLength_10b) || ((LENGTH) == USART_LINBreakDetectLength_11b))
# 323 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_IrDAMode_LowPower USART_CR3_IRLP
#define USART_IrDAMode_Normal ((uint32_t)0x00000000)
#define IS_USART_IRDA_MODE(MODE) (((MODE) == USART_IrDAMode_LowPower) || ((MODE) == USART_IrDAMode_Normal))
# 335 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_DEPolarity_High ((uint32_t)0x00000000)
#define USART_DEPolarity_Low USART_CR3_DEP
#define IS_USART_DE_POLARITY(POLARITY) (((POLARITY) == USART_DEPolarity_Low) || ((POLARITY) == USART_DEPolarity_High))
# 347 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_InvPin_Tx USART_CR2_TXINV
#define USART_InvPin_Rx USART_CR2_RXINV
#define IS_USART_INVERSTION_PIN(PIN) ((((PIN) & (uint32_t)0xFFFCFFFF) == 0x00) && ((PIN) != (uint32_t)0x00))
# 360 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_AutoBaudRate_StartBit ((uint32_t)0x00000000)
#define USART_AutoBaudRate_FallingEdge USART_CR2_ABRMODE_0
#define USART_AutoBaudRate_0x7FFrame USART_CR2_ABRMODE_1
#define USART_AutoBaudRate_0x55Frame (USART_CR2_ABRMODE_0 | USART_CR2_ABRMODE_1)
#define IS_USART_AUTOBAUDRATE_MODE(MODE) (((MODE) == USART_AutoBaudRate_StartBit) || ((MODE) == USART_AutoBaudRate_FallingEdge) || ((MODE) == USART_AutoBaudRate_0x7FFrame) || ((MODE) == USART_AutoBaudRate_0x55Frame))
# 376 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_OVRDetection_Enable ((uint32_t)0x00000000)
#define USART_OVRDetection_Disable USART_CR3_OVRDIS
#define IS_USART_OVRDETECTION(OVR) (((OVR) == USART_OVRDetection_Enable)|| ((OVR) == USART_OVRDetection_Disable))
# 387 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_Request_ABRRQ USART_RQR_ABRRQ
#define USART_Request_SBKRQ USART_RQR_SBKRQ
#define USART_Request_MMRQ USART_RQR_MMRQ
#define USART_Request_RXFRQ USART_RQR_RXFRQ
#define USART_Request_TXFRQ USART_RQR_TXFRQ

#define IS_USART_REQUEST(REQUEST) (((REQUEST) == USART_Request_TXFRQ) || ((REQUEST) == USART_Request_RXFRQ) || ((REQUEST) == USART_Request_MMRQ) || ((REQUEST) == USART_Request_SBKRQ) || ((REQUEST) == USART_Request_ABRRQ))
# 405 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_FLAG_REACK USART_ISR_REACK
#define USART_FLAG_TEACK USART_ISR_TEACK
#define USART_FLAG_WU USART_ISR_WUF
#define USART_FLAG_RWU USART_ISR_RWU
#define USART_FLAG_SBK USART_ISR_SBKF
#define USART_FLAG_CM USART_ISR_CMF
#define USART_FLAG_BUSY USART_ISR_BUSY
#define USART_FLAG_ABRF USART_ISR_ABRF
#define USART_FLAG_ABRE USART_ISR_ABRE
#define USART_FLAG_EOB USART_ISR_EOBF
#define USART_FLAG_RTO USART_ISR_RTOF
#define USART_FLAG_nCTSS USART_ISR_CTS
#define USART_FLAG_CTS USART_ISR_CTSIF
#define USART_FLAG_LBD USART_ISR_LBD
#define USART_FLAG_TXE USART_ISR_TXE
#define USART_FLAG_TC USART_ISR_TC
#define USART_FLAG_RXNE USART_ISR_RXNE
#define USART_FLAG_IDLE USART_ISR_IDLE
#define USART_FLAG_ORE USART_ISR_ORE
#define USART_FLAG_NE USART_ISR_NE
#define USART_FLAG_FE USART_ISR_FE
#define USART_FLAG_PE USART_ISR_PE
#define IS_USART_FLAG(FLAG) (((FLAG) == USART_FLAG_PE) || ((FLAG) == USART_FLAG_TXE) || ((FLAG) == USART_FLAG_TC) || ((FLAG) == USART_FLAG_RXNE) || ((FLAG) == USART_FLAG_IDLE) || ((FLAG) == USART_FLAG_LBD) || ((FLAG) == USART_FLAG_CTS) || ((FLAG) == USART_FLAG_ORE) || ((FLAG) == USART_FLAG_NE) || ((FLAG) == USART_FLAG_FE) || ((FLAG) == USART_FLAG_nCTSS) || ((FLAG) == USART_FLAG_RTO) || ((FLAG) == USART_FLAG_EOB) || ((FLAG) == USART_FLAG_ABRE) || ((FLAG) == USART_FLAG_ABRF) || ((FLAG) == USART_FLAG_BUSY) || ((FLAG) == USART_FLAG_CM) || ((FLAG) == USART_FLAG_SBK) || ((FLAG) == USART_FLAG_RWU) || ((FLAG) == USART_FLAG_WU) || ((FLAG) == USART_FLAG_TEACK)|| ((FLAG) == USART_FLAG_REACK))
# 439 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define IS_USART_CLEAR_FLAG(FLAG) (((FLAG) == USART_FLAG_WU) || ((FLAG) == USART_FLAG_TC) || ((FLAG) == USART_FLAG_IDLE) || ((FLAG) == USART_FLAG_ORE) || ((FLAG) == USART_FLAG_NE) || ((FLAG) == USART_FLAG_FE) || ((FLAG) == USART_FLAG_LBD) || ((FLAG) == USART_FLAG_CTS) || ((FLAG) == USART_FLAG_RTO) || ((FLAG) == USART_FLAG_EOB) || ((FLAG) == USART_FLAG_CM) || ((FLAG) == USART_FLAG_PE))
# 459 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define USART_IT_WU ((uint32_t)0x00140316)
#define USART_IT_CM ((uint32_t)0x0011010E)
#define USART_IT_EOB ((uint32_t)0x000C011B)
#define USART_IT_RTO ((uint32_t)0x000B011A)
#define USART_IT_PE ((uint32_t)0x00000108)
#define USART_IT_TXE ((uint32_t)0x00070107)
#define USART_IT_TC ((uint32_t)0x00060106)
#define USART_IT_RXNE ((uint32_t)0x00050105)
#define USART_IT_IDLE ((uint32_t)0x00040104)
#define USART_IT_LBD ((uint32_t)0x00080206)
#define USART_IT_CTS ((uint32_t)0x0009030A)
#define USART_IT_ERR ((uint32_t)0x00000300)
#define USART_IT_ORE ((uint32_t)0x00030300)
#define USART_IT_NE ((uint32_t)0x00020300)
#define USART_IT_FE ((uint32_t)0x00010300)

#define IS_USART_CONFIG_IT(IT) (((IT) == USART_IT_PE) || ((IT) == USART_IT_TXE) || ((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) || ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) || ((IT) == USART_IT_CTS) || ((IT) == USART_IT_ERR) || ((IT) == USART_IT_RTO) || ((IT) == USART_IT_EOB) || ((IT) == USART_IT_CM) || ((IT) == USART_IT_WU))






#define IS_USART_GET_IT(IT) (((IT) == USART_IT_PE) || ((IT) == USART_IT_TXE) || ((IT) == USART_IT_TC) || ((IT) == USART_IT_RXNE) || ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) || ((IT) == USART_IT_CTS) || ((IT) == USART_IT_ORE) || ((IT) == USART_IT_NE) || ((IT) == USART_IT_FE) || ((IT) == USART_IT_RTO) || ((IT) == USART_IT_EOB) || ((IT) == USART_IT_CM) || ((IT) == USART_IT_WU))







#define IS_USART_CLEAR_IT(IT) (((IT) == USART_IT_TC) || ((IT) == USART_IT_PE) || ((IT) == USART_IT_FE) || ((IT) == USART_IT_NE) || ((IT) == USART_IT_ORE) || ((IT) == USART_IT_IDLE) || ((IT) == USART_IT_LBD) || ((IT) == USART_IT_CTS) || ((IT) == USART_IT_RTO) || ((IT) == USART_IT_EOB) || ((IT) == USART_IT_CM) || ((IT) == USART_IT_WU))
# 504 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
#define IS_USART_BAUDRATE(BAUDRATE) (((BAUDRATE) > 0) && ((BAUDRATE) < 0x005B8D81))
#define IS_USART_DE_ASSERTION_DEASSERTION_TIME(TIME) ((TIME) <= 0x1F)
#define IS_USART_AUTO_RETRY_COUNTER(COUNTER) ((COUNTER) <= 0x7)
#define IS_USART_TIMEOUT(TIMEOUT) ((TIMEOUT) <= 0x00FFFFFF)
#define IS_USART_DATA(DATA) ((DATA) <= 0x1FF)
# 522 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h"
void USART_DeInit(USART_TypeDef* USARTx);
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct);
void USART_StructInit(USART_InitTypeDef* USART_InitStruct);
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct);
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct);
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState);
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler);
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState);
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut);


void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource);


void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate);


void USART_SendData(USART_TypeDef* USARTx, uint16_t Data);
uint16_t USART_ReceiveData(USART_TypeDef* USARTx);


void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address);
void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp);
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength);

void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength);
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState);


void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState);


void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime);
void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount);
void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength);


void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode);
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState);


void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState);
void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity);
void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime);
void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime);


void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState);
void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError);


void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState);
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState);
void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection);
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG);
void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG);
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT);
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT);
# 54 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_wwdg.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_wwdg.h"
#define __STM32F30x_WWDG_H 
# 58 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_wwdg.h"
#define WWDG_Prescaler_1 ((uint32_t)0x00000000)
#define WWDG_Prescaler_2 ((uint32_t)0x00000080)
#define WWDG_Prescaler_4 ((uint32_t)0x00000100)
#define WWDG_Prescaler_8 ((uint32_t)0x00000180)
#define IS_WWDG_PRESCALER(PRESCALER) (((PRESCALER) == WWDG_Prescaler_1) || ((PRESCALER) == WWDG_Prescaler_2) || ((PRESCALER) == WWDG_Prescaler_4) || ((PRESCALER) == WWDG_Prescaler_8))



#define IS_WWDG_WINDOW_VALUE(VALUE) ((VALUE) <= 0x7F)
#define IS_WWDG_COUNTER(COUNTER) (((COUNTER) >= 0x40) && ((COUNTER) <= 0x7F))
# 80 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_wwdg.h"
void WWDG_DeInit(void);


void WWDG_SetPrescaler(uint32_t WWDG_Prescaler);
void WWDG_SetWindowValue(uint8_t WindowValue);
void WWDG_EnableIT(void);
void WWDG_SetCounter(uint8_t Counter);


void WWDG_Enable(uint8_t Counter);


FlagStatus WWDG_GetFlagStatus(void);
void WWDG_ClearFlag(void);
# 55 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h" 1
# 31 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h"
#define __STM32F30x_MISC_H 
# 54 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h"
typedef struct
{
  uint8_t NVIC_IRQChannel;




  uint8_t NVIC_IRQChannelPreemptionPriority;





  uint8_t NVIC_IRQChannelSubPriority;




  FunctionalState NVIC_IRQChannelCmd;


} NVIC_InitTypeDef;
# 113 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h"
#define NVIC_VectTab_RAM ((uint32_t)0x20000000)
#define NVIC_VectTab_FLASH ((uint32_t)0x08000000)
#define IS_NVIC_VECTTAB(VECTTAB) (((VECTTAB) == NVIC_VectTab_RAM) || ((VECTTAB) == NVIC_VectTab_FLASH))
# 125 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h"
#define NVIC_LP_SEVONPEND ((uint8_t)0x10)
#define NVIC_LP_SLEEPDEEP ((uint8_t)0x04)
#define NVIC_LP_SLEEPONEXIT ((uint8_t)0x02)
#define IS_NVIC_LP(LP) (((LP) == NVIC_LP_SEVONPEND) || ((LP) == NVIC_LP_SLEEPDEEP) || ((LP) == NVIC_LP_SLEEPONEXIT))
# 139 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h"
#define NVIC_PriorityGroup_0 ((uint32_t)0x700)

#define NVIC_PriorityGroup_1 ((uint32_t)0x600)

#define NVIC_PriorityGroup_2 ((uint32_t)0x500)

#define NVIC_PriorityGroup_3 ((uint32_t)0x400)

#define NVIC_PriorityGroup_4 ((uint32_t)0x300)


#define IS_NVIC_PRIORITY_GROUP(GROUP) (((GROUP) == NVIC_PriorityGroup_0) || ((GROUP) == NVIC_PriorityGroup_1) || ((GROUP) == NVIC_PriorityGroup_2) || ((GROUP) == NVIC_PriorityGroup_3) || ((GROUP) == NVIC_PriorityGroup_4))





#define IS_NVIC_PREEMPTION_PRIORITY(PRIORITY) ((PRIORITY) < 0x10)

#define IS_NVIC_SUB_PRIORITY(PRIORITY) ((PRIORITY) < 0x10)

#define IS_NVIC_OFFSET(OFFSET) ((OFFSET) < 0x000FFFFF)
# 169 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h"
#define SysTick_CLKSource_HCLK_Div8 ((uint32_t)0xFFFFFFFB)
#define SysTick_CLKSource_HCLK ((uint32_t)0x00000004)
#define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SysTick_CLKSource_HCLK) || ((SOURCE) == SysTick_CLKSource_HCLK_Div8))
# 184 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h"
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset);
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState);
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
# 56 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h" 2
# 77 "./lib/main/CMSIS/CM1/DeviceSupport/ST/STM32F30x/stm32f30x_conf.h"
#define assert_param(expr) ((void)0)
# 52 "./src/main/platform.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rcc.h" 1
# 53 "./src/main/platform.h" 2
# 1 "./lib/main/STM32F30x_StdPeriph_Driver/inc/stm32f30x_gpio.h" 1
# 54 "./src/main/platform.h" 2
# 1 "./lib/main/CMSIS/CM1/CoreSupport/core_cm4.h" 1
# 55 "./src/main/platform.h" 2


#define U_ID_0 (*(uint32_t*)0x1FFFF7AC)
#define U_ID_1 (*(uint32_t*)0x1FFFF7B0)
#define U_ID_2 (*(uint32_t*)0x1FFFF7B4)

#define STM32F3 
# 77 "./src/main/platform.h"
# 1 "./src/main/target/common.h" 1
# 18 "./src/main/target/common.h"
       

#define I2C1_OVERCLOCK false
#define I2C2_OVERCLOCK false
#define USE_I2C_PULLUP 

#define USE_SERVOS 
#define USE_CLI 

#define USE_RX_PWM 
#define USE_RX_PPM 
#define USE_SERIAL_RX 
#define USE_SERIALRX_SPEKTRUM 
#define USE_SERIALRX_SBUS 
#define USE_SERIALRX_IBUS 
#define USE_SERIALRX_FPORT 

#define COMMON_DEFAULT_FEATURES (FEATURE_TX_PROF_SEL)


#define USE_UNDERCLOCK 



#define USE_64BIT_TIME 

#define USE_GPS 

#define USE_NAV 
#define USE_FLM_TURN_ASSIST 
#define USE_TELEMETRY 

#define USE_TELEMETRY_FRSKY 





#define SCHEDULER_DELAY_LIMIT 100
# 65 "./src/main/target/common.h"
#define NAV_FIXED_WING_LANDING 
#define AUTOTUNE_FIXED_WING 
#define USE_ASYNC_GYRO_PROCESSING 
#define USE_DEBUG_TRACE 
#define USE_BOOTLOG 
#define BOOTLOG_DESCRIPTIONS 
#define USE_STATS 
#define USE_64BIT_TIME 
#define USE_GYRO_NOTCH_1 
#define USE_GYRO_NOTCH_2 
#define USE_DTERM_NOTCH 
#define USE_ACC_NOTCH 




#define DASHBOARD_ARMED_BITMAP 





#define NAV_AUTO_MAG_DECLINATION 
#define NAV_GPS_GLITCH_DETECTION 
#define NAV_NON_VOLATILE_WAYPOINT_STORAGE 
#define USE_TELEMETRY_HOTT 
#define USE_TELEMETRY_IBUS 
#define USE_TELEMETRY_MAVLINK 
#define USE_TELEMETRY_SMARTPORT 
#define USE_TELEMETRY_CRSF 
#define USE_MSP_OVER_TELEMETRY 

#define USE_RX_MSP 
#define USE_SERIALRX_SUMD 
#define USE_SERIALRX_SUMH 
#define USE_SERIALRX_XBUS 
#define USE_SERIALRX_JETIEXBUS 
#define USE_SERIALRX_CRSF 
#define USE_PMW_SERVO_DRIVER 
#define USE_SERIAL_PASSTHROUGH 
#define USE_PWM_DRIVER_PCA9685 
#define NAV_MAX_WAYPOINTS 60
#define MAX_BOOTLOG_ENTRIES 64
#define USE_RCDEVICE 
#define USE_PITOT 
#define USE_PITOT_ADC 
# 78 "./src/main/platform.h" 2
# 1 "./src/main/target/OPENDRONEBRH/target.h" 1
# 25 "./src/main/target/OPENDRONEBRH/target.h"
       

#define TARGET_BOARD_IDENTIFIER "ODBR"

#define LED0 PB8

#define BEEPER PC15
#define BEEPER_INVERTED 

#define USE_EXTI 
#define GYRO_INT_EXTI PC13
#define USE_MPU_DATA_READY_SIGNAL 
#define ENSURE_MPU_DATA_READY_IS_LOW 

#define MPU6500_CS_PIN PB9
#define MPU6500_SPI_BUS BUS_SPI1




#define USE_GYRO 
#define USE_GYRO_MPU6500 
#define GYRO_MPU6500_ALIGN CW180_DEG



#define USE_ACC 
#define USE_ACC_MPU6500 
#define ACC_MPU6500_ALIGN CW180_DEG



#define USE_BARO 
#define BARO_I2C_BUS BUS_I2C1
#define USE_BARO_BMP280 
#define USE_BARO_MS5611 
# 71 "./src/main/target/OPENDRONEBRH/target.h"
#define USE_VCP 
#define USE_UART1 
#define USE_UART2 
#define USE_UART3 
#define USE_SOFTSERIAL1 

#define UART1_TX_PIN PA9
#define UART1_RX_PIN PA10

#define UART2_TX_PIN PA14
#define UART2_RX_PIN PA15

#define UART3_TX_PIN PB10
#define UART3_RX_PIN PB11
# 93 "./src/main/target/OPENDRONEBRH/target.h"
#define USE_SOFTSERIAL2 
#define SERIAL_PORT_COUNT 6

#define SOFTSERIAL_1_RX_PIN PA6
#define SOFTSERIAL_1_TX_PIN PA7
#define SOFTSERIAL_2_RX_PIN PB0
#define SOFTSERIAL_2_TX_PIN PB1


#define USE_I2C 
#define USE_I2C_DEVICE_1 

#define USE_SPI 
#define USE_SPI_DEVICE_1 
#define USE_SPI_DEVICE_2 

#define SPI1_NSS_PIN PB9
#define SPI1_SCK_PIN PB3
#define SPI1_MISO_PIN PB4
#define SPI1_MOSI_PIN PB5

#define SPI2_NSS_PIN PB12
#define SPI2_SCK_PIN PB13
#define SPI2_MISO_PIN PB14
#define SPI2_MOSI_PIN PB15
# 129 "./src/main/target/OPENDRONEBRH/target.h"
#define USE_ADC 
#define ADC_INSTANCE ADC2
#define ADC_CHANNEL_1_PIN PA4
#define ADC_CHANNEL_2_PIN PA5
#define ADC_CHANNEL_3_PIN PB2
#define VBAT_ADC_CHANNEL ADC_CHN_1
#define CURRENT_METER_ADC_CHANNEL ADC_CHN_2
#define RSSI_ADC_CHANNEL ADC_CHN_3
# 153 "./src/main/target/OPENDRONEBRH/target.h"
#define DEFAULT_RX_TYPE RX_TYPE_PPM
#define DEFAULT_FEATURES (FEATURE_TX_PROF_SEL | FEATURE_TRANSPONDER | FEATURE_BLACKBOX | FEATURE_RSSI_ADC | FEATURE_CURRENT_METER | FEATURE_VBAT | FEATURE_TELEMETRY)

#define USE_SPEKTRUM_BIND 
#define BIND_PIN PB11




#define MAX_PWM_OUTPUT_PORTS 10


#define TARGET_IO_PORTA 0xffff
#define TARGET_IO_PORTB 0xffff
#define TARGET_IO_PORTC (BIT(13)|BIT(14)|BIT(15))
#define TARGET_IO_PORTF (BIT(0)|BIT(1)|BIT(4))

#define USABLE_TIMER_CHANNEL_COUNT 12
#define USED_TIMERS (TIM_N(1) | TIM_N(2) | TIM_N(3) | TIM_N(8) | TIM_N(15))
# 79 "./src/main/platform.h" 2
# 1 "./src/main/target/common_post.h" 1
# 20 "./src/main/target/common_post.h"
       
# 79 "./src/main/platform.h" 2
# 28 "./src/main/telemetry/mavlink.c" 2



# 1 "./src/main/build/build_config.h" 1
# 18 "./src/main/build/build_config.h"
       

#define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
# 29 "./src/main/build/build_config.h"
#define STATIC_UNIT_TESTED static
#define STATIC_INLINE_UNIT_TESTED static inline
#define INLINE_UNIT_TESTED inline
#define UNIT_TESTED 





#define REQUIRE_CC_ARM_PRINTF_SUPPORT 
#define REQUIRE_PRINTF_LONG_SUPPORT 





#define FASTRAM __attribute__ ((section(".fastram_bss"), aligned(4)))

#define STATIC_FASTRAM static FASTRAM
#define STATIC_FASTRAM_UNIT_TESTED STATIC_UNIT_TESTED FASTRAM
# 32 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/build/debug.h" 1
# 18 "./src/main/build/debug.h"
# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 19 "./src/main/build/debug.h" 2

#define DEBUG16_VALUE_COUNT 4
extern int16_t debug[4];
extern uint8_t debugMode;

#define DEBUG_SET(mode,index,value) {if (debugMode == (mode)) {debug[(index)] = (value);}}

#define DEBUG_SECTION_TIMES 


# 1 "./src/main/common/time.h" 1
# 18 "./src/main/common/time.h"
       






# 1 "./src/main/config/parameter_group.h" 1
# 18 "./src/main/config/parameter_group.h"
       






typedef uint16_t pgn_t;


typedef enum {
    PGRF_NONE = 0,
    PGRF_CLASSIFICATON_BIT = (1 << 0)
} pgRegistryFlags_e;

typedef enum {
    PGR_PGN_MASK = 0x0fff,
    PGR_PGN_VERSION_MASK = 0xf000,
    PGR_SIZE_MASK = 0x0fff,
    PGR_SIZE_SYSTEM_FLAG = 0x0000,
    PGR_SIZE_PROFILE_FLAG = 0x8000
} pgRegistryInternal_e;


typedef void (pgResetFunc)(void * , int );

typedef struct pgRegistry_s {
    pgn_t pgn;
    uint16_t size;
    uint8_t *address;
    uint8_t *copy;
    uint8_t **ptr;
    union {
        void *ptr;
        pgResetFunc *fn;
    } reset;
} pgRegistry_t;

static inline uint16_t pgN(const pgRegistry_t* reg) {return reg->pgn & PGR_PGN_MASK;}
static inline uint8_t pgVersion(const pgRegistry_t* reg) {return (uint8_t)(reg->pgn >> 12);}
static inline uint16_t pgSize(const pgRegistry_t* reg) {return reg->size & PGR_SIZE_MASK;}
static inline uint16_t pgIsSystem(const pgRegistry_t* reg) {return (reg->size & PGR_SIZE_PROFILE_FLAG) == 0;}
static inline uint16_t pgIsProfile(const pgRegistry_t* reg) {return (reg->size & PGR_SIZE_PROFILE_FLAG) == PGR_SIZE_PROFILE_FLAG;}

#define PG_PACKED __attribute__((packed))
# 73 "./src/main/config/parameter_group.h"
extern const pgRegistry_t __pg_registry_start[];
extern const pgRegistry_t __pg_registry_end[];
#define PG_REGISTER_ATTRIBUTES __attribute__ ((section(".pg_registry"), used, aligned(4)))

extern const uint8_t __pg_resetdata_start[];
extern const uint8_t __pg_resetdata_end[];
#define PG_RESETDATA_ATTRIBUTES __attribute__ ((section(".pg_resetdata"), used, aligned(2)))


#define PG_REGISTRY_SIZE (__pg_registry_end - __pg_registry_start)


#define PG_FOREACH(_name) for (const pgRegistry_t *(_name) = __pg_registry_start; (_name) < __pg_registry_end; _name++)


#define PG_FOREACH_PROFILE(_name) PG_FOREACH(_name) if (pgIsSystem(_name)) continue; else
# 97 "./src/main/config/parameter_group.h"
#define PG_RESET_CURRENT(_name) do { extern const pgRegistry_t _name ##_Registry; pgResetCurrent(&_name ## _Registry); } while (0)







#define PG_DECLARE(_type,_name) extern _type _name ## _System; extern _type _name ## _Copy; static inline const _type* _name(void) { return &_name ## _System; } static inline _type* _name ## Mutable(void) { return &_name ## _System; } struct _dummy
# 114 "./src/main/config/parameter_group.h"
#define PG_DECLARE_ARRAY(_type,_size,_name) extern _type _name ## _SystemArray[_size]; extern _type _name ## _CopyArray[_size]; static inline const _type* _name(int _index) { return &_name ## _SystemArray[_index]; } static inline _type* _name ## Mutable(int _index) { return &_name ## _SystemArray[_index]; } static inline _type (* _name ## _array(void))[_size] { return &_name ## _SystemArray; } struct _dummy
# 124 "./src/main/config/parameter_group.h"
#define PG_DECLARE_PROFILE(_type,_name) extern _type *_name ## _ProfileCurrent; static inline const _type* _name(void) { return _name ## _ProfileCurrent; } static inline _type* _name ## Mutable(void) { return _name ## _ProfileCurrent; } struct _dummy
# 133 "./src/main/config/parameter_group.h"
#define PG_REGISTER_I(_type,_name,_pgn,_version,_reset) _type _name ## _System; _type _name ## _Copy; extern const pgRegistry_t _name ## _Registry; const pgRegistry_t _name ##_Registry PG_REGISTER_ATTRIBUTES = { .pgn = _pgn | (_version << 12), .size = sizeof(_type) | PGR_SIZE_SYSTEM_FLAG, .address = (uint8_t*)&_name ## _System, .copy = (uint8_t*)&_name ## _Copy, .ptr = 0, _reset, }
# 148 "./src/main/config/parameter_group.h"
#define PG_REGISTER(_type,_name,_pgn,_version) PG_REGISTER_I(_type, _name, _pgn, _version, .reset = {.ptr = 0})



#define PG_REGISTER_WITH_RESET_FN(_type,_name,_pgn,_version) extern void pgResetFn_ ## _name(_type *); PG_REGISTER_I(_type, _name, _pgn, _version, .reset = {.fn = (pgResetFunc*)&pgResetFn_ ## _name })




#define PG_REGISTER_WITH_RESET_TEMPLATE(_type,_name,_pgn,_version) extern const _type pgResetTemplate_ ## _name; PG_REGISTER_I(_type, _name, _pgn, _version, .reset = {.ptr = (void*)&pgResetTemplate_ ## _name})





#define PG_REGISTER_ARRAY_I(_type,_size,_name,_pgn,_version,_reset) _type _name ## _SystemArray[_size]; _type _name ## _CopyArray[_size]; extern const pgRegistry_t _name ##_Registry; const pgRegistry_t _name ## _Registry PG_REGISTER_ATTRIBUTES = { .pgn = _pgn | (_version << 12), .size = (sizeof(_type) * _size) | PGR_SIZE_SYSTEM_FLAG, .address = (uint8_t*)&_name ## _SystemArray, .copy = (uint8_t*)&_name ## _CopyArray, .ptr = 0, _reset, }
# 177 "./src/main/config/parameter_group.h"
#define PG_REGISTER_ARRAY(_type,_size,_name,_pgn,_version) PG_REGISTER_ARRAY_I(_type, _size, _name, _pgn, _version, .reset = {.ptr = 0})



#define PG_REGISTER_ARRAY_WITH_RESET_FN(_type,_size,_name,_pgn,_version) extern void pgResetFn_ ## _name(_type *); PG_REGISTER_ARRAY_I(_type, _size, _name, _pgn, _version, .reset = {.fn = (pgResetFunc*)&pgResetFn_ ## _name})
# 198 "./src/main/config/parameter_group.h"
#define _PG_PROFILE_CURRENT_DECL(_type,_name) _type *_name ## _ProfileCurrent;




#define PG_REGISTER_PROFILE_I(_type,_name,_pgn,_version,_reset) STATIC_UNIT_TESTED _type _name ## _Storage[MAX_PROFILE_COUNT]; STATIC_UNIT_TESTED _type _name ## _CopyStorage[MAX_PROFILE_COUNT]; _PG_PROFILE_CURRENT_DECL(_type, _name) extern const pgRegistry_t _name ## _Registry; const pgRegistry_t _name ## _Registry PG_REGISTER_ATTRIBUTES = { .pgn = _pgn | (_version << 12), .size = sizeof(_type) | PGR_SIZE_PROFILE_FLAG, .address = (uint8_t*)&_name ## _Storage, .copy = (uint8_t*)&_name ## _CopyStorage, .ptr = (uint8_t **)&_name ## _ProfileCurrent, _reset, }
# 218 "./src/main/config/parameter_group.h"
#define PG_REGISTER_PROFILE(_type,_name,_pgn,_version) PG_REGISTER_PROFILE_I(_type, _name, _pgn, _version, .reset = {.ptr = 0})



#define PG_REGISTER_PROFILE_WITH_RESET_FN(_type,_name,_pgn,_version) extern void pgResetFn_ ## _name(_type *); PG_REGISTER_PROFILE_I(_type, _name, _pgn, _version, .reset = {.fn = (pgResetFunc*)&pgResetFn_ ## _name})




#define PG_REGISTER_PROFILE_WITH_RESET_TEMPLATE(_type,_name,_pgn,_version) extern const _type pgResetTemplate_ ## _name; PG_REGISTER_PROFILE_I(_type, _name, _pgn, _version, .reset = {.ptr = (void*)&pgResetTemplate_ ## _name})







#define PG_RESET_TEMPLATE(_type,_name,...) const _type pgResetTemplate_ ## _name PG_RESETDATA_ATTRIBUTES = { __VA_ARGS__ }





const pgRegistry_t* pgFind(pgn_t pgn);

void pgLoad(const pgRegistry_t* reg, int profileIndex, const void *from, int size, int version);
int pgStore(const pgRegistry_t* reg, void *to, int size, uint8_t profileIndex);
void pgResetAll(int profileCount);
void pgResetCurrent(const pgRegistry_t *reg);

# 247 "./src/main/config/parameter_group.h" 3 4
_Bool 
# 247 "./src/main/config/parameter_group.h"
    pgResetCopy(void *copy, pgn_t pgn);
void pgReset(const pgRegistry_t* reg, int profileIndex);
void pgActivateProfile(int profileIndex);
# 26 "./src/main/common/time.h" 2


typedef int32_t timeDelta_t;

typedef uint32_t timeMs_t ;


typedef uint64_t timeUs_t;
#define TIMEUS_MAX UINT64_MAX





static inline timeDelta_t cmpTimeUs(timeUs_t a, timeUs_t b) { return (timeDelta_t)(a - b); }

typedef struct timeConfig_s {
    int16_t tz_offset;
} timeConfig_t;

extern timeConfig_t timeConfig_System; extern timeConfig_t timeConfig_Copy; static inline const timeConfig_t* timeConfig(void) { return &timeConfig_System; } static inline timeConfig_t* timeConfigMutable(void) { return &timeConfig_System; } struct _dummy;


typedef int64_t rtcTime_t;

rtcTime_t rtcTimeMake(int32_t secs, uint16_t millis);
int32_t rtcTimeGetSeconds(rtcTime_t *t);
uint16_t rtcTimeGetMillis(rtcTime_t *t);

typedef struct _dateTime_s {

    uint16_t year;

    uint8_t month;

    uint8_t day;

    uint8_t hours;

    uint8_t minutes;

    uint8_t seconds;

    uint16_t millis;
} dateTime_t;

#define FORMATTED_DATE_TIME_BUFSIZE 30



# 75 "./src/main/common/time.h" 3 4
_Bool 
# 75 "./src/main/common/time.h"
    dateTimeFormatUTC(char *buf, dateTime_t *dt);

# 76 "./src/main/common/time.h" 3 4
_Bool 
# 76 "./src/main/common/time.h"
    dateTimeFormatLocal(char *buf, dateTime_t *dt);

void dateTimeUTCToLocal(dateTime_t *utcDateTime, dateTime_t *localDateTime);




# 82 "./src/main/common/time.h" 3 4
_Bool 
# 82 "./src/main/common/time.h"
    dateTimeSplitFormatted(char *formatted, char **date, char **time);


# 84 "./src/main/common/time.h" 3 4
_Bool 
# 84 "./src/main/common/time.h"
    rtcHasTime(void);


# 86 "./src/main/common/time.h" 3 4
_Bool 
# 86 "./src/main/common/time.h"
    rtcGet(rtcTime_t *t);

# 87 "./src/main/common/time.h" 3 4
_Bool 
# 87 "./src/main/common/time.h"
    rtcSet(rtcTime_t *t);


# 89 "./src/main/common/time.h" 3 4
_Bool 
# 89 "./src/main/common/time.h"
    rtcGetDateTime(dateTime_t *dt);

# 90 "./src/main/common/time.h" 3 4
_Bool 
# 90 "./src/main/common/time.h"
    rtcSetDateTime(dateTime_t *dt);
# 30 "./src/main/build/debug.h" 2
extern timeUs_t sectionTimes[2][4];

#define TIME_SECTION_BEGIN(index) { extern timeUs_t sectionTimes[2][4]; sectionTimes[0][index] = micros(); }




#define TIME_SECTION_END(index) { extern timeUs_t sectionTimes[2][4]; sectionTimes[1][index] = micros(); debug[index] = sectionTimes[1][index] - sectionTimes[0][index]; }
# 49 "./src/main/build/debug.h"
typedef enum {
    DEBUG_NONE,
    DEBUG_GYRO,
    DEBUG_NOTCH,
    DEBUG_NAV_LANDING_DETECTOR,
    DEBUG_FW_CLIMB_RATE_TO_ALTITUDE,
    DEBUG_RANGEFINDER,
    DEBUG_RANGEFINDER_QUALITY,
    DEBUG_PITOT,
    DEBUG_AGL,
    DEBUG_FLOW_RAW,
    DEBUG_SBUS,
    DEBUG_FPORT,
    DEBUG_ALWAYS,
    DEBUG_COUNT
} debugType_e;


void debugTraceInit(void);
void debugTracePrintf(
# 68 "./src/main/build/debug.h" 3 4
                     _Bool 
# 68 "./src/main/build/debug.h"
                          synchronous, const char *format, ...);
void debugTracePrintBufferHex(
# 69 "./src/main/build/debug.h" 3 4
                             _Bool 
# 69 "./src/main/build/debug.h"
                                  synchronous, const void *buffer, size_t size);
#define DEBUG_TRACE(fmt,...) debugTracePrintf(false, fmt, ##__VA_ARGS__)
#define DEBUG_TRACE_SYNC(fmt,...) debugTracePrintf(true, fmt, ##__VA_ARGS__)
#define DEBUG_TRACE_BUFFER_HEX(buf,size) debugTracePrintBufferHex(false, buf, size)
#define DEBUG_TRACE_BUFFER_HEX_SYNC(buf,size) debugTracePrintBufferHex(true, buf, size)
# 33 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/common/axis.h" 1
# 18 "./src/main/common/axis.h"
       

typedef enum {
    X = 0,
    Y,
    Z
} axis_e;

#define XYZ_AXIS_COUNT 3


typedef enum {
    FD_ROLL = 0,
    FD_PITCH,
    FD_YAW
} flight_dynamics_index_t;

#define FLIGHT_DYNAMICS_INDEX_COUNT 3

typedef enum {
    AI_ROLL = 0,
    AI_PITCH,
} angle_index_t;

#define ANGLE_INDEX_COUNT 2
# 35 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/common/color.h" 1
# 18 "./src/main/common/color.h"
       


typedef enum {
    RGB_RED = 0,
    RGB_GREEN,
    RGB_BLUE
} colorComponent_e;

#define RGB_COLOR_COMPONENT_COUNT (RGB_BLUE + 1)

struct rgbColor24bpp_s {
    uint8_t r;
    uint8_t g;
    uint8_t b;
};

typedef union {
    struct rgbColor24bpp_s rgb;
    uint8_t raw[(RGB_BLUE + 1)];
} rgbColor24bpp_t;

#define HSV_HUE_MAX 359
#define HSV_SATURATION_MAX 255
#define HSV_VALUE_MAX 255

typedef enum {
    HSV_HUE = 0,
    HSV_SATURATION,
    HSV_VALUE
} hsvColorComponent_e;

#define HSV_COLOR_COMPONENT_COUNT (HSV_VALUE + 1)

typedef struct hsvColor_s {
    uint16_t h;
    uint8_t s;
    uint8_t v;
} hsvColor_t;
# 36 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/common/maths.h" 1
# 18 "./src/main/common/maths.h"
       




#define sq(x) ((x)*(x))



#define FAST_MATH 



#define M_PIf 3.14159265358979323846f
#define M_LN2f 0.69314718055994530942f
#define M_Ef 2.71828182845904523536f

#define RAD (M_PIf / 180.0f)

#define DEGREES_TO_CENTIDEGREES(angle) ((angle) * 100)
#define CENTIDEGREES_TO_DEGREES(angle) ((angle) / 100)

#define CENTIDEGREES_TO_DECIDEGREES(angle) ((angle) / 10)
#define DECIDEGREES_TO_CENTIDEGREES(angle) ((angle) * 10)

#define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
#define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)

#define DEGREES_PER_DEKADEGREE 10
#define DEGREES_TO_DEKADEGREES(angle) ((angle) / DEGREES_PER_DEKADEGREE)
#define DEKADEGREES_TO_DEGREES(angle) ((angle) * DEGREES_PER_DEKADEGREE)

#define DEGREES_TO_RADIANS(angle) ((angle) * RAD)
#define RADIANS_TO_DEGREES(angle) ((angle) / RAD)
#define DECIDEGREES_TO_RADIANS(angle) (((angle) / 10.0f) * RAD)
#define RADIANS_TO_DECIDEGREES(angle) (((angle) * 10.0f) / RAD)

#define RADIANS_TO_CENTIDEGREES(angle) (((angle) * 100.0f) / RAD)
#define CENTIDEGREES_TO_RADIANS(angle) (((angle) / 100.0f) * RAD)


#define _CHOOSE2(binoper,lexpr,lvar,rexpr,rvar) ( __extension__ ({ __typeof__(lexpr) lvar = (lexpr); __typeof__(rexpr) rvar = (rexpr); lvar binoper rvar ? lvar : rvar; }))





#define _CHOOSE_VAR2(prefix,unique) prefix ##unique
#define _CHOOSE_VAR(prefix,unique) _CHOOSE_VAR2(prefix, unique)
#define _CHOOSE(binoper,lexpr,rexpr) _CHOOSE2( binoper, lexpr, _CHOOSE_VAR(_left, __COUNTER__), rexpr, _CHOOSE_VAR(_right, __COUNTER__) )





#define MIN(a,b) _CHOOSE(<, a, b)
#define MAX(a,b) _CHOOSE(>, a, b)

#define _ABS_II(x,var) ( __extension__ ({ __typeof__(x) var = (x); var < 0 ? -var : var; }))




#define _ABS_I(x,var) _ABS_II(x, var)
#define ABS(x) _ABS_I(x, _CHOOSE_VAR(_abs, __COUNTER__))


typedef struct fp_angles {
    float roll;
    float pitch;
    float yaw;
} fp_angles_def;

typedef union {
    float raw[3];
    fp_angles_def angles;
} fp_angles_t;

typedef struct stdev_s
{
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

typedef struct filterWithBufferSample_s {
    float value;
    uint32_t timestamp;
} filterWithBufferSample_t;

typedef struct filterWithBufferState_s {
    uint16_t filter_size;
    uint16_t sample_index;
    filterWithBufferSample_t * samples;
} filterWithBufferState_t;

typedef struct {
    float XtY[4];
    float XtX[4][4];
} sensorCalibrationState_t;

void sensorCalibrationResetState(sensorCalibrationState_t * state);
void sensorCalibrationPushSampleForOffsetCalculation(sensorCalibrationState_t * state, int32_t sample[3]);
void sensorCalibrationPushSampleForScaleCalculation(sensorCalibrationState_t * state, int axis, int32_t sample[3], int target);
void sensorCalibrationSolveForOffset(sensorCalibrationState_t * state, float result[3]);
void sensorCalibrationSolveForScale(sensorCalibrationState_t * state, float result[3]);

int gcd(int num, int denom);
int32_t applyDeadband(int32_t value, int32_t deadband);

int constrain(int amt, int low, int high);
float constrainf(float amt, float low, float high);

void devClear(stdev_t *dev);
void devPush(stdev_t *dev, float x);
float devVariance(stdev_t *dev);
float devStandardDeviation(stdev_t *dev);
float degreesToRadians(int16_t degrees);

int scaleRange(int x, int srcMin, int srcMax, int destMin, int destMax);
float scaleRangef(float x, float srcMin, float srcMax, float destMin, float destMax);

int32_t wrap_18000(int32_t angle);
int32_t wrap_36000(int32_t angle);

int32_t quickMedianFilter3(int32_t * v);
int32_t quickMedianFilter5(int32_t * v);
int32_t quickMedianFilter7(int32_t * v);
int32_t quickMedianFilter9(int32_t * v);

int16_t quickMedianFilter3_16(int16_t * v);
int16_t quickMedianFilter5_16(int16_t * v);


float sin_approx(float x);
float cos_approx(float x);
float atan2_approx(float y, float x);
float acos_approx(float x);
#define tan_approx(x) (sin_approx(x) / cos_approx(x))
# 164 "./src/main/common/maths.h"
void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);

float bellCurve(const float x, const float curveWidth);
# 37 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/common/utils.h" 1
# 18 "./src/main/common/utils.h"
       

# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 21 "./src/main/common/utils.h" 2


#define ARRAYLEN(x) (sizeof(x) / sizeof((x)[0]))
#define ARRAYEND(x) (&(x)[ARRAYLEN(x)])

#define CONST_CAST(type,value) ((type)(value))

#define CONCAT_HELPER(x,y) x ## y
#define CONCAT(x,y) CONCAT_HELPER(x, y)

#define STR_HELPER(x) #x
#define STR(x) STR_HELPER(x)

#define EXPAND_I(x) x
#define EXPAND(x) EXPAND_I(x)


#define UNUSED(x) (void)(x)

#define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))

#define BIT(x) (1 << (x))

#define STATIC_ASSERT(condition,name) typedef char assert_failed_ ## name [(condition) ? 1 : -1 ] __attribute__((unused))





#define BITCOUNT(x) (((BX_(x)+(BX_(x)>>4)) & 0x0F0F0F0F) % 255)
#define BX_(x) ((x) - (((x)>>1)&0x77777777) - (((x)>>2)&0x33333333) - (((x)>>3)&0x11111111))







#define LOG2_8BIT(v) (8 - 90/(((v)/4+14)|1) - 2/((v)/2+1))
#define LOG2_16BIT(v) (8*((v)>255) + LOG2_8BIT((v) >>8*((v)>255)))
#define LOG2_32BIT(v) (16*((v)>65535L) + LOG2_16BIT((v)*1L >>16*((v)>65535L)))
#define LOG2_64BIT(v) (32*((v)/2L>>31 > 0) + LOG2_32BIT((v)*1L >>16*((v)/2L>>31 > 0) >>16*((v)/2L>>31 > 0)))
# 74 "./src/main/common/utils.h"
#define container_of(ptr,type,member) ( __extension__ ({ const typeof( ((type *)0)->member ) *__mptr = (ptr); (type *)( (char *)__mptr - offsetof(type,member) );}))



static inline int16_t cmp16(uint16_t a, uint16_t b) { return a-b; }
static inline int32_t cmp32(uint32_t a, uint32_t b) { return a-b; }
# 88 "./src/main/common/utils.h"
void * memcpy_fn ( void * destination, const void * source, size_t num ) asm("memcpy");






#define FALLTHROUGH __attribute__ ((fallthrough))




#define ALIGNED(x) __attribute__ ((aligned(x)))
# 38 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/config/feature.h" 1
# 18 "./src/main/config/feature.h"
       



typedef struct featureConfig_s {
    uint32_t enabledFeatures;
} featureConfig_t;

extern featureConfig_t featureConfig_System; extern featureConfig_t featureConfig_Copy; static inline const featureConfig_t* featureConfig(void) { return &featureConfig_System; } static inline featureConfig_t* featureConfigMutable(void) { return &featureConfig_System; } struct _dummy;

void latchActiveFeatures(void);

# 29 "./src/main/config/feature.h" 3 4
_Bool 
# 29 "./src/main/config/feature.h"
    featureConfigured(uint32_t mask);

# 30 "./src/main/config/feature.h" 3 4
_Bool 
# 30 "./src/main/config/feature.h"
    feature(uint32_t mask);
void featureSet(uint32_t mask);
void featureClear(uint32_t mask);
void featureClearAll(void);
uint32_t featureMask(void);
# 40 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/drivers/serial.h" 1
# 18 "./src/main/drivers/serial.h"
       

typedef enum portMode_t {
    MODE_RX = 1 << 0,
    MODE_TX = 1 << 1,
    MODE_RXTX = MODE_RX | MODE_TX
} portMode_t;

typedef enum portOptions_t {
    SERIAL_NOT_INVERTED = 0 << 0,
    SERIAL_INVERTED = 1 << 0,
    SERIAL_STOPBITS_1 = 0 << 1,
    SERIAL_STOPBITS_2 = 1 << 1,
    SERIAL_PARITY_NO = 0 << 2,
    SERIAL_PARITY_EVEN = 1 << 2,
    SERIAL_UNIDIR = 0 << 3,
    SERIAL_BIDIR = 1 << 3,
# 43 "./src/main/drivers/serial.h"
    SERIAL_BIDIR_OD = 0 << 4,
    SERIAL_BIDIR_PP = 1 << 4
} portOptions_t;

typedef void (*serialReceiveCallbackPtr)(uint16_t data, void *rxCallbackData);

typedef struct serialPort_s {

    const struct serialPortVTable *vTable;

    uint8_t identifier;
    portMode_t mode;
    portOptions_t options;

    uint32_t baudRate;

    uint32_t rxBufferSize;
    uint32_t txBufferSize;
    volatile uint8_t *rxBuffer;
    volatile uint8_t *txBuffer;
    uint32_t rxBufferHead;
    uint32_t rxBufferTail;
    uint32_t txBufferHead;
    uint32_t txBufferTail;

    serialReceiveCallbackPtr rxCallback;
    void *rxCallbackData;
} serialPort_t;

struct serialPortVTable {
    void (*serialWrite)(serialPort_t *instance, uint8_t ch);

    uint32_t (*serialTotalRxWaiting)(const serialPort_t *instance);
    uint32_t (*serialTotalTxFree)(const serialPort_t *instance);

    uint8_t (*serialRead)(serialPort_t *instance);


    void (*serialSetBaudRate)(serialPort_t *instance, uint32_t baudRate);

    
# 83 "./src/main/drivers/serial.h" 3 4
   _Bool 
# 83 "./src/main/drivers/serial.h"
        (*isSerialTransmitBufferEmpty)(const serialPort_t *instance);

    void (*setMode)(serialPort_t *instance, portMode_t mode);

    void (*writeBuf)(serialPort_t *instance, const void *data, int count);

    
# 89 "./src/main/drivers/serial.h" 3 4
   _Bool 
# 89 "./src/main/drivers/serial.h"
        (*isConnected)(const serialPort_t *instance);


    void (*beginWrite)(serialPort_t *instance);
    void (*endWrite)(serialPort_t *instance);
};

void serialWrite(serialPort_t *instance, uint8_t ch);
uint32_t serialRxBytesWaiting(const serialPort_t *instance);
uint32_t serialTxBytesFree(const serialPort_t *instance);
void serialWriteBuf(serialPort_t *instance, const uint8_t *data, int count);
uint8_t serialRead(serialPort_t *instance);
void serialSetBaudRate(serialPort_t *instance, uint32_t baudRate);
void serialSetMode(serialPort_t *instance, portMode_t mode);

# 103 "./src/main/drivers/serial.h" 3 4
_Bool 
# 103 "./src/main/drivers/serial.h"
    isSerialTransmitBufferEmpty(const serialPort_t *instance);
void serialPrint(serialPort_t *instance, const char *str);
uint32_t serialGetBaudRate(serialPort_t *instance);

# 106 "./src/main/drivers/serial.h" 3 4
_Bool 
# 106 "./src/main/drivers/serial.h"
    serialIsConnected(const serialPort_t *instance);


void serialWriteBufShim(void *instance, const uint8_t *data, int count);
void serialBeginWrite(serialPort_t *instance);
void serialEndWrite(serialPort_t *instance);
# 42 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/drivers/time.h" 1
# 18 "./src/main/drivers/time.h"
       





void delayMicroseconds(timeUs_t us);
void delay(timeMs_t ms);

timeUs_t micros(void);
timeUs_t microsISR(void);
timeMs_t millis(void);

uint32_t ticks(void);
timeDelta_t ticks_diff_us(uint32_t begin, uint32_t end);
# 43 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/fc/config.h" 1
# 18 "./src/main/fc/config.h"
       





# 1 "./src/main/drivers/adc.h" 1
# 18 "./src/main/drivers/adc.h"
       

# 1 "./src/main/drivers/io_types.h" 1
       





typedef uint8_t ioTag_t;
typedef void* IO_t;


#define IOTAG_NONE ((ioTag_t)0)


#define IO_NONE ((IO_t)0)
# 28 "./src/main/drivers/io_types.h"
typedef uint8_t ioConfig_t;
# 21 "./src/main/drivers/adc.h" 2

typedef enum {
    ADC_BATTERY = 0,
    ADC_RSSI = 1,
    ADC_CURRENT = 2,
    ADC_AIRSPEED = 3,
    ADC_FUNCTION_COUNT
} adcFunction_e;

typedef enum {
    ADC_CHN_NONE = 0,
    ADC_CHN_1 = 1,
    ADC_CHN_2,
    ADC_CHN_3,
    ADC_CHN_4,
    ADC_CHN_MAX = ADC_CHN_4,
    ADC_CHN_COUNT
} adcChannel_e;

typedef struct drv_adc_config_s {
    uint8_t adcFunctionChannel[ADC_FUNCTION_COUNT];
} drv_adc_config_t;

void adcInit(drv_adc_config_t *init);
uint16_t adcGetChannel(uint8_t channel);

# 46 "./src/main/drivers/adc.h" 3 4
_Bool 
# 46 "./src/main/drivers/adc.h"
    adcIsFunctionAssigned(uint8_t function);
int adcGetFunctionChannelAllocation(uint8_t function);
# 25 "./src/main/fc/config.h" 2
# 1 "./src/main/drivers/rx_pwm.h" 1
# 18 "./src/main/drivers/rx_pwm.h"
       

typedef enum {
    INPUT_FILTERING_DISABLED = 0,
    INPUT_FILTERING_ENABLED
} inputFilteringMode_e;

#define PPM_RCVR_TIMEOUT 0

struct timerHardware_s;
void ppmInConfig(const struct timerHardware_s *timerHardwarePtr, uint8_t motorPwmProtocol);

void pwmInConfig(const struct timerHardware_s *timerHardwarePtr, uint8_t channel);
uint16_t pwmRead(uint8_t channel);
uint16_t ppmRead(uint8_t channel);


# 34 "./src/main/drivers/rx_pwm.h" 3 4
_Bool 
# 34 "./src/main/drivers/rx_pwm.h"
    isPPMDataBeingReceived(void);
void resetPPMDataReceivedState(void);

void pwmRxInit(inputFilteringMode_e inputFilteringMode);


# 39 "./src/main/drivers/rx_pwm.h" 3 4
_Bool 
# 39 "./src/main/drivers/rx_pwm.h"
    isPWMDataBeingReceived(void);
# 26 "./src/main/fc/config.h" 2
# 1 "./src/main/fc/stats.h" 1

       


typedef struct statsConfig_s {
    uint32_t stats_total_time;
    uint32_t stats_total_dist;

    uint32_t stats_total_energy;

    uint8_t stats_enabled;
} statsConfig_t;

void statsOnArm(void);
void statsOnDisarm(void);
# 27 "./src/main/fc/config.h" 2

#define MAX_PROFILE_COUNT 3
#define ONESHOT_FEATURE_CHANGED_DELAY_ON_BOOT_MS 1500
#define MAX_NAME_LENGTH 16

#define ACC_TASK_FREQUENCY_DEFAULT 500
#define ACC_TASK_FREQUENCY_MIN 100
#define ACC_TASK_FREQUENCY_MAX 1000
#define ATTITUDE_TASK_FREQUENCY_DEFAULT 250
#define ATTITUDE_TASK_FREQUENCY_MIN 100
#define ATTITUDE_TASK_FREQUENCY_MAX 1000

typedef enum {
    ASYNC_MODE_NONE,
    ASYNC_MODE_GYRO,
    ASYNC_MODE_ALL
} asyncMode_e;

typedef enum {
    FEATURE_UNUSED_1 = 1 << 0,
    FEATURE_VBAT = 1 << 1,
    FEATURE_TX_PROF_SEL = 1 << 2,
    FEATURE_UNUSED_2 = 1 << 3,
    FEATURE_MOTOR_STOP = 1 << 4,
    FEATURE_SERVO_TILT = 1 << 5,
    FEATURE_SOFTSERIAL = 1 << 6,
    FEATURE_GPS = 1 << 7,
    FEATURE_UNUSED_3 = 1 << 8,
    FEATURE_UNUSED_4 = 1 << 9,
    FEATURE_TELEMETRY = 1 << 10,
    FEATURE_CURRENT_METER = 1 << 11,
    FEATURE_3D = 1 << 12,
    FEATURE_UNUSED_5 = 1 << 13,
    FEATURE_UNUSED_6 = 1 << 14,
    FEATURE_RSSI_ADC = 1 << 15,
    FEATURE_LED_STRIP = 1 << 16,
    FEATURE_DASHBOARD = 1 << 17,
    FEATURE_UNUSED_7 = 1 << 18,
    FEATURE_BLACKBOX = 1 << 19,
    FEATURE_CHANNEL_FORWARDING = 1 << 20,
    FEATURE_TRANSPONDER = 1 << 21,
    FEATURE_AIRMODE = 1 << 22,
    FEATURE_SUPEREXPO_RATES = 1 << 23,
    FEATURE_VTX = 1 << 24,
    FEATURE_UNUSED_8 = 1 << 25,
    FEATURE_UNUSED_9 = 1 << 26,
    FEATURE_PWM_SERVO_DRIVER = 1 << 27,
    FEATURE_PWM_OUTPUT_ENABLE = 1 << 28,
    FEATURE_OSD = 1 << 29,
    FEATURE_FW_LAUNCH = 1 << 30,
    FEATURE_DEBUG_TRACE = 1 << 31,
} features_e;

typedef struct systemConfig_s {
    uint16_t accTaskFrequency;
    uint16_t attitudeTaskFrequency;
    uint8_t current_profile_index;
    uint8_t asyncMode;
    uint8_t debug_mode;
    uint8_t i2c_speed;
    uint8_t cpuUnderclock;
    uint8_t throttle_tilt_compensation_strength;
    inputFilteringMode_e pwmRxInputFilteringMode;
    char name[16 + 1];
} systemConfig_t;

extern systemConfig_t systemConfig_System; extern systemConfig_t systemConfig_Copy; static inline const systemConfig_t* systemConfig(void) { return &systemConfig_System; } static inline systemConfig_t* systemConfigMutable(void) { return &systemConfig_System; } struct _dummy;

typedef struct beeperConfig_s {
    uint32_t beeper_off_flags;
    uint32_t preferred_beeper_off_flags;
} beeperConfig_t;

extern beeperConfig_t beeperConfig_System; extern beeperConfig_t beeperConfig_Copy; static inline const beeperConfig_t* beeperConfig(void) { return &beeperConfig_System; } static inline beeperConfig_t* beeperConfigMutable(void) { return &beeperConfig_System; } struct _dummy;

typedef struct adcChannelConfig_s {
    uint8_t adcFunctionChannel[ADC_FUNCTION_COUNT];
} adcChannelConfig_t;

extern adcChannelConfig_t adcChannelConfig_System; extern adcChannelConfig_t adcChannelConfig_Copy; static inline const adcChannelConfig_t* adcChannelConfig(void) { return &adcChannelConfig_System; } static inline adcChannelConfig_t* adcChannelConfigMutable(void) { return &adcChannelConfig_System; } struct _dummy;



extern statsConfig_t statsConfig_System; extern statsConfig_t statsConfig_Copy; static inline const statsConfig_t* statsConfig(void) { return &statsConfig_System; } static inline statsConfig_t* statsConfigMutable(void) { return &statsConfig_System; } struct _dummy;


void beeperOffSet(uint32_t mask);
void beeperOffSetAll(uint8_t beeperCount);
void beeperOffClear(uint32_t mask);
void beeperOffClearAll(void);
uint32_t getBeeperOffMask(void);
void setBeeperOffMask(uint32_t mask);
uint32_t getPreferredBeeperOffMask(void);
void setPreferredBeeperOffMask(uint32_t mask);

void copyCurrentProfileToProfileSlot(uint8_t profileSlotIndex);

void initEEPROM(void);
void resetEEPROM(void);
void readEEPROM(void);
void writeEEPROM(void);
void ensureEEPROMContainsValidData(void);

void saveConfigAndNotify(void);
void validateAndFixConfig(void);

uint8_t getConfigProfile(void);

# 134 "./src/main/fc/config.h" 3 4
_Bool 
# 134 "./src/main/fc/config.h"
    setConfigProfile(uint8_t profileIndex);
void setConfigProfileAndWriteEEPROM(uint8_t profileIndex);


# 137 "./src/main/fc/config.h" 3 4
_Bool 
# 137 "./src/main/fc/config.h"
    canSoftwareSerialBeUsed(void);
void applyAndSaveBoardAlignmentDelta(int16_t roll, int16_t pitch);

void createDefaultConfig(void);
void resetConfigs(void);
void targetConfiguration(void);

uint32_t getPidUpdateRate(void);
timeDelta_t getGyroUpdateRate(void);
uint16_t getAccUpdateRate(void);

uint16_t getAttitudeUpdateRate(void);
uint8_t getAsyncMode(void);
# 45 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/fc/fc_core.h" 1
# 18 "./src/main/fc/fc_core.h"
       

typedef enum disarmReason_e {
    DISARM_NONE = 0,
    DISARM_TIMEOUT = 1,
    DISARM_STICKS = 2,
    DISARM_SWITCH_3D = 3,
    DISARM_SWITCH = 4,
    DISARM_KILLSWITCH = 5,
    DISARM_FAILSAFE = 6,
    DISARM_NAVIGATION = 7,
    DISARM_REASON_COUNT
} disarmReason_t;

void handleInflightCalibrationStickPosition(void);

void mwDisarm(disarmReason_t disarmReason);
void mwArm(void);
disarmReason_t getDisarmReason(void);


# 38 "./src/main/fc/fc_core.h" 3 4
_Bool 
# 38 "./src/main/fc/fc_core.h"
    isCalibrating(void);
# 46 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/fc/rc_controls.h" 1
# 18 "./src/main/fc/rc_controls.h"
       



#define AUTO_DISARM_DELAY_MIN 0
#define AUTO_DISARM_DELAY_MAX 60

typedef enum rc_alias {
    ROLL = 0,
    PITCH,
    YAW,
    THROTTLE,
    AUX1,
    AUX2,
    AUX3,
    AUX4,
    AUX5,
    AUX6,
    AUX7,
    AUX8
} rc_alias_e;

typedef enum {
    THROTTLE_LOW = 0,
    THROTTLE_HIGH
} throttleStatus_e;

typedef enum {
    NOT_CENTERED = 0,
    CENTERED
} rollPitchStatus_e;

typedef enum {
    ROL_LO = (1 << (2 * ROLL)),
    ROL_CE = (3 << (2 * ROLL)),
    ROL_HI = (2 << (2 * ROLL)),

    PIT_LO = (1 << (2 * PITCH)),
    PIT_CE = (3 << (2 * PITCH)),
    PIT_HI = (2 << (2 * PITCH)),

    YAW_LO = (1 << (2 * YAW)),
    YAW_CE = (3 << (2 * YAW)),
    YAW_HI = (2 << (2 * YAW)),

    THR_LO = (1 << (2 * THROTTLE)),
    THR_CE = (3 << (2 * THROTTLE)),
    THR_HI = (2 << (2 * THROTTLE))
} stickPositions_e;

extern int16_t rcCommand[4];

typedef struct rcControlsConfig_s {
    uint8_t deadband;
    uint8_t yaw_deadband;
    uint8_t pos_hold_deadband;
    uint8_t alt_hold_deadband;
    uint16_t deadband3d_throttle;
} rcControlsConfig_t;

extern rcControlsConfig_t rcControlsConfig_System; extern rcControlsConfig_t rcControlsConfig_Copy; static inline const rcControlsConfig_t* rcControlsConfig(void) { return &rcControlsConfig_System; } static inline rcControlsConfig_t* rcControlsConfigMutable(void) { return &rcControlsConfig_System; } struct _dummy;

typedef struct armingConfig_s {
    uint8_t fixed_wing_auto_arm;
    uint8_t disarm_kill_switch;
    uint8_t auto_disarm_delay;
} armingConfig_t;

extern armingConfig_t armingConfig_System; extern armingConfig_t armingConfig_Copy; static inline const armingConfig_t* armingConfig(void) { return &armingConfig_System; } static inline armingConfig_t* armingConfigMutable(void) { return &armingConfig_System; } struct _dummy;

stickPositions_e getRcStickPositions(void);

# 89 "./src/main/fc/rc_controls.h" 3 4
_Bool 
# 89 "./src/main/fc/rc_controls.h"
    checkStickPosition(stickPositions_e stickPos);


# 91 "./src/main/fc/rc_controls.h" 3 4
_Bool 
# 91 "./src/main/fc/rc_controls.h"
    areSticksInApModePosition(uint16_t ap_mode);

# 92 "./src/main/fc/rc_controls.h" 3 4
_Bool 
# 92 "./src/main/fc/rc_controls.h"
    areSticksDeflectedMoreThanPosHoldDeadband(void);
throttleStatus_e calculateThrottleStatus(void);
rollPitchStatus_e calculateRollPitchCenterStatus(void);
void processRcStickPositions(throttleStatus_e throttleStatus, 
# 95 "./src/main/fc/rc_controls.h" 3 4
                                                             _Bool 
# 95 "./src/main/fc/rc_controls.h"
                                                                  disarm_kill_switch, 
# 95 "./src/main/fc/rc_controls.h" 3 4
                                                                                      _Bool 
# 95 "./src/main/fc/rc_controls.h"
                                                                                           fixed_wing_auto_arm);

int32_t getRcStickDeflection(int32_t axis, uint16_t midrc);
# 47 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/fc/runtime_config.h" 1
# 18 "./src/main/fc/runtime_config.h"
       


typedef enum {
    ARMED = (1 << 2),
    WAS_EVER_ARMED = (1 << 3),

    ARMING_DISABLED_FAILSAFE_SYSTEM = (1 << 7),

    ARMING_DISABLED_NOT_LEVEL = (1 << 8),
    ARMING_DISABLED_SENSORS_CALIBRATING = (1 << 9),
    ARMING_DISABLED_SYSTEM_OVERLOADED = (1 << 10),
    ARMING_DISABLED_NAVIGATION_UNSAFE = (1 << 11),
    ARMING_DISABLED_COMPASS_NOT_CALIBRATED = (1 << 12),
    ARMING_DISABLED_ACCELEROMETER_NOT_CALIBRATED = (1 << 13),
    ARMING_DISABLED_ARM_SWITCH = (1 << 14),
    ARMING_DISABLED_HARDWARE_FAILURE = (1 << 15),
    ARMING_DISABLED_BOXFAILSAFE = (1 << 16),
    ARMING_DISABLED_BOXKILLSWITCH = (1 << 17),
    ARMING_DISABLED_RC_LINK = (1 << 18),
    ARMING_DISABLED_THROTTLE = (1 << 19),
    ARMING_DISABLED_CLI = (1 << 20),
    ARMING_DISABLED_CMS_MENU = (1 << 21),
    ARMING_DISABLED_OSD_MENU = (1 << 22),
    ARMING_DISABLED_ROLLPITCH_NOT_CENTERED = (1 << 23),
    ARMING_DISABLED_SERVO_AUTOTRIM = (1 << 24),
    ARMING_DISABLED_OOM = (1 << 25),

    ARMING_DISABLED_ALL_FLAGS = (ARMING_DISABLED_FAILSAFE_SYSTEM | ARMING_DISABLED_NOT_LEVEL | ARMING_DISABLED_SENSORS_CALIBRATING | ARMING_DISABLED_SYSTEM_OVERLOADED |
                                                       ARMING_DISABLED_NAVIGATION_UNSAFE | ARMING_DISABLED_COMPASS_NOT_CALIBRATED | ARMING_DISABLED_ACCELEROMETER_NOT_CALIBRATED |
                                                       ARMING_DISABLED_ARM_SWITCH | ARMING_DISABLED_HARDWARE_FAILURE | ARMING_DISABLED_BOXFAILSAFE | ARMING_DISABLED_BOXKILLSWITCH |
                                                       ARMING_DISABLED_RC_LINK | ARMING_DISABLED_THROTTLE | ARMING_DISABLED_CLI | ARMING_DISABLED_CMS_MENU | ARMING_DISABLED_OSD_MENU |
                                                       ARMING_DISABLED_ROLLPITCH_NOT_CENTERED | ARMING_DISABLED_SERVO_AUTOTRIM | ARMING_DISABLED_OOM)
} armingFlag_e;

extern uint32_t armingFlags;

extern const char *armingDisableFlagNames[];

#define isArmingDisabled() (armingFlags & (ARMING_DISABLED_ALL_FLAGS))
#define DISABLE_ARMING_FLAG(mask) (armingFlags &= ~(mask))
#define ENABLE_ARMING_FLAG(mask) (armingFlags |= (mask))
#define ARMING_FLAG(mask) (armingFlags & (mask))



armingFlag_e isArmingDisabledReason(void);

typedef enum {
    ANGLE_MODE = (1 << 0),
    HORIZON_MODE = (1 << 1),
    HEADING_MODE = (1 << 2),
    NAV_ALTHOLD_MODE= (1 << 3),
    NAV_RTH_MODE = (1 << 4),
    NAV_POSHOLD_MODE= (1 << 5),
    HEADFREE_MODE = (1 << 6),
    NAV_LAUNCH_MODE = (1 << 7),
    MANUAL_MODE = (1 << 8),
    FAILSAFE_MODE = (1 << 9),
    AUTO_TUNE = (1 << 10),
    NAV_WP_MODE = (1 << 11),
    UNUSED_MODE2 = (1 << 12),
    FLAPERON = (1 << 13),

    TURN_ASSISTANT = (1 << 14),

} flightModeFlags_e;

extern uint32_t flightModeFlags;

#define DISABLE_FLIGHT_MODE(mask) disableFlightMode(mask)
#define ENABLE_FLIGHT_MODE(mask) enableFlightMode(mask)
#define FLIGHT_MODE(mask) (flightModeFlags & (mask))

typedef enum {
    GPS_FIX_HOME = (1 << 0),
    GPS_FIX = (1 << 1),
    CALIBRATE_MAG = (1 << 2),
    SMALL_ANGLE = (1 << 3),
    FIXED_WING = (1 << 4),
    ANTI_WINDUP = (1 << 5),
    FLAPERON_AVAILABLE = (1 << 6),
    NAV_MOTOR_STOP_OR_IDLE = (1 << 7),
    COMPASS_CALIBRATED = (1 << 8),
    ACCELEROMETER_CALIBRATED= (1 << 9),
    PWM_DRIVER_AVAILABLE = (1 << 10),
    HELICOPTER = (1 << 11)
} stateFlags_t;

#define DISABLE_STATE(mask) (stateFlags &= ~(mask))
#define ENABLE_STATE(mask) (stateFlags |= (mask))
#define STATE(mask) (stateFlags & (mask))

extern uint32_t stateFlags;

typedef enum {
    FLM_MANUAL,
    FLM_ACRO,
    FLM_ANGLE,
    FLM_HORIZON,
    FLM_ALTITUDE_HOLD,
    FLM_POSITION_HOLD,
    FLM_RTH,
    FLM_MISSION,
    FLM_LAUNCH,
    FLM_FAILSAFE,
    FLM_COUNT
} flightModeForTelemetry_e;

flightModeForTelemetry_e getFlightModeForTelemetry(void);

uint32_t enableFlightMode(flightModeFlags_e mask);
uint32_t disableFlightMode(flightModeFlags_e mask);


# 132 "./src/main/fc/runtime_config.h" 3 4
_Bool 
# 132 "./src/main/fc/runtime_config.h"
    sensors(uint32_t mask);
void sensorsSet(uint32_t mask);
void sensorsClear(uint32_t mask);
uint32_t sensorsMask(void);
# 48 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/flight/failsafe.h" 1
# 18 "./src/main/flight/failsafe.h"
       



#define FAILSAFE_POWER_ON_DELAY_US (1000 * 1000 * 5)
#define MILLIS_PER_TENTH_SECOND 100
#define MILLIS_PER_SECOND 1000
#define PERIOD_OF_1_SECONDS 1 * MILLIS_PER_SECOND
#define PERIOD_OF_3_SECONDS 3 * MILLIS_PER_SECOND
#define PERIOD_OF_30_SECONDS 30 * MILLIS_PER_SECOND
#define PERIOD_RXDATA_FAILURE 200
#define PERIOD_RXDATA_RECOVERY 200


typedef struct failsafeConfig_s {
    uint16_t failsafe_throttle;
    uint16_t failsafe_throttle_low_delay;
    uint8_t failsafe_delay;
    uint8_t failsafe_recovery_delay;
    uint8_t failsafe_off_delay;
    uint8_t failsafe_procedure;

    int16_t failsafe_fw_roll_angle;
    int16_t failsafe_fw_pitch_angle;
    int16_t failsafe_fw_yaw_rate;
    uint16_t failsafe_stick_motion_threshold;
    uint16_t failsafe_min_distance;
    uint8_t failsafe_min_distance_procedure;
} failsafeConfig_t;

extern failsafeConfig_t failsafeConfig_System; extern failsafeConfig_t failsafeConfig_Copy; static inline const failsafeConfig_t* failsafeConfig(void) { return &failsafeConfig_System; } static inline failsafeConfig_t* failsafeConfigMutable(void) { return &failsafeConfig_System; } struct _dummy;

typedef enum {




    FAILSAFE_IDLE = 0,
# 64 "./src/main/flight/failsafe.h"
    FAILSAFE_RX_LOSS_DETECTED,







    FAILSAFE_RX_LOSS_IDLE,
# 81 "./src/main/flight/failsafe.h"
    FAILSAFE_RETURN_TO_HOME,
# 92 "./src/main/flight/failsafe.h"
    FAILSAFE_LANDING,






    FAILSAFE_LANDED,





    FAILSAFE_RX_LOSS_MONITORING,




    FAILSAFE_RX_LOSS_RECOVERED
} failsafePhase_e;

typedef enum {
    FAILSAFE_RXLINK_DOWN = 0,
    FAILSAFE_RXLINK_UP
} failsafeRxLinkState_e;

typedef enum {
    FAILSAFE_PROCEDURE_AUTO_LANDING = 0,
    FAILSAFE_PROCEDURE_DROP_IT,
    FAILSAFE_PROCEDURE_RTH,
    FAILSAFE_PROCEDURE_NONE
} failsafeProcedure_e;

typedef enum {
    RTH_IDLE = 0,
    RTH_IN_PROGRESS,
    RTH_HAS_LANDED
} rthState_e;

typedef struct failsafeState_s {
    int16_t events;
    
# 133 "./src/main/flight/failsafe.h" 3 4
   _Bool 
# 133 "./src/main/flight/failsafe.h"
        monitoring;
    
# 134 "./src/main/flight/failsafe.h" 3 4
   _Bool 
# 134 "./src/main/flight/failsafe.h"
        suspended;
    
# 135 "./src/main/flight/failsafe.h" 3 4
   _Bool 
# 135 "./src/main/flight/failsafe.h"
        active;
    
# 136 "./src/main/flight/failsafe.h" 3 4
   _Bool 
# 136 "./src/main/flight/failsafe.h"
        controlling;
    timeMs_t rxDataFailurePeriod;
    timeMs_t rxDataRecoveryPeriod;
    timeMs_t validRxDataReceivedAt;
    timeMs_t validRxDataFailedAt;
    timeMs_t throttleLowPeriod;
    timeMs_t landingShouldBeFinishedAt;
    timeMs_t receivingRxDataPeriod;
    timeMs_t receivingRxDataPeriodPreset;
    failsafePhase_e phase;
    failsafeRxLinkState_e rxLinkState;
    int16_t lastGoodRcCommand[4];
} failsafeState_t;

void failsafeInit(void);
void failsafeReset(void);

void failsafeStartMonitoring(void);
void failsafeUpdateState(void);

failsafePhase_e failsafePhase(void);

# 157 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 157 "./src/main/flight/failsafe.h"
    failsafeIsMonitoring(void);

# 158 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 158 "./src/main/flight/failsafe.h"
    failsafeIsActive(void);

# 159 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 159 "./src/main/flight/failsafe.h"
    failsafeIsReceivingRxData(void);
void failsafeOnRxSuspend(void);
void failsafeOnRxResume(void);

# 162 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 162 "./src/main/flight/failsafe.h"
    failsafeMayRequireNavigationMode(void);
void failsafeApplyControlInput(void);

# 164 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 164 "./src/main/flight/failsafe.h"
    failsafeRequiresAngleMode(void);

# 165 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 165 "./src/main/flight/failsafe.h"
    failsafeRequiresMotorStop(void);

# 166 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 166 "./src/main/flight/failsafe.h"
    failsafeShouldApplyControlInput(void);

# 167 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 167 "./src/main/flight/failsafe.h"
    failsafeBypassNavigation(void);
void failsafeUpdateRcCommandValues(void);

void failsafeOnValidDataReceived(void);
void failsafeOnValidDataFailed(void);
# 50 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/imu.h" 1
# 18 "./src/main/flight/imu.h"
       



# 1 "./src/main/common/vector.h" 1
# 18 "./src/main/common/vector.h"
       


# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 1 3


#define _MATH_H_ 



# 1 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 8 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 2 3





#define _M_LN2 0.693147180559945309417





#define HUGE_VAL (__builtin_huge_val())



#define HUGE_VALF (__builtin_huge_valf())



#define HUGE_VALL (__builtin_huge_vall())



#define INFINITY (__builtin_inff())



#define NAN (__builtin_nanf(""))
# 86 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3

# 86 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);




extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);





extern int isinf (double);




extern int isnan (double);
# 145 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
#define FLT_EVAL_METHOD __FLT_EVAL_METHOD__
#define __TMP_FLT_EVAL_METHOD 



    typedef float float_t;
    typedef double double_t;
# 168 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
#undef FLT_EVAL_METHOD


#define FP_NAN 0
#define FP_INFINITE 1
#define FP_ZERO 2
#define FP_SUBNORMAL 3
#define FP_NORMAL 4


#define FP_ILOGB0 (-__INT_MAX__)


#define FP_ILOGBNAN __INT_MAX__



#define MATH_ERRNO 1


#define MATH_ERREXCEPT 2


#define math_errhandling MATH_ERRNO


extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 211 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
#define fpclassify(__x) (__builtin_fpclassify (FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, __x))



#define isfinite(__x) (__builtin_isfinite (__x))


#define isinf(__x) (__builtin_isinf_sign (__x))


#define isnan(__x) (__builtin_isnan (__x))

#define isnormal(__x) (__builtin_isnormal (__x))
# 244 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
#define signbit(__x) ((sizeof(__x) == sizeof(float)) ? __builtin_signbitf(__x) : (sizeof(__x) == sizeof(double)) ? __builtin_signbit (__x) : __builtin_signbitl(__x))
# 260 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
#define isgreater(__x,__y) (__builtin_isgreater (__x, __y))
#define isgreaterequal(__x,__y) (__builtin_isgreaterequal (__x, __y))
#define isless(__x,__y) (__builtin_isless (__x, __y))
#define islessequal(__x,__y) (__builtin_islessequal (__x, __y))
#define islessgreater(__x,__y) (__builtin_islessgreater (__x, __y))
#define isunordered(__x,__y) (__builtin_isunordered (__x, __y))
# 290 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);

#define log2(x) (log (x) / _M_LN2)



extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
# 422 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 503 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
extern double drem (double, double);
extern float dremf (float, float);



extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);



extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);
# 564 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
#define signgam (*__signgam())
extern int *__signgam (void);


#define __signgam_r(ptr) _REENT_SIGNGAM(ptr)
# 578 "/home/ethan/developer/opendrone/tools/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/math.h" 3
struct exception

{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};




extern int matherr (struct exception *e);




#define DOMAIN 1
#define SING 2
#define OVERFLOW 3
#define UNDERFLOW 4
#define TLOSS 5
#define PLOSS 6







#define MAXFLOAT 3.40282347e+38F

#define M_E 2.7182818284590452354
#define M_LOG2E 1.4426950408889634074
#define M_LOG10E 0.43429448190325182765
#define M_LN2 _M_LN2
#define M_LN10 2.30258509299404568402
#define M_PI 3.14159265358979323846
#define M_PI_2 1.57079632679489661923
#define M_PI_4 0.78539816339744830962
#define M_1_PI 0.31830988618379067154
#define M_2_PI 0.63661977236758134308
#define M_2_SQRTPI 1.12837916709551257390
#define M_SQRT2 1.41421356237309504880
#define M_SQRT1_2 0.70710678118654752440





#define M_TWOPI (M_PI * 2.0)
#define M_3PI_4 2.3561944901923448370E0
#define M_SQRTPI 1.77245385090551602792981
#define M_LN2LO 1.9082149292705877000E-10
#define M_LN2HI 6.9314718036912381649E-1
#define M_SQRT3 1.73205080756887719000
#define M_IVLN10 0.43429448190325182765
#define M_LOG2_E _M_LN2
#define M_INVLN2 1.4426950408889633870E0



enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};

#define _LIB_VERSION_TYPE enum __fdlibm_version
#define _LIB_VERSION __fdlib_version

extern enum __fdlibm_version __fdlib_version;

#define _IEEE_ __fdlibm_ieee
#define _SVID_ __fdlibm_svid
#define _XOPEN_ __fdlibm_xopen
#define _POSIX_ __fdlibm_posix




# 22 "./src/main/common/vector.h" 2




# 25 "./src/main/common/vector.h"
typedef union {
    float v[3];
    struct {
       float x,y,z;
    };
} fpVector3_t;

typedef struct {
    float m[3][3];
} fpMat3_t;

typedef struct {
    fpVector3_t axis;
    float angle;
} fpAxisAngle_t;

void rotationMatrixFromAngles(fpMat3_t * rmat, const fp_angles_t * angles);
void rotationMatrixFromAxisAngle(fpMat3_t * rmat, const fpAxisAngle_t * a);

static inline fpVector3_t * rotationMatrixRotateVector(fpVector3_t * result, const fpVector3_t * a, const fpMat3_t * rmat)
{
    fpVector3_t r;

    r.x = rmat->m[0][0] * a->x + rmat->m[1][0] * a->y + rmat->m[2][0] * a->z;
    r.y = rmat->m[0][1] * a->x + rmat->m[1][1] * a->y + rmat->m[2][1] * a->z;
    r.z = rmat->m[0][2] * a->x + rmat->m[1][2] * a->y + rmat->m[2][2] * a->z;

    *result = r;
    return result;
}

static inline float vectorNormSquared(const fpVector3_t * v)
{
    return ((v->x)*(v->x)) + ((v->y)*(v->y)) + ((v->z)*(v->z));
}

static inline fpVector3_t * vectorNormalize(fpVector3_t * result, const fpVector3_t * v)
{
    float length = sqrtf(vectorNormSquared(v));
    if (length != 0) {
        result->x = v->x / length;
        result->y = v->y / length;
        result->z = v->z / length;
    }
    else {
        result->x = 0;
        result->y = 0;
        result->z = 0;
    }
    return result;
}

static inline fpVector3_t * vectorCrossProduct(fpVector3_t * result, const fpVector3_t * a, const fpVector3_t * b)
{
    fpVector3_t ab;

    ab.x = a->y * b->z - a->z * b->y;
    ab.y = a->z * b->x - a->x * b->z;
    ab.z = a->x * b->y - a->y * b->x;

    *result = ab;
    return result;
}

static inline fpVector3_t * vectorAdd(fpVector3_t * result, const fpVector3_t * a, const fpVector3_t * b)
{
    fpVector3_t ab;

    ab.x = a->x + b->x;
    ab.y = a->y + b->y;
    ab.z = a->z + b->z;

    *result = ab;
    return result;
}

static inline fpVector3_t * vectorScale(fpVector3_t * result, const fpVector3_t * a, const float b)
{
    fpVector3_t ab;

    ab.x = a->x * b;
    ab.y = a->y * b;
    ab.z = a->z * b;

    *result = ab;
    return result;
}
# 23 "./src/main/flight/imu.h" 2
# 1 "./src/main/common/quaternion.h" 1
# 21 "./src/main/common/quaternion.h"
       







typedef struct {
    float q0, q1, q2, q3;
} fpQuaternion_t;

static inline fpQuaternion_t * quaternionInitUnit(fpQuaternion_t * result)
{
    result->q0 = 1.0f;
    result->q1 = 0.0f;
    result->q2 = 0.0f;
    result->q3 = 0.0f;
    return result;
}

static inline fpQuaternion_t * quaternionInitFromVector(fpQuaternion_t * result, const fpVector3_t * v)
{
    result->q0 = 0.0f;
    result->q1 = v->x;
    result->q2 = v->y;
    result->q3 = v->z;
    return result;
}

static inline void quaternionToAxisAngle(fpAxisAngle_t * result, const fpQuaternion_t * q)
{
    fpAxisAngle_t a = {.axis = {{1.0f, 0.0f, 0.0f}}};

    a.angle = 2.0f * acos_approx(constrainf(q->q0, -1.0f, 1.0f));

    if (a.angle > 3.14159265358979323846f) {
        a.angle -= 2.0f * 3.14159265358979323846f;
    }

    const float sinVal = sqrt(1.0f - q->q0 * q->q0);


    if (sinVal > 1e-4f) {
        a.axis.x = q->q1 / sinVal;
        a.axis.y = q->q2 / sinVal;
        a.axis.z = q->q3 / sinVal;
    } else {
        a.angle = 0;
    }

    *result = a;
}

static inline fpQuaternion_t * axisAngleToQuaternion(fpQuaternion_t * result, const fpAxisAngle_t * a)
{
  fpQuaternion_t q;
  const float s = sin_approx(a->angle / 2.0f);

  q.q0 = cos_approx(a->angle / 2.0f);
  q.q1 = -a->axis.x * s;
  q.q2 = -a->axis.y * s;
  q.q3 = -a->axis.z * s;

  *result = q;
  return result;
}

static inline float quaternionNormSqared(const fpQuaternion_t * q)
{
    return ((q->q0)*(q->q0)) + ((q->q1)*(q->q1)) + ((q->q2)*(q->q2)) + ((q->q3)*(q->q3));
}

static inline fpQuaternion_t * quaternionMultiply(fpQuaternion_t * result, const fpQuaternion_t * a, const fpQuaternion_t * b)
{
  fpQuaternion_t p;

  p.q0 = a->q0 * b->q0 - a->q1 * b->q1 - a->q2 * b->q2 - a->q3 * b->q3;
  p.q1 = a->q0 * b->q1 + a->q1 * b->q0 + a->q2 * b->q3 - a->q3 * b->q2;
  p.q2 = a->q0 * b->q2 - a->q1 * b->q3 + a->q2 * b->q0 + a->q3 * b->q1;
  p.q3 = a->q0 * b->q3 + a->q1 * b->q2 - a->q2 * b->q1 + a->q3 * b->q0;

  *result = p;
  return result;
}

static inline fpQuaternion_t * quaternionScale(fpQuaternion_t * result, const fpQuaternion_t * a, const float b)
{
    fpQuaternion_t p;

    p.q0 = a->q0 * b;
    p.q1 = a->q1 * b;
    p.q2 = a->q2 * b;
    p.q3 = a->q3 * b;

    *result = p;
    return result;
}

static inline fpQuaternion_t * quaternionAdd(fpQuaternion_t * result, const fpQuaternion_t * a, const fpQuaternion_t * b)
{
    fpQuaternion_t p;

    p.q0 = a->q0 + b->q0;
    p.q1 = a->q1 + b->q1;
    p.q2 = a->q2 + b->q2;
    p.q3 = a->q3 + b->q3;

    *result = p;
    return result;
}

static inline fpQuaternion_t * quaternionConjugate(fpQuaternion_t * result, const fpQuaternion_t * q)
{
    result->q0 = q->q0;
    result->q1 = -q->q1;
    result->q2 = -q->q2;
    result->q3 = -q->q3;

    return result;
}

static inline fpQuaternion_t * quaternionNormalize(fpQuaternion_t * result, const fpQuaternion_t * q)
{
    float mod = sqrtf(quaternionNormSqared(q));
    if (mod < 1e-6f) {

        result->q0 = 1;
        result->q1 = 0;
        result->q2 = 0;
        result->q3 = 0;
    }
    else {
        result->q0 = q->q0 / mod;
        result->q1 = q->q1 / mod;
        result->q2 = q->q2 / mod;
        result->q3 = q->q3 / mod;
    }

    return result;
}

static inline fpVector3_t * quaternionRotateVector(fpVector3_t * result, const fpVector3_t * vect, const fpQuaternion_t * ref)
{
    fpQuaternion_t vectQuat, refConj;

    vectQuat.q0 = 0;
    vectQuat.q1 = vect->x;
    vectQuat.q2 = vect->y;
    vectQuat.q3 = vect->z;

    quaternionConjugate(&refConj, ref);
    quaternionMultiply(&vectQuat, &refConj, &vectQuat);
    quaternionMultiply(&vectQuat, &vectQuat, ref);

    result->x = vectQuat.q1;
    result->y = vectQuat.q2;
    result->z = vectQuat.q3;
    return result;
}

static inline fpVector3_t * quaternionRotateVectorInv(fpVector3_t * result, const fpVector3_t * vect, const fpQuaternion_t * ref)
{
    fpQuaternion_t vectQuat, refConj;

    vectQuat.q0 = 0;
    vectQuat.q1 = vect->x;
    vectQuat.q2 = vect->y;
    vectQuat.q3 = vect->z;

    quaternionConjugate(&refConj, ref);
    quaternionMultiply(&vectQuat, ref, &vectQuat);
    quaternionMultiply(&vectQuat, &vectQuat, &refConj);

    result->x = vectQuat.q1;
    result->y = vectQuat.q2;
    result->z = vectQuat.q3;
    return result;
}
# 24 "./src/main/flight/imu.h" 2



extern fpVector3_t imuMeasuredAccelBF;
extern fpVector3_t imuMeasuredRotationBF;

typedef union {
    int16_t raw[3];
    struct {

        int16_t roll;
        int16_t pitch;
        int16_t yaw;
    } values;
} attitudeEulerAngles_t;

extern fpQuaternion_t orientation;
extern attitudeEulerAngles_t attitude;

typedef struct imuConfig_s {
    uint16_t dcm_kp_acc;
    uint16_t dcm_ki_acc;
    uint16_t dcm_kp_mag;
    uint16_t dcm_ki_mag;
    uint8_t small_angle;
} imuConfig_t;

extern imuConfig_t imuConfig_System; extern imuConfig_t imuConfig_Copy; static inline const imuConfig_t* imuConfig(void) { return &imuConfig_System; } static inline imuConfig_t* imuConfigMutable(void) { return &imuConfig_System; } struct _dummy;

typedef struct imuRuntimeConfig_s {
    float dcm_kp_acc;
    float dcm_ki_acc;
    float dcm_kp_mag;
    float dcm_ki_mag;
    uint8_t small_angle;
} imuRuntimeConfig_t;

void imuConfigure(void);

void imuSetMagneticDeclination(float declinationDeg);
void imuUpdateAttitude(timeUs_t currentTimeUs);
void imuUpdateAccelerometer(void);
float calculateCosTiltAngle(void);

# 67 "./src/main/flight/imu.h" 3 4
_Bool 
# 67 "./src/main/flight/imu.h"
    isImuReady(void);

# 68 "./src/main/flight/imu.h" 3 4
_Bool 
# 68 "./src/main/flight/imu.h"
    isImuHeadingValid(void);

void imuTransformVectorBodyToEarth(fpVector3_t * v);
void imuTransformVectorEarthToBody(fpVector3_t * v);

void imuInit(void);
# 51 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/mixer.h" 1
# 18 "./src/main/flight/mixer.h"
       
# 27 "./src/main/flight/mixer.h"
#define MAX_SUPPORTED_MOTORS 12


#define YAW_JUMP_PREVENTION_LIMIT_LOW 80
#define YAW_JUMP_PREVENTION_LIMIT_HIGH 500



typedef enum mixerMode
{
    MIXER_TRI = 1,
    MIXER_QUADP = 2,
    MIXER_QUADX = 3,
    MIXER_BICOPTER = 4,
    MIXER_GIMBAL = 5,
    MIXER_Y6 = 6,
    MIXER_HEX6 = 7,
    MIXER_FLYING_WING = 8,
    MIXER_Y4 = 9,
    MIXER_HEX6X = 10,
    MIXER_OCTOX8 = 11,
    MIXER_OCTOFLATP = 12,
    MIXER_OCTOFLATX = 13,
    MIXER_AIRPLANE = 14,
    MIXER_HELI_120_CCPM = 15,
    MIXER_HELI_90_DEG = 16,
    MIXER_VTAIL4 = 17,
    MIXER_HEX6H = 18,
    MIXER_PPM_TO_SERVO = 19,
    MIXER_DUALCOPTER = 20,
    MIXER_SINGLECOPTER = 21,
    MIXER_ATAIL4 = 22,
    MIXER_CUSTOM = 23,
    MIXER_CUSTOM_AIRPLANE = 24,
    MIXER_CUSTOM_TRI = 25
} mixerMode_e;

#define DEFAULT_MIXER MIXER_QUADX

typedef struct motorAxisCorrectionLimits_s {
    int16_t min;
    int16_t max;
} motorAxisCorrectionLimits_t;


typedef struct motorMixer_s {
    float throttle;
    float roll;
    float pitch;
    float yaw;
} motorMixer_t;

extern motorMixer_t customMotorMixer_SystemArray[12]; extern motorMixer_t customMotorMixer_CopyArray[12]; static inline const motorMixer_t* customMotorMixer(int _index) { return &customMotorMixer_SystemArray[_index]; } static inline motorMixer_t* customMotorMixerMutable(int _index) { return &customMotorMixer_SystemArray[_index]; } static inline motorMixer_t (* customMotorMixer_array(void))[12] { return &customMotorMixer_SystemArray; } struct _dummy;


typedef struct mixer_s {
    mixerMode_e mixerMode;
    const motorMixer_t *motor;
    uint8_t flyingPlatformType;
    uint8_t motorCount;
    
# 87 "./src/main/flight/mixer.h" 3 4
   _Bool 
# 87 "./src/main/flight/mixer.h"
        useServos;
    
# 88 "./src/main/flight/mixer.h" 3 4
   _Bool 
# 88 "./src/main/flight/mixer.h"
        hasFlaps;
} mixer_t;

typedef struct mixerConfig_s {
    uint8_t mixerMode;
    int8_t yaw_motor_direction;
    uint16_t yaw_jump_prevention_limit;
} mixerConfig_t;

extern mixerConfig_t mixerConfig_System; extern mixerConfig_t mixerConfig_Copy; static inline const mixerConfig_t* mixerConfig(void) { return &mixerConfig_System; } static inline mixerConfig_t* mixerConfigMutable(void) { return &mixerConfig_System; } struct _dummy;

typedef struct flight3DConfig_s {
    uint16_t deadband3d_low;
    uint16_t deadband3d_high;
    uint16_t neutral3d;
} flight3DConfig_t;

extern flight3DConfig_t flight3DConfig_System; extern flight3DConfig_t flight3DConfig_Copy; static inline const flight3DConfig_t* flight3DConfig(void) { return &flight3DConfig_System; } static inline flight3DConfig_t* flight3DConfigMutable(void) { return &flight3DConfig_System; } struct _dummy;

typedef struct motorConfig_s {

    uint16_t minthrottle;
    uint16_t maxthrottle;
    uint16_t mincommand;
    uint16_t motorPwmRate;
    uint8_t motorPwmProtocol;
} motorConfig_t;

extern motorConfig_t motorConfig_System; extern motorConfig_t motorConfig_Copy; static inline const motorConfig_t* motorConfig(void) { return &motorConfig_System; } static inline motorConfig_t* motorConfigMutable(void) { return &motorConfig_System; } struct _dummy;

#define CHANNEL_FORWARDING_DISABLED (uint8_t)0xFF

extern int16_t motor[12];
extern int16_t motor_disarmed[12];

uint8_t getMotorCount(void);

# 124 "./src/main/flight/mixer.h" 3 4
_Bool 
# 124 "./src/main/flight/mixer.h"
    mixerIsOutputSaturated(void);

void writeAllMotors(int16_t mc);
void mixerLoadMix(int index, motorMixer_t *customMixers);
void mixerUsePWMIOConfiguration(void);
void mixerUpdateStateFlags(void);
void mixerResetDisarmedMotors(void);
void mixTable(void);
void writeMotors(void);
void processServoTilt(void);
void processServoAutotrim(void);
void stopMotors(void);
void stopPwmAllMotors(void);

int getFlyingPlatformType(void);


# 140 "./src/main/flight/mixer.h" 3 4
_Bool 
# 140 "./src/main/flight/mixer.h"
    isMixerEnabled(mixerMode_e mixerMode);
# 52 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/pid.h" 1
# 18 "./src/main/flight/pid.h"
       




#define GYRO_SATURATION_LIMIT 1800
#define PID_SUM_LIMIT_MIN 100
#define PID_SUM_LIMIT_MAX 1000
#define PID_SUM_LIMIT_DEFAULT 500
#define YAW_P_LIMIT_MIN 100
#define YAW_P_LIMIT_MAX 500
#define YAW_P_LIMIT_DEFAULT 300

#define HEADING_HOLD_RATE_LIMIT_MIN 10
#define HEADING_HOLD_RATE_LIMIT_MAX 250
#define HEADING_HOLD_RATE_LIMIT_DEFAULT 90

#define FW_ITERM_THROW_LIMIT_DEFAULT 165
#define FW_ITERM_THROW_LIMIT_MIN 0
#define FW_ITERM_THROW_LIMIT_MAX 500

#define AXIS_ACCEL_MIN_LIMIT 50

#define HEADING_HOLD_ERROR_LPF_FREQ 2




#define FP_PID_RATE_FF_MULTIPLIER 31.0f
#define FP_PID_RATE_P_MULTIPLIER 31.0f
#define FP_PID_RATE_I_MULTIPLIER 4.0f
#define FP_PID_RATE_D_MULTIPLIER 1905.0f
#define FP_PID_LEVEL_P_MULTIPLIER 6.56f
#define FP_PID_YAWHOLD_P_MULTIPLIER 80.0f

typedef enum {

    PID_ROLL,
    PID_PITCH,
    PID_YAW,
    PID_POS_Z,
    PID_POS_XY,
    PID_VEL_XY,
    PID_SURFACE,
    PID_LEVEL,
    PID_HEADING,
    PID_VEL_Z,
    PID_ITEM_COUNT
} pidIndex_e;

typedef struct pid8_s {
    uint8_t P;
    uint8_t I;
    uint8_t D;
} pid8_t;

typedef struct pidBank_s {
    pid8_t pid[PID_ITEM_COUNT];
} pidBank_t;

typedef struct pidProfile_s {
    pidBank_t bank_fw;
    pidBank_t bank_mc;

    uint16_t dterm_soft_notch_hz;
    uint16_t dterm_soft_notch_cutoff;
    uint8_t dterm_lpf_hz;

    uint8_t yaw_pterm_lpf_hz;
    uint8_t acc_soft_lpf_hz;
    uint8_t yaw_lpf_hz;
    uint16_t yaw_p_limit;

    uint8_t heading_hold_rate_limit;

    uint16_t rollPitchItermIgnoreRate;
    uint16_t yawItermIgnoreRate;

    uint32_t axisAccelerationLimitYaw;
    uint32_t axisAccelerationLimitRollPitch;

    int16_t max_angle_inclination[2];

    float dterm_setpoint_weight;
    uint16_t pidSumLimit;


    uint16_t fixedWingItermThrowLimit;
    float fixedWingReferenceAirspeed;
    float fixedWingCoordinatedYawGain;
} pidProfile_t;

typedef struct pidAutotuneConfig_s {
    uint16_t fw_overshoot_time;
    uint16_t fw_undershoot_time;
    uint8_t fw_max_rate_threshold;
    uint8_t fw_ff_to_p_gain;
    uint16_t fw_ff_to_i_time_constant;
} pidAutotuneConfig_t;

extern pidProfile_t *pidProfile_ProfileCurrent; static inline const pidProfile_t* pidProfile(void) { return pidProfile_ProfileCurrent; } static inline pidProfile_t* pidProfileMutable(void) { return pidProfile_ProfileCurrent; } struct _dummy;
extern pidAutotuneConfig_t pidAutotuneConfig_System; extern pidAutotuneConfig_t pidAutotuneConfig_Copy; static inline const pidAutotuneConfig_t* pidAutotuneConfig(void) { return &pidAutotuneConfig_System; } static inline pidAutotuneConfig_t* pidAutotuneConfigMutable(void) { return &pidAutotuneConfig_System; } struct _dummy;

static inline const pidBank_t * pidBank() { return (stateFlags & (FIXED_WING)) ? &pidProfile()->bank_fw : &pidProfile()->bank_mc; }
static inline pidBank_t * pidBankMutable() { return (stateFlags & (FIXED_WING)) ? &pidProfileMutable()->bank_fw : &pidProfileMutable()->bank_mc; }

extern int16_t axisPID[];
extern int32_t axisPID_P[], axisPID_I[], axisPID_D[], axisPID_Setpoint[];

void pidInit(void);



# 130 "./src/main/flight/pid.h" 3 4
_Bool 
# 130 "./src/main/flight/pid.h"
    pidInitFilters(void);


void pidResetErrorAccumulators(void);
void pidResetTPAFilter(void);

struct controlRateConfig_s;
struct motorConfig_s;
struct rxConfig_s;

void schedulePidGainsUpdate(void);
void updatePIDCoefficients(void);
void pidController(void);

float pidRateToRcCommand(float rateDPS, uint8_t rate);
int16_t pidAngleToRcCommand(float angleDeciDegrees, int16_t maxInclination);

enum {
    HEADING_HOLD_DISABLED = 0,
    HEADING_HOLD_UPDATE_HEADING,
    HEADING_HOLD_ENABLED
};

void updateHeadingHoldTarget(int16_t heading);
void resetHeadingHoldTarget(int16_t heading);
int16_t getHeadingHoldTarget(void);

void autotuneUpdateState(void);
void autotuneFixedWingUpdate(const flight_dynamics_index_t axis, float desiredRateDps, float reachedRateDps, float pidOutput);
# 53 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/servos.h" 1
# 18 "./src/main/flight/servos.h"
       






#define MAX_SUPPORTED_SERVOS 8



enum {
    INPUT_STABILIZED_ROLL = 0,
    INPUT_STABILIZED_PITCH = 1,
    INPUT_STABILIZED_YAW = 2,
    INPUT_STABILIZED_THROTTLE = 3,
    INPUT_RC_ROLL = 4,
    INPUT_RC_PITCH = 5,
    INPUT_RC_YAW = 6,
    INPUT_RC_THROTTLE = 7,
    INPUT_RC_AUX1 = 8,
    INPUT_RC_AUX2 = 9,
    INPUT_RC_AUX3 = 10,
    INPUT_RC_AUX4 = 11,
    INPUT_GIMBAL_PITCH = 12,
    INPUT_GIMBAL_ROLL = 13,
    INPUT_FEATURE_FLAPS = 14,

    INPUT_SOURCE_COUNT
} inputSource_e;


typedef enum {
    SERVO_GIMBAL_PITCH = 0,
    SERVO_GIMBAL_ROLL = 1,
    SERVO_ELEVATOR = 2,
    SERVO_FLAPPERON_1 = 3,
    SERVO_FLAPPERON_2 = 4,
    SERVO_RUDDER = 5,

    SERVO_BICOPTER_LEFT = 4,
    SERVO_BICOPTER_RIGHT = 5,

    SERVO_DUALCOPTER_LEFT = 4,
    SERVO_DUALCOPTER_RIGHT = 5,

    SERVO_SINGLECOPTER_1 = 3,
    SERVO_SINGLECOPTER_2 = 4,
    SERVO_SINGLECOPTER_3 = 5,
    SERVO_SINGLECOPTER_4 = 6,

} servoIndex_e;

#define SERVO_PLANE_INDEX_MIN SERVO_ELEVATOR
#define SERVO_PLANE_INDEX_MAX SERVO_RUDDER

#define SERVO_DUALCOPTER_INDEX_MIN SERVO_DUALCOPTER_LEFT
#define SERVO_DUALCOPTER_INDEX_MAX SERVO_DUALCOPTER_RIGHT

#define SERVO_SINGLECOPTER_INDEX_MIN SERVO_SINGLECOPTER_1
#define SERVO_SINGLECOPTER_INDEX_MAX SERVO_SINGLECOPTER_4

#define SERVO_FLAPPERONS_MIN SERVO_FLAPPERON_1
#define SERVO_FLAPPERONS_MAX SERVO_FLAPPERON_2

#define FLAPERON_THROW_DEFAULT 200
#define FLAPERON_THROW_MIN 50
#define FLAPERON_THROW_MAX 450

typedef struct servoMixer_s {
    uint8_t targetChannel;
    uint8_t inputSource;
    int8_t rate;
    uint8_t speed;
} servoMixer_t;

#define MAX_SERVO_RULES (2 * MAX_SUPPORTED_SERVOS)
#define MAX_SERVO_SPEED UINT8_MAX
#define MAX_SERVO_BOXES 3

#define SERVO_MIXER_INPUT_WIDTH 1000

extern servoMixer_t customServoMixers_SystemArray[(2 * 8)]; extern servoMixer_t customServoMixers_CopyArray[(2 * 8)]; static inline const servoMixer_t* customServoMixers(int _index) { return &customServoMixers_SystemArray[_index]; } static inline servoMixer_t* customServoMixersMutable(int _index) { return &customServoMixers_SystemArray[_index]; } static inline servoMixer_t (* customServoMixers_array(void))[(2 * 8)] { return &customServoMixers_SystemArray; } struct _dummy;

typedef struct servoParam_s {
    uint32_t reversedSources;
    int16_t min;
    int16_t max;
    int16_t middle;
    int8_t rate;
    int8_t forwardFromChannel;
} servoParam_t;

extern servoParam_t servoParams_SystemArray[8]; extern servoParam_t servoParams_CopyArray[8]; static inline const servoParam_t* servoParams(int _index) { return &servoParams_SystemArray[_index]; } static inline servoParam_t* servoParamsMutable(int _index) { return &servoParams_SystemArray[_index]; } static inline servoParam_t (* servoParams_array(void))[8] { return &servoParams_SystemArray; } struct _dummy;

typedef struct servoConfig_s {

    uint16_t servoCenterPulse;
    uint16_t servoPwmRate;
    int16_t servo_lowpass_freq;
    uint16_t flaperon_throw_offset;
    uint8_t __reserved;
    uint8_t tri_unarmed_servo;
} servoConfig_t;

extern servoConfig_t servoConfig_System; extern servoConfig_t servoConfig_Copy; static inline const servoConfig_t* servoConfig(void) { return &servoConfig_System; } static inline servoConfig_t* servoConfigMutable(void) { return &servoConfig_System; } struct _dummy;

typedef struct servoMetadata_s {
    float scaleMax;
    float scaleMin;
} servoMetadata_t;

extern int16_t servo[8];


# 132 "./src/main/flight/servos.h" 3 4
_Bool 
# 132 "./src/main/flight/servos.h"
    isServoOutputEnabled(void);

# 133 "./src/main/flight/servos.h" 3 4
_Bool 
# 133 "./src/main/flight/servos.h"
    isMixerUsingServos(void);
void writeServos(void);
void servoMixerLoadMix(int index);

# 136 "./src/main/flight/servos.h" 3 4
_Bool 
# 136 "./src/main/flight/servos.h"
    loadCustomServoMixer(void);
int servoDirection(int servoIndex, int fromChannel);
void servoMixer(float dT);
void servoComputeScalingFactors(uint8_t servoIndex);
void servosInit(void);
# 54 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/io/gimbal.h" 1
# 18 "./src/main/io/gimbal.h"
       



typedef enum {
    GIMBAL_MODE_NORMAL = 0,
    GIMBAL_MODE_MIXTILT = 1
} gimbalMode_e;

#define GIMBAL_MODE_MAX (GIMBAL_MODE_MIXTILT)

typedef struct gimbalConfig_s {
    uint8_t mode;
} gimbalConfig_t;

extern gimbalConfig_t gimbalConfig_System; extern gimbalConfig_t gimbalConfig_Copy; static inline const gimbalConfig_t* gimbalConfig(void) { return &gimbalConfig_System; } static inline gimbalConfig_t* gimbalConfigMutable(void) { return &gimbalConfig_System; } struct _dummy;
# 56 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/gps.h" 1
# 18 "./src/main/io/gps.h"
       







#define GPS_DBHZ_MIN 0
#define GPS_DBHZ_MAX 55

#define LAT 0
#define LON 1

#define GPS_DEGREES_DIVIDER 10000000L

typedef enum {
    GPS_NMEA = 0,
    GPS_UBLOX,
    GPS_I2CNAV,
    GPS_NAZA,
    GPS_UBLOX7PLUS,
    GPS_MTK,
    GPS_PROVIDER_COUNT
} gpsProvider_e;

typedef enum {
    SBAS_AUTO = 0,
    SBAS_EGNOS,
    SBAS_WAAS,
    SBAS_MSAS,
    SBAS_GAGAN,
    SBAS_NONE
} sbasMode_e;

#define SBAS_MODE_MAX SBAS_GAGAN

typedef enum {
    GPS_BAUDRATE_115200 = 0,
    GPS_BAUDRATE_57600,
    GPS_BAUDRATE_38400,
    GPS_BAUDRATE_19200,
    GPS_BAUDRATE_9600,
    GPS_BAUDRATE_COUNT
} gpsBaudRate_e;

typedef enum {
    GPS_AUTOCONFIG_OFF = 0,
    GPS_AUTOCONFIG_ON,
} gpsAutoConfig_e;

typedef enum {
    GPS_AUTOBAUD_OFF = 0,
    GPS_AUTOBAUD_ON
} gpsAutoBaud_e;

typedef enum {
    GPS_DYNMODEL_PEDESTRIAN = 0,
    GPS_DYNMODEL_AIR_1G,
    GPS_DYNMODEL_AIR_4G,
} gpsDynModel_e;

typedef enum {
    GPS_NO_FIX = 0,
    GPS_FIX_2D,
    GPS_FIX_3D
} gpsFixType_e;

#define GPS_BAUDRATE_MAX GPS_BAUDRATE_9600

typedef struct gpsConfig_s {
    gpsProvider_e provider;
    sbasMode_e sbasMode;
    gpsAutoConfig_e autoConfig;
    gpsAutoBaud_e autoBaud;
    gpsDynModel_e dynModel;
    
# 94 "./src/main/io/gps.h" 3 4
   _Bool 
# 94 "./src/main/io/gps.h"
        ubloxUseGalileo;
    uint8_t gpsMinSats;
} gpsConfig_t;

extern gpsConfig_t gpsConfig_System; extern gpsConfig_t gpsConfig_Copy; static inline const gpsConfig_t* gpsConfig(void) { return &gpsConfig_System; } static inline gpsConfig_t* gpsConfigMutable(void) { return &gpsConfig_System; } struct _dummy;

typedef struct gpsCoordinateDDDMMmmmm_s {
    int16_t dddmm;
    int16_t mmmm;
} gpsCoordinateDDDMMmmmm_t;


typedef struct gpsLocation_s {
    int32_t lat;
    int32_t lon;
    int32_t alt;
} gpsLocation_t;

#define HDOP_SCALE (100)

typedef struct gpsSolutionData_s {
    struct {
        
# 116 "./src/main/io/gps.h" 3 4
       _Bool 
# 116 "./src/main/io/gps.h"
            gpsHeartbeat;
        
# 117 "./src/main/io/gps.h" 3 4
       _Bool 
# 117 "./src/main/io/gps.h"
            validVelNE;
        
# 118 "./src/main/io/gps.h" 3 4
       _Bool 
# 118 "./src/main/io/gps.h"
            validVelD;
        
# 119 "./src/main/io/gps.h" 3 4
       _Bool 
# 119 "./src/main/io/gps.h"
            validMag;
        
# 120 "./src/main/io/gps.h" 3 4
       _Bool 
# 120 "./src/main/io/gps.h"
            validEPE;
        
# 121 "./src/main/io/gps.h" 3 4
       _Bool 
# 121 "./src/main/io/gps.h"
            validTime;
    } flags;

    gpsFixType_e fixType;
    uint8_t numSat;

    gpsLocation_t llh;
    int16_t magData[3];
    int16_t velNED[3];

    int16_t groundSpeed;
    int16_t groundCourse;

    uint16_t eph;
    uint16_t epv;

    uint16_t hdop;

    dateTime_t time;

} gpsSolutionData_t;

typedef struct {
    uint16_t lastMessageDt;
    uint32_t errors;
    uint32_t timeouts;
    uint32_t packetCount;
} gpsStatistics_t;

extern gpsSolutionData_t gpsSol;
extern gpsStatistics_t gpsStats;

struct magDev_s;

# 154 "./src/main/io/gps.h" 3 4
_Bool 
# 154 "./src/main/io/gps.h"
    gpsMagDetect(struct magDev_s *mag);
void gpsPreInit(void);
void gpsInit(void);
void gpsThread(void);
void updateGpsIndicator(timeUs_t currentTimeUs);

# 159 "./src/main/io/gps.h" 3 4
_Bool 
# 159 "./src/main/io/gps.h"
    isGPSHealthy(void);
struct serialPort_s;
void gpsEnablePassthrough(struct serialPort_s *gpsPassthroughPort);
# 57 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/ledstrip.h" 1
# 18 "./src/main/io/ledstrip.h"
       




#define LED_MAX_STRIP_LENGTH 32
#define LED_CONFIGURABLE_COLOR_COUNT 16
#define LED_MODE_COUNT 6
#define LED_DIRECTION_COUNT 6
#define LED_BASEFUNCTION_COUNT 7
#define LED_OVERLAY_COUNT 6
#define LED_SPECIAL_COLOR_COUNT 11

#define LED_POS_OFFSET 0
#define LED_FUNCTION_OFFSET 8
#define LED_OVERLAY_OFFSET 12
#define LED_COLOR_OFFSET 18
#define LED_DIRECTION_OFFSET 22
#define LED_PARAMS_OFFSET 28

#define LED_POS_BITCNT 8
#define LED_FUNCTION_BITCNT 4
#define LED_OVERLAY_BITCNT 6
#define LED_COLOR_BITCNT 4
#define LED_DIRECTION_BITCNT 6
#define LED_PARAMS_BITCNT 4

#define LED_FLAG_OVERLAY_MASK ((1 << LED_OVERLAY_BITCNT) - 1)
#define LED_FLAG_DIRECTION_MASK ((1 << LED_DIRECTION_BITCNT) - 1)

#define LED_MOV_POS(pos) ((pos) << LED_POS_OFFSET)
#define LED_MOV_FUNCTION(func) ((func) << LED_FUNCTION_OFFSET)
#define LED_MOV_OVERLAY(overlay) ((overlay) << LED_OVERLAY_OFFSET)
#define LED_MOV_COLOR(colorId) ((colorId) << LED_COLOR_OFFSET)
#define LED_MOV_DIRECTION(direction) ((direction) << LED_DIRECTION_OFFSET)
#define LED_MOV_PARAMS(param) ((param) << LED_PARAMS_OFFSET)

#define LED_BIT_MASK(len) ((1 << (len)) - 1)

#define LED_POS_MASK LED_MOV_POS(((1 << LED_POS_BITCNT) - 1))
#define LED_FUNCTION_MASK LED_MOV_FUNCTION(((1 << LED_FUNCTION_BITCNT) - 1))
#define LED_OVERLAY_MASK LED_MOV_OVERLAY(LED_FLAG_OVERLAY_MASK)
#define LED_COLOR_MASK LED_MOV_COLOR(((1 << LED_COLOR_BITCNT) - 1))
#define LED_DIRECTION_MASK LED_MOV_DIRECTION(LED_FLAG_DIRECTION_MASK)
#define LED_PARAMS_MASK LED_MOV_PARAMS(((1 << LED_PARAMS_BITCNT) - 1))

#define LED_FLAG_OVERLAY(id) (1 << (id))
#define LED_FLAG_DIRECTION(id) (1 << (id))

#define LED_X_BIT_OFFSET 4
#define LED_Y_BIT_OFFSET 0
#define LED_XY_MASK 0x0F
#define CALCULATE_LED_XY(x,y) ((((x) & LED_XY_MASK) << LED_X_BIT_OFFSET) | (((y) & LED_XY_MASK) << LED_Y_BIT_OFFSET))

typedef enum {
    COLOR_BLACK = 0,
    COLOR_WHITE,
    COLOR_RED,
    COLOR_ORANGE,
    COLOR_YELLOW,
    COLOR_LIME_GREEN,
    COLOR_GREEN,
    COLOR_MINT_GREEN,
    COLOR_CYAN,
    COLOR_LIGHT_BLUE,
    COLOR_BLUE,
    COLOR_DARK_VIOLET,
    COLOR_MAGENTA,
    COLOR_DEEP_PINK,
} colorId_e;

typedef enum {
    LED_MODE_ORIENTATION = 0,
    LED_MODE_HEADFREE,
    LED_MODE_HORIZON,
    LED_MODE_ANGLE,
    LED_MODE_MAG,
    LED_MODE_BARO,
    LED_SPECIAL
} ledModeIndex_e;

typedef enum {
    LED_SCOLOR_DISARMED = 0,
    LED_SCOLOR_ARMED,
    LED_SCOLOR_ANIMATION,
    LED_SCOLOR_BACKGROUND,
    LED_SCOLOR_BLINKBACKGROUND,
    LED_SCOLOR_GPSNOSATS,
    LED_SCOLOR_GPSNOLOCK,
    LED_SCOLOR_GPSLOCKED
} ledSpecialColorIds_e;

typedef enum {
    LED_DIRECTION_NORTH = 0,
    LED_DIRECTION_EAST,
    LED_DIRECTION_SOUTH,
    LED_DIRECTION_WEST,
    LED_DIRECTION_UP,
    LED_DIRECTION_DOWN
} ledDirectionId_e;

typedef enum {
    LED_FUNCTION_COLOR,
    LED_FUNCTION_FLIGHT_MODE,
    LED_FUNCTION_ARM_STATE,
    LED_FUNCTION_BATTERY,
    LED_FUNCTION_RSSI,
    LED_FUNCTION_GPS,
    LED_FUNCTION_THRUST_RING,
} ledBaseFunctionId_e;

typedef enum {
    LED_OVERLAY_THROTTLE,
    LED_OVERLAY_LARSON_SCANNER,
    LED_OVERLAY_BLINK,
    LED_OVERLAY_LANDING_FLASH,
    LED_OVERLAY_INDICATOR,
    LED_OVERLAY_WARNING,
} ledOverlayId_e;

typedef struct modeColorIndexes_s {
    uint8_t color[6];
} modeColorIndexes_t;

typedef struct specialColorIndexes_s {
    uint8_t color[11];
} specialColorIndexes_t;

typedef uint32_t ledConfig_t;

typedef struct ledCounts_s {
    uint8_t count;
    uint8_t ring;
    uint8_t larson;
    uint8_t ringSeqLen;
} ledCounts_t;

typedef struct ledStripConfig_s {
    ledConfig_t ledConfigs[32];
    hsvColor_t colors[16];
    modeColorIndexes_t modeColors[6];
    specialColorIndexes_t specialColors;
    uint8_t ledstrip_visual_beeper;
} ledStripConfig_t;

extern ledStripConfig_t ledStripConfig_System; extern ledStripConfig_t ledStripConfig_Copy; static inline const ledStripConfig_t* ledStripConfig(void) { return &ledStripConfig_System; } static inline ledStripConfig_t* ledStripConfigMutable(void) { return &ledStripConfig_System; } struct _dummy;

#define DEFINE_LED(x,y,col,dir,func,ol,params) (LED_MOV_POS(CALCULATE_LED_XY(x, y)) | LED_MOV_COLOR(col) | LED_MOV_DIRECTION(dir) | LED_MOV_FUNCTION(func) | LED_MOV_OVERLAY(ol) | LED_MOV_PARAMS(params))

static inline uint8_t ledGetXY(const ledConfig_t *lcfg) { return ((*lcfg >> 0) & ((1 << (8)) - 1)); }
static inline uint8_t ledGetX(const ledConfig_t *lcfg) { return ((*lcfg >> (0 + 4)) & 0x0F); }
static inline uint8_t ledGetY(const ledConfig_t *lcfg) { return ((*lcfg >> (0 + 0)) & 0x0F); }
static inline uint8_t ledGetFunction(const ledConfig_t *lcfg) { return ((*lcfg >> 8) & ((1 << (4)) - 1)); }
static inline uint8_t ledGetOverlay(const ledConfig_t *lcfg) { return ((*lcfg >> 12) & ((1 << (6)) - 1)); }
static inline uint8_t ledGetColor(const ledConfig_t *lcfg) { return ((*lcfg >> 18) & ((1 << (4)) - 1)); }
static inline uint8_t ledGetDirection(const ledConfig_t *lcfg) { return ((*lcfg >> 22) & ((1 << (6)) - 1)); }
static inline uint8_t ledGetParams(const ledConfig_t *lcfg) { return ((*lcfg >> 28) & ((1 << (4)) - 1)); }

static inline 
# 176 "./src/main/io/ledstrip.h" 3 4
             _Bool 
# 176 "./src/main/io/ledstrip.h"
                  ledGetOverlayBit(const ledConfig_t *lcfg, int id) { return ((ledGetOverlay(lcfg) >> id) & 1); }
static inline 
# 177 "./src/main/io/ledstrip.h" 3 4
             _Bool 
# 177 "./src/main/io/ledstrip.h"
                  ledGetDirectionBit(const ledConfig_t *lcfg, int id) { return ((ledGetDirection(lcfg) >> id) & 1); }


# 179 "./src/main/io/ledstrip.h" 3 4
_Bool 
# 179 "./src/main/io/ledstrip.h"
    parseColor(int index, const char *colorConfig);


# 181 "./src/main/io/ledstrip.h" 3 4
_Bool 
# 181 "./src/main/io/ledstrip.h"
    parseLedStripConfig(int ledIndex, const char *config);
void generateLedConfig(ledConfig_t *ledConfig, char *ledConfigBuffer, size_t bufferSize);
void reevaluateLedConfig(void);

void ledStripInit(void);
void ledStripEnable(void);
void ledStripUpdate(timeUs_t currentTimeUs);


# 189 "./src/main/io/ledstrip.h" 3 4
_Bool 
# 189 "./src/main/io/ledstrip.h"
    setModeColor(ledModeIndex_e modeIndex, int modeColorIndex, int colorIndex);
# 58 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/serial.h" 1
# 18 "./src/main/io/serial.h"
       







typedef enum {
    PORTSHARING_UNUSED = 0,
    PORTSHARING_NOT_SHARED,
    PORTSHARING_SHARED
} portSharing_e;

typedef enum {
    FUNCTION_NONE = 0,
    FUNCTION_MSP = (1 << 0),
    FUNCTION_GPS = (1 << 1),
    FUNCTION_TELEMETRY_FRSKY = (1 << 2),
    FUNCTION_TELEMETRY_HOTT = (1 << 3),
    FUNCTION_TELEMETRY_LTM = (1 << 4),
    FUNCTION_TELEMETRY_SMARTPORT = (1 << 5),
    FUNCTION_RX_SERIAL = (1 << 6),
    FUNCTION_BLACKBOX = (1 << 7),
    FUNCTION_TELEMETRY_MAVLINK = (1 << 8),
    FUNCTION_TELEMETRY_IBUS = (1 << 9),
    FUNCTION_RCDEVICE = (1 << 10),
    FUNCTION_VTX_SMARTAUDIO = (1 << 11),
    FUNCTION_VTX_TRAMP = (1 << 12),
    FUNCTION_UAV_INTERCONNECT = (1 << 13),
    FUNCTION_OPTICAL_FLOW = (1 << 14),
    FUNCTION_DEBUG_TRACE = (1 << 15),
} serialPortFunction_e;

typedef enum {
    BAUD_AUTO = 0,
    BAUD_1200,
    BAUD_2400,
    BAUD_4800,
    BAUD_9600,
    BAUD_19200,
    BAUD_38400,
    BAUD_57600,
    BAUD_115200,
    BAUD_230400,
    BAUD_250000,
    BAUD_460800,
    BAUD_921600,
    BAUD_1000000,
    BAUD_1500000,
    BAUD_2000000,
    BAUD_2470000
} baudRate_e;

extern const uint32_t baudRates[];


typedef enum {
    SERIAL_PORT_NONE = -1,
    SERIAL_PORT_USART1 = 0,
    SERIAL_PORT_USART2,
    SERIAL_PORT_USART3,
    SERIAL_PORT_USART4,
    SERIAL_PORT_USART5,
    SERIAL_PORT_USART6,
    SERIAL_PORT_USART7,
    SERIAL_PORT_USART8,
    SERIAL_PORT_USB_VCP = 20,
    SERIAL_PORT_SOFTSERIAL1 = 30,
    SERIAL_PORT_SOFTSERIAL2,
    SERIAL_PORT_IDENTIFIER_MAX = SERIAL_PORT_SOFTSERIAL2
} serialPortIdentifier_e;

extern const serialPortIdentifier_e serialPortIdentifiers[6];




typedef struct serialPortUsage_s {
    serialPortIdentifier_e identifier;
    serialPort_t *serialPort;
    serialPortFunction_e function;
} serialPortUsage_t;

serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);
serialPort_t *findNextSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);




typedef struct serialPortConfig_s {
    uint16_t functionMask;
    serialPortIdentifier_e identifier;
    uint8_t msp_baudrateIndex;
    uint8_t gps_baudrateIndex;
    uint8_t peripheral_baudrateIndex;
    uint8_t telemetry_baudrateIndex;
} serialPortConfig_t;

typedef struct serialConfig_s {
    serialPortConfig_t portConfigs[6];
    uint8_t reboot_character;
} serialConfig_t;

extern serialConfig_t serialConfig_System; extern serialConfig_t serialConfig_Copy; static inline const serialConfig_t* serialConfig(void) { return &serialConfig_System; } static inline serialConfig_t* serialConfigMutable(void) { return &serialConfig_System; } struct _dummy;

typedef void serialConsumer(uint8_t);




void serialInit(
# 129 "./src/main/io/serial.h" 3 4
               _Bool 
# 129 "./src/main/io/serial.h"
                    softserialEnabled, serialPortIdentifier_e serialPortToDisable);
void serialRemovePort(serialPortIdentifier_e identifier);
uint8_t serialGetAvailablePortCount(void);

# 132 "./src/main/io/serial.h" 3 4
_Bool 
# 132 "./src/main/io/serial.h"
    serialIsPortAvailable(serialPortIdentifier_e identifier);

# 133 "./src/main/io/serial.h" 3 4
_Bool 
# 133 "./src/main/io/serial.h"
    isSerialConfigValid(const serialConfig_t *serialConfig);
serialPortConfig_t *serialFindPortConfiguration(serialPortIdentifier_e identifier);

# 135 "./src/main/io/serial.h" 3 4
_Bool 
# 135 "./src/main/io/serial.h"
    doesConfigurationUsePort(serialPortIdentifier_e portIdentifier);
serialPortConfig_t *findSerialPortConfig(serialPortFunction_e function);
serialPortConfig_t *findNextSerialPortConfig(serialPortFunction_e function);

portSharing_e determinePortSharing(const serialPortConfig_t *portConfig, serialPortFunction_e function);

# 140 "./src/main/io/serial.h" 3 4
_Bool 
# 140 "./src/main/io/serial.h"
    isSerialPortShared(const serialPortConfig_t *portConfig, uint16_t functionMask, serialPortFunction_e sharedWithFunction);

serialPortUsage_t *findSerialPortUsageByIdentifier(serialPortIdentifier_e identifier);
int findSerialPortIndexByIdentifier(serialPortIdentifier_e identifier);



serialPort_t *openSerialPort(
    serialPortIdentifier_e identifier,
    serialPortFunction_e function,
    serialReceiveCallbackPtr callback,
    void *rxCallbackData,
    uint32_t baudrate,
    portMode_t mode,
    portOptions_t options
);
void closeSerialPort(serialPort_t *serialPort);

void waitForSerialPortToFinishTransmitting(serialPort_t *serialPort);

baudRate_e lookupBaudRateIndex(uint32_t baudRate);





void serialPassthrough(serialPort_t *left, serialPort_t *right, serialConsumer *leftC, serialConsumer *rightC);
# 59 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/navigation/navigation.h" 1
# 18 "./src/main/navigation/navigation.h"
       
# 30 "./src/main/navigation/navigation.h"
extern gpsLocation_t GPS_home;
extern uint16_t GPS_distanceToHome;
extern int16_t GPS_directionToHome;


void onNewGPSData(void);
# 46 "./src/main/navigation/navigation.h"
enum {
    NAV_GPS_ATTI = 0,
    NAV_GPS_CRUISE = 1
};

enum {
    NAV_RTH_NO_ALT = 0,
    NAV_RTH_EXTRA_ALT = 1,
    NAV_RTH_CONST_ALT = 2,
    NAV_RTH_MAX_ALT = 3,
    NAV_RTH_AT_LEAST_ALT = 4,
};

enum {
    NAV_HEADING_CONTROL_NONE = 0,
    NAV_HEADING_CONTROL_AUTO,
    NAV_HEADING_CONTROL_MANUAL
};

enum {
    NAV_RESET_ALTITUDE_NEVER = 0,
    NAV_RESET_ALTITUDE_ON_FIRST_ARM,
    NAV_RESET_ALTITUDE_ON_EACH_ARM,
};

typedef enum {
    NAV_RTH_ALLOW_LANDING_NEVER = 0,
    NAV_RTH_ALLOW_LANDING_ALWAYS = 1,
    NAV_RTH_ALLOW_LANDING_FS_ONLY = 2,
} navRTHAllowLanding_e;

typedef struct positionEstimationConfig_s {
    uint8_t automatic_mag_declination;
    uint8_t reset_altitude_type;
    uint8_t gravity_calibration_tolerance;
    uint8_t use_gps_velned;

    uint16_t max_surface_altitude;

    float w_z_baro_p;

    float w_z_surface_p;
    float w_z_surface_v;

    float w_z_gps_p;
    float w_z_gps_v;

    float w_xy_gps_p;
    float w_xy_gps_v;

    float w_z_res_v;
    float w_xy_res_v;

    float w_acc_bias;

    float max_eph_epv;
    float baro_epv;
} positionEstimationConfig_t;

extern positionEstimationConfig_t positionEstimationConfig_System; extern positionEstimationConfig_t positionEstimationConfig_Copy; static inline const positionEstimationConfig_t* positionEstimationConfig(void) { return &positionEstimationConfig_System; } static inline positionEstimationConfig_t* positionEstimationConfigMutable(void) { return &positionEstimationConfig_System; } struct _dummy;

typedef struct navConfig_s {

    struct {
        struct {
            uint8_t use_thr_mid_for_althold;
            uint8_t extra_arming_safety;
            uint8_t user_control_mode;
            uint8_t rth_alt_control_mode;
            uint8_t rth_climb_first;
            uint8_t rth_tail_first;
            uint8_t disarm_on_landing;
            uint8_t rth_allow_landing;
            uint8_t rth_climb_ignore_emerg;
        } flags;

        uint8_t pos_failure_timeout;
        uint16_t waypoint_radius;
        uint16_t waypoint_safe_distance;
        uint16_t max_auto_speed;
        uint16_t max_auto_climb_rate;
        uint16_t max_manual_speed;
        uint16_t max_manual_climb_rate;
        uint16_t land_descent_rate;
        uint16_t land_slowdown_minalt;
        uint16_t land_slowdown_maxalt;
        uint16_t emerg_descent_rate;
        uint16_t rth_altitude;
        uint16_t min_rth_distance;
        uint16_t rth_abort_threshold;
    } general;

    struct {
        uint8_t max_bank_angle;
        uint16_t hover_throttle;
        uint16_t auto_disarm_delay;
    } mc;

    struct {
        uint8_t max_bank_angle;
        uint8_t max_climb_angle;
        uint8_t max_dive_angle;
        uint16_t cruise_throttle;
        uint16_t min_throttle;
        uint16_t max_throttle;
        uint8_t pitch_to_throttle;
        uint16_t loiter_radius;
        int8_t land_dive_angle;
        uint16_t launch_velocity_thresh;
        uint16_t launch_accel_thresh;
        uint16_t launch_time_thresh;
        uint16_t launch_idle_throttle;
        uint16_t launch_throttle;
        uint16_t launch_motor_timer;
        uint16_t launch_motor_spinup_time;
        uint16_t launch_min_time;
        uint16_t launch_timeout;
        uint16_t launch_max_altitude;
        uint8_t launch_climb_angle;
        uint8_t launch_max_angle;
    } fw;
} navConfig_t;

extern navConfig_t navConfig_System; extern navConfig_t navConfig_Copy; static inline const navConfig_t* navConfig(void) { return &navConfig_System; } static inline navConfig_t* navConfigMutable(void) { return &navConfig_System; } struct _dummy;

typedef struct gpsOrigin_s {
    
# 172 "./src/main/navigation/navigation.h" 3 4
   _Bool 
# 172 "./src/main/navigation/navigation.h"
           valid;
    float scale;
    int32_t lat;
    int32_t lon;
    int32_t alt;
} gpsOrigin_s;

typedef enum {
    NAV_WP_ACTION_WAYPOINT = 0x01,
    NAV_WP_ACTION_RTH = 0x04
} navWaypointActions_e;

typedef enum {
    NAV_WP_FLAG_LAST = 0xA5
} navWaypointFlags_e;

typedef struct {
    uint8_t action;
    int32_t lat;
    int32_t lon;
    int32_t alt;
    int16_t p1, p2, p3;
    uint8_t flag;
} navWaypoint_t;

typedef struct {
    fpVector3_t pos;
    int32_t yaw;
} navWaypointPosition_t;


typedef enum {
    MW_GPS_MODE_NONE = 0,
    MW_GPS_MODE_HOLD,
    MW_GPS_MODE_RTH,
    MW_GPS_MODE_NAV,
    MW_GPS_MODE_EMERG = 15
} navSystemStatus_Mode_e;

typedef enum {
    MW_NAV_STATE_NONE = 0,
    MW_NAV_STATE_RTH_START,
    MW_NAV_STATE_RTH_ENROUTE,
    MW_NAV_STATE_HOLD_INFINIT,
    MW_NAV_STATE_HOLD_TIMED,
    MW_NAV_STATE_WP_ENROUTE,
    MW_NAV_STATE_PROCESS_NEXT,
    MW_NAV_STATE_DO_JUMP,
    MW_NAV_STATE_LAND_START,
    MW_NAV_STATE_LAND_IN_PROGRESS,
    MW_NAV_STATE_LANDED,
    MW_NAV_STATE_LAND_SETTLE,
    MW_NAV_STATE_LAND_START_DESCENT
} navSystemStatus_State_e;

typedef enum {
    MW_NAV_ERROR_NONE = 0,
    MW_NAV_ERROR_TOOFAR,
    MW_NAV_ERROR_SPOILED_GPS,
    MW_NAV_ERROR_WP_CRC,
    MW_NAV_ERROR_FINISH,
    MW_NAV_ERROR_TIMEWAIT,
    MW_NAV_ERROR_INVALID_JUMP,
    MW_NAV_ERROR_INVALID_DATA,
    MW_NAV_ERROR_WAIT_FOR_RTH_ALT,
    MW_NAV_ERROR_GPS_FIX_LOST,
    MW_NAV_ERROR_DISARMED,
    MW_NAV_ERROR_LANDING
} navSystemStatus_Error_e;

typedef enum {
    MW_NAV_FLAG_ADJUSTING_POSITION = 1 << 0,
    MW_NAV_FLAG_ADJUSTING_ALTITUDE = 1 << 1,
} navSystemStatus_Flags_e;

typedef struct {
    navSystemStatus_Mode_e mode;
    navSystemStatus_State_e state;
    navSystemStatus_Error_e error;
    navSystemStatus_Flags_e flags;
    uint8_t activeWpNumber;
    navWaypointActions_e activeWpAction;
} navSystemStatus_t;

void navigationUsePIDs(void);
void navigationInit(void);


void updatePositionEstimator_BaroTopic(timeUs_t currentTimeUs);
void updatePositionEstimator_OpticalFlowTopic(timeUs_t currentTimeUs);
void updatePositionEstimator_SurfaceTopic(timeUs_t currentTimeUs, float newSurfaceAlt);


void updateWaypointsAndNavigationMode(void);
void updatePositionEstimator(void);
void applyWaypointNavigationAndAltitudeHold(void);



# 270 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 270 "./src/main/navigation/navigation.h"
    navigationRequiresAngleMode(void);

# 271 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 271 "./src/main/navigation/navigation.h"
    navigationRequiresThrottleTiltCompensation(void);

# 272 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 272 "./src/main/navigation/navigation.h"
    navigationRequiresTurnAssistance(void);
int8_t navigationGetHeadingControlState(void);

# 274 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 274 "./src/main/navigation/navigation.h"
    navigationBlockArming(void);

# 275 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 275 "./src/main/navigation/navigation.h"
    navigationPositionEstimateIsHealthy(void);

# 276 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 276 "./src/main/navigation/navigation.h"
    navIsCalibrationComplete(void);


float getEstimatedActualVelocity(int axis);
float getEstimatedActualPosition(int axis);
int32_t getTotalTravelDistance(void);


int getWaypointCount(void);

# 285 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 285 "./src/main/navigation/navigation.h"
    isWaypointListValid(void);
void getWaypoint(uint8_t wpNumber, navWaypoint_t * wpData);
void setWaypoint(uint8_t wpNumber, const navWaypoint_t * wpData);
void resetWaypointList(void);

# 289 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 289 "./src/main/navigation/navigation.h"
    loadNonVolatileWaypointList(void);

# 290 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 290 "./src/main/navigation/navigation.h"
    saveNonVolatileWaypointList(void);


typedef enum {
    GEO_ALT_ABSOLUTE,
    GEO_ALT_RELATIVE
} geoAltitudeConversionMode_e;

typedef enum {
    GEO_ORIGIN_SET,
    GEO_ORIGIN_RESET_ALTITUDE
} geoOriginResetMode_e;

void geoSetOrigin(gpsOrigin_s * origin, const gpsLocation_t * llh, geoOriginResetMode_e resetMode);
void geoConvertGeodeticToLocal(gpsOrigin_s * origin, const gpsLocation_t * llh, fpVector3_t * pos, geoAltitudeConversionMode_e altConv);
void geoConvertLocalToGeodetic(const gpsOrigin_s * origin, const fpVector3_t * pos, gpsLocation_t * llh);
float geoCalculateMagDeclination(const gpsLocation_t * llh);


void activateForcedRTH(void);
void abortForcedRTH(void);
rthState_e getStateOfForcedRTH(void);



# 314 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 314 "./src/main/navigation/navigation.h"
    navigationIsControllingThrottle(void);

# 315 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 315 "./src/main/navigation/navigation.h"
    navigationIsFlyingAutonomousMode(void);




# 319 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 319 "./src/main/navigation/navigation.h"
    navigationRTHAllowsLanding(void);


# 321 "./src/main/navigation/navigation.h" 3 4
_Bool 
# 321 "./src/main/navigation/navigation.h"
    isNavLaunchEnabled(void);


extern navSystemStatus_t NAV_Status;

extern int16_t navCurrentState;
extern int16_t navActualVelocity[3];
extern int16_t navDesiredVelocity[3];
extern int16_t navTargetPosition[3];
extern int32_t navLatestActualPosition[3];
extern int16_t navTargetSurface;
extern int16_t navActualSurface;
extern uint16_t navFlags;
extern uint16_t navEPH;
extern uint16_t navEPV;
extern int16_t navAccNEU[3];
# 61 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/rx/rx.h" 1
# 18 "./src/main/rx/rx.h"
       







#define STICK_CHANNEL_COUNT 4

#define PWM_RANGE_ZERO 0
#define PWM_RANGE_MIN 1000
#define PWM_RANGE_MAX 2000
#define PWM_RANGE_MIDDLE (PWM_RANGE_MIN + ((PWM_RANGE_MAX - PWM_RANGE_MIN) / 2))

#define PWM_PULSE_MIN 750
#define PWM_PULSE_MAX 2250

#define MIDRC_MIN 1200
#define MIDRC_MAX 1700

#define RXFAIL_STEP_TO_CHANNEL_VALUE(step) (PWM_PULSE_MIN + 25 * step)
#define CHANNEL_VALUE_TO_RXFAIL_STEP(channelValue) ((constrain(channelValue, PWM_PULSE_MIN, PWM_PULSE_MAX) - PWM_PULSE_MIN) / 25)
#define MAX_RXFAIL_RANGE_STEP ((PWM_PULSE_MAX - PWM_PULSE_MIN) / 25)

#define DEFAULT_SERVO_MIN 1000
#define DEFAULT_SERVO_MIDDLE 1500
#define DEFAULT_SERVO_MAX 2000

#define DELAY_50_HZ (1000000 / 50)
#define DELAY_10_HZ (1000000 / 10)
#define DELAY_5_HZ (1000000 / 5)

typedef enum {
    RX_FRAME_PENDING = 0,
    RX_FRAME_COMPLETE = (1 << 0),
    RX_FRAME_FAILSAFE = (1 << 1),
    RX_FRAME_PROCESSING_REQUIRED = (1 << 2),
} rxFrameState_e;

typedef enum {
    RX_TYPE_NONE = 0,
    RX_TYPE_PWM = 1,
    RX_TYPE_PPM = 2,
    RX_TYPE_SERIAL = 3,
    RX_TYPE_MSP = 4,
    RX_TYPE_SPI = 5,
    RX_TYPE_UIB = 6
} rxReceiverType_e;

typedef enum {
    SERIALRX_SPEKTRUM1024 = 0,
    SERIALRX_SPEKTRUM2048 = 1,
    SERIALRX_SBUS = 2,
    SERIALRX_SUMD = 3,
    SERIALRX_SUMH = 4,
    SERIALRX_XBUS_MODE_B = 5,
    SERIALRX_XBUS_MODE_B_RJ01 = 6,
    SERIALRX_IBUS = 7,
    SERIALRX_JETIEXBUS = 8,
    SERIALRX_CRSF = 9,
    SERIALRX_FPORT = 10,
} rxSerialReceiverType_e;

#define MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT 16
#define MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT 8
#define MAX_SUPPORTED_RC_CHANNEL_COUNT 18

#define NON_AUX_CHANNEL_COUNT 4
#define MAX_AUX_CHANNEL_COUNT (MAX_SUPPORTED_RC_CHANNEL_COUNT - NON_AUX_CHANNEL_COUNT)




#define MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT


extern const char rcChannelLetters[];

extern int16_t rcData[18];

#define MAX_MAPPABLE_RX_INPUTS 4

#define RSSI_SCALE_MIN 1
#define RSSI_SCALE_MAX 255
#define RSSI_SCALE_DEFAULT 100

typedef struct rxChannelRangeConfig_s {
    uint16_t min;
    uint16_t max;
} rxChannelRangeConfig_t;
extern rxChannelRangeConfig_t rxChannelRangeConfigs_SystemArray[4]; extern rxChannelRangeConfig_t rxChannelRangeConfigs_CopyArray[4]; static inline const rxChannelRangeConfig_t* rxChannelRangeConfigs(int _index) { return &rxChannelRangeConfigs_SystemArray[_index]; } static inline rxChannelRangeConfig_t* rxChannelRangeConfigsMutable(int _index) { return &rxChannelRangeConfigs_SystemArray[_index]; } static inline rxChannelRangeConfig_t (* rxChannelRangeConfigs_array(void))[4] { return &rxChannelRangeConfigs_SystemArray; } struct _dummy;

typedef struct rxConfig_s {
    uint8_t receiverType;
    uint8_t rcmap[4];
    uint8_t serialrx_provider;
    uint8_t serialrx_inverted;
    uint8_t halfDuplex;
    uint8_t rx_spi_protocol;
    uint32_t rx_spi_id;
    uint8_t rx_spi_rf_channel_count;
    uint8_t spektrum_sat_bind;
    uint8_t spektrum_sat_bind_autoreset;
    uint8_t rssi_channel;
    uint8_t rssi_scale;
    uint8_t rssiInvert;
    uint16_t midrc;
    uint16_t mincheck;
    uint16_t maxcheck;
    uint16_t rx_min_usec;
    uint16_t rx_max_usec;
    uint8_t rcSmoothing;
} rxConfig_t;

extern rxConfig_t rxConfig_System; extern rxConfig_t rxConfig_Copy; static inline const rxConfig_t* rxConfig(void) { return &rxConfig_System; } static inline rxConfig_t* rxConfigMutable(void) { return &rxConfig_System; } struct _dummy;

#define REMAPPABLE_CHANNEL_COUNT (sizeof(((rxConfig_t *)0)->rcmap) / sizeof(((rxConfig_t *)0)->rcmap[0]))

typedef struct rxRuntimeConfig_s rxRuntimeConfig_t;
typedef uint16_t (*rcReadRawDataFnPtr)(const rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan);
typedef uint8_t (*rcFrameStatusFnPtr)(rxRuntimeConfig_t *rxRuntimeConfig);
typedef 
# 140 "./src/main/rx/rx.h" 3 4
       _Bool 
# 140 "./src/main/rx/rx.h"
            (*rcProcessFrameFnPtr)(const rxRuntimeConfig_t *rxRuntimeConfig);

typedef struct rxRuntimeConfig_s {
    uint8_t channelCount;
    timeUs_t rxRefreshRate;
    timeUs_t rxSignalTimeout;
    
# 146 "./src/main/rx/rx.h" 3 4
   _Bool 
# 146 "./src/main/rx/rx.h"
        requireFiltering;
    rcReadRawDataFnPtr rcReadRawFn;
    rcFrameStatusFnPtr rcFrameStatusFn;
    rcProcessFrameFnPtr rcProcessFrameFn;
    uint16_t *channelData;
    void *frameData;
} rxRuntimeConfig_t;

typedef enum {
    RSSI_SOURCE_NONE = 0,
    RSSI_SOURCE_ADC,
    RSSI_SOURCE_RX_CHANNEL,
    RSSI_SOURCE_RX_PROTOCOL,
    RSSI_SOURCE_MSP,
} rssiSource_e;

extern rxRuntimeConfig_t rxRuntimeConfig;

void rxInit(void);
void rxUpdateRSSISource(void);

# 166 "./src/main/rx/rx.h" 3 4
_Bool 
# 166 "./src/main/rx/rx.h"
    rxUpdateCheck(timeUs_t currentTimeUs, timeDelta_t currentDeltaTime);

# 167 "./src/main/rx/rx.h" 3 4
_Bool 
# 167 "./src/main/rx/rx.h"
    rxIsReceivingSignal(void);

# 168 "./src/main/rx/rx.h" 3 4
_Bool 
# 168 "./src/main/rx/rx.h"
    rxAreFlightChannelsValid(void);
void calculateRxChannelsAndUpdateFailsafe(timeUs_t currentTimeUs);

void parseRcChannels(const char *input);



void setRSSI(uint16_t newRssi, rssiSource_e source, 
# 175 "./src/main/rx/rx.h" 3 4
                                                   _Bool 
# 175 "./src/main/rx/rx.h"
                                                        filtered);
void setRSSIFromMSP(uint8_t newMspRssi);
void updateRSSI(timeUs_t currentTimeUs);
uint16_t getRSSI(void);
rssiSource_e getRSSISource(void);

void resetAllRxChannelRangeConfigurations(void);

void suspendRxSignal(void);
void resumeRxSignal(void);

uint16_t rxGetRefreshRate(void);
# 63 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/sensors/acceleration.h" 1
# 18 "./src/main/sensors/acceleration.h"
       





# 1 "./src/main/drivers/accgyro/accgyro.h" 1
# 18 "./src/main/drivers/accgyro/accgyro.h"
       



# 1 "./src/main/drivers/exti.h" 1
# 19 "./src/main/drivers/exti.h"
       




typedef struct extiConfig_s {
    ioTag_t tag;
} extiConfig_t;

typedef struct extiCallbackRec_s extiCallbackRec_t;
typedef void extiHandlerCallback(extiCallbackRec_t *self);

struct extiCallbackRec_s {
    extiHandlerCallback *fn;
};

void EXTIInit(void);

void EXTIHandlerInit(extiCallbackRec_t *cb, extiHandlerCallback *fn);



void EXTIConfig(IO_t io, extiCallbackRec_t *cb, int irqPriority, EXTITrigger_TypeDef trigger);

void EXTIRelease(IO_t io);
void EXTIEnable(IO_t io, 
# 44 "./src/main/drivers/exti.h" 3 4
                        _Bool 
# 44 "./src/main/drivers/exti.h"
                             enable);
# 23 "./src/main/drivers/accgyro/accgyro.h" 2
# 1 "./src/main/drivers/sensor.h" 1
# 18 "./src/main/drivers/sensor.h"
       





# 1 "./src/main/drivers/bus.h" 1
# 25 "./src/main/drivers/bus.h"
       






# 1 "./src/main/drivers/resource.h" 1
# 18 "./src/main/drivers/resource.h"
       

#define RESOURCE_INDEX(x) (x + 1)

typedef enum {
    OWNER_FREE = 0,
    OWNER_PWMINPUT,
    OWNER_PPMINPUT,
    OWNER_MOTOR,
    OWNER_SERVO,
    OWNER_SOFTSERIAL,
    OWNER_ADC,
    OWNER_SERIAL,
    OWNER_PINDEBUG,
    OWNER_TIMER,
    OWNER_RANGEFINDER,
    OWNER_SYSTEM,
    OWNER_SPI,
    OWNER_I2C,
    OWNER_SDCARD,
    OWNER_FLASH,
    OWNER_USB,
    OWNER_BEEPER,
    OWNER_OSD,
    OWNER_BARO,
    OWNER_MPU,
    OWNER_INVERTER,
    OWNER_LED_STRIP,
    OWNER_LED,
    OWNER_RX,
    OWNER_TX,
    OWNER_RX_SPI,
    OWNER_VTX,
    OWNER_SPI_PREINIT,
    OWNER_COMPASS,
    OWNER_AIRSPEED,
    OWNER_OLED_DISPLAY,
    OWNER_TOTAL_COUNT
} resourceOwner_e;

extern const char * const ownerNames[OWNER_TOTAL_COUNT];



typedef enum {
    RESOURCE_NONE = 0,
    RESOURCE_INPUT, RESOURCE_OUTPUT, RESOURCE_IO,
    RESOURCE_TIMER,
    RESOURCE_UART_TX, RESOURCE_UART_RX, RESOURCE_UART_TXRX,
    RESOURCE_EXTI,
    RESOURCE_I2C_SCL, RESOURCE_I2C_SDA,
    RESOURCE_SPI_SCK, RESOURCE_SPI_MOSI, RESOURCE_SPI_MISO, RESOURCE_SPI_CS,
    RESOURCE_ADC_CH1, RESOURCE_ADC_CH2, RESOURCE_ADC_CH3, RESOURCE_ADC_CH4,
    RESOURCE_RX_CE,
    RESOURCE_TOTAL_COUNT
} resourceType_e;

extern const char * const resourceNames[RESOURCE_TOTAL_COUNT];
# 33 "./src/main/drivers/bus.h" 2
# 1 "./src/main/drivers/bus_i2c.h" 1
# 18 "./src/main/drivers/bus_i2c.h"
       






#define I2C_TIMEOUT (10000)


# 1 "./src/main/drivers/rcc_types.h" 1
       

typedef uint8_t rccPeriphTag_t;
# 29 "./src/main/drivers/bus_i2c.h" 2

typedef enum {
    I2C_SPEED_100KHZ = 2,
    I2C_SPEED_200KHZ = 3,
    I2C_SPEED_400KHZ = 0,
    I2C_SPEED_800KHZ = 1,
} I2CSpeed;

typedef enum I2CDevice {
    I2CINVALID = -1,
    I2CDEV_EMULATED = -1,
    I2CDEV_1 = 0,
    I2CDEV_2,
    I2CDEV_3,



    I2CDEV_COUNT
} I2CDevice;

typedef struct i2cDevice_s {
    I2C_TypeDef *dev;
    ioTag_t scl;
    ioTag_t sda;
    rccPeriphTag_t rcc;
    I2CSpeed speed;





} i2cDevice_t;

void i2cSetSpeed(uint8_t speed);
void i2cInit(I2CDevice device);

# 64 "./src/main/drivers/bus_i2c.h" 3 4
_Bool 
# 64 "./src/main/drivers/bus_i2c.h"
    i2cWriteBuffer(I2CDevice device, uint8_t addr_, uint8_t reg_, uint8_t len_, const uint8_t *data);

# 65 "./src/main/drivers/bus_i2c.h" 3 4
_Bool 
# 65 "./src/main/drivers/bus_i2c.h"
    i2cWrite(I2CDevice device, uint8_t addr_, uint8_t reg, uint8_t data);

# 66 "./src/main/drivers/bus_i2c.h" 3 4
_Bool 
# 66 "./src/main/drivers/bus_i2c.h"
    i2cRead(I2CDevice device, uint8_t addr_, uint8_t reg, uint8_t len, uint8_t* buf);

uint16_t i2cGetErrorCounter(void);
# 34 "./src/main/drivers/bus.h" 2
# 1 "./src/main/drivers/bus_spi.h" 1
# 18 "./src/main/drivers/bus_spi.h"
       





#define SPI_IO_AF_CFG IO_CONFIG(GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL)
#define SPI_IO_AF_SCK_CFG IO_CONFIG(GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_DOWN)
#define SPI_IO_AF_MISO_CFG IO_CONFIG(GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_UP)
#define SPI_IO_CS_CFG IO_CONFIG(GPIO_Mode_OUT, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL)
# 45 "./src/main/drivers/bus_spi.h"
typedef enum {
    SPI_CLOCK_INITIALIZATON = 0,
    SPI_CLOCK_SLOW = 1,
    SPI_CLOCK_STANDARD = 2,
    SPI_CLOCK_FAST = 3,
    SPI_CLOCK_ULTRAFAST = 4
} SPIClockSpeed_e;

typedef enum SPIDevice {
    SPIINVALID = -1,
    SPIDEV_1 = 0,
    SPIDEV_2,
    SPIDEV_3,
    SPIDEV_4
} SPIDevice;




#define SPIDEV_COUNT 3






typedef struct SPIDevice_s {
    SPI_TypeDef *dev;
    ioTag_t nss;
    ioTag_t sck;
    ioTag_t mosi;
    ioTag_t miso;
    rccPeriphTag_t rcc;
    uint8_t af;
    volatile uint16_t errorCount;
    
# 80 "./src/main/drivers/bus_spi.h" 3 4
   _Bool 
# 80 "./src/main/drivers/bus_spi.h"
        leadingEdge;





    const uint16_t * divisorMap;
} spiDevice_t;


# 89 "./src/main/drivers/bus_spi.h" 3 4
_Bool 
# 89 "./src/main/drivers/bus_spi.h"
    spiInit(SPIDevice device);
void spiSetSpeed(SPI_TypeDef *instance, SPIClockSpeed_e speed);
uint8_t spiTransferByte(SPI_TypeDef *instance, uint8_t in);

# 92 "./src/main/drivers/bus_spi.h" 3 4
_Bool 
# 92 "./src/main/drivers/bus_spi.h"
    spiIsBusBusy(SPI_TypeDef *instance);


# 94 "./src/main/drivers/bus_spi.h" 3 4
_Bool 
# 94 "./src/main/drivers/bus_spi.h"
    spiTransfer(SPI_TypeDef *instance, uint8_t *out, const uint8_t *in, int len);

uint16_t spiGetErrorCounter(SPI_TypeDef *instance);
void spiResetErrorCounter(SPI_TypeDef *instance);
SPIDevice spiDeviceByInstance(SPI_TypeDef *instance);
SPI_TypeDef * spiInstanceByDevice(SPIDevice device);
# 35 "./src/main/drivers/bus.h" 2


#define BUS_SPI1 SPIDEV_1
#define BUS_SPI2 SPIDEV_2
#define BUS_SPI3 SPIDEV_3
#define BUS_SPI4 SPIDEV_4

#define BUS_I2C1 I2CDEV_1
#define BUS_I2C2 I2CDEV_2
#define BUS_I2C3 I2CDEV_3
#define BUS_I2C4 I2CDEV_4
#define BUS_I2C_EMULATED I2CINVALID

#define BUS_SCRATCHPAD_MEMORY_SIZE (20)

typedef enum {
    BUS_SPEED_INITIALIZATION = 0,
    BUS_SPEED_SLOW = 1,
    BUS_SPEED_STANDARD = 2,
    BUS_SPEED_FAST = 3,
    BUS_SPEED_ULTRAFAST = 4
} busSpeed_e;

typedef enum {
    BUSTYPE_ANY = 0,
    BUSTYPE_NONE = 0,
    BUSTYPE_I2C = 1,
    BUSTYPE_SPI = 2
} busType_e;



typedef enum {
    DEVHW_NONE = 0,


    DEVHW_BMA280,
    DEVHW_ADXL345,
    DEVHW_MMA8452,
    DEVHW_LSM303DLHC,


    DEVHW_L3GD20,
    DEVHW_L3G4200,


    DEVHW_MPU3050,
    DEVHW_MPU6000,
    DEVHW_MPU6050,
    DEVHW_MPU6500,
    DEVHW_BMI160,


    DEVHW_MPU9250,


    DEVHW_BMP085,
    DEVHW_BMP280,
    DEVHW_MS5611,
    DEVHW_MS5607,


    DEVHW_HMC5883,
    DEVHW_AK8963,
    DEVHW_AK8975,
    DEVHW_IST8310,
    DEVHW_QMC5883,
    DEVHW_MAG3110,


    DEVHW_MAX7456,


    DEVHW_SRF10,
    DEVHW_HCSR04_I2C,
    DEVHW_VL53L0X,


    DEVHW_MS4525,
    DEVHW_PCA9685,
    DEVHW_M25P16,
    DEVHW_UG2864,
} devHardwareType_e;

typedef enum {
    DEVFLAGS_NONE = 0,
    DEVFLAGS_USE_RAW_REGISTERS = (1 << 0),
} deviceFlags_e;

typedef struct busDeviceDescriptor_s {
    void * devicePtr;
    busType_e busType;
    devHardwareType_e devHwType;
    uint16_t flags;
    uint8_t tag;
    union {

        struct {
            SPIDevice spiBus;
            ioTag_t csnPin;
        } spi;


        struct {
            I2CDevice i2cBus;
            uint8_t address;
        } i2c;

    } busdev;
    ioTag_t irqPin;
} busDeviceDescriptor_t;

typedef struct busDevice_s {
    const busDeviceDescriptor_t * descriptorPtr;
    busType_e busType;
    uint32_t flags;
    union {

        struct {
            SPIDevice spiBus;
            IO_t csnPin;
        } spi;


        struct {
            I2CDevice i2cBus;
            uint8_t address;
        } i2c;

    } busdev;
    IO_t irqPin;
    uint32_t scratchpad[(20) / sizeof(uint32_t)];


} busDevice_t;






extern const busDeviceDescriptor_t __busdev_registry_start[];
extern const busDeviceDescriptor_t __busdev_registry_end[];
#define BUSDEV_REGISTER_ATTRIBUTES __attribute__ ((section(".busdev_registry"), used, aligned(4)))


#define BUSDEV_REGISTER_SPI_F(_name,_devHw,_spiBus,_csnPin,_irqPin,_tag,_flags) extern const busDeviceDescriptor_t _name ## _registry; static busDevice_t _name ## _memory; const busDeviceDescriptor_t _name ## _registry BUSDEV_REGISTER_ATTRIBUTES = { .devicePtr = (void *) & _name ## _memory, .busType = BUSTYPE_SPI, .devHwType = _devHw, .flags = _flags, .tag = _tag, .busdev.spi = { .spiBus = _spiBus, .csnPin = IO_TAG(_csnPin) }, .irqPin = IO_TAG(_irqPin) }; struct _dummy
# 199 "./src/main/drivers/bus.h"
#define BUSDEV_REGISTER_I2C_F(_name,_devHw,_i2cBus,_devAddr,_irqPin,_tag,_flags) extern const busDeviceDescriptor_t _name ## _registry; static busDevice_t _name ## _memory; const busDeviceDescriptor_t _name ## _registry BUSDEV_REGISTER_ATTRIBUTES = { .devicePtr = (void *) & _name ## _memory, .busType = BUSTYPE_I2C, .devHwType = _devHw, .flags = _flags, .tag = _tag, .busdev.i2c = { .i2cBus = _i2cBus, .address = _devAddr }, .irqPin = IO_TAG(_irqPin) }; struct _dummy
# 217 "./src/main/drivers/bus.h"
#define BUSDEV_REGISTER_SPI(_name,_devHw,_spiBus,_csnPin,_irqPin,_flags) BUSDEV_REGISTER_SPI_F(_name, _devHw, _spiBus, _csnPin, _irqPin, 0, _flags)


#define BUSDEV_REGISTER_SPI_TAG(_name,_devHw,_spiBus,_csnPin,_irqPin,_tag,_flags) BUSDEV_REGISTER_SPI_F(_name, _devHw, _spiBus, _csnPin, _irqPin, _tag, _flags)


#define BUSDEV_REGISTER_I2C(_name,_devHw,_i2cBus,_devAddr,_irqPin,_flags) BUSDEV_REGISTER_I2C_F(_name, _devHw, _i2cBus, _devAddr, _irqPin, 0, _flags)


#define BUSDEV_REGISTER_I2C_TAG(_name,_devHw,_i2cBus,_devAddr,_irqPin,_tag,_flags) BUSDEV_REGISTER_I2C_F(_name, _devHw, _i2cBus, _devAddr, _irqPin, _tag, _flags)




typedef struct busTransferDescriptor_s {
    uint8_t * rxBuf;
    const uint8_t * txBuf;
    uint32_t length;
} busTransferDescriptor_t;



# 238 "./src/main/drivers/bus.h" 3 4
_Bool 
# 238 "./src/main/drivers/bus.h"
    i2cBusWriteBuffer(const busDevice_t * dev, uint8_t reg, const uint8_t * data, uint8_t length);

# 239 "./src/main/drivers/bus.h" 3 4
_Bool 
# 239 "./src/main/drivers/bus.h"
    i2cBusWriteRegister(const busDevice_t * dev, uint8_t reg, uint8_t data);

# 240 "./src/main/drivers/bus.h" 3 4
_Bool 
# 240 "./src/main/drivers/bus.h"
    i2cBusReadBuffer(const busDevice_t * dev, uint8_t reg, uint8_t * data, uint8_t length);

# 241 "./src/main/drivers/bus.h" 3 4
_Bool 
# 241 "./src/main/drivers/bus.h"
    i2cBusReadRegister(const busDevice_t * dev, uint8_t reg, uint8_t * data);


void spiBusSetSpeed(const busDevice_t * dev, busSpeed_e speed);

# 245 "./src/main/drivers/bus.h" 3 4
_Bool 
# 245 "./src/main/drivers/bus.h"
    spiBusTransferMultiple(const busDevice_t * dev, busTransferDescriptor_t * dsc, int count);

# 246 "./src/main/drivers/bus.h" 3 4
_Bool 
# 246 "./src/main/drivers/bus.h"
    spiBusWriteBuffer(const busDevice_t * dev, uint8_t reg, const uint8_t * data, uint8_t length);

# 247 "./src/main/drivers/bus.h" 3 4
_Bool 
# 247 "./src/main/drivers/bus.h"
    spiBusWriteRegister(const busDevice_t * dev, uint8_t reg, uint8_t data);

# 248 "./src/main/drivers/bus.h" 3 4
_Bool 
# 248 "./src/main/drivers/bus.h"
    spiBusReadBuffer(const busDevice_t * dev, uint8_t reg, uint8_t * data, uint8_t length);

# 249 "./src/main/drivers/bus.h" 3 4
_Bool 
# 249 "./src/main/drivers/bus.h"
    spiBusReadRegister(const busDevice_t * dev, uint8_t reg, uint8_t * data);



void busInit(void);


busDevice_t * busDeviceInit(busType_e bus, devHardwareType_e hw, uint8_t tag, resourceOwner_e owner);
busDevice_t * busDeviceOpen(busType_e bus, devHardwareType_e hw, uint8_t tag);
void busDeviceDeInit(busDevice_t * dev);

uint32_t busDeviceReadScratchpad(const busDevice_t * dev);
void busDeviceWriteScratchpad(busDevice_t * dev, uint32_t value);
void * busDeviceGetScratchpadMemory(const busDevice_t * dev);

void busSetSpeed(const busDevice_t * dev, busSpeed_e speed);


# 266 "./src/main/drivers/bus.h" 3 4
_Bool 
# 266 "./src/main/drivers/bus.h"
    busWriteBuf(const busDevice_t * busdev, uint8_t reg, const uint8_t * data, uint8_t length);

# 267 "./src/main/drivers/bus.h" 3 4
_Bool 
# 267 "./src/main/drivers/bus.h"
    busReadBuf(const busDevice_t * busdev, uint8_t reg, uint8_t * data, uint8_t length);

# 268 "./src/main/drivers/bus.h" 3 4
_Bool 
# 268 "./src/main/drivers/bus.h"
    busRead(const busDevice_t * busdev, uint8_t reg, uint8_t * data);

# 269 "./src/main/drivers/bus.h" 3 4
_Bool 
# 269 "./src/main/drivers/bus.h"
    busWrite(const busDevice_t * busdev, uint8_t reg, uint8_t data);


# 271 "./src/main/drivers/bus.h" 3 4
_Bool 
# 271 "./src/main/drivers/bus.h"
    busTransfer(const busDevice_t * dev, uint8_t * rxBuf, const uint8_t * txBuf, int length);

# 272 "./src/main/drivers/bus.h" 3 4
_Bool 
# 272 "./src/main/drivers/bus.h"
    busTransferMultiple(const busDevice_t * dev, busTransferDescriptor_t * buffers, int count);
# 25 "./src/main/drivers/sensor.h" 2

typedef enum {
    ALIGN_DEFAULT = 0,
    CW0_DEG = 1,
    CW90_DEG = 2,
    CW180_DEG = 3,
    CW270_DEG = 4,
    CW0_DEG_FLIP = 5,
    CW90_DEG_FLIP = 6,
    CW180_DEG_FLIP = 7,
    CW270_DEG_FLIP = 8
} sensor_align_e;

typedef 
# 38 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 38 "./src/main/drivers/sensor.h"
            (*sensorInitFuncPtr)(void);
typedef 
# 39 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 39 "./src/main/drivers/sensor.h"
            (*sensorReadFuncPtr)(int16_t *data);
typedef 
# 40 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 40 "./src/main/drivers/sensor.h"
            (*sensorInterruptFuncPtr)(void);
struct accDev_s;
typedef void (*sensorAccInitFuncPtr)(struct accDev_s *acc);
typedef 
# 43 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 43 "./src/main/drivers/sensor.h"
            (*sensorAccReadFuncPtr)(struct accDev_s *acc);
struct gyroDev_s;
typedef void (*sensorGyroInitFuncPtr)(struct gyroDev_s *gyro);
typedef 
# 46 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 46 "./src/main/drivers/sensor.h"
            (*sensorGyroReadFuncPtr)(struct gyroDev_s *gyro);
typedef 
# 47 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 47 "./src/main/drivers/sensor.h"
            (*sensorGyroUpdateFuncPtr)(struct gyroDev_s *gyro);
typedef 
# 48 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 48 "./src/main/drivers/sensor.h"
            (*sensorGyroReadDataFuncPtr)(struct gyroDev_s *gyro, int16_t *data);
typedef 
# 49 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 49 "./src/main/drivers/sensor.h"
            (*sensorGyroInterruptStatusFuncPtr)(struct gyroDev_s *gyro);
struct magDev_s;
typedef 
# 51 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 51 "./src/main/drivers/sensor.h"
            (*sensorMagInitFuncPtr)(struct magDev_s *mag);
typedef 
# 52 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 52 "./src/main/drivers/sensor.h"
            (*sensorMagReadFuncPtr)(struct magDev_s *mag);
struct opflowDev_s;
typedef 
# 54 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 54 "./src/main/drivers/sensor.h"
            (*sensorOpflowInitFuncPtr)(struct opflowDev_s *mag);
typedef 
# 55 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 55 "./src/main/drivers/sensor.h"
            (*sensorOpflowUpdateFuncPtr)(struct opflowDev_s *mag);
# 24 "./src/main/drivers/accgyro/accgyro.h" 2

#define GYRO_LPF_256HZ 0
#define GYRO_LPF_188HZ 1
#define GYRO_LPF_98HZ 2
#define GYRO_LPF_42HZ 3
#define GYRO_LPF_20HZ 4
#define GYRO_LPF_10HZ 5
#define GYRO_LPF_5HZ 6
#define GYRO_LPF_NONE 7

typedef struct {
    uint8_t gyroLpf;
    uint16_t gyroRateHz;
    uint8_t gyroConfigValues[2];
} gyroFilterAndRateConfig_t;

typedef struct gyroDev_s {
    busDevice_t * busDev;
    sensorGyroInitFuncPtr initFn;
    sensorGyroReadFuncPtr readFn;
    sensorGyroReadDataFuncPtr temperatureFn;
    sensorGyroInterruptStatusFuncPtr intStatusFn;
    sensorGyroUpdateFuncPtr updateFn;
    extiCallbackRec_t exti;
    float scale;
    int16_t gyroADCRaw[3];
    int16_t gyroZero[3];
    uint8_t imuSensorToUse;
    uint8_t lpf;
    uint32_t requestedSampleIntervalUs;
    volatile 
# 54 "./src/main/drivers/accgyro/accgyro.h" 3 4
            _Bool 
# 54 "./src/main/drivers/accgyro/accgyro.h"
                 dataReady;
    uint32_t sampleRateIntervalUs;
    sensor_align_e gyroAlign;
} gyroDev_t;

typedef struct accDev_s {
    busDevice_t * busDev;
    sensorAccInitFuncPtr initFn;
    sensorAccReadFuncPtr readFn;
    uint16_t acc_1G;
    int16_t ADCRaw[3];
    uint8_t imuSensorToUse;
    sensor_align_e accAlign;
} accDev_t;

const gyroFilterAndRateConfig_t * chooseGyroConfig(uint8_t desiredLpf, uint16_t desiredRateHz, const gyroFilterAndRateConfig_t * configs, int count);
void gyroIntExtiInit(struct gyroDev_s *gyro);

# 71 "./src/main/drivers/accgyro/accgyro.h" 3 4
_Bool 
# 71 "./src/main/drivers/accgyro/accgyro.h"
    gyroCheckDataReady(struct gyroDev_s *gyro);
# 25 "./src/main/sensors/acceleration.h" 2
# 1 "./src/main/sensors/sensors.h" 1
# 18 "./src/main/sensors/sensors.h"
       

typedef enum {
    SENSOR_INDEX_GYRO = 0,
    SENSOR_INDEX_ACC,
    SENSOR_INDEX_BARO,
    SENSOR_INDEX_MAG,
    SENSOR_INDEX_RANGEFINDER,
    SENSOR_INDEX_PITOT,
    SENSOR_INDEX_OPFLOW,
    SENSOR_INDEX_COUNT
} sensorIndex_e;

typedef struct int16_flightDynamicsTrims_s {
    int16_t roll;
    int16_t pitch;
    int16_t yaw;
} flightDynamicsTrims_def_t;

typedef union flightDynamicsTrims_u {
    int16_t raw[3];
    flightDynamicsTrims_def_t values;
} flightDynamicsTrims_t;

#define CALIBRATING_GYRO_CYCLES 1000
#define CALIBRATING_ACC_CYCLES 400


typedef enum {
    SENSOR_GYRO = 1 << 0,
    SENSOR_ACC = 1 << 1,
    SENSOR_BARO = 1 << 2,
    SENSOR_MAG = 1 << 3,
    SENSOR_RANGEFINDER = 1 << 4,
    SENSOR_PITOT = 1 << 5,
    SENSOR_OPFLOW = 1 << 6,
    SENSOR_GPS = 1 << 7,
    SENSOR_GPSMAG = 1 << 8,
} sensors_e;

extern uint8_t requestedSensors[SENSOR_INDEX_COUNT];
extern uint8_t detectedSensors[SENSOR_INDEX_COUNT];
# 26 "./src/main/sensors/acceleration.h" 2

#define GRAVITY_CMSS 980.665f
#define GRAVITY_MSS 9.80665f


typedef enum {
    ACC_NONE = 0,
    ACC_AUTODETECT = 1,
    ACC_ADXL345 = 2,
    ACC_MPU6050 = 3,
    ACC_MMA8452 = 4,
    ACC_BMA280 = 5,
    ACC_LSM303DLHC = 6,
    ACC_MPU6000 = 7,
    ACC_MPU6500 = 8,
    ACC_MPU9250 = 9,
    ACC_FAKE = 10,
    ACC_MAX = ACC_FAKE
} accelerationSensor_e;

typedef struct acc_s {
    accDev_t dev;
    uint32_t accTargetLooptime;
    float accADCf[3];
} acc_t;

extern acc_t acc;

typedef struct accelerometerConfig_s {
    sensor_align_e acc_align;
    uint8_t acc_hardware;
    uint16_t acc_lpf_hz;
    flightDynamicsTrims_t accZero;
    flightDynamicsTrims_t accGain;
    uint8_t acc_notch_hz;
    uint8_t acc_notch_cutoff;
} accelerometerConfig_t;

extern accelerometerConfig_t accelerometerConfig_System; extern accelerometerConfig_t accelerometerConfig_Copy; static inline const accelerometerConfig_t* accelerometerConfig(void) { return &accelerometerConfig_System; } static inline accelerometerConfig_t* accelerometerConfigMutable(void) { return &accelerometerConfig_System; } struct _dummy;


# 66 "./src/main/sensors/acceleration.h" 3 4
_Bool 
# 66 "./src/main/sensors/acceleration.h"
    accInit(uint32_t accTargetLooptime);

# 67 "./src/main/sensors/acceleration.h" 3 4
_Bool 
# 67 "./src/main/sensors/acceleration.h"
    accIsCalibrationComplete(void);
void accSetCalibrationCycles(uint16_t calibrationCyclesRequired);
void accGetMeasuredAcceleration(fpVector3_t *measuredAcc);
void accUpdate(void);
void accSetCalibrationValues(void);
void accInitFilters(void);

# 73 "./src/main/sensors/acceleration.h" 3 4
_Bool 
# 73 "./src/main/sensors/acceleration.h"
    accIsHealthy(void);

# 74 "./src/main/sensors/acceleration.h" 3 4
_Bool 
# 74 "./src/main/sensors/acceleration.h"
    accGetCalibrationAxisStatus(int axis);
uint8_t accGetCalibrationAxisFlags(void);
# 65 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/barometer.h" 1
# 18 "./src/main/sensors/barometer.h"
       



# 1 "./src/main/drivers/barometer/barometer.h" 1
# 18 "./src/main/drivers/barometer/barometer.h"
       



struct baroDev_s;
typedef 
# 23 "./src/main/drivers/barometer/barometer.h" 3 4
       _Bool 
# 23 "./src/main/drivers/barometer/barometer.h"
            (*baroOpFuncPtr)(struct baroDev_s * baro);
typedef 
# 24 "./src/main/drivers/barometer/barometer.h" 3 4
       _Bool 
# 24 "./src/main/drivers/barometer/barometer.h"
            (*baroCalculateFuncPtr)(struct baroDev_s * baro, int32_t *pressure, int32_t *temperature);

typedef struct baroDev_s {
    busDevice_t * busDev;
    uint16_t ut_delay;
    uint16_t up_delay;
    baroOpFuncPtr start_ut;
    baroOpFuncPtr get_ut;
    baroOpFuncPtr start_up;
    baroOpFuncPtr get_up;
    baroCalculateFuncPtr calculate;
} baroDev_t;
# 23 "./src/main/sensors/barometer.h" 2

typedef enum {
    BARO_NONE = 0,
    BARO_AUTODETECT = 1,
    BARO_BMP085 = 2,
    BARO_MS5611 = 3,
    BARO_BMP280 = 4,
    BARO_MS5607 = 5,
    BARO_FAKE = 6,
    BARO_MAX = BARO_FAKE
} baroSensor_e;

typedef struct barometerConfig_s {
    uint8_t baro_hardware;
    uint8_t use_median_filtering;
} barometerConfig_t;

extern barometerConfig_t barometerConfig_System; extern barometerConfig_t barometerConfig_Copy; static inline const barometerConfig_t* barometerConfig(void) { return &barometerConfig_System; } static inline barometerConfig_t* barometerConfigMutable(void) { return &barometerConfig_System; } struct _dummy;

typedef struct baro_s {
    baroDev_t dev;
    int32_t BaroAlt;
    int32_t baroTemperature;
    int32_t baroPressure;
} baro_t;

extern baro_t baro;


# 51 "./src/main/sensors/barometer.h" 3 4
_Bool 
# 51 "./src/main/sensors/barometer.h"
    baroInit(void);

# 52 "./src/main/sensors/barometer.h" 3 4
_Bool 
# 52 "./src/main/sensors/barometer.h"
    baroIsCalibrationComplete(void);
void baroStartCalibration(void);
uint32_t baroUpdate(void);
int32_t baroCalculateAltitude(void);
int32_t baroGetLatestAltitude(void);

# 57 "./src/main/sensors/barometer.h" 3 4
_Bool 
# 57 "./src/main/sensors/barometer.h"
    baroIsHealthy(void);
# 66 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/battery.h" 1
# 18 "./src/main/sensors/battery.h"
       




#define VBAT_SCALE_DEFAULT 1100

#define VBAT_SCALE_MIN 0
#define VBAT_SCALE_MAX 65535


#define CURRENT_METER_SCALE 400



#define CURRENT_METER_OFFSET 0


typedef enum {
    CURRENT_SENSOR_NONE = 0,
    CURRENT_SENSOR_ADC,
    CURRENT_SENSOR_VIRTUAL,
    CURRENT_SENSOR_MAX = CURRENT_SENSOR_VIRTUAL
} currentSensor_e;

typedef enum {
    BAT_CAPACITY_UNIT_MAH,
    BAT_CAPACITY_UNIT_MWH,
} batCapacityUnit_e;

typedef struct batteryConfig_s {

    struct {
        uint16_t scale;
        uint16_t cellMax;
        uint16_t cellMin;
        uint16_t cellWarning;
    } voltage;

    struct {
        int16_t scale;
        int16_t offset;
        currentSensor_e type;
    } current;

    struct {
        uint32_t value;
        uint32_t warning;
        uint32_t critical;
        batCapacityUnit_e unit;
    } capacity;

} batteryConfig_t;

extern batteryConfig_t batteryConfig_System; extern batteryConfig_t batteryConfig_Copy; static inline const batteryConfig_t* batteryConfig(void) { return &batteryConfig_System; } static inline batteryConfig_t* batteryConfigMutable(void) { return &batteryConfig_System; } struct _dummy;

typedef enum {
    BATTERY_OK = 0,
    BATTERY_WARNING,
    BATTERY_CRITICAL,
    BATTERY_NOT_PRESENT
} batteryState_e;

uint16_t batteryAdcToVoltage(uint16_t src);
batteryState_e getBatteryState(void);

# 83 "./src/main/sensors/battery.h" 3 4
_Bool 
# 83 "./src/main/sensors/battery.h"
    batteryWasFullWhenPluggedIn(void);

# 84 "./src/main/sensors/battery.h" 3 4
_Bool 
# 84 "./src/main/sensors/battery.h"
    batteryUsesCapacityThresholds(void);
void batteryUpdate(uint32_t vbatTimeDelta);
void batteryInit(void);


# 88 "./src/main/sensors/battery.h" 3 4
_Bool 
# 88 "./src/main/sensors/battery.h"
    isBatteryVoltageConfigured(void);
uint16_t getBatteryVoltage(void);
uint16_t getBatteryVoltageLatestADC(void);
uint16_t getBatteryWarningVoltage(void);
uint8_t getBatteryCellCount(void);
uint16_t getBatteryAverageCellVoltage(void);
uint32_t getBatteryRemainingCapacity(void);


# 96 "./src/main/sensors/battery.h" 3 4
_Bool 
# 96 "./src/main/sensors/battery.h"
    isAmperageConfigured(void);
int32_t getAmperage(void);
int32_t getAmperageLatestADC(void);
int32_t getPower(void);
int32_t getMAhDrawn(void);
int32_t getMWhDrawn(void);

void currentMeterUpdate(int32_t lastUpdateAt);

void powerMeterUpdate(int32_t lastUpdateAt);

uint8_t calculateBatteryPercentage(void);
# 67 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/boardalignment.h" 1
# 18 "./src/main/sensors/boardalignment.h"
       



typedef struct boardAlignment_s {
    int16_t rollDeciDegrees;
    int16_t pitchDeciDegrees;
    int16_t yawDeciDegrees;
} boardAlignment_t;

extern boardAlignment_t boardAlignment_System; extern boardAlignment_t boardAlignment_Copy; static inline const boardAlignment_t* boardAlignment(void) { return &boardAlignment_System; } static inline boardAlignment_t* boardAlignmentMutable(void) { return &boardAlignment_System; } struct _dummy;

void initBoardAlignment(void);
void updateBoardAlignment(int16_t roll, int16_t pitch);
void applySensorAlignment(int32_t * dest, int32_t * src, uint8_t rotation);
void applyBoardAlignment(int32_t *vec);
# 68 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/gyro.h" 1
# 18 "./src/main/sensors/gyro.h"
       
# 27 "./src/main/sensors/gyro.h"
typedef enum {
    GYRO_NONE = 0,
    GYRO_AUTODETECT,
    GYRO_MPU6050,
    GYRO_L3G4200D,
    GYRO_MPU3050,
    GYRO_L3GD20,
    GYRO_MPU6000,
    GYRO_MPU6500,
    GYRO_MPU9250,
    GYRO_FAKE
} gyroSensor_e;

typedef struct gyro_s {
    uint32_t targetLooptime;
    float gyroADCf[3];
} gyro_t;

extern gyro_t gyro;

typedef struct gyroConfig_s {
    sensor_align_e gyro_align;
    uint8_t gyroMovementCalibrationThreshold;
    uint8_t __deprecated_0;
    uint8_t gyroSync;
    uint16_t looptime;
    uint8_t gyro_lpf;
    uint8_t gyro_soft_lpf_hz;
    uint8_t gyro_to_use;
    uint16_t gyro_soft_notch_hz_1;
    uint16_t gyro_soft_notch_cutoff_1;
    uint16_t gyro_soft_notch_hz_2;
    uint16_t gyro_soft_notch_cutoff_2;
} gyroConfig_t;

extern gyroConfig_t gyroConfig_System; extern gyroConfig_t gyroConfig_Copy; static inline const gyroConfig_t* gyroConfig(void) { return &gyroConfig_System; } static inline gyroConfig_t* gyroConfigMutable(void) { return &gyroConfig_System; } struct _dummy;


# 64 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 64 "./src/main/sensors/gyro.h"
    gyroInit(void);
void gyroInitFilters(void);
void gyroGetMeasuredRotationRate(fpVector3_t *imuMeasuredRotationBF);
void gyroUpdate(timeDelta_t gyroUpdateDeltaUs);
void gyroSetCalibrationCycles(uint16_t calibrationCyclesRequired);

# 69 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 69 "./src/main/sensors/gyro.h"
    gyroIsCalibrationComplete(void);

# 70 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 70 "./src/main/sensors/gyro.h"
    gyroReadTemperature(void);
int16_t gyroGetTemperature(void);
int16_t gyroRateDps(int axis);

# 73 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 73 "./src/main/sensors/gyro.h"
    gyroSyncCheckUpdate(void);
# 69 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/pitotmeter.h" 1
# 18 "./src/main/sensors/pitotmeter.h"
       



# 1 "./src/main/drivers/pitotmeter.h" 1
# 18 "./src/main/drivers/pitotmeter.h"
       


struct pitotDev_s;

typedef void (*pitotOpFuncPtr)(struct pitotDev_s * pitot);
typedef void (*pitotCalculateFuncPtr)(struct pitotDev_s * pitot, float *pressure, float *temperature);

typedef struct pitotDev_s {
    busDevice_t * busDev;
    uint16_t delay;
    pitotOpFuncPtr start;
    pitotOpFuncPtr get;
    pitotCalculateFuncPtr calculate;
} pitotDev_t;
# 23 "./src/main/sensors/pitotmeter.h" 2

typedef enum {
    PITOT_NONE = 0,
    PITOT_AUTODETECT = 1,
    PITOT_MS4525 = 2,
    PITOT_ADC = 3,
    PITOT_VIRTUAL = 4,
    PITOT_FAKE = 5,
} pitotSensor_e;

#define PITOT_MAX PITOT_FAKE
#define PITOT_SAMPLE_COUNT_MAX 48

typedef struct pitotmeterConfig_s {
    uint8_t pitot_hardware;
    uint8_t use_median_filtering;
    float pitot_noise_lpf;
    float pitot_scale;
} pitotmeterConfig_t;

extern pitotmeterConfig_t pitotmeterConfig_System; extern pitotmeterConfig_t pitotmeterConfig_Copy; static inline const pitotmeterConfig_t* pitotmeterConfig(void) { return &pitotmeterConfig_System; } static inline pitotmeterConfig_t* pitotmeterConfigMutable(void) { return &pitotmeterConfig_System; } struct _dummy;

typedef struct pito_s {
    pitotDev_t dev;
    int32_t airSpeed;
} pitot_t;



extern pitot_t pitot;


# 54 "./src/main/sensors/pitotmeter.h" 3 4
_Bool 
# 54 "./src/main/sensors/pitotmeter.h"
    pitotInit(void);

# 55 "./src/main/sensors/pitotmeter.h" 3 4
_Bool 
# 55 "./src/main/sensors/pitotmeter.h"
    pitotIsCalibrationComplete(void);
void pitotStartCalibration(void);
uint32_t pitotUpdate(void);
int32_t pitotCalculateAirSpeed(void);

# 59 "./src/main/sensors/pitotmeter.h" 3 4
_Bool 
# 59 "./src/main/sensors/pitotmeter.h"
    pitotIsHealthy(void);
# 70 "./src/main/telemetry/mavlink.c" 2


# 1 "./src/main/telemetry/mavlink.h" 1
# 18 "./src/main/telemetry/mavlink.h"
       

void initMAVLinkTelemetry(void);
void handleMAVLinkTelemetry(timeUs_t currentTimeUs);
void checkMAVLinkTelemetryState(void);

void freeMAVLinkTelemetryPort(void);
void configureMAVLinkTelemetryPort(void);
# 73 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/telemetry/telemetry.h" 1
# 25 "./src/main/telemetry/telemetry.h"
       
# 34 "./src/main/telemetry/telemetry.h"
typedef enum {
    FRSKY_FORMAT_DMS = 0,
    FRSKY_FORMAT_NMEA
} frskyGpsCoordFormat_e;

typedef enum {
    FRSKY_UNIT_METRICS = 0,
    FRSKY_UNIT_IMPERIALS
} frskyUnit_e;

typedef enum {
    LTM_RATE_NORMAL,
    LTM_RATE_MEDIUM,
    LTM_RATE_SLOW
} ltmUpdateRate_e;

typedef enum {
    SMARTPORT_FUEL_UNIT_PERCENT,
    SMARTPORT_FUEL_UNIT_MAH,
    SMARTPORT_FUEL_UNIT_MWH
} smartportFuelUnit_e;

typedef struct telemetryConfig_s {
    float gpsNoFixLatitude;
    float gpsNoFixLongitude;
    uint8_t telemetry_switch;
    uint8_t telemetry_inverted;
    frskyGpsCoordFormat_e frsky_coordinate_format;
    frskyUnit_e frsky_unit;
    uint8_t frsky_vfas_precision;
    uint8_t report_cell_voltage;
    uint8_t hottAlarmSoundInterval;
    uint8_t smartportUartUnidirectional;
    smartportFuelUnit_e smartportFuelUnit;
    uint8_t ibusTelemetryType;
    uint8_t ltmUpdateRate;
} telemetryConfig_t;

extern telemetryConfig_t telemetryConfig_System; extern telemetryConfig_t telemetryConfig_Copy; static inline const telemetryConfig_t* telemetryConfig(void) { return &telemetryConfig_System; } static inline telemetryConfig_t* telemetryConfigMutable(void) { return &telemetryConfig_System; } struct _dummy;

#define TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK (FUNCTION_TELEMETRY_FRSKY | FUNCTION_TELEMETRY_LTM | FUNCTION_TELEMETRY_IBUS)
extern serialPort_t *telemetrySharedPort;

void telemetryInit(void);

# 78 "./src/main/telemetry/telemetry.h" 3 4
_Bool 
# 78 "./src/main/telemetry/telemetry.h"
    telemetryCheckRxPortShared(const serialPortConfig_t *portConfig);

void telemetryCheckState(void);
void telemetryProcess(timeUs_t currentTimeUs);


# 83 "./src/main/telemetry/telemetry.h" 3 4
_Bool 
# 83 "./src/main/telemetry/telemetry.h"
    telemetryDetermineEnabledState(portSharing_e portSharing);
# 74 "./src/main/telemetry/mavlink.c" 2



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
# 1 "./lib/main/MAVLink/common/mavlink.h" 1




       

#define MAVLINK_H 

#define MAVLINK_PRIMARY_XML_IDX 1


#define MAVLINK_STX 254



#define MAVLINK_ENDIAN MAVLINK_LITTLE_ENDIAN



#define MAVLINK_ALIGNED_FIELDS 1



#define MAVLINK_CRC_EXTRA 1



#define MAVLINK_COMMAND_24BIT 0


# 1 "./lib/main/MAVLink/common/version.h" 1




       


#define MAVLINK_VERSION_H 

#define MAVLINK_BUILD_DATE "Wed Mar 22 2017"
#define MAVLINK_WIRE_PROTOCOL_VERSION "1.0"
#define MAVLINK_MAX_DIALECT_PAYLOAD_SIZE 255
# 32 "./lib/main/MAVLink/common/mavlink.h" 2
# 1 "./lib/main/MAVLink/common/common.h" 1




       

#define MAVLINK_COMMON_H 





#undef MAVLINK_THIS_XML_IDX
#define MAVLINK_THIS_XML_IDX 1
# 23 "./lib/main/MAVLink/common/common.h"
#define MAVLINK_MESSAGE_LENGTHS {9, 31, 12, 0, 14, 28, 3, 32, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 25, 23, 30, 101, 22, 26, 16, 14, 28, 32, 28, 28, 22, 22, 21, 6, 6, 37, 4, 4, 2, 2, 4, 2, 2, 3, 13, 12, 37, 4, 0, 0, 27, 25, 0, 0, 0, 0, 0, 72, 26, 181, 225, 42, 6, 4, 0, 11, 18, 0, 0, 37, 20, 35, 33, 3, 0, 0, 0, 22, 39, 37, 53, 51, 53, 51, 0, 28, 56, 42, 33, 81, 0, 0, 0, 0, 0, 0, 26, 32, 32, 20, 32, 62, 44, 64, 84, 9, 254, 16, 12, 36, 44, 64, 22, 6, 14, 12, 97, 2, 2, 113, 35, 6, 79, 35, 35, 22, 13, 255, 14, 18, 43, 8, 22, 14, 36, 43, 41, 32, 243, 14, 93, 0, 100, 36, 60, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 40, 63, 182, 40, 0, 0, 0, 0, 0, 0, 32, 52, 53, 6, 2, 38, 19, 254, 36, 30, 18, 18, 51, 9, 0}



#define MAVLINK_MESSAGE_CRCS {50, 124, 137, 0, 237, 217, 104, 119, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 214, 159, 220, 168, 24, 23, 170, 144, 67, 115, 39, 246, 185, 104, 237, 244, 222, 212, 9, 254, 230, 28, 28, 132, 221, 232, 11, 153, 41, 39, 78, 196, 0, 0, 15, 3, 0, 0, 0, 0, 0, 167, 183, 119, 191, 118, 148, 21, 0, 243, 124, 0, 0, 38, 20, 158, 152, 143, 0, 0, 0, 106, 49, 22, 143, 140, 5, 150, 0, 231, 183, 63, 54, 47, 0, 0, 0, 0, 0, 0, 175, 102, 158, 208, 56, 93, 138, 108, 32, 185, 84, 34, 174, 124, 237, 4, 76, 128, 56, 116, 134, 237, 203, 250, 87, 203, 220, 25, 226, 46, 29, 223, 85, 6, 229, 203, 1, 195, 109, 168, 181, 47, 72, 131, 127, 0, 103, 154, 178, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 105, 151, 35, 150, 0, 0, 0, 0, 0, 0, 90, 104, 85, 95, 130, 184, 81, 8, 204, 49, 170, 44, 83, 46, 0}


# 1 "./lib/main/MAVLink/common/../protocol.h" 1

#define _MAVLINK_PROTOCOL_H_ 


# 1 "./lib/main/MAVLink/common/../mavlink_types.h" 1

#define MAVLINK_TYPES_H_ 
# 13 "./lib/main/MAVLink/common/../mavlink_types.h"
#define MAVPACKED(__Declaration__) __Declaration__ __attribute__((packed))






#define MAVLINK_MAX_PAYLOAD_LEN 255


#define MAVLINK_CORE_HEADER_LEN 5
#define MAVLINK_NUM_HEADER_BYTES (MAVLINK_CORE_HEADER_LEN + 1)
#define MAVLINK_NUM_CHECKSUM_BYTES 2
#define MAVLINK_NUM_NON_PAYLOAD_BYTES (MAVLINK_NUM_HEADER_BYTES + MAVLINK_NUM_CHECKSUM_BYTES)

#define MAVLINK_MAX_PACKET_LEN (MAVLINK_MAX_PAYLOAD_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES)

#define MAVLINK_MSG_ID_EXTENDED_MESSAGE 255
#define MAVLINK_EXTENDED_HEADER_LEN 14






#define MAVLINK_MAX_EXTENDED_PACKET_LEN 2048


#define MAVLINK_MAX_EXTENDED_PAYLOAD_LEN (MAVLINK_MAX_EXTENDED_PACKET_LEN - MAVLINK_EXTENDED_HEADER_LEN - MAVLINK_NUM_NON_PAYLOAD_BYTES)
# 53 "./lib/main/MAVLink/common/../mavlink_types.h"
typedef struct param_union { union { float param_float; int32_t param_int32; uint32_t param_uint32; int16_t param_int16; uint16_t param_uint16; int8_t param_int8; uint8_t param_uint8; uint8_t bytes[4]; }; uint8_t type; } __attribute__((packed))
# 66 "./lib/main/MAVLink/common/../mavlink_types.h"
   mavlink_param_union_t;
# 82 "./lib/main/MAVLink/common/../mavlink_types.h"
typedef struct param_union_extended { union { struct { uint8_t is_double:1; uint8_t mavlink_type:7; union { char c; uint8_t uint8; int8_t int8; uint16_t uint16; int16_t int16; uint32_t uint32; int32_t int32; float f; uint8_t align[7]; }; }; uint8_t data[8]; }; } __attribute__((packed))
# 102 "./lib/main/MAVLink/common/../mavlink_types.h"
   mavlink_param_union_double_t;





typedef struct __mavlink_system { uint8_t sysid; uint8_t compid; } __attribute__((packed))



   mavlink_system_t;

typedef struct __mavlink_message { uint16_t checksum; uint8_t magic; uint8_t len; uint8_t seq; uint8_t sysid; uint8_t compid; uint8_t msgid; uint64_t payload64[(255 +2 +7)/8]; } __attribute__((packed))
# 124 "./lib/main/MAVLink/common/../mavlink_types.h"
   mavlink_message_t;

typedef struct __mavlink_extended_message { mavlink_message_t base_msg; int32_t extended_payload_len; uint8_t extended_payload[(2048 - 14 - ((5 + 1) + 2))]; } __attribute__((packed))




   mavlink_extended_message_t;

typedef enum {
 MAVLINK_TYPE_CHAR = 0,
 MAVLINK_TYPE_UINT8_T = 1,
 MAVLINK_TYPE_INT8_T = 2,
 MAVLINK_TYPE_UINT16_T = 3,
 MAVLINK_TYPE_INT16_T = 4,
 MAVLINK_TYPE_UINT32_T = 5,
 MAVLINK_TYPE_INT32_T = 6,
 MAVLINK_TYPE_UINT64_T = 7,
 MAVLINK_TYPE_INT64_T = 8,
 MAVLINK_TYPE_FLOAT = 9,
 MAVLINK_TYPE_DOUBLE = 10
} mavlink_message_type_t;

#define MAVLINK_MAX_FIELDS 64

typedef struct __mavlink_field_info {
        const char *name;
        const char *print_format;
        mavlink_message_type_t type;
        unsigned int array_length;
        unsigned int wire_offset;
        unsigned int structure_offset;
} mavlink_field_info_t;



typedef struct __mavlink_message_info {
 const char *name;
 unsigned num_fields;
 mavlink_field_info_t fields[64];
} mavlink_message_info_t;

#define _MAV_PAYLOAD(msg) ((const char *)(&((msg)->payload64[0])))
#define _MAV_PAYLOAD_NON_CONST(msg) ((char *)(&((msg)->payload64[0])))


#define mavlink_ck_a(msg) *((msg)->len + (uint8_t *)_MAV_PAYLOAD_NON_CONST(msg))
#define mavlink_ck_b(msg) *(((msg)->len+(uint16_t)1) + (uint8_t *)_MAV_PAYLOAD_NON_CONST(msg))

typedef enum {
    MAVLINK_COMM_0,
    MAVLINK_COMM_1,
    MAVLINK_COMM_2,
    MAVLINK_COMM_3
} mavlink_channel_t;
# 189 "./lib/main/MAVLink/common/../mavlink_types.h"
#define MAVLINK_COMM_NUM_BUFFERS 4



typedef enum {
    MAVLINK_PARSE_STATE_UNINIT=0,
    MAVLINK_PARSE_STATE_IDLE,
    MAVLINK_PARSE_STATE_GOT_STX,
    MAVLINK_PARSE_STATE_GOT_SEQ,
    MAVLINK_PARSE_STATE_GOT_LENGTH,
    MAVLINK_PARSE_STATE_GOT_SYSID,
    MAVLINK_PARSE_STATE_GOT_COMPID,
    MAVLINK_PARSE_STATE_GOT_MSGID,
    MAVLINK_PARSE_STATE_GOT_PAYLOAD,
    MAVLINK_PARSE_STATE_GOT_CRC1,
    MAVLINK_PARSE_STATE_GOT_BAD_CRC1
} mavlink_parse_state_t;

typedef enum {
    MAVLINK_FRAMING_INCOMPLETE=0,
    MAVLINK_FRAMING_OK=1,
    MAVLINK_FRAMING_BAD_CRC=2
} mavlink_framing_t;

typedef struct __mavlink_status {
    uint8_t msg_received;
    uint8_t buffer_overrun;
    uint8_t parse_error;
    mavlink_parse_state_t parse_state;
    uint8_t packet_idx;
    uint8_t current_rx_seq;
    uint8_t current_tx_seq;
    uint16_t packet_rx_success_count;
    uint16_t packet_rx_drop_count;
} mavlink_status_t;

#define MAVLINK_BIG_ENDIAN 0
#define MAVLINK_LITTLE_ENDIAN 1
# 6 "./lib/main/MAVLink/common/../protocol.h" 2
# 14 "./lib/main/MAVLink/common/../protocol.h"
#define MAVLINK_NEED_BYTE_SWAP (MAVLINK_ENDIAN != MAVLINK_LITTLE_ENDIAN)



#define MAVLINK_STACK_BUFFER 0



#define MAVLINK_AVOID_GCC_STACK_BUG defined(__GNUC__)



#define MAVLINK_ASSERT(x) 



#define MAVLINK_START_UART_SEND(chan,length) 



#define MAVLINK_END_UART_SEND(chan,length) 
# 84 "./lib/main/MAVLink/common/../protocol.h"
#define MAVLINK_HELPER static inline
# 1 "./lib/main/MAVLink/common/../mavlink_helpers.h" 1

#define _MAVLINK_HELPERS_H_ 


# 1 "./lib/main/MAVLink/common/../checksum.h" 1





#define _CHECKSUM_H_ 
# 21 "./lib/main/MAVLink/common/../checksum.h"
#define X25_INIT_CRC 0xffff
#define X25_VALIDATE_CRC 0xf0b8
# 34 "./lib/main/MAVLink/common/../checksum.h"
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{

        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
        tmp ^= (tmp<<4);
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
}
# 51 "./lib/main/MAVLink/common/../checksum.h"
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = 0xffff;
}
# 64 "./lib/main/MAVLink/common/../checksum.h"
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
 while (length--) {
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
}
# 84 "./lib/main/MAVLink/common/../checksum.h"
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 const uint8_t *p = (const uint8_t *)pBuffer;
 while (length--) {
                crc_accumulate(*p++, crcAccum);
        }
}
# 6 "./lib/main/MAVLink/common/../mavlink_helpers.h" 2

# 1 "./lib/main/MAVLink/common/../mavlink_conversions.h" 1

#define _MAVLINK_CONVERSIONS_H_ 
# 38 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_quaternion_to_dcm(const float quaternion[4], float dcm[3][3])
{
    double a = quaternion[0];
    double b = quaternion[1];
    double c = quaternion[2];
    double d = quaternion[3];
    double aSq = a * a;
    double bSq = b * b;
    double cSq = c * c;
    double dSq = d * d;
    dcm[0][0] = aSq + bSq - cSq - dSq;
    dcm[0][1] = 2 * (b * c - a * d);
    dcm[0][2] = 2 * (a * c + b * d);
    dcm[1][0] = 2 * (b * c + a * d);
    dcm[1][1] = aSq - bSq + cSq - dSq;
    dcm[1][2] = 2 * (c * d - a * b);
    dcm[2][0] = 2 * (b * d - a * c);
    dcm[2][1] = 2 * (a * b + c * d);
    dcm[2][2] = aSq - bSq - cSq + dSq;
}
# 68 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_dcm_to_euler(const float dcm[3][3], float* roll, float* pitch, float* yaw)
{
    float phi, theta, psi;
    theta = asin(-dcm[2][0]);

    if (fabsf(theta - (float)
# 73 "./lib/main/MAVLink/common/../mavlink_conversions.h" 3
                            1.57079632679489661923
# 73 "./lib/main/MAVLink/common/../mavlink_conversions.h"
                                  ) < 1.0e-3f) {
        phi = 0.0f;
        psi = (atan2f(dcm[1][2] - dcm[0][1],
                dcm[0][2] + dcm[1][1]) + phi);

    } else if (fabsf(theta + (float)
# 78 "./lib/main/MAVLink/common/../mavlink_conversions.h" 3
                                   1.57079632679489661923
# 78 "./lib/main/MAVLink/common/../mavlink_conversions.h"
                                         ) < 1.0e-3f) {
        phi = 0.0f;
        psi = atan2f(dcm[1][2] - dcm[0][1],
                  dcm[0][2] + dcm[1][1] - phi);

    } else {
        phi = atan2f(dcm[2][1], dcm[2][2]);
        psi = atan2f(dcm[1][0], dcm[0][0]);
    }

    *roll = phi;
    *pitch = theta;
    *yaw = psi;
}
# 102 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_quaternion_to_euler(const float quaternion[4], float* roll, float* pitch, float* yaw)
{
    float dcm[3][3];
    mavlink_quaternion_to_dcm(quaternion, dcm);
    mavlink_dcm_to_euler((const float(*)[3])dcm, roll, pitch, yaw);
}
# 118 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_euler_to_quaternion(float roll, float pitch, float yaw, float quaternion[4])
{
    float cosPhi_2 = cosf(roll / 2);
    float sinPhi_2 = sinf(roll / 2);
    float cosTheta_2 = cosf(pitch / 2);
    float sinTheta_2 = sinf(pitch / 2);
    float cosPsi_2 = cosf(yaw / 2);
    float sinPsi_2 = sinf(yaw / 2);
    quaternion[0] = (cosPhi_2 * cosTheta_2 * cosPsi_2 +
            sinPhi_2 * sinTheta_2 * sinPsi_2);
    quaternion[1] = (sinPhi_2 * cosTheta_2 * cosPsi_2 -
            cosPhi_2 * sinTheta_2 * sinPsi_2);
    quaternion[2] = (cosPhi_2 * sinTheta_2 * cosPsi_2 +
            sinPhi_2 * cosTheta_2 * sinPsi_2);
    quaternion[3] = (cosPhi_2 * cosTheta_2 * sinPsi_2 -
            sinPhi_2 * sinTheta_2 * cosPsi_2);
}
# 146 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_dcm_to_quaternion(const float dcm[3][3], float quaternion[4])
{
    float tr = dcm[0][0] + dcm[1][1] + dcm[2][2];
    if (tr > 0.0f) {
        float s = sqrtf(tr + 1.0f);
        quaternion[0] = s * 0.5f;
        s = 0.5f / s;
        quaternion[1] = (dcm[2][1] - dcm[1][2]) * s;
        quaternion[2] = (dcm[0][2] - dcm[2][0]) * s;
        quaternion[3] = (dcm[1][0] - dcm[0][1]) * s;
    } else {


        int dcm_i = 0;
        int i;
        for (i = 1; i < 3; i++) {
            if (dcm[i][i] > dcm[dcm_i][dcm_i]) {
                dcm_i = i;
            }
        }

        int dcm_j = (dcm_i + 1) % 3;
        int dcm_k = (dcm_i + 2) % 3;

        float s = sqrtf((dcm[dcm_i][dcm_i] - dcm[dcm_j][dcm_j] -
                    dcm[dcm_k][dcm_k]) + 1.0f);
        quaternion[dcm_i + 1] = s * 0.5f;
        s = 0.5f / s;
        quaternion[dcm_j + 1] = (dcm[dcm_i][dcm_j] + dcm[dcm_j][dcm_i]) * s;
        quaternion[dcm_k + 1] = (dcm[dcm_k][dcm_i] + dcm[dcm_i][dcm_k]) * s;
        quaternion[0] = (dcm[dcm_k][dcm_j] - dcm[dcm_j][dcm_k]) * s;
    }
}
# 189 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_euler_to_dcm(float roll, float pitch, float yaw, float dcm[3][3])
{
    float cosPhi = cosf(roll);
    float sinPhi = sinf(roll);
    float cosThe = cosf(pitch);
    float sinThe = sinf(pitch);
    float cosPsi = cosf(yaw);
    float sinPsi = sinf(yaw);

    dcm[0][0] = cosThe * cosPsi;
    dcm[0][1] = -cosPhi * sinPsi + sinPhi * sinThe * cosPsi;
    dcm[0][2] = sinPhi * sinPsi + cosPhi * sinThe * cosPsi;

    dcm[1][0] = cosThe * sinPsi;
    dcm[1][1] = cosPhi * cosPsi + sinPhi * sinThe * sinPsi;
    dcm[1][2] = -sinPhi * cosPsi + cosPhi * sinThe * sinPsi;

    dcm[2][0] = -sinThe;
    dcm[2][1] = sinPhi * cosThe;
    dcm[2][2] = cosPhi * cosThe;
}
# 8 "./lib/main/MAVLink/common/../mavlink_helpers.h" 2
# 17 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{




 static mavlink_status_t m_mavlink_status[4];

 return &m_mavlink_status[chan];
}






static inline mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{





 static mavlink_message_t m_mavlink_buffer[4];

 return &m_mavlink_buffer[chan];
}





static inline void mavlink_reset_channel_status(uint8_t chan)
{
 mavlink_status_t *status = mavlink_get_channel_status(chan);
 status->parse_state = MAVLINK_PARSE_STATE_IDLE;
}
# 68 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
            uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)




{

 (void)min_length;

 msg->magic = 254;
 msg->len = length;
 msg->sysid = system_id;
 msg->compid = component_id;

 msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, 5);
 crc_accumulate_buffer(&msg->checksum, ((const char *)(&((msg)->payload64[0]))), msg->len);

 crc_accumulate(crc_extra, &msg->checksum);

 *((msg)->len + (uint8_t *)((char *)(&((msg)->payload64[0])))) = (uint8_t)(msg->checksum & 0xFF);
 *(((msg)->len+(uint16_t)1) + (uint8_t *)((char *)(&((msg)->payload64[0])))) = (uint8_t)(msg->checksum >> 8);

 return length + ((5 + 1) + 2);
}






static inline uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
       uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}
# 176 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 memcpy(buffer, (const uint8_t *)&msg->magic, (5 + 1) + (uint16_t)msg->len);

 uint8_t *ck = buffer + ((5 + 1) + (uint16_t)msg->len);

 ck[0] = (uint8_t)(msg->checksum & 0xFF);
 ck[1] = (uint8_t)(msg->checksum >> 8);

 return ((5 + 1) + 2) + (uint16_t)msg->len;
}

union __mavlink_bitfield {
 uint8_t uint8;
 int8_t int8;
 uint16_t uint16;
 int16_t int16;
 uint32_t uint32;
 int32_t int32;
};


static inline void mavlink_start_checksum(mavlink_message_t* msg)
{
 crc_init(&msg->checksum);
}

static inline void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 crc_accumulate(c, &msg->checksum);
}
# 242 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg,
                                                 mavlink_status_t* status,
                                                 uint8_t c,
                                                 mavlink_message_t* r_message,
                                                 mavlink_status_t* r_mavlink_status)
{






 static const uint8_t mavlink_message_crcs[256] = {50, 124, 137, 0, 237, 217, 104, 119, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 214, 159, 220, 168, 24, 23, 170, 144, 67, 115, 39, 246, 185, 104, 237, 244, 222, 212, 9, 254, 230, 28, 28, 132, 221, 232, 11, 153, 41, 39, 78, 196, 0, 0, 15, 3, 0, 0, 0, 0, 0, 167, 183, 119, 191, 118, 148, 21, 0, 243, 124, 0, 0, 38, 20, 158, 152, 143, 0, 0, 0, 106, 49, 22, 143, 140, 5, 150, 0, 231, 183, 63, 54, 47, 0, 0, 0, 0, 0, 0, 175, 102, 158, 208, 56, 93, 138, 108, 32, 185, 84, 34, 174, 124, 237, 4, 76, 128, 56, 116, 134, 237, 203, 250, 87, 203, 220, 25, 226, 46, 29, 223, 85, 6, 229, 203, 1, 195, 109, 168, 181, 47, 72, 131, 127, 0, 103, 154, 178, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 105, 151, 35, 150, 0, 0, 0, 0, 0, 0, 90, 104, 85, 95, 130, 184, 81, 8, 204, 49, 170, 44, 83, 46, 0};
#define MAVLINK_MESSAGE_CRC(msgid) mavlink_message_crcs[msgid]
# 272 "./lib/main/MAVLink/common/../mavlink_helpers.h"
 int bufferIndex = 0;

 status->msg_received = MAVLINK_FRAMING_INCOMPLETE;

 switch (status->parse_state)
 {
 case MAVLINK_PARSE_STATE_UNINIT:
 case MAVLINK_PARSE_STATE_IDLE:
  if (c == 254)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
   rxmsg->len = 0;
   rxmsg->magic = c;
   mavlink_start_checksum(rxmsg);
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_STX:
   if (status->msg_received





    )
  {
   status->buffer_overrun++;
   status->parse_error++;
   status->msg_received = 0;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
  }
  else
  {

   rxmsg->len = c;
   status->packet_idx = 0;
   mavlink_update_checksum(rxmsg, c);
   status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_LENGTH:
  rxmsg->seq = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
  break;

 case MAVLINK_PARSE_STATE_GOT_SEQ:
  rxmsg->sysid = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
  break;

 case MAVLINK_PARSE_STATE_GOT_SYSID:
  rxmsg->compid = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
  break;

 case MAVLINK_PARSE_STATE_GOT_COMPID:
# 340 "./lib/main/MAVLink/common/../mavlink_helpers.h"
  rxmsg->msgid = c;
  mavlink_update_checksum(rxmsg, c);
  if (rxmsg->len == 0)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
  }
  else
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_MSGID:
  ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx++] = (char)c;
  mavlink_update_checksum(rxmsg, c);
  if (status->packet_idx == rxmsg->len)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_PAYLOAD:

  mavlink_update_checksum(rxmsg, mavlink_message_crcs[rxmsg->msgid]);

  if (c != (rxmsg->checksum & 0xFF)) {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
  } else {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
  }
                ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx] = (char)c;
  break;

 case MAVLINK_PARSE_STATE_GOT_CRC1:
 case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
  if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {

   status->msg_received = MAVLINK_FRAMING_BAD_CRC;
  } else {

   status->msg_received = MAVLINK_FRAMING_OK;
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
                ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx+1] = (char)c;
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
  break;
 }

 bufferIndex++;

 if (status->msg_received == MAVLINK_FRAMING_OK)
 {





  status->current_rx_seq = rxmsg->seq;

  if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;

  status->packet_rx_success_count++;
 }

 r_message->len = rxmsg->len;
 r_mavlink_status->parse_state = status->parse_state;
 r_mavlink_status->packet_idx = status->packet_idx;
 r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 r_mavlink_status->packet_rx_drop_count = status->parse_error;
 status->parse_error = 0;

 if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {







  r_message->checksum = ((const char *)(&((rxmsg)->payload64[0])))[status->packet_idx] | (((const char *)(&((rxmsg)->payload64[0])))[status->packet_idx+1]<<8);
 }

 return status->msg_received;
}
# 467 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
      mavlink_get_channel_status(chan),
      c,
      r_message,
      r_mavlink_status);
}
# 517 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {

     mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
     mavlink_status_t* status = mavlink_get_channel_status(chan);
     status->parse_error++;
     status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
     status->parse_state = MAVLINK_PARSE_STATE_IDLE;
     if (c == 254)
     {
      status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
      rxmsg->len = 0;
      mavlink_start_checksum(rxmsg);
     }
     return 0;
    }
    return msg_received;
}
# 548 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint8_t put_bitfield_n_by_index(int32_t b, uint8_t bits, uint8_t packet_index, uint8_t bit_index, uint8_t* r_bit_index, uint8_t* buffer)
{
 uint16_t bits_remain = bits;

 int32_t v;
 uint8_t i_bit_index, i_byte_index, curr_bits_n;
# 566 "./lib/main/MAVLink/common/../mavlink_helpers.h"
 v = b;
# 585 "./lib/main/MAVLink/common/../mavlink_helpers.h"
 i_bit_index = bit_index;
 i_byte_index = packet_index;
 if (bit_index > 0)
 {


  i_byte_index--;
 }


 while (bits_remain > 0)
 {







  if (bits_remain <= (uint8_t)(8 - i_bit_index))
  {

   curr_bits_n = (uint8_t)bits_remain;
  }
  else
  {
   curr_bits_n = (8 - i_bit_index);
  }



  buffer[i_byte_index] &= (0xFF >> (8 - curr_bits_n));

  buffer[i_byte_index] |= ((0x00 << curr_bits_n) & v);


  i_bit_index += curr_bits_n;


  bits_remain -= curr_bits_n;
  if (bits_remain > 0)
  {

   i_byte_index++;
   i_bit_index = 0;
  }
 }

 *r_bit_index = i_bit_index;

 if (i_bit_index != 7) i_byte_index++;
 return i_byte_index - packet_index;
}
# 86 "./lib/main/MAVLink/common/../protocol.h" 2






static inline uint16_t mavlink_msg_get_send_buffer_length(const mavlink_message_t* msg)
{
 return msg->len + ((5 + 1) + 2);
}
# 140 "./lib/main/MAVLink/common/../protocol.h"
#define _mav_put_uint8_t(buf,wire_offset,b) buf[wire_offset] = (uint8_t)b
#define _mav_put_int8_t(buf,wire_offset,b) buf[wire_offset] = (int8_t)b
#define _mav_put_char(buf,wire_offset,b) buf[wire_offset] = b
# 163 "./lib/main/MAVLink/common/../protocol.h"
#define _mav_put_uint16_t(buf,wire_offset,b) *(uint16_t *)&buf[wire_offset] = b
#define _mav_put_int16_t(buf,wire_offset,b) *(int16_t *)&buf[wire_offset] = b
#define _mav_put_uint32_t(buf,wire_offset,b) *(uint32_t *)&buf[wire_offset] = b
#define _mav_put_int32_t(buf,wire_offset,b) *(int32_t *)&buf[wire_offset] = b
#define _mav_put_uint64_t(buf,wire_offset,b) *(uint64_t *)&buf[wire_offset] = b
#define _mav_put_int64_t(buf,wire_offset,b) *(int64_t *)&buf[wire_offset] = b
#define _mav_put_float(buf,wire_offset,b) *(float *)&buf[wire_offset] = b
#define _mav_put_double(buf,wire_offset,b) *(double *)&buf[wire_offset] = b





static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 if (src == 
# 178 "./lib/main/MAVLink/common/../protocol.h" 3 4
           ((void *)0)
# 178 "./lib/main/MAVLink/common/../protocol.h"
               ) {
  memset(dest, 0, n);
 } else {
  memcpy(dest, src, n);
 }
}




static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}




static inline void _mav_put_uint8_t_array(char *buf, uint8_t wire_offset, const uint8_t *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}




static inline void _mav_put_int8_t_array(char *buf, uint8_t wire_offset, const int8_t *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}
# 226 "./lib/main/MAVLink/common/../protocol.h"
#define _MAV_PUT_ARRAY(TYPE,V) static inline void _mav_put_ ## TYPE ##_array(char *buf, uint8_t wire_offset, const TYPE *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(TYPE)); }






static inline void _mav_put_uint16_t_array(char *buf, uint8_t wire_offset, const uint16_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint16_t)); }
static inline void _mav_put_uint32_t_array(char *buf, uint8_t wire_offset, const uint32_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint32_t)); }
static inline void _mav_put_uint64_t_array(char *buf, uint8_t wire_offset, const uint64_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint64_t)); }
static inline void _mav_put_int16_t_array(char *buf, uint8_t wire_offset, const int16_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int16_t)); }
static inline void _mav_put_int32_t_array(char *buf, uint8_t wire_offset, const int32_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int32_t)); }
static inline void _mav_put_int64_t_array(char *buf, uint8_t wire_offset, const int64_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int64_t)); }
static inline void _mav_put_float_array(char *buf, uint8_t wire_offset, const float *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(float)); }
static inline void _mav_put_double_array(char *buf, uint8_t wire_offset, const double *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(double)); }

#define _MAV_RETURN_char(msg,wire_offset) (const char)_MAV_PAYLOAD(msg)[wire_offset]
#define _MAV_RETURN_int8_t(msg,wire_offset) (const int8_t)_MAV_PAYLOAD(msg)[wire_offset]
#define _MAV_RETURN_uint8_t(msg,wire_offset) (const uint8_t)_MAV_PAYLOAD(msg)[wire_offset]
# 274 "./lib/main/MAVLink/common/../protocol.h"
#define _MAV_MSG_RETURN_TYPE(TYPE) static inline TYPE _MAV_RETURN_ ## TYPE(const mavlink_message_t *msg, uint8_t ofs) { return *(const TYPE *)(&_MAV_PAYLOAD(msg)[ofs]);}



static inline uint16_t _MAV_RETURN_uint16_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint16_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int16_t _MAV_RETURN_int16_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int16_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline uint32_t _MAV_RETURN_uint32_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint32_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int32_t _MAV_RETURN_int32_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int32_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline uint64_t _MAV_RETURN_uint64_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint64_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int64_t _MAV_RETURN_int64_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int64_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline float _MAV_RETURN_float(const mavlink_message_t *msg, uint8_t ofs) { return *(const float *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline double _MAV_RETURN_double(const mavlink_message_t *msg, uint8_t ofs) { return *(const double *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}


static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value,
           uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}

static inline uint16_t _MAV_RETURN_uint8_t_array(const mavlink_message_t *msg, uint8_t *value,
       uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}

static inline uint16_t _MAV_RETURN_int8_t_array(const mavlink_message_t *msg, int8_t *value,
             uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}
# 321 "./lib/main/MAVLink/common/../protocol.h"
#define _MAV_RETURN_ARRAY(TYPE,V) static inline uint16_t _MAV_RETURN_ ## TYPE ##_array(const mavlink_message_t *msg, TYPE *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length*sizeof(TYPE)); return array_length*sizeof(TYPE); }
# 330 "./lib/main/MAVLink/common/../protocol.h"
static inline uint16_t _MAV_RETURN_uint16_t_array(const mavlink_message_t *msg, uint16_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint16_t)); return array_length*sizeof(uint16_t); }
static inline uint16_t _MAV_RETURN_uint32_t_array(const mavlink_message_t *msg, uint32_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint32_t)); return array_length*sizeof(uint32_t); }
static inline uint16_t _MAV_RETURN_uint64_t_array(const mavlink_message_t *msg, uint64_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint64_t)); return array_length*sizeof(uint64_t); }
static inline uint16_t _MAV_RETURN_int16_t_array(const mavlink_message_t *msg, int16_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int16_t)); return array_length*sizeof(int16_t); }
static inline uint16_t _MAV_RETURN_int32_t_array(const mavlink_message_t *msg, int32_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int32_t)); return array_length*sizeof(int32_t); }
static inline uint16_t _MAV_RETURN_int64_t_array(const mavlink_message_t *msg, int64_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int64_t)); return array_length*sizeof(int64_t); }
static inline uint16_t _MAV_RETURN_float_array(const mavlink_message_t *msg, float *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(float)); return array_length*sizeof(float); }
static inline uint16_t _MAV_RETURN_double_array(const mavlink_message_t *msg, double *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(double)); return array_length*sizeof(double); }
# 31 "./lib/main/MAVLink/common/common.h" 2

#define MAVLINK_ENABLED_COMMON 






#define HAVE_ENUM_MAV_AUTOPILOT 
typedef enum MAV_AUTOPILOT
{
   MAV_AUTOPILOT_GENERIC=0,
   MAV_AUTOPILOT_RESERVED=1,
   MAV_AUTOPILOT_SLUGS=2,
   MAV_AUTOPILOT_ARDUPILOTMEGA=3,
   MAV_AUTOPILOT_OPENPILOT=4,
   MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY=5,
   MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY=6,
   MAV_AUTOPILOT_GENERIC_MISSION_FULL=7,
   MAV_AUTOPILOT_INVALID=8,
   MAV_AUTOPILOT_PPZ=9,
   MAV_AUTOPILOT_UDB=10,
   MAV_AUTOPILOT_FP=11,
   MAV_AUTOPILOT_PX4=12,
   MAV_AUTOPILOT_SMACCMPILOT=13,
   MAV_AUTOPILOT_AUTOQUAD=14,
   MAV_AUTOPILOT_ARMAZILA=15,
   MAV_AUTOPILOT_AEROB=16,
   MAV_AUTOPILOT_ASLUAV=17,
   MAV_AUTOPILOT_ENUM_END=18,
} MAV_AUTOPILOT;




#define HAVE_ENUM_MAV_TYPE 
typedef enum MAV_TYPE
{
   MAV_TYPE_GENERIC=0,
   MAV_TYPE_FIXED_WING=1,
   MAV_TYPE_QUADROTOR=2,
   MAV_TYPE_COAXIAL=3,
   MAV_TYPE_HELICOPTER=4,
   MAV_TYPE_ANTENNA_TRACKER=5,
   MAV_TYPE_GCS=6,
   MAV_TYPE_AIRSHIP=7,
   MAV_TYPE_FREE_BALLOON=8,
   MAV_TYPE_ROCKET=9,
   MAV_TYPE_GROUND_ROVER=10,
   MAV_TYPE_SURFACE_BOAT=11,
   MAV_TYPE_SUBMARINE=12,
   MAV_TYPE_HEXAROTOR=13,
   MAV_TYPE_OCTOROTOR=14,
   MAV_TYPE_TRICOPTER=15,
   MAV_TYPE_FLAPPING_WING=16,
   MAV_TYPE_KITE=17,
   MAV_TYPE_ONBOARD_CONTROLLER=18,
   MAV_TYPE_VTOL_DUOROTOR=19,
   MAV_TYPE_VTOL_QUADROTOR=20,
   MAV_TYPE_VTOL_TILTROTOR=21,
   MAV_TYPE_VTOL_RESERVED2=22,
   MAV_TYPE_VTOL_RESERVED3=23,
   MAV_TYPE_VTOL_RESERVED4=24,
   MAV_TYPE_VTOL_RESERVED5=25,
   MAV_TYPE_GIMBAL=26,
   MAV_TYPE_ADSB=27,
   MAV_TYPE_ENUM_END=28,
} MAV_TYPE;




#define HAVE_ENUM_FIRMWARE_VERSION_TYPE 
typedef enum FIRMWARE_VERSION_TYPE
{
   FIRMWARE_VERSION_TYPE_DEV=0,
   FIRMWARE_VERSION_TYPE_ALPHA=64,
   FIRMWARE_VERSION_TYPE_BETA=128,
   FIRMWARE_VERSION_TYPE_RC=192,
   FIRMWARE_VERSION_TYPE_OFFICIAL=255,
   FIRMWARE_VERSION_TYPE_ENUM_END=256,
} FIRMWARE_VERSION_TYPE;




#define HAVE_ENUM_MAV_MODE_FLAG 
typedef enum MAV_MODE_FLAG
{
   MAV_MODE_FLAG_CUSTOM_MODE_ENABLED=1,
   MAV_MODE_FLAG_TEST_ENABLED=2,
   MAV_MODE_FLAG_AUTO_ENABLED=4,
   MAV_MODE_FLAG_GUIDED_ENABLED=8,
   MAV_MODE_FLAG_STABILIZE_ENABLED=16,
   MAV_MODE_FLAG_HIL_ENABLED=32,
   MAV_MODE_FLAG_MANUAL_INPUT_ENABLED=64,
   MAV_MODE_FLAG_SAFETY_ARMED=128,
   MAV_MODE_FLAG_ENUM_END=129,
} MAV_MODE_FLAG;




#define HAVE_ENUM_MAV_MODE_FLAG_DECODE_POSITION 
typedef enum MAV_MODE_FLAG_DECODE_POSITION
{
   MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE=1,
   MAV_MODE_FLAG_DECODE_POSITION_TEST=2,
   MAV_MODE_FLAG_DECODE_POSITION_AUTO=4,
   MAV_MODE_FLAG_DECODE_POSITION_GUIDED=8,
   MAV_MODE_FLAG_DECODE_POSITION_STABILIZE=16,
   MAV_MODE_FLAG_DECODE_POSITION_HIL=32,
   MAV_MODE_FLAG_DECODE_POSITION_MANUAL=64,
   MAV_MODE_FLAG_DECODE_POSITION_SAFETY=128,
   MAV_MODE_FLAG_DECODE_POSITION_ENUM_END=129,
} MAV_MODE_FLAG_DECODE_POSITION;




#define HAVE_ENUM_MAV_GOTO 
typedef enum MAV_GOTO
{
   MAV_GOTO_DO_HOLD=0,
   MAV_GOTO_DO_CONTINUE=1,
   MAV_GOTO_HOLD_AT_CURRENT_POSITION=2,
   MAV_GOTO_HOLD_AT_SPECIFIED_POSITION=3,
   MAV_GOTO_ENUM_END=4,
} MAV_GOTO;





#define HAVE_ENUM_MAV_MODE 
typedef enum MAV_MODE
{
   MAV_MODE_PREFLIGHT=0,
   MAV_MODE_MANUAL_DISARMED=64,
   MAV_MODE_TEST_DISARMED=66,
   MAV_MODE_STABILIZE_DISARMED=80,
   MAV_MODE_GUIDED_DISARMED=88,
   MAV_MODE_AUTO_DISARMED=92,
   MAV_MODE_MANUAL_ARMED=192,
   MAV_MODE_TEST_ARMED=194,
   MAV_MODE_STABILIZE_ARMED=208,
   MAV_MODE_GUIDED_ARMED=216,
   MAV_MODE_AUTO_ARMED=220,
   MAV_MODE_ENUM_END=221,
} MAV_MODE;




#define HAVE_ENUM_MAV_STATE 
typedef enum MAV_STATE
{
   MAV_STATE_UNINIT=0,
   MAV_STATE_BOOT=1,
   MAV_STATE_CALIBRATING=2,
   MAV_STATE_STANDBY=3,
   MAV_STATE_ACTIVE=4,
   MAV_STATE_CRITICAL=5,
   MAV_STATE_EMERGENCY=6,
   MAV_STATE_POWEROFF=7,
   MAV_STATE_ENUM_END=8,
} MAV_STATE;




#define HAVE_ENUM_MAV_COMPONENT 
typedef enum MAV_COMPONENT
{
   MAV_COMP_ID_ALL=0,
   MAV_COMP_ID_CAMERA=100,
   MAV_COMP_ID_SERVO1=140,
   MAV_COMP_ID_SERVO2=141,
   MAV_COMP_ID_SERVO3=142,
   MAV_COMP_ID_SERVO4=143,
   MAV_COMP_ID_SERVO5=144,
   MAV_COMP_ID_SERVO6=145,
   MAV_COMP_ID_SERVO7=146,
   MAV_COMP_ID_SERVO8=147,
   MAV_COMP_ID_SERVO9=148,
   MAV_COMP_ID_SERVO10=149,
   MAV_COMP_ID_SERVO11=150,
   MAV_COMP_ID_SERVO12=151,
   MAV_COMP_ID_SERVO13=152,
   MAV_COMP_ID_SERVO14=153,
   MAV_COMP_ID_GIMBAL=154,
   MAV_COMP_ID_LOG=155,
   MAV_COMP_ID_ADSB=156,
   MAV_COMP_ID_OSD=157,
   MAV_COMP_ID_PERIPHERAL=158,
   MAV_COMP_ID_QX1_GIMBAL=159,
   MAV_COMP_ID_MAPPER=180,
   MAV_COMP_ID_MISSIONPLANNER=190,
   MAV_COMP_ID_PATHPLANNER=195,
   MAV_COMP_ID_IMU=200,
   MAV_COMP_ID_IMU_2=201,
   MAV_COMP_ID_IMU_3=202,
   MAV_COMP_ID_GPS=220,
   MAV_COMP_ID_UDP_BRIDGE=240,
   MAV_COMP_ID_UART_BRIDGE=241,
   MAV_COMP_ID_SYSTEM_CONTROL=250,
   MAV_COMPONENT_ENUM_END=251,
} MAV_COMPONENT;




#define HAVE_ENUM_MAV_SYS_STATUS_SENSOR 
typedef enum MAV_SYS_STATUS_SENSOR
{
   MAV_SYS_STATUS_SENSOR_3D_GYRO=1,
   MAV_SYS_STATUS_SENSOR_3D_ACCEL=2,
   MAV_SYS_STATUS_SENSOR_3D_MAG=4,
   MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE=8,
   MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE=16,
   MAV_SYS_STATUS_SENSOR_GPS=32,
   MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW=64,
   MAV_SYS_STATUS_SENSOR_VISION_POSITION=128,
   MAV_SYS_STATUS_SENSOR_LASER_POSITION=256,
   MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH=512,
   MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL=1024,
   MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION=2048,
   MAV_SYS_STATUS_SENSOR_YAW_POSITION=4096,
   MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL=8192,
   MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL=16384,
   MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS=32768,
   MAV_SYS_STATUS_SENSOR_RC_RECEIVER=65536,
   MAV_SYS_STATUS_SENSOR_3D_GYRO2=131072,
   MAV_SYS_STATUS_SENSOR_3D_ACCEL2=262144,
   MAV_SYS_STATUS_SENSOR_3D_MAG2=524288,
   MAV_SYS_STATUS_GEOFENCE=1048576,
   MAV_SYS_STATUS_AHRS=2097152,
   MAV_SYS_STATUS_TERRAIN=4194304,
   MAV_SYS_STATUS_REVERSE_MOTOR=8388608,
   MAV_SYS_STATUS_LOGGING=16777216,
   MAV_SYS_STATUS_SENSOR_ENUM_END=16777217,
} MAV_SYS_STATUS_SENSOR;




#define HAVE_ENUM_MAV_FRAME 
typedef enum MAV_FRAME
{
   MAV_FRAME_GLOBAL=0,
   MAV_FRAME_LOCAL_NED=1,
   MAV_FRAME_MISSION=2,
   MAV_FRAME_GLOBAL_RELATIVE_ALT=3,
   MAV_FRAME_LOCAL_ENU=4,
   MAV_FRAME_GLOBAL_INT=5,
   MAV_FRAME_GLOBAL_RELATIVE_ALT_INT=6,
   MAV_FRAME_LOCAL_OFFSET_NED=7,
   MAV_FRAME_BODY_NED=8,
   MAV_FRAME_BODY_OFFSET_NED=9,
   MAV_FRAME_GLOBAL_TERRAIN_ALT=10,
   MAV_FRAME_GLOBAL_TERRAIN_ALT_INT=11,
   MAV_FRAME_ENUM_END=12,
} MAV_FRAME;




#define HAVE_ENUM_MAVLINK_DATA_STREAM_TYPE 
typedef enum MAVLINK_DATA_STREAM_TYPE
{
   MAVLINK_DATA_STREAM_IMG_JPEG=1,
   MAVLINK_DATA_STREAM_IMG_BMP=2,
   MAVLINK_DATA_STREAM_IMG_RAW8U=3,
   MAVLINK_DATA_STREAM_IMG_RAW32U=4,
   MAVLINK_DATA_STREAM_IMG_PGM=5,
   MAVLINK_DATA_STREAM_IMG_PNG=6,
   MAVLINK_DATA_STREAM_TYPE_ENUM_END=7,
} MAVLINK_DATA_STREAM_TYPE;




#define HAVE_ENUM_FENCE_ACTION 
typedef enum FENCE_ACTION
{
   FENCE_ACTION_NONE=0,
   FENCE_ACTION_GUIDED=1,
   FENCE_ACTION_REPORT=2,
   FENCE_ACTION_GUIDED_THR_PASS=3,
   FENCE_ACTION_RTL=4,
   FENCE_ACTION_ENUM_END=5,
} FENCE_ACTION;




#define HAVE_ENUM_FENCE_BREACH 
typedef enum FENCE_BREACH
{
   FENCE_BREACH_NONE=0,
   FENCE_BREACH_MINALT=1,
   FENCE_BREACH_MAXALT=2,
   FENCE_BREACH_BOUNDARY=3,
   FENCE_BREACH_ENUM_END=4,
} FENCE_BREACH;




#define HAVE_ENUM_MAV_MOUNT_MODE 
typedef enum MAV_MOUNT_MODE
{
   MAV_MOUNT_MODE_RETRACT=0,
   MAV_MOUNT_MODE_NEUTRAL=1,
   MAV_MOUNT_MODE_MAVLINK_TARGETING=2,
   MAV_MOUNT_MODE_RC_TARGETING=3,
   MAV_MOUNT_MODE_GPS_POINT=4,
   MAV_MOUNT_MODE_ENUM_END=5,
} MAV_MOUNT_MODE;




#define HAVE_ENUM_MAV_CMD 
typedef enum MAV_CMD
{
   MAV_CMD_NAV_WAYPOINT=16,
   MAV_CMD_NAV_LOITER_UNLIM=17,
   MAV_CMD_NAV_LOITER_TURNS=18,
   MAV_CMD_NAV_LOITER_TIME=19,
   MAV_CMD_NAV_RETURN_TO_LAUNCH=20,
   MAV_CMD_NAV_LAND=21,
   MAV_CMD_NAV_TAKEOFF=22,
   MAV_CMD_NAV_LAND_LOCAL=23,
   MAV_CMD_NAV_TAKEOFF_LOCAL=24,
   MAV_CMD_NAV_FOLLOW=25,
   MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT=30,
   MAV_CMD_NAV_LOITER_TO_ALT=31,
   MAV_CMD_DO_FOLLOW=32,
   MAV_CMD_DO_FOLLOW_REPOSITION=33,
   MAV_CMD_NAV_ROI=80,
   MAV_CMD_NAV_PATHPLANNING=81,
   MAV_CMD_NAV_SPLINE_WAYPOINT=82,
   MAV_CMD_NAV_VTOL_TAKEOFF=84,
   MAV_CMD_NAV_VTOL_LAND=85,
   MAV_CMD_NAV_GUIDED_ENABLE=92,
   MAV_CMD_NAV_DELAY=93,
   MAV_CMD_NAV_LAST=95,
   MAV_CMD_CONDITION_DELAY=112,
   MAV_CMD_CONDITION_CHANGE_ALT=113,
   MAV_CMD_CONDITION_DISTANCE=114,
   MAV_CMD_CONDITION_YAW=115,
   MAV_CMD_CONDITION_LAST=159,
   MAV_CMD_DO_SET_MODE=176,
   MAV_CMD_DO_JUMP=177,
   MAV_CMD_DO_CHANGE_SPEED=178,
   MAV_CMD_DO_SET_HOME=179,
   MAV_CMD_DO_SET_PARAMETER=180,
   MAV_CMD_DO_SET_RELAY=181,
   MAV_CMD_DO_REPEAT_RELAY=182,
   MAV_CMD_DO_SET_SERVO=183,
   MAV_CMD_DO_REPEAT_SERVO=184,
   MAV_CMD_DO_FLIGHTTERMINATION=185,
   MAV_CMD_DO_CHANGE_ALTITUDE=186,
   MAV_CMD_DO_LAND_START=189,
   MAV_CMD_DO_RALLY_LAND=190,
   MAV_CMD_DO_GO_AROUND=191,
   MAV_CMD_DO_REPOSITION=192,
   MAV_CMD_DO_PAUSE_CONTINUE=193,
   MAV_CMD_DO_SET_REVERSE=194,
   MAV_CMD_DO_CONTROL_VIDEO=200,
   MAV_CMD_DO_SET_ROI=201,
   MAV_CMD_DO_DIGICAM_CONFIGURE=202,
   MAV_CMD_DO_DIGICAM_CONTROL=203,
   MAV_CMD_DO_MOUNT_CONFIGURE=204,
   MAV_CMD_DO_MOUNT_CONTROL=205,
   MAV_CMD_DO_SET_CAM_TRIGG_DIST=206,
   MAV_CMD_DO_FENCE_ENABLE=207,
   MAV_CMD_DO_PARACHUTE=208,
   MAV_CMD_DO_MOTOR_TEST=209,
   MAV_CMD_DO_INVERTED_FLIGHT=210,
   MAV_CMD_NAV_SET_YAW_SPEED=213,
   MAV_CMD_DO_MOUNT_CONTROL_QUAT=220,
   MAV_CMD_DO_GUIDED_MASTER=221,
   MAV_CMD_DO_GUIDED_LIMITS=222,
   MAV_CMD_DO_ENGINE_CONTROL=223,
   MAV_CMD_DO_LAST=240,
   MAV_CMD_PREFLIGHT_CALIBRATION=241,
   MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS=242,
   MAV_CMD_PREFLIGHT_UAVCAN=243,
   MAV_CMD_PREFLIGHT_STORAGE=245,
   MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN=246,
   MAV_CMD_OVERRIDE_GOTO=252,
   MAV_CMD_MISSION_START=300,
   MAV_CMD_COMPONENT_ARM_DISARM=400,
   MAV_CMD_GET_HOME_POSITION=410,
   MAV_CMD_START_RX_PAIR=500,
   MAV_CMD_GET_MESSAGE_INTERVAL=510,
   MAV_CMD_SET_MESSAGE_INTERVAL=511,
   MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES=520,
   MAV_CMD_REQUEST_CAMERA_INFORMATION=521,
   MAV_CMD_REQUEST_CAMERA_SETTINGS=522,
   MAV_CMD_SET_CAMERA_SETTINGS_1=523,
   MAV_CMD_SET_CAMERA_SETTINGS_2=524,
   MAV_CMD_REQUEST_STORAGE_INFORMATION=525,
   MAV_CMD_STORAGE_FORMAT=526,
   MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS=527,
   MAV_CMD_REQUEST_FLIGHT_INFORMATION=528,
   MAV_CMD_IMAGE_START_CAPTURE=2000,
   MAV_CMD_IMAGE_STOP_CAPTURE=2001,
   MAV_CMD_DO_TRIGGER_CONTROL=2003,
   MAV_CMD_VIDEO_START_CAPTURE=2500,
   MAV_CMD_VIDEO_STOP_CAPTURE=2501,
   MAV_CMD_LOGGING_START=2510,
   MAV_CMD_LOGGING_STOP=2511,
   MAV_CMD_AIRFRAME_CONFIGURATION=2520,
   MAV_CMD_PANORAMA_CREATE=2800,
   MAV_CMD_DO_VTOL_TRANSITION=3000,
   MAV_CMD_SET_GUIDED_SUBMODE_STANDARD=4000,

   MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE=4001,

   MAV_CMD_NAV_FENCE_RETURN_POINT=5000,

   MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION=5001,

   MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION=5002,

   MAV_CMD_NAV_RALLY_POINT=5100,

   MAV_CMD_PAYLOAD_PREPARE_DEPLOY=30001,
   MAV_CMD_PAYLOAD_CONTROL_DEPLOY=30002,
   MAV_CMD_WAYPOINT_USER_1=31000,
   MAV_CMD_WAYPOINT_USER_2=31001,
   MAV_CMD_WAYPOINT_USER_3=31002,
   MAV_CMD_WAYPOINT_USER_4=31003,
   MAV_CMD_WAYPOINT_USER_5=31004,
   MAV_CMD_SPATIAL_USER_1=31005,
   MAV_CMD_SPATIAL_USER_2=31006,
   MAV_CMD_SPATIAL_USER_3=31007,
   MAV_CMD_SPATIAL_USER_4=31008,
   MAV_CMD_SPATIAL_USER_5=31009,
   MAV_CMD_USER_1=31010,
   MAV_CMD_USER_2=31011,
   MAV_CMD_USER_3=31012,
   MAV_CMD_USER_4=31013,
   MAV_CMD_USER_5=31014,
   MAV_CMD_ENUM_END=31015,
} MAV_CMD;






#define HAVE_ENUM_MAV_DATA_STREAM 
typedef enum MAV_DATA_STREAM
{
   MAV_DATA_STREAM_ALL=0,
   MAV_DATA_STREAM_RAW_SENSORS=1,
   MAV_DATA_STREAM_EXTENDED_STATUS=2,
   MAV_DATA_STREAM_RC_CHANNELS=3,
   MAV_DATA_STREAM_RAW_CONTROLLER=4,
   MAV_DATA_STREAM_POSITION=6,
   MAV_DATA_STREAM_EXTRA1=10,
   MAV_DATA_STREAM_EXTRA2=11,
   MAV_DATA_STREAM_EXTRA3=12,
   MAV_DATA_STREAM_ENUM_END=13,
} MAV_DATA_STREAM;






#define HAVE_ENUM_MAV_ROI 
typedef enum MAV_ROI
{
   MAV_ROI_NONE=0,
   MAV_ROI_WPNEXT=1,
   MAV_ROI_WPINDEX=2,
   MAV_ROI_LOCATION=3,
   MAV_ROI_TARGET=4,
   MAV_ROI_ENUM_END=5,
} MAV_ROI;




#define HAVE_ENUM_MAV_CMD_ACK 
typedef enum MAV_CMD_ACK
{
   MAV_CMD_ACK_OK=1,
   MAV_CMD_ACK_ERR_FAIL=2,
   MAV_CMD_ACK_ERR_ACCESS_DENIED=3,
   MAV_CMD_ACK_ERR_NOT_SUPPORTED=4,
   MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED=5,
   MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE=6,
   MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE=7,
   MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE=8,
   MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE=9,
   MAV_CMD_ACK_ENUM_END=10,
} MAV_CMD_ACK;




#define HAVE_ENUM_MAV_PARAM_TYPE 
typedef enum MAV_PARAM_TYPE
{
   MAV_PARAM_TYPE_UINT8=1,
   MAV_PARAM_TYPE_INT8=2,
   MAV_PARAM_TYPE_UINT16=3,
   MAV_PARAM_TYPE_INT16=4,
   MAV_PARAM_TYPE_UINT32=5,
   MAV_PARAM_TYPE_INT32=6,
   MAV_PARAM_TYPE_UINT64=7,
   MAV_PARAM_TYPE_INT64=8,
   MAV_PARAM_TYPE_REAL32=9,
   MAV_PARAM_TYPE_REAL64=10,
   MAV_PARAM_TYPE_ENUM_END=11,
} MAV_PARAM_TYPE;




#define HAVE_ENUM_MAV_RESULT 
typedef enum MAV_RESULT
{
   MAV_RESULT_ACCEPTED=0,
   MAV_RESULT_TEMPORARILY_REJECTED=1,
   MAV_RESULT_DENIED=2,
   MAV_RESULT_UNSUPPORTED=3,
   MAV_RESULT_FAILED=4,
   MAV_RESULT_ENUM_END=5,
} MAV_RESULT;




#define HAVE_ENUM_MAV_MISSION_RESULT 
typedef enum MAV_MISSION_RESULT
{
   MAV_MISSION_ACCEPTED=0,
   MAV_MISSION_ERROR=1,
   MAV_MISSION_UNSUPPORTED_FRAME=2,
   MAV_MISSION_UNSUPPORTED=3,
   MAV_MISSION_NO_SPACE=4,
   MAV_MISSION_INVALID=5,
   MAV_MISSION_INVALID_PARAM1=6,
   MAV_MISSION_INVALID_PARAM2=7,
   MAV_MISSION_INVALID_PARAM3=8,
   MAV_MISSION_INVALID_PARAM4=9,
   MAV_MISSION_INVALID_PARAM5_X=10,
   MAV_MISSION_INVALID_PARAM6_Y=11,
   MAV_MISSION_INVALID_PARAM7=12,
   MAV_MISSION_INVALID_SEQUENCE=13,
   MAV_MISSION_DENIED=14,
   MAV_MISSION_RESULT_ENUM_END=15,
} MAV_MISSION_RESULT;




#define HAVE_ENUM_MAV_SEVERITY 
typedef enum MAV_SEVERITY
{
   MAV_SEVERITY_EMERGENCY=0,
   MAV_SEVERITY_ALERT=1,
   MAV_SEVERITY_CRITICAL=2,
   MAV_SEVERITY_ERROR=3,
   MAV_SEVERITY_WARNING=4,
   MAV_SEVERITY_NOTICE=5,
   MAV_SEVERITY_INFO=6,
   MAV_SEVERITY_DEBUG=7,
   MAV_SEVERITY_ENUM_END=8,
} MAV_SEVERITY;




#define HAVE_ENUM_MAV_POWER_STATUS 
typedef enum MAV_POWER_STATUS
{
   MAV_POWER_STATUS_BRICK_VALID=1,
   MAV_POWER_STATUS_SERVO_VALID=2,
   MAV_POWER_STATUS_USB_CONNECTED=4,
   MAV_POWER_STATUS_PERIPH_OVERCURRENT=8,
   MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT=16,
   MAV_POWER_STATUS_CHANGED=32,
   MAV_POWER_STATUS_ENUM_END=33,
} MAV_POWER_STATUS;




#define HAVE_ENUM_SERIAL_CONTROL_DEV 
typedef enum SERIAL_CONTROL_DEV
{
   SERIAL_CONTROL_DEV_TELEM1=0,
   SERIAL_CONTROL_DEV_TELEM2=1,
   SERIAL_CONTROL_DEV_GPS1=2,
   SERIAL_CONTROL_DEV_GPS2=3,
   SERIAL_CONTROL_DEV_SHELL=10,
   SERIAL_CONTROL_DEV_ENUM_END=11,
} SERIAL_CONTROL_DEV;




#define HAVE_ENUM_SERIAL_CONTROL_FLAG 
typedef enum SERIAL_CONTROL_FLAG
{
   SERIAL_CONTROL_FLAG_REPLY=1,
   SERIAL_CONTROL_FLAG_RESPOND=2,
   SERIAL_CONTROL_FLAG_EXCLUSIVE=4,
   SERIAL_CONTROL_FLAG_BLOCKING=8,
   SERIAL_CONTROL_FLAG_MULTI=16,
   SERIAL_CONTROL_FLAG_ENUM_END=17,
} SERIAL_CONTROL_FLAG;




#define HAVE_ENUM_MAV_DISTANCE_SENSOR 
typedef enum MAV_DISTANCE_SENSOR
{
   MAV_DISTANCE_SENSOR_LASER=0,
   MAV_DISTANCE_SENSOR_ULTRASOUND=1,
   MAV_DISTANCE_SENSOR_INFRARED=2,
   MAV_DISTANCE_SENSOR_ENUM_END=3,
} MAV_DISTANCE_SENSOR;




#define HAVE_ENUM_MAV_SENSOR_ORIENTATION 
typedef enum MAV_SENSOR_ORIENTATION
{
   MAV_SENSOR_ROTATION_NONE=0,
   MAV_SENSOR_ROTATION_YAW_45=1,
   MAV_SENSOR_ROTATION_YAW_90=2,
   MAV_SENSOR_ROTATION_YAW_135=3,
   MAV_SENSOR_ROTATION_YAW_180=4,
   MAV_SENSOR_ROTATION_YAW_225=5,
   MAV_SENSOR_ROTATION_YAW_270=6,
   MAV_SENSOR_ROTATION_YAW_315=7,
   MAV_SENSOR_ROTATION_ROLL_180=8,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_45=9,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_90=10,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_135=11,
   MAV_SENSOR_ROTATION_PITCH_180=12,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_225=13,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_270=14,
   MAV_SENSOR_ROTATION_ROLL_180_YAW_315=15,
   MAV_SENSOR_ROTATION_ROLL_90=16,
   MAV_SENSOR_ROTATION_ROLL_90_YAW_45=17,
   MAV_SENSOR_ROTATION_ROLL_90_YAW_90=18,
   MAV_SENSOR_ROTATION_ROLL_90_YAW_135=19,
   MAV_SENSOR_ROTATION_ROLL_270=20,
   MAV_SENSOR_ROTATION_ROLL_270_YAW_45=21,
   MAV_SENSOR_ROTATION_ROLL_270_YAW_90=22,
   MAV_SENSOR_ROTATION_ROLL_270_YAW_135=23,
   MAV_SENSOR_ROTATION_PITCH_90=24,
   MAV_SENSOR_ROTATION_PITCH_270=25,
   MAV_SENSOR_ROTATION_PITCH_180_YAW_90=26,
   MAV_SENSOR_ROTATION_PITCH_180_YAW_270=27,
   MAV_SENSOR_ROTATION_ROLL_90_PITCH_90=28,
   MAV_SENSOR_ROTATION_ROLL_180_PITCH_90=29,
   MAV_SENSOR_ROTATION_ROLL_270_PITCH_90=30,
   MAV_SENSOR_ROTATION_ROLL_90_PITCH_180=31,
   MAV_SENSOR_ROTATION_ROLL_270_PITCH_180=32,
   MAV_SENSOR_ROTATION_ROLL_90_PITCH_270=33,
   MAV_SENSOR_ROTATION_ROLL_180_PITCH_270=34,
   MAV_SENSOR_ROTATION_ROLL_270_PITCH_270=35,
   MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90=36,
   MAV_SENSOR_ROTATION_ROLL_90_YAW_270=37,
   MAV_SENSOR_ROTATION_ROLL_315_PITCH_315_YAW_315=38,
   MAV_SENSOR_ORIENTATION_ENUM_END=39,
} MAV_SENSOR_ORIENTATION;




#define HAVE_ENUM_MAV_PROTOCOL_CAPABILITY 
typedef enum MAV_PROTOCOL_CAPABILITY
{
   MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT=1,
   MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT=2,
   MAV_PROTOCOL_CAPABILITY_MISSION_INT=4,
   MAV_PROTOCOL_CAPABILITY_COMMAND_INT=8,
   MAV_PROTOCOL_CAPABILITY_PARAM_UNION=16,
   MAV_PROTOCOL_CAPABILITY_FTP=32,
   MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET=64,
   MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED=128,
   MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT=256,
   MAV_PROTOCOL_CAPABILITY_TERRAIN=512,
   MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET=1024,
   MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION=2048,
   MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION=4096,
   MAV_PROTOCOL_CAPABILITY_MAVLINK2=8192,
   MAV_PROTOCOL_CAPABILITY_MISSION_FENCE=16384,
   MAV_PROTOCOL_CAPABILITY_MISSION_RALLY=32768,
   MAV_PROTOCOL_CAPABILITY_ENUM_END=32769,
} MAV_PROTOCOL_CAPABILITY;




#define HAVE_ENUM_MAV_MISSION_TYPE 
typedef enum MAV_MISSION_TYPE
{
   MAV_MISSION_TYPE_MISSION=0,
   MAV_MISSION_TYPE_FENCE=1,
   MAV_MISSION_TYPE_RALLY=2,
   MAV_MISSION_TYPE_ALL=255,
   MAV_MISSION_TYPE_ENUM_END=256,
} MAV_MISSION_TYPE;




#define HAVE_ENUM_MAV_ESTIMATOR_TYPE 
typedef enum MAV_ESTIMATOR_TYPE
{
   MAV_ESTIMATOR_TYPE_NAIVE=1,
   MAV_ESTIMATOR_TYPE_VISION=2,
   MAV_ESTIMATOR_TYPE_VIO=3,
   MAV_ESTIMATOR_TYPE_GPS=4,
   MAV_ESTIMATOR_TYPE_GPS_INS=5,
   MAV_ESTIMATOR_TYPE_ENUM_END=6,
} MAV_ESTIMATOR_TYPE;




#define HAVE_ENUM_MAV_BATTERY_TYPE 
typedef enum MAV_BATTERY_TYPE
{
   MAV_BATTERY_TYPE_UNKNOWN=0,
   MAV_BATTERY_TYPE_LIPO=1,
   MAV_BATTERY_TYPE_LIFE=2,
   MAV_BATTERY_TYPE_LION=3,
   MAV_BATTERY_TYPE_NIMH=4,
   MAV_BATTERY_TYPE_ENUM_END=5,
} MAV_BATTERY_TYPE;




#define HAVE_ENUM_MAV_BATTERY_FUNCTION 
typedef enum MAV_BATTERY_FUNCTION
{
   MAV_BATTERY_FUNCTION_UNKNOWN=0,
   MAV_BATTERY_FUNCTION_ALL=1,
   MAV_BATTERY_FUNCTION_PROPULSION=2,
   MAV_BATTERY_FUNCTION_AVIONICS=3,
   MAV_BATTERY_TYPE_PAYLOAD=4,
   MAV_BATTERY_FUNCTION_ENUM_END=5,
} MAV_BATTERY_FUNCTION;




#define HAVE_ENUM_MAV_VTOL_STATE 
typedef enum MAV_VTOL_STATE
{
   MAV_VTOL_STATE_UNDEFINED=0,
   MAV_VTOL_STATE_TRANSITION_TO_FW=1,
   MAV_VTOL_STATE_TRANSITION_TO_MC=2,
   MAV_VTOL_STATE_MC=3,
   MAV_VTOL_STATE_FW=4,
   MAV_VTOL_STATE_ENUM_END=5,
} MAV_VTOL_STATE;




#define HAVE_ENUM_MAV_LANDED_STATE 
typedef enum MAV_LANDED_STATE
{
   MAV_LANDED_STATE_UNDEFINED=0,
   MAV_LANDED_STATE_ON_GROUND=1,
   MAV_LANDED_STATE_IN_AIR=2,
   MAV_LANDED_STATE_ENUM_END=3,
} MAV_LANDED_STATE;




#define HAVE_ENUM_ADSB_ALTITUDE_TYPE 
typedef enum ADSB_ALTITUDE_TYPE
{
   ADSB_ALTITUDE_TYPE_PRESSURE_QNH=0,
   ADSB_ALTITUDE_TYPE_GEOMETRIC=1,
   ADSB_ALTITUDE_TYPE_ENUM_END=2,
} ADSB_ALTITUDE_TYPE;




#define HAVE_ENUM_ADSB_EMITTER_TYPE 
typedef enum ADSB_EMITTER_TYPE
{
   ADSB_EMITTER_TYPE_NO_INFO=0,
   ADSB_EMITTER_TYPE_LIGHT=1,
   ADSB_EMITTER_TYPE_SMALL=2,
   ADSB_EMITTER_TYPE_LARGE=3,
   ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE=4,
   ADSB_EMITTER_TYPE_HEAVY=5,
   ADSB_EMITTER_TYPE_HIGHLY_MANUV=6,
   ADSB_EMITTER_TYPE_ROTOCRAFT=7,
   ADSB_EMITTER_TYPE_UNASSIGNED=8,
   ADSB_EMITTER_TYPE_GLIDER=9,
   ADSB_EMITTER_TYPE_LIGHTER_AIR=10,
   ADSB_EMITTER_TYPE_PARACHUTE=11,
   ADSB_EMITTER_TYPE_ULTRA_LIGHT=12,
   ADSB_EMITTER_TYPE_UNASSIGNED2=13,
   ADSB_EMITTER_TYPE_UAV=14,
   ADSB_EMITTER_TYPE_SPACE=15,
   ADSB_EMITTER_TYPE_UNASSGINED3=16,
   ADSB_EMITTER_TYPE_EMERGENCY_SURFACE=17,
   ADSB_EMITTER_TYPE_SERVICE_SURFACE=18,
   ADSB_EMITTER_TYPE_POINT_OBSTACLE=19,
   ADSB_EMITTER_TYPE_ENUM_END=20,
} ADSB_EMITTER_TYPE;




#define HAVE_ENUM_ADSB_FLAGS 
typedef enum ADSB_FLAGS
{
   ADSB_FLAGS_VALID_COORDS=1,
   ADSB_FLAGS_VALID_ALTITUDE=2,
   ADSB_FLAGS_VALID_HEADING=4,
   ADSB_FLAGS_VALID_VELOCITY=8,
   ADSB_FLAGS_VALID_CALLSIGN=16,
   ADSB_FLAGS_VALID_SQUAWK=32,
   ADSB_FLAGS_SIMULATED=64,
   ADSB_FLAGS_ENUM_END=65,
} ADSB_FLAGS;




#define HAVE_ENUM_MAV_DO_REPOSITION_FLAGS 
typedef enum MAV_DO_REPOSITION_FLAGS
{
   MAV_DO_REPOSITION_FLAGS_CHANGE_MODE=1,
   MAV_DO_REPOSITION_FLAGS_ENUM_END=2,
} MAV_DO_REPOSITION_FLAGS;




#define HAVE_ENUM_ESTIMATOR_STATUS_FLAGS 
typedef enum ESTIMATOR_STATUS_FLAGS
{
   ESTIMATOR_ATTITUDE=1,
   ESTIMATOR_VELOCITY_HORIZ=2,
   ESTIMATOR_VELOCITY_VERT=4,
   ESTIMATOR_POS_HORIZ_REL=8,
   ESTIMATOR_POS_HORIZ_ABS=16,
   ESTIMATOR_POS_VERT_ABS=32,
   ESTIMATOR_POS_VERT_AGL=64,
   ESTIMATOR_CONST_POS_MODE=128,
   ESTIMATOR_PRED_POS_HORIZ_REL=256,
   ESTIMATOR_PRED_POS_HORIZ_ABS=512,
   ESTIMATOR_GPS_GLITCH=1024,
   ESTIMATOR_STATUS_FLAGS_ENUM_END=1025,
} ESTIMATOR_STATUS_FLAGS;




#define HAVE_ENUM_MOTOR_TEST_THROTTLE_TYPE 
typedef enum MOTOR_TEST_THROTTLE_TYPE
{
   MOTOR_TEST_THROTTLE_PERCENT=0,
   MOTOR_TEST_THROTTLE_PWM=1,
   MOTOR_TEST_THROTTLE_PILOT=2,
   MOTOR_TEST_THROTTLE_TYPE_ENUM_END=3,
} MOTOR_TEST_THROTTLE_TYPE;




#define HAVE_ENUM_GPS_INPUT_IGNORE_FLAGS 
typedef enum GPS_INPUT_IGNORE_FLAGS
{
   GPS_INPUT_IGNORE_FLAG_ALT=1,
   GPS_INPUT_IGNORE_FLAG_HDOP=2,
   GPS_INPUT_IGNORE_FLAG_VDOP=4,
   GPS_INPUT_IGNORE_FLAG_VEL_HORIZ=8,
   GPS_INPUT_IGNORE_FLAG_VEL_VERT=16,
   GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY=32,
   GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY=64,
   GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY=128,
   GPS_INPUT_IGNORE_FLAGS_ENUM_END=129,
} GPS_INPUT_IGNORE_FLAGS;




#define HAVE_ENUM_MAV_COLLISION_ACTION 
typedef enum MAV_COLLISION_ACTION
{
   MAV_COLLISION_ACTION_NONE=0,
   MAV_COLLISION_ACTION_REPORT=1,
   MAV_COLLISION_ACTION_ASCEND_OR_DESCEND=2,
   MAV_COLLISION_ACTION_MOVE_HORIZONTALLY=3,
   MAV_COLLISION_ACTION_MOVE_PERPENDICULAR=4,
   MAV_COLLISION_ACTION_RTL=5,
   MAV_COLLISION_ACTION_HOVER=6,
   MAV_COLLISION_ACTION_ENUM_END=7,
} MAV_COLLISION_ACTION;




#define HAVE_ENUM_MAV_COLLISION_THREAT_LEVEL 
typedef enum MAV_COLLISION_THREAT_LEVEL
{
   MAV_COLLISION_THREAT_LEVEL_NONE=0,
   MAV_COLLISION_THREAT_LEVEL_LOW=1,
   MAV_COLLISION_THREAT_LEVEL_HIGH=2,
   MAV_COLLISION_THREAT_LEVEL_ENUM_END=3,
} MAV_COLLISION_THREAT_LEVEL;




#define HAVE_ENUM_MAV_COLLISION_SRC 
typedef enum MAV_COLLISION_SRC
{
   MAV_COLLISION_SRC_ADSB=0,
   MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT=1,
   MAV_COLLISION_SRC_ENUM_END=2,
} MAV_COLLISION_SRC;




#define HAVE_ENUM_GPS_FIX_TYPE 
typedef enum GPS_FIX_TYPE
{
   GPS_FIX_TYPE_NO_GPS=0,
   GPS_FIX_TYPE_NO_FIX=1,
   GPS_FIX_TYPE_2D_FIX=2,
   GPS_FIX_TYPE_3D_FIX=3,
   GPS_FIX_TYPE_DGPS=4,
   GPS_FIX_TYPE_RTK_FLOAT=5,
   GPS_FIX_TYPE_RTK_FIXED=6,
   GPS_FIX_TYPE_STATIC=7,
   GPS_FIX_TYPE_ENUM_END=8,
} GPS_FIX_TYPE;





#define MAVLINK_VERSION 3
# 1002 "./lib/main/MAVLink/common/common.h"
# 1 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h" 1
       


#define MAVLINK_MSG_ID_HEARTBEAT 0

typedef struct __mavlink_heartbeat_t { uint32_t custom_mode; uint8_t type; uint8_t autopilot; uint8_t base_mode; uint8_t system_status; uint8_t mavlink_version; } __attribute__((packed))







   mavlink_heartbeat_t;

#define MAVLINK_MSG_ID_HEARTBEAT_LEN 9
#define MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN 9
#define MAVLINK_MSG_ID_0_LEN 9
#define MAVLINK_MSG_ID_0_MIN_LEN 9

#define MAVLINK_MSG_ID_HEARTBEAT_CRC 50
#define MAVLINK_MSG_ID_0_CRC 50
# 40 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
#define MAVLINK_MESSAGE_INFO_HEARTBEAT { "HEARTBEAT", 6, { { "custom_mode", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_heartbeat_t, custom_mode) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_heartbeat_t, type) }, { "autopilot", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_heartbeat_t, autopilot) }, { "base_mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_heartbeat_t, base_mode) }, { "system_status", NULL, MAVLINK_TYPE_UINT8_T, 0, 7, offsetof(mavlink_heartbeat_t, system_status) }, { "mavlink_version", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_heartbeat_t, mavlink_version) }, } }
# 66 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
    packet.type = type;
    packet.autopilot = autopilot;
    packet.base_mode = base_mode;
    packet.system_status = system_status;
    packet.mavlink_version = 3;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 0;
    return mavlink_finalize_message(msg, system_id, component_id, 9, 9, 50);
}
# 108 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint8_t autopilot,uint8_t base_mode,uint32_t custom_mode,uint8_t system_status)
{
# 123 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
    packet.type = type;
    packet.autopilot = autopilot;
    packet.base_mode = base_mode;
    packet.system_status = system_status;
    packet.mavlink_version = 3;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 0;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 9, 50);
}
# 146 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
}
# 160 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
    return mavlink_msg_heartbeat_pack_chan(system_id, component_id, chan, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
}
# 260 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_heartbeat_get_autopilot(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_heartbeat_get_base_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint32_t mavlink_msg_heartbeat_get_custom_mode(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_heartbeat_get_system_status(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_heartbeat_get_mavlink_version(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}







static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
# 331 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
        uint8_t len = msg->len < 9? msg->len : 9;
        memset(heartbeat, 0, 9);
    memcpy(heartbeat, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1003 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h" 1
       


#define MAVLINK_MSG_ID_SYS_STATUS 1

typedef struct __mavlink_sys_status_t { uint32_t onboard_control_sensors_present; uint32_t onboard_control_sensors_enabled; uint32_t onboard_control_sensors_health; uint16_t load; uint16_t voltage_battery; int16_t current_battery; uint16_t drop_rate_comm; uint16_t errors_comm; uint16_t errors_count1; uint16_t errors_count2; uint16_t errors_count3; uint16_t errors_count4; int8_t battery_remaining; } __attribute__((packed))
# 21 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
   mavlink_sys_status_t;

#define MAVLINK_MSG_ID_SYS_STATUS_LEN 31
#define MAVLINK_MSG_ID_SYS_STATUS_MIN_LEN 31
#define MAVLINK_MSG_ID_1_LEN 31
#define MAVLINK_MSG_ID_1_MIN_LEN 31

#define MAVLINK_MSG_ID_SYS_STATUS_CRC 124
#define MAVLINK_MSG_ID_1_CRC 124
# 54 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
#define MAVLINK_MESSAGE_INFO_SYS_STATUS { "SYS_STATUS", 13, { { "onboard_control_sensors_present", "0x%04x", MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_sys_status_t, onboard_control_sensors_present) }, { "onboard_control_sensors_enabled", "0x%04x", MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_sys_status_t, onboard_control_sensors_enabled) }, { "onboard_control_sensors_health", "0x%04x", MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_sys_status_t, onboard_control_sensors_health) }, { "load", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_sys_status_t, load) }, { "voltage_battery", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_sys_status_t, voltage_battery) }, { "current_battery", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_sys_status_t, current_battery) }, { "drop_rate_comm", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_sys_status_t, drop_rate_comm) }, { "errors_comm", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_sys_status_t, errors_comm) }, { "errors_count1", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_sys_status_t, errors_count1) }, { "errors_count2", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_sys_status_t, errors_count2) }, { "errors_count3", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_sys_status_t, errors_count3) }, { "errors_count4", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_sys_status_t, errors_count4) }, { "battery_remaining", NULL, MAVLINK_TYPE_INT8_T, 0, 30, offsetof(mavlink_sys_status_t, battery_remaining) }, } }
# 95 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t onboard_control_sensors_present, uint32_t onboard_control_sensors_enabled, uint32_t onboard_control_sensors_health, uint16_t load, uint16_t voltage_battery, int16_t current_battery, int8_t battery_remaining, uint16_t drop_rate_comm, uint16_t errors_comm, uint16_t errors_count1, uint16_t errors_count2, uint16_t errors_count3, uint16_t errors_count4)
{
# 116 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
    mavlink_sys_status_t packet;
    packet.onboard_control_sensors_present = onboard_control_sensors_present;
    packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
    packet.onboard_control_sensors_health = onboard_control_sensors_health;
    packet.load = load;
    packet.voltage_battery = voltage_battery;
    packet.current_battery = current_battery;
    packet.drop_rate_comm = drop_rate_comm;
    packet.errors_comm = errors_comm;
    packet.errors_count1 = errors_count1;
    packet.errors_count2 = errors_count2;
    packet.errors_count3 = errors_count3;
    packet.errors_count4 = errors_count4;
    packet.battery_remaining = battery_remaining;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


    msg->msgid = 1;
    return mavlink_finalize_message(msg, system_id, component_id, 31, 31, 124);
}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t onboard_control_sensors_present,uint32_t onboard_control_sensors_enabled,uint32_t onboard_control_sensors_health,uint16_t load,uint16_t voltage_battery,int16_t current_battery,int8_t battery_remaining,uint16_t drop_rate_comm,uint16_t errors_comm,uint16_t errors_count1,uint16_t errors_count2,uint16_t errors_count3,uint16_t errors_count4)
{
# 181 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
    mavlink_sys_status_t packet;
    packet.onboard_control_sensors_present = onboard_control_sensors_present;
    packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
    packet.onboard_control_sensors_health = onboard_control_sensors_health;
    packet.load = load;
    packet.voltage_battery = voltage_battery;
    packet.current_battery = current_battery;
    packet.drop_rate_comm = drop_rate_comm;
    packet.errors_comm = errors_comm;
    packet.errors_count1 = errors_count1;
    packet.errors_count2 = errors_count2;
    packet.errors_count3 = errors_count3;
    packet.errors_count4 = errors_count4;
    packet.battery_remaining = battery_remaining;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


    msg->msgid = 1;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 31, 31, 124);
}
# 211 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sys_status_t* sys_status)
{
    return mavlink_msg_sys_status_pack(system_id, component_id, msg, sys_status->onboard_control_sensors_present, sys_status->onboard_control_sensors_enabled, sys_status->onboard_control_sensors_health, sys_status->load, sys_status->voltage_battery, sys_status->current_battery, sys_status->battery_remaining, sys_status->drop_rate_comm, sys_status->errors_comm, sys_status->errors_count1, sys_status->errors_count2, sys_status->errors_count3, sys_status->errors_count4);
}
# 225 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sys_status_t* sys_status)
{
    return mavlink_msg_sys_status_pack_chan(system_id, component_id, chan, msg, sys_status->onboard_control_sensors_present, sys_status->onboard_control_sensors_enabled, sys_status->onboard_control_sensors_health, sys_status->load, sys_status->voltage_battery, sys_status->current_battery, sys_status->battery_remaining, sys_status->drop_rate_comm, sys_status->errors_comm, sys_status->errors_count1, sys_status->errors_count2, sys_status->errors_count3, sys_status->errors_count4);
}
# 361 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_present(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_enabled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_health(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint16_t mavlink_msg_sys_status_get_load(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_sys_status_get_voltage_battery(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline int16_t mavlink_msg_sys_status_get_current_battery(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int8_t mavlink_msg_sys_status_get_battery_remaining(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_sys_status_get_drop_rate_comm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_comm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}







static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
# 509 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
        uint8_t len = msg->len < 31? msg->len : 31;
        memset(sys_status, 0, 31);
    memcpy(sys_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1004 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h" 1
       


#define MAVLINK_MSG_ID_SYSTEM_TIME 2

typedef struct __mavlink_system_time_t { uint64_t time_unix_usec; uint32_t time_boot_ms; } __attribute__((packed))



   mavlink_system_time_t;

#define MAVLINK_MSG_ID_SYSTEM_TIME_LEN 12
#define MAVLINK_MSG_ID_SYSTEM_TIME_MIN_LEN 12
#define MAVLINK_MSG_ID_2_LEN 12
#define MAVLINK_MSG_ID_2_MIN_LEN 12

#define MAVLINK_MSG_ID_SYSTEM_TIME_CRC 137
#define MAVLINK_MSG_ID_2_CRC 137
# 32 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
#define MAVLINK_MESSAGE_INFO_SYSTEM_TIME { "SYSTEM_TIME", 2, { { "time_unix_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_system_time_t, time_unix_usec) }, { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_system_time_t, time_boot_ms) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_unix_usec, uint32_t time_boot_ms)
{







    mavlink_system_time_t packet;
    packet.time_unix_usec = time_unix_usec;
    packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 2;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 137);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_unix_usec,uint32_t time_boot_ms)
{







    mavlink_system_time_t packet;
    packet.time_unix_usec = time_unix_usec;
    packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 2;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 137);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_system_time_t* system_time)
{
    return mavlink_msg_system_time_pack(system_id, component_id, msg, system_time->time_unix_usec, system_time->time_boot_ms);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_system_time_t* system_time)
{
    return mavlink_msg_system_time_pack_chan(system_id, component_id, chan, msg, system_time->time_unix_usec, system_time->time_boot_ms);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint64_t mavlink_msg_system_time_get_time_unix_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_system_time_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}







static inline void mavlink_msg_system_time_decode(const mavlink_message_t* msg, mavlink_system_time_t* system_time)
{




        uint8_t len = msg->len < 12? msg->len : 12;
        memset(system_time, 0, 12);
    memcpy(system_time, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1005 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_ping.h" 1
       


#define MAVLINK_MSG_ID_PING 4

typedef struct __mavlink_ping_t { uint64_t time_usec; uint32_t seq; uint8_t target_system; uint8_t target_component; } __attribute__((packed))





   mavlink_ping_t;

#define MAVLINK_MSG_ID_PING_LEN 14
#define MAVLINK_MSG_ID_PING_MIN_LEN 14
#define MAVLINK_MSG_ID_4_LEN 14
#define MAVLINK_MSG_ID_4_MIN_LEN 14

#define MAVLINK_MSG_ID_PING_CRC 237
#define MAVLINK_MSG_ID_4_CRC 237
# 36 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
#define MAVLINK_MESSAGE_INFO_PING { "PING", 4, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_ping_t, time_usec) }, { "seq", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_ping_t, seq) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_ping_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 13, offsetof(mavlink_ping_t, target_component) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint32_t seq, uint8_t target_system, uint8_t target_component)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
    mavlink_ping_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 4;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 237);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint32_t seq,uint8_t target_system,uint8_t target_component)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
    mavlink_ping_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 4;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 237);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ping_t* ping)
{
    return mavlink_msg_ping_pack(system_id, component_id, msg, ping->time_usec, ping->seq, ping->target_system, ping->target_component);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ping_t* ping)
{
    return mavlink_msg_ping_pack_chan(system_id, component_id, chan, msg, ping->time_usec, ping->seq, ping->target_system, ping->target_component);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint64_t mavlink_msg_ping_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_ping_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint8_t mavlink_msg_ping_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_ping_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}







static inline void mavlink_msg_ping_decode(const mavlink_message_t* msg, mavlink_ping_t* ping)
{






        uint8_t len = msg->len < 14? msg->len : 14;
        memset(ping, 0, 14);
    memcpy(ping, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1006 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h" 1
       


#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL 5

typedef struct __mavlink_change_operator_control_t { uint8_t target_system; uint8_t control_request; uint8_t version; char passkey[25]; } __attribute__((packed))





   mavlink_change_operator_control_t;

#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_LEN 28
#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_MIN_LEN 28
#define MAVLINK_MSG_ID_5_LEN 28
#define MAVLINK_MSG_ID_5_MIN_LEN 28

#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_CRC 217
#define MAVLINK_MSG_ID_5_CRC 217

#define MAVLINK_MSG_CHANGE_OPERATOR_CONTROL_FIELD_PASSKEY_LEN 25
# 36 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
#define MAVLINK_MESSAGE_INFO_CHANGE_OPERATOR_CONTROL { "CHANGE_OPERATOR_CONTROL", 4, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_change_operator_control_t, target_system) }, { "control_request", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_change_operator_control_t, control_request) }, { "version", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_change_operator_control_t, version) }, { "passkey", NULL, MAVLINK_TYPE_CHAR, 25, 3, offsetof(mavlink_change_operator_control_t, passkey) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t control_request, uint8_t version, const char *passkey)
{
# 70 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
    mavlink_change_operator_control_t packet;
    packet.target_system = target_system;
    packet.control_request = control_request;
    packet.version = version;
    mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 5;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 217);
}
# 94 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t control_request,uint8_t version,const char *passkey)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
    mavlink_change_operator_control_t packet;
    packet.target_system = target_system;
    packet.control_request = control_request;
    packet.version = version;
    mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 5;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 217);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_change_operator_control_t* change_operator_control)
{
    return mavlink_msg_change_operator_control_pack(system_id, component_id, msg, change_operator_control->target_system, change_operator_control->control_request, change_operator_control->version, change_operator_control->passkey);
}
# 140 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_change_operator_control_t* change_operator_control)
{
    return mavlink_msg_change_operator_control_pack_chan(system_id, component_id, chan, msg, change_operator_control->target_system, change_operator_control->control_request, change_operator_control->version, change_operator_control->passkey);
}
# 227 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint8_t mavlink_msg_change_operator_control_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_change_operator_control_get_control_request(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_change_operator_control_get_version(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_change_operator_control_get_passkey(const mavlink_message_t* msg, char *passkey)
{
    return _MAV_RETURN_char_array(msg, passkey, 25, 3);
}







static inline void mavlink_msg_change_operator_control_decode(const mavlink_message_t* msg, mavlink_change_operator_control_t* change_operator_control)
{






        uint8_t len = msg->len < 28? msg->len : 28;
        memset(change_operator_control, 0, 28);
    memcpy(change_operator_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1007 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h" 1
       


#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK 6

typedef struct __mavlink_change_operator_control_ack_t { uint8_t gcs_system_id; uint8_t control_request; uint8_t ack; } __attribute__((packed))




   mavlink_change_operator_control_ack_t;

#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK_LEN 3
#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK_MIN_LEN 3
#define MAVLINK_MSG_ID_6_LEN 3
#define MAVLINK_MSG_ID_6_MIN_LEN 3

#define MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK_CRC 104
#define MAVLINK_MSG_ID_6_CRC 104
# 34 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
#define MAVLINK_MESSAGE_INFO_CHANGE_OPERATOR_CONTROL_ACK { "CHANGE_OPERATOR_CONTROL_ACK", 3, { { "gcs_system_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_change_operator_control_ack_t, gcs_system_id) }, { "control_request", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_change_operator_control_ack_t, control_request) }, { "ack", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_change_operator_control_ack_t, ack) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t gcs_system_id, uint8_t control_request, uint8_t ack)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
    mavlink_change_operator_control_ack_t packet;
    packet.gcs_system_id = gcs_system_id;
    packet.control_request = control_request;
    packet.ack = ack;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 6;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 104);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t gcs_system_id,uint8_t control_request,uint8_t ack)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
    mavlink_change_operator_control_ack_t packet;
    packet.gcs_system_id = gcs_system_id;
    packet.control_request = control_request;
    packet.ack = ack;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 6;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 104);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{
    return mavlink_msg_change_operator_control_ack_pack(system_id, component_id, msg, change_operator_control_ack->gcs_system_id, change_operator_control_ack->control_request, change_operator_control_ack->ack);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{
    return mavlink_msg_change_operator_control_ack_pack_chan(system_id, component_id, chan, msg, change_operator_control_ack->gcs_system_id, change_operator_control_ack->control_request, change_operator_control_ack->ack);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint8_t mavlink_msg_change_operator_control_ack_get_gcs_system_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_change_operator_control_ack_get_control_request(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_change_operator_control_ack_get_ack(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_change_operator_control_ack_decode(const mavlink_message_t* msg, mavlink_change_operator_control_ack_t* change_operator_control_ack)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(change_operator_control_ack, 0, 3);
    memcpy(change_operator_control_ack, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1008 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h" 1
       


#define MAVLINK_MSG_ID_AUTH_KEY 7

typedef struct __mavlink_auth_key_t { char key[32]; } __attribute__((packed))


   mavlink_auth_key_t;

#define MAVLINK_MSG_ID_AUTH_KEY_LEN 32
#define MAVLINK_MSG_ID_AUTH_KEY_MIN_LEN 32
#define MAVLINK_MSG_ID_7_LEN 32
#define MAVLINK_MSG_ID_7_MIN_LEN 32

#define MAVLINK_MSG_ID_AUTH_KEY_CRC 119
#define MAVLINK_MSG_ID_7_CRC 119

#define MAVLINK_MSG_AUTH_KEY_FIELD_KEY_LEN 32
# 30 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
#define MAVLINK_MESSAGE_INFO_AUTH_KEY { "AUTH_KEY", 1, { { "key", NULL, MAVLINK_TYPE_CHAR, 32, 0, offsetof(mavlink_auth_key_t, key) }, } }
# 47 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               const char *key)
{






    mavlink_auth_key_t packet;

    mav_array_memcpy(packet.key, key, sizeof(char)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 7;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 119);
}
# 75 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   const char *key)
{






    mavlink_auth_key_t packet;

    mav_array_memcpy(packet.key, key, sizeof(char)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 7;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 119);
}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_auth_key_t* auth_key)
{
    return mavlink_msg_auth_key_pack(system_id, component_id, msg, auth_key->key);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_auth_key_t* auth_key)
{
    return mavlink_msg_auth_key_pack_chan(system_id, component_id, chan, msg, auth_key->key);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_get_key(const mavlink_message_t* msg, char *key)
{
    return _MAV_RETURN_char_array(msg, key, 32, 0);
}







static inline void mavlink_msg_auth_key_decode(const mavlink_message_t* msg, mavlink_auth_key_t* auth_key)
{



        uint8_t len = msg->len < 32? msg->len : 32;
        memset(auth_key, 0, 32);
    memcpy(auth_key, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1009 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h" 1
       


#define MAVLINK_MSG_ID_SET_MODE 11

typedef struct __mavlink_set_mode_t { uint32_t custom_mode; uint8_t target_system; uint8_t base_mode; } __attribute__((packed))




   mavlink_set_mode_t;

#define MAVLINK_MSG_ID_SET_MODE_LEN 6
#define MAVLINK_MSG_ID_SET_MODE_MIN_LEN 6
#define MAVLINK_MSG_ID_11_LEN 6
#define MAVLINK_MSG_ID_11_MIN_LEN 6

#define MAVLINK_MSG_ID_SET_MODE_CRC 89
#define MAVLINK_MSG_ID_11_CRC 89
# 34 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
#define MAVLINK_MESSAGE_INFO_SET_MODE { "SET_MODE", 3, { { "custom_mode", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_set_mode_t, custom_mode) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_set_mode_t, target_system) }, { "base_mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_set_mode_t, base_mode) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t base_mode, uint32_t custom_mode)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
    mavlink_set_mode_t packet;
    packet.custom_mode = custom_mode;
    packet.target_system = target_system;
    packet.base_mode = base_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 11;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 89);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t base_mode,uint32_t custom_mode)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
    mavlink_set_mode_t packet;
    packet.custom_mode = custom_mode;
    packet.target_system = target_system;
    packet.base_mode = base_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 11;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 89);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_mode_t* set_mode)
{
    return mavlink_msg_set_mode_pack(system_id, component_id, msg, set_mode->target_system, set_mode->base_mode, set_mode->custom_mode);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_mode_t* set_mode)
{
    return mavlink_msg_set_mode_pack_chan(system_id, component_id, chan, msg, set_mode->target_system, set_mode->base_mode, set_mode->custom_mode);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}







static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{





        uint8_t len = msg->len < 6? msg->len : 6;
        memset(set_mode, 0, 6);
    memcpy(set_mode, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1010 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h" 1
       


#define MAVLINK_MSG_ID_PARAM_REQUEST_READ 20

typedef struct __mavlink_param_request_read_t { int16_t param_index; uint8_t target_system; uint8_t target_component; char param_id[16]; } __attribute__((packed))





   mavlink_param_request_read_t;

#define MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN 20
#define MAVLINK_MSG_ID_PARAM_REQUEST_READ_MIN_LEN 20
#define MAVLINK_MSG_ID_20_LEN 20
#define MAVLINK_MSG_ID_20_MIN_LEN 20

#define MAVLINK_MSG_ID_PARAM_REQUEST_READ_CRC 214
#define MAVLINK_MSG_ID_20_CRC 214

#define MAVLINK_MSG_PARAM_REQUEST_READ_FIELD_PARAM_ID_LEN 16
# 36 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
#define MAVLINK_MESSAGE_INFO_PARAM_REQUEST_READ { "PARAM_REQUEST_READ", 4, { { "param_index", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_param_request_read_t, param_index) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_param_request_read_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_param_request_read_t, target_component) }, { "param_id", NULL, MAVLINK_TYPE_CHAR, 16, 4, offsetof(mavlink_param_request_read_t, param_id) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index)
{
# 70 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
    mavlink_param_request_read_t packet;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 20;
    return mavlink_finalize_message(msg, system_id, component_id, 20, 20, 214);
}
# 94 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,const char *param_id,int16_t param_index)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
    mavlink_param_request_read_t packet;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 20;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20, 214);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_request_read_t* param_request_read)
{
    return mavlink_msg_param_request_read_pack(system_id, component_id, msg, param_request_read->target_system, param_request_read->target_component, param_request_read->param_id, param_request_read->param_index);
}
# 140 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_request_read_t* param_request_read)
{
    return mavlink_msg_param_request_read_pack_chan(system_id, component_id, chan, msg, param_request_read->target_system, param_request_read->target_component, param_request_read->param_id, param_request_read->param_index);
}
# 227 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
    return _MAV_RETURN_char_array(msg, param_id, 16, 4);
}






static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}







static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{






        uint8_t len = msg->len < 20? msg->len : 20;
        memset(param_request_read, 0, 20);
    memcpy(param_request_read, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1011 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h" 1
       


#define MAVLINK_MSG_ID_PARAM_REQUEST_LIST 21

typedef struct __mavlink_param_request_list_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_param_request_list_t;

#define MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN 2
#define MAVLINK_MSG_ID_PARAM_REQUEST_LIST_MIN_LEN 2
#define MAVLINK_MSG_ID_21_LEN 2
#define MAVLINK_MSG_ID_21_MIN_LEN 2

#define MAVLINK_MSG_ID_PARAM_REQUEST_LIST_CRC 159
#define MAVLINK_MSG_ID_21_CRC 159
# 32 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
#define MAVLINK_MESSAGE_INFO_PARAM_REQUEST_LIST { "PARAM_REQUEST_LIST", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_param_request_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_param_request_list_t, target_component) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_param_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 21;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 159);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_param_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 21;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 159);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_request_list_t* param_request_list)
{
    return mavlink_msg_param_request_list_pack(system_id, component_id, msg, param_request_list->target_system, param_request_list->target_component);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_request_list_t* param_request_list)
{
    return mavlink_msg_param_request_list_pack_chan(system_id, component_id, chan, msg, param_request_list->target_system, param_request_list->target_component);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(param_request_list, 0, 2);
    memcpy(param_request_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1012 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h" 1
       


#define MAVLINK_MSG_ID_PARAM_VALUE 22

typedef struct __mavlink_param_value_t { float param_value; uint16_t param_count; uint16_t param_index; char param_id[16]; uint8_t param_type; } __attribute__((packed))






   mavlink_param_value_t;

#define MAVLINK_MSG_ID_PARAM_VALUE_LEN 25
#define MAVLINK_MSG_ID_PARAM_VALUE_MIN_LEN 25
#define MAVLINK_MSG_ID_22_LEN 25
#define MAVLINK_MSG_ID_22_MIN_LEN 25

#define MAVLINK_MSG_ID_PARAM_VALUE_CRC 220
#define MAVLINK_MSG_ID_22_CRC 220

#define MAVLINK_MSG_PARAM_VALUE_FIELD_PARAM_ID_LEN 16
# 38 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
#define MAVLINK_MESSAGE_INFO_PARAM_VALUE { "PARAM_VALUE", 5, { { "param_value", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_param_value_t, param_value) }, { "param_count", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_param_value_t, param_count) }, { "param_index", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_param_value_t, param_index) }, { "param_id", NULL, MAVLINK_TYPE_CHAR, 16, 8, offsetof(mavlink_param_value_t, param_id) }, { "param_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 24, offsetof(mavlink_param_value_t, param_type) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
    mavlink_param_value_t packet;
    packet.param_value = param_value;
    packet.param_count = param_count;
    packet.param_index = param_index;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 22;
    return mavlink_finalize_message(msg, system_id, component_id, 25, 25, 220);
}
# 101 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   const char *param_id,float param_value,uint8_t param_type,uint16_t param_count,uint16_t param_index)
{
# 114 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
    mavlink_param_value_t packet;
    packet.param_value = param_value;
    packet.param_count = param_count;
    packet.param_index = param_index;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 22;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 25, 220);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_value_t* param_value)
{
    return mavlink_msg_param_value_pack(system_id, component_id, msg, param_value->param_id, param_value->param_value, param_value->param_type, param_value->param_count, param_value->param_index);
}
# 149 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_value_t* param_value)
{
    return mavlink_msg_param_value_pack_chan(system_id, component_id, chan, msg, param_value->param_id, param_value->param_value, param_value->param_type, param_value->param_count, param_value->param_index);
}
# 241 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_get_param_id(const mavlink_message_t* msg, char *param_id)
{
    return _MAV_RETURN_char_array(msg, param_id, 16, 8);
}






static inline float mavlink_msg_param_value_get_param_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline uint8_t mavlink_msg_param_value_get_param_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint16_t mavlink_msg_param_value_get_param_count(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_param_value_get_param_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}







static inline void mavlink_msg_param_value_decode(const mavlink_message_t* msg, mavlink_param_value_t* param_value)
{







        uint8_t len = msg->len < 25? msg->len : 25;
        memset(param_value, 0, 25);
    memcpy(param_value, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1013 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h" 1
       


#define MAVLINK_MSG_ID_PARAM_SET 23

typedef struct __mavlink_param_set_t { float param_value; uint8_t target_system; uint8_t target_component; char param_id[16]; uint8_t param_type; } __attribute__((packed))






   mavlink_param_set_t;

#define MAVLINK_MSG_ID_PARAM_SET_LEN 23
#define MAVLINK_MSG_ID_PARAM_SET_MIN_LEN 23
#define MAVLINK_MSG_ID_23_LEN 23
#define MAVLINK_MSG_ID_23_MIN_LEN 23

#define MAVLINK_MSG_ID_PARAM_SET_CRC 168
#define MAVLINK_MSG_ID_23_CRC 168

#define MAVLINK_MSG_PARAM_SET_FIELD_PARAM_ID_LEN 16
# 38 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
#define MAVLINK_MESSAGE_INFO_PARAM_SET { "PARAM_SET", 5, { { "param_value", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_param_set_t, param_value) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_param_set_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_param_set_t, target_component) }, { "param_id", NULL, MAVLINK_TYPE_CHAR, 16, 6, offsetof(mavlink_param_set_t, param_id) }, { "param_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 22, offsetof(mavlink_param_set_t, param_type) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const char *param_id, float param_value, uint8_t param_type)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
    mavlink_param_set_t packet;
    packet.param_value = param_value;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 23);


    msg->msgid = 23;
    return mavlink_finalize_message(msg, system_id, component_id, 23, 23, 168);
}
# 101 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,const char *param_id,float param_value,uint8_t param_type)
{
# 114 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
    mavlink_param_set_t packet;
    packet.param_value = param_value;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.param_type = param_type;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 23);


    msg->msgid = 23;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 23, 23, 168);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
    return mavlink_msg_param_set_pack(system_id, component_id, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
}
# 149 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
    return mavlink_msg_param_set_pack_chan(system_id, component_id, chan, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
}
# 241 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
    return _MAV_RETURN_char_array(msg, param_id, 16, 6);
}






static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[22];
}







static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{







        uint8_t len = msg->len < 23? msg->len : 23;
        memset(param_set, 0, 23);
    memcpy(param_set, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1014 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h" 1
       


#define MAVLINK_MSG_ID_GPS_RAW_INT 24

typedef struct __mavlink_gps_raw_int_t { uint64_t time_usec; int32_t lat; int32_t lon; int32_t alt; uint16_t eph; uint16_t epv; uint16_t vel; uint16_t cog; uint8_t fix_type; uint8_t satellites_visible; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
   mavlink_gps_raw_int_t;

#define MAVLINK_MSG_ID_GPS_RAW_INT_LEN 30
#define MAVLINK_MSG_ID_GPS_RAW_INT_MIN_LEN 30
#define MAVLINK_MSG_ID_24_LEN 30
#define MAVLINK_MSG_ID_24_MIN_LEN 30

#define MAVLINK_MSG_ID_GPS_RAW_INT_CRC 24
#define MAVLINK_MSG_ID_24_CRC 24
# 48 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
#define MAVLINK_MESSAGE_INFO_GPS_RAW_INT { "GPS_RAW_INT", 10, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_gps_raw_int_t, time_usec) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps_raw_int_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps_raw_int_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps_raw_int_t, alt) }, { "eph", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_gps_raw_int_t, eph) }, { "epv", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_gps_raw_int_t, epv) }, { "vel", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_gps_raw_int_t, vel) }, { "cog", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_gps_raw_int_t, cog) }, { "fix_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 28, offsetof(mavlink_gps_raw_int_t, fix_type) }, { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 29, offsetof(mavlink_gps_raw_int_t, satellites_visible) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
    mavlink_gps_raw_int_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 24;
    return mavlink_finalize_message(msg, system_id, component_id, 30, 30, 24);
}
# 138 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,uint16_t cog,uint8_t satellites_visible)
{
# 157 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
    mavlink_gps_raw_int_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 24;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 30, 24);
}
# 184 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
    return mavlink_msg_gps_raw_int_pack(system_id, component_id, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
    return mavlink_msg_gps_raw_int_pack_chan(system_id, component_id, chan, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible);
}
# 319 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint64_t mavlink_msg_gps_raw_int_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_raw_int_get_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline int32_t mavlink_msg_gps_raw_int_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps_raw_int_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_raw_int_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_eph(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_epv(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_cog(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint8_t mavlink_msg_gps_raw_int_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}







static inline void mavlink_msg_gps_raw_int_decode(const mavlink_message_t* msg, mavlink_gps_raw_int_t* gps_raw_int)
{
# 434 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
        uint8_t len = msg->len < 30? msg->len : 30;
        memset(gps_raw_int, 0, 30);
    memcpy(gps_raw_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1015 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h" 1
       


#define MAVLINK_MSG_ID_GPS_STATUS 25

typedef struct __mavlink_gps_status_t { uint8_t satellites_visible; uint8_t satellite_prn[20]; uint8_t satellite_used[20]; uint8_t satellite_elevation[20]; uint8_t satellite_azimuth[20]; uint8_t satellite_snr[20]; } __attribute__((packed))







   mavlink_gps_status_t;

#define MAVLINK_MSG_ID_GPS_STATUS_LEN 101
#define MAVLINK_MSG_ID_GPS_STATUS_MIN_LEN 101
#define MAVLINK_MSG_ID_25_LEN 101
#define MAVLINK_MSG_ID_25_MIN_LEN 101

#define MAVLINK_MSG_ID_GPS_STATUS_CRC 23
#define MAVLINK_MSG_ID_25_CRC 23

#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_PRN_LEN 20
#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_USED_LEN 20
#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_ELEVATION_LEN 20
#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_AZIMUTH_LEN 20
#define MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_SNR_LEN 20
# 44 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
#define MAVLINK_MESSAGE_INFO_GPS_STATUS { "GPS_STATUS", 6, { { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_gps_status_t, satellites_visible) }, { "satellite_prn", NULL, MAVLINK_TYPE_UINT8_T, 20, 1, offsetof(mavlink_gps_status_t, satellite_prn) }, { "satellite_used", NULL, MAVLINK_TYPE_UINT8_T, 20, 21, offsetof(mavlink_gps_status_t, satellite_used) }, { "satellite_elevation", NULL, MAVLINK_TYPE_UINT8_T, 20, 41, offsetof(mavlink_gps_status_t, satellite_elevation) }, { "satellite_azimuth", NULL, MAVLINK_TYPE_UINT8_T, 20, 61, offsetof(mavlink_gps_status_t, satellite_azimuth) }, { "satellite_snr", NULL, MAVLINK_TYPE_UINT8_T, 20, 81, offsetof(mavlink_gps_status_t, satellite_snr) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t satellites_visible, const uint8_t *satellite_prn, const uint8_t *satellite_used, const uint8_t *satellite_elevation, const uint8_t *satellite_azimuth, const uint8_t *satellite_snr)
{
# 84 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
    mavlink_gps_status_t packet;
    packet.satellites_visible = satellites_visible;
    mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 101);


    msg->msgid = 25;
    return mavlink_finalize_message(msg, system_id, component_id, 101, 101, 23);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t satellites_visible,const uint8_t *satellite_prn,const uint8_t *satellite_used,const uint8_t *satellite_elevation,const uint8_t *satellite_azimuth,const uint8_t *satellite_snr)
{
# 126 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
    mavlink_gps_status_t packet;
    packet.satellites_visible = satellites_visible;
    mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
    mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 101);


    msg->msgid = 25;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 101, 101, 23);
}
# 148 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_status_t* gps_status)
{
    return mavlink_msg_gps_status_pack(system_id, component_id, msg, gps_status->satellites_visible, gps_status->satellite_prn, gps_status->satellite_used, gps_status->satellite_elevation, gps_status->satellite_azimuth, gps_status->satellite_snr);
}
# 162 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_status_t* gps_status)
{
    return mavlink_msg_gps_status_pack_chan(system_id, component_id, chan, msg, gps_status->satellites_visible, gps_status->satellite_prn, gps_status->satellite_used, gps_status->satellite_elevation, gps_status->satellite_azimuth, gps_status->satellite_snr);
}
# 259 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint8_t mavlink_msg_gps_status_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_prn(const mavlink_message_t* msg, uint8_t *satellite_prn)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_prn, 20, 1);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_used(const mavlink_message_t* msg, uint8_t *satellite_used)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_used, 20, 21);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_elevation(const mavlink_message_t* msg, uint8_t *satellite_elevation)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_elevation, 20, 41);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_azimuth(const mavlink_message_t* msg, uint8_t *satellite_azimuth)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_azimuth, 20, 61);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_snr(const mavlink_message_t* msg, uint8_t *satellite_snr)
{
    return _MAV_RETURN_uint8_t_array(msg, satellite_snr, 20, 81);
}







static inline void mavlink_msg_gps_status_decode(const mavlink_message_t* msg, mavlink_gps_status_t* gps_status)
{
# 330 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
        uint8_t len = msg->len < 101? msg->len : 101;
        memset(gps_status, 0, 101);
    memcpy(gps_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1016 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h" 1
       


#define MAVLINK_MSG_ID_SCALED_IMU 26

typedef struct __mavlink_scaled_imu_t { uint32_t time_boot_ms; int16_t xacc; int16_t yacc; int16_t zacc; int16_t xgyro; int16_t ygyro; int16_t zgyro; int16_t xmag; int16_t ymag; int16_t zmag; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
   mavlink_scaled_imu_t;

#define MAVLINK_MSG_ID_SCALED_IMU_LEN 22
#define MAVLINK_MSG_ID_SCALED_IMU_MIN_LEN 22
#define MAVLINK_MSG_ID_26_LEN 22
#define MAVLINK_MSG_ID_26_MIN_LEN 22

#define MAVLINK_MSG_ID_SCALED_IMU_CRC 170
#define MAVLINK_MSG_ID_26_CRC 170
# 48 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
#define MAVLINK_MESSAGE_INFO_SCALED_IMU { "SCALED_IMU", 10, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_imu_t, time_boot_ms) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_scaled_imu_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_scaled_imu_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_scaled_imu_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_scaled_imu_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_imu_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_scaled_imu_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_scaled_imu_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_scaled_imu_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_scaled_imu_t, zmag) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
    mavlink_scaled_imu_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 26;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 170);
}
# 138 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 157 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
    mavlink_scaled_imu_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 26;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 170);
}
# 184 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu_t* scaled_imu)
{
    return mavlink_msg_scaled_imu_pack(system_id, component_id, msg, scaled_imu->time_boot_ms, scaled_imu->xacc, scaled_imu->yacc, scaled_imu->zacc, scaled_imu->xgyro, scaled_imu->ygyro, scaled_imu->zgyro, scaled_imu->xmag, scaled_imu->ymag, scaled_imu->zmag);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu_t* scaled_imu)
{
    return mavlink_msg_scaled_imu_pack_chan(system_id, component_id, chan, msg, scaled_imu->time_boot_ms, scaled_imu->xacc, scaled_imu->yacc, scaled_imu->zacc, scaled_imu->xgyro, scaled_imu->ygyro, scaled_imu->zgyro, scaled_imu->xmag, scaled_imu->ymag, scaled_imu->zmag);
}
# 319 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint32_t mavlink_msg_scaled_imu_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu_decode(const mavlink_message_t* msg, mavlink_scaled_imu_t* scaled_imu)
{
# 434 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(scaled_imu, 0, 22);
    memcpy(scaled_imu, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1017 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h" 1
       


#define MAVLINK_MSG_ID_RAW_IMU 27

typedef struct __mavlink_raw_imu_t { uint64_t time_usec; int16_t xacc; int16_t yacc; int16_t zacc; int16_t xgyro; int16_t ygyro; int16_t zgyro; int16_t xmag; int16_t ymag; int16_t zmag; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
   mavlink_raw_imu_t;

#define MAVLINK_MSG_ID_RAW_IMU_LEN 26
#define MAVLINK_MSG_ID_RAW_IMU_MIN_LEN 26
#define MAVLINK_MSG_ID_27_LEN 26
#define MAVLINK_MSG_ID_27_MIN_LEN 26

#define MAVLINK_MSG_ID_RAW_IMU_CRC 144
#define MAVLINK_MSG_ID_27_CRC 144
# 48 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
#define MAVLINK_MESSAGE_INFO_RAW_IMU { "RAW_IMU", 10, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_raw_imu_t, time_usec) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_raw_imu_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_raw_imu_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_raw_imu_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_raw_imu_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_raw_imu_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_raw_imu_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_raw_imu_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_raw_imu_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_INT16_T, 0, 24, offsetof(mavlink_raw_imu_t, zmag) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 27;
    return mavlink_finalize_message(msg, system_id, component_id, 26, 26, 144);
}
# 138 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 157 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
    mavlink_raw_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 27;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 26, 144);
}
# 184 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
    return mavlink_msg_raw_imu_pack(system_id, component_id, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
    return mavlink_msg_raw_imu_pack_chan(system_id, component_id, chan, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag);
}
# 319 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint64_t mavlink_msg_raw_imu_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline int16_t mavlink_msg_raw_imu_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_raw_imu_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_raw_imu_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_raw_imu_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_raw_imu_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_raw_imu_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_raw_imu_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_raw_imu_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline int16_t mavlink_msg_raw_imu_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 24);
}







static inline void mavlink_msg_raw_imu_decode(const mavlink_message_t* msg, mavlink_raw_imu_t* raw_imu)
{
# 434 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
        uint8_t len = msg->len < 26? msg->len : 26;
        memset(raw_imu, 0, 26);
    memcpy(raw_imu, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1018 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h" 1
       


#define MAVLINK_MSG_ID_RAW_PRESSURE 28

typedef struct __mavlink_raw_pressure_t { uint64_t time_usec; int16_t press_abs; int16_t press_diff1; int16_t press_diff2; int16_t temperature; } __attribute__((packed))






   mavlink_raw_pressure_t;

#define MAVLINK_MSG_ID_RAW_PRESSURE_LEN 16
#define MAVLINK_MSG_ID_RAW_PRESSURE_MIN_LEN 16
#define MAVLINK_MSG_ID_28_LEN 16
#define MAVLINK_MSG_ID_28_MIN_LEN 16

#define MAVLINK_MSG_ID_RAW_PRESSURE_CRC 67
#define MAVLINK_MSG_ID_28_CRC 67
# 38 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
#define MAVLINK_MESSAGE_INFO_RAW_PRESSURE { "RAW_PRESSURE", 5, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_raw_pressure_t, time_usec) }, { "press_abs", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_raw_pressure_t, press_abs) }, { "press_diff1", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_raw_pressure_t, press_diff1) }, { "press_diff2", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_raw_pressure_t, press_diff2) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_raw_pressure_t, temperature) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, int16_t press_abs, int16_t press_diff1, int16_t press_diff2, int16_t temperature)
{
# 76 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
    mavlink_raw_pressure_t packet;
    packet.time_usec = time_usec;
    packet.press_abs = press_abs;
    packet.press_diff1 = press_diff1;
    packet.press_diff2 = press_diff2;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 28;
    return mavlink_finalize_message(msg, system_id, component_id, 16, 16, 67);
}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,int16_t press_abs,int16_t press_diff1,int16_t press_diff2,int16_t temperature)
{
# 117 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
    mavlink_raw_pressure_t packet;
    packet.time_usec = time_usec;
    packet.press_abs = press_abs;
    packet.press_diff1 = press_diff1;
    packet.press_diff2 = press_diff2;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 28;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 16, 67);
}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_pressure_t* raw_pressure)
{
    return mavlink_msg_raw_pressure_pack(system_id, component_id, msg, raw_pressure->time_usec, raw_pressure->press_abs, raw_pressure->press_diff1, raw_pressure->press_diff2, raw_pressure->temperature);
}
# 153 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_raw_pressure_t* raw_pressure)
{
    return mavlink_msg_raw_pressure_pack_chan(system_id, component_id, chan, msg, raw_pressure->time_usec, raw_pressure->press_abs, raw_pressure->press_diff1, raw_pressure->press_diff2, raw_pressure->temperature);
}
# 249 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint64_t mavlink_msg_raw_pressure_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_abs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_diff1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_diff2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_raw_pressure_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}







static inline void mavlink_msg_raw_pressure_decode(const mavlink_message_t* msg, mavlink_raw_pressure_t* raw_pressure)
{







        uint8_t len = msg->len < 16? msg->len : 16;
        memset(raw_pressure, 0, 16);
    memcpy(raw_pressure, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1019 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h" 1
       


#define MAVLINK_MSG_ID_SCALED_PRESSURE 29

typedef struct __mavlink_scaled_pressure_t { uint32_t time_boot_ms; float press_abs; float press_diff; int16_t temperature; } __attribute__((packed))





   mavlink_scaled_pressure_t;

#define MAVLINK_MSG_ID_SCALED_PRESSURE_LEN 14
#define MAVLINK_MSG_ID_SCALED_PRESSURE_MIN_LEN 14
#define MAVLINK_MSG_ID_29_LEN 14
#define MAVLINK_MSG_ID_29_MIN_LEN 14

#define MAVLINK_MSG_ID_SCALED_PRESSURE_CRC 115
#define MAVLINK_MSG_ID_29_CRC 115
# 36 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
#define MAVLINK_MESSAGE_INFO_SCALED_PRESSURE { "SCALED_PRESSURE", 4, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_pressure_t, time_boot_ms) }, { "press_abs", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_scaled_pressure_t, press_abs) }, { "press_diff", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_scaled_pressure_t, press_diff) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_pressure_t, temperature) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
    mavlink_scaled_pressure_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 29;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 115);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
    mavlink_scaled_pressure_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 29;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 115);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure_t* scaled_pressure)
{
    return mavlink_msg_scaled_pressure_pack(system_id, component_id, msg, scaled_pressure->time_boot_ms, scaled_pressure->press_abs, scaled_pressure->press_diff, scaled_pressure->temperature);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure_t* scaled_pressure)
{
    return mavlink_msg_scaled_pressure_pack_chan(system_id, component_id, chan, msg, scaled_pressure->time_boot_ms, scaled_pressure->press_abs, scaled_pressure->press_diff, scaled_pressure->temperature);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint32_t mavlink_msg_scaled_pressure_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure_get_press_abs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure_get_press_diff(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure_decode(const mavlink_message_t* msg, mavlink_scaled_pressure_t* scaled_pressure)
{






        uint8_t len = msg->len < 14? msg->len : 14;
        memset(scaled_pressure, 0, 14);
    memcpy(scaled_pressure, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1020 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h" 1
       


#define MAVLINK_MSG_ID_ATTITUDE 30

typedef struct __mavlink_attitude_t { uint32_t time_boot_ms; float roll; float pitch; float yaw; float rollspeed; float pitchspeed; float yawspeed; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
   mavlink_attitude_t;

#define MAVLINK_MSG_ID_ATTITUDE_LEN 28
#define MAVLINK_MSG_ID_ATTITUDE_MIN_LEN 28
#define MAVLINK_MSG_ID_30_LEN 28
#define MAVLINK_MSG_ID_30_MIN_LEN 28

#define MAVLINK_MSG_ID_ATTITUDE_CRC 39
#define MAVLINK_MSG_ID_30_CRC 39
# 42 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
#define MAVLINK_MESSAGE_INFO_ATTITUDE { "ATTITUDE", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_attitude_t, time_boot_ms) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_attitude_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_attitude_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_attitude_t, yaw) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_attitude_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_attitude_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_attitude_t, yawspeed) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
    mavlink_attitude_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 30;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 39);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float roll,float pitch,float yaw,float rollspeed,float pitchspeed,float yawspeed)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
    mavlink_attitude_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 30;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 39);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
    return mavlink_msg_attitude_pack(system_id, component_id, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
    return mavlink_msg_attitude_pack_chan(system_id, component_id, chan, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint32_t mavlink_msg_attitude_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_attitude_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_attitude_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_attitude_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_attitude_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_attitude_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(attitude, 0, 28);
    memcpy(attitude, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1021 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h" 1
       


#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION 31

typedef struct __mavlink_attitude_quaternion_t { uint32_t time_boot_ms; float q1; float q2; float q3; float q4; float rollspeed; float pitchspeed; float yawspeed; } __attribute__((packed))
# 16 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
   mavlink_attitude_quaternion_t;

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN 32
#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_MIN_LEN 32
#define MAVLINK_MSG_ID_31_LEN 32
#define MAVLINK_MSG_ID_31_MIN_LEN 32

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC 246
#define MAVLINK_MSG_ID_31_CRC 246
# 44 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
#define MAVLINK_MESSAGE_INFO_ATTITUDE_QUATERNION { "ATTITUDE_QUATERNION", 8, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_attitude_quaternion_t, time_boot_ms) }, { "q1", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_attitude_quaternion_t, q1) }, { "q2", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_attitude_quaternion_t, q2) }, { "q3", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_attitude_quaternion_t, q3) }, { "q4", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_attitude_quaternion_t, q4) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_attitude_quaternion_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_attitude_quaternion_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_attitude_quaternion_t, yawspeed) }, } }
# 75 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
    mavlink_attitude_quaternion_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 31;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 246);
}
# 124 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float q1,float q2,float q3,float q4,float rollspeed,float pitchspeed,float yawspeed)
{
# 141 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
    mavlink_attitude_quaternion_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 31;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 246);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_quaternion_t* attitude_quaternion)
{
    return mavlink_msg_attitude_quaternion_pack(system_id, component_id, msg, attitude_quaternion->time_boot_ms, attitude_quaternion->q1, attitude_quaternion->q2, attitude_quaternion->q3, attitude_quaternion->q4, attitude_quaternion->rollspeed, attitude_quaternion->pitchspeed, attitude_quaternion->yawspeed);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_quaternion_t* attitude_quaternion)
{
    return mavlink_msg_attitude_quaternion_pack_chan(system_id, component_id, chan, msg, attitude_quaternion->time_boot_ms, attitude_quaternion->q1, attitude_quaternion->q2, attitude_quaternion->q3, attitude_quaternion->q4, attitude_quaternion->rollspeed, attitude_quaternion->pitchspeed, attitude_quaternion->yawspeed);
}
# 291 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint32_t mavlink_msg_attitude_quaternion_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_attitude_quaternion_get_q1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_attitude_quaternion_get_q2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_attitude_quaternion_get_q3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_attitude_quaternion_get_q4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_attitude_quaternion_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_quaternion_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_quaternion_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_attitude_quaternion_decode(const mavlink_message_t* msg, mavlink_attitude_quaternion_t* attitude_quaternion)
{
# 384 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(attitude_quaternion, 0, 32);
    memcpy(attitude_quaternion, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1022 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h" 1
       


#define MAVLINK_MSG_ID_LOCAL_POSITION_NED 32

typedef struct __mavlink_local_position_ned_t { uint32_t time_boot_ms; float x; float y; float z; float vx; float vy; float vz; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
   mavlink_local_position_ned_t;

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN 28
#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_MIN_LEN 28
#define MAVLINK_MSG_ID_32_LEN 28
#define MAVLINK_MSG_ID_32_MIN_LEN 28

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC 185
#define MAVLINK_MSG_ID_32_CRC 185
# 42 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
#define MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED { "LOCAL_POSITION_NED", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_local_position_ned_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_local_position_ned_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_local_position_ned_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_local_position_ned_t, z) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_local_position_ned_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_local_position_ned_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_local_position_ned_t, vz) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
    mavlink_local_position_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 32;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 185);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float x,float y,float z,float vx,float vy,float vz)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
    mavlink_local_position_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 32;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 185);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_t* local_position_ned)
{
    return mavlink_msg_local_position_ned_pack(system_id, component_id, msg, local_position_ned->time_boot_ms, local_position_ned->x, local_position_ned->y, local_position_ned->z, local_position_ned->vx, local_position_ned->vy, local_position_ned->vz);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_t* local_position_ned)
{
    return mavlink_msg_local_position_ned_pack_chan(system_id, component_id, chan, msg, local_position_ned->time_boot_ms, local_position_ned->x, local_position_ned->y, local_position_ned->z, local_position_ned->vx, local_position_ned->vy, local_position_ned->vz);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint32_t mavlink_msg_local_position_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_local_position_ned_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_local_position_ned_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_local_position_ned_decode(const mavlink_message_t* msg, mavlink_local_position_ned_t* local_position_ned)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(local_position_ned, 0, 28);
    memcpy(local_position_ned, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1023 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h" 1
       


#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT 33

typedef struct __mavlink_global_position_int_t { uint32_t time_boot_ms; int32_t lat; int32_t lon; int32_t alt; int32_t relative_alt; int16_t vx; int16_t vy; int16_t vz; uint16_t hdg; } __attribute__((packed))
# 17 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
   mavlink_global_position_int_t;

#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN 28
#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_MIN_LEN 28
#define MAVLINK_MSG_ID_33_LEN 28
#define MAVLINK_MSG_ID_33_MIN_LEN 28

#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC 104
#define MAVLINK_MSG_ID_33_CRC 104
# 46 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
#define MAVLINK_MESSAGE_INFO_GLOBAL_POSITION_INT { "GLOBAL_POSITION_INT", 9, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_global_position_int_t, time_boot_ms) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_global_position_int_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_global_position_int_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_global_position_int_t, alt) }, { "relative_alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_global_position_int_t, relative_alt) }, { "vx", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_global_position_int_t, vx) }, { "vy", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_global_position_int_t, vy) }, { "vz", NULL, MAVLINK_TYPE_INT16_T, 0, 24, offsetof(mavlink_global_position_int_t, vz) }, { "hdg", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_global_position_int_t, hdg) }, } }
# 79 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
# 96 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
    mavlink_global_position_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.hdg = hdg;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 33;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 104);
}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,int16_t vx,int16_t vy,int16_t vz,uint16_t hdg)
{
# 149 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
    mavlink_global_position_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.hdg = hdg;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 33;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 104);
}
# 175 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_position_int_t* global_position_int)
{
    return mavlink_msg_global_position_int_pack(system_id, component_id, msg, global_position_int->time_boot_ms, global_position_int->lat, global_position_int->lon, global_position_int->alt, global_position_int->relative_alt, global_position_int->vx, global_position_int->vy, global_position_int->vz, global_position_int->hdg);
}
# 189 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_position_int_t* global_position_int)
{
    return mavlink_msg_global_position_int_pack_chan(system_id, component_id, chan, msg, global_position_int->time_boot_ms, global_position_int->lat, global_position_int->lon, global_position_int->alt, global_position_int->relative_alt, global_position_int->vx, global_position_int->vy, global_position_int->vz, global_position_int->hdg);
}
# 305 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 24);
}






static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}







static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
# 409 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(global_position_int, 0, 28);
    memcpy(global_position_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1024 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h" 1
       


#define MAVLINK_MSG_ID_RC_CHANNELS_SCALED 34

typedef struct __mavlink_rc_channels_scaled_t { uint32_t time_boot_ms; int16_t chan1_scaled; int16_t chan2_scaled; int16_t chan3_scaled; int16_t chan4_scaled; int16_t chan5_scaled; int16_t chan6_scaled; int16_t chan7_scaled; int16_t chan8_scaled; uint8_t port; uint8_t rssi; } __attribute__((packed))
# 19 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
   mavlink_rc_channels_scaled_t;

#define MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN 22
#define MAVLINK_MSG_ID_RC_CHANNELS_SCALED_MIN_LEN 22
#define MAVLINK_MSG_ID_34_LEN 22
#define MAVLINK_MSG_ID_34_MIN_LEN 22

#define MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC 237
#define MAVLINK_MSG_ID_34_CRC 237
# 50 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
#define MAVLINK_MESSAGE_INFO_RC_CHANNELS_SCALED { "RC_CHANNELS_SCALED", 11, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_rc_channels_scaled_t, time_boot_ms) }, { "chan1_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_rc_channels_scaled_t, chan1_scaled) }, { "chan2_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_rc_channels_scaled_t, chan2_scaled) }, { "chan3_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_rc_channels_scaled_t, chan3_scaled) }, { "chan4_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_rc_channels_scaled_t, chan4_scaled) }, { "chan5_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_rc_channels_scaled_t, chan5_scaled) }, { "chan6_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_rc_channels_scaled_t, chan6_scaled) }, { "chan7_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_rc_channels_scaled_t, chan7_scaled) }, { "chan8_scaled", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_rc_channels_scaled_t, chan8_scaled) }, { "port", NULL, MAVLINK_TYPE_UINT8_T, 0, 20, offsetof(mavlink_rc_channels_scaled_t, port) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 21, offsetof(mavlink_rc_channels_scaled_t, rssi) }, } }
# 87 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
    mavlink_rc_channels_scaled_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_scaled = chan1_scaled;
    packet.chan2_scaled = chan2_scaled;
    packet.chan3_scaled = chan3_scaled;
    packet.chan4_scaled = chan4_scaled;
    packet.chan5_scaled = chan5_scaled;
    packet.chan6_scaled = chan6_scaled;
    packet.chan7_scaled = chan7_scaled;
    packet.chan8_scaled = chan8_scaled;
    packet.port = port;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 34;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 237);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t port,int16_t chan1_scaled,int16_t chan2_scaled,int16_t chan3_scaled,int16_t chan4_scaled,int16_t chan5_scaled,int16_t chan6_scaled,int16_t chan7_scaled,int16_t chan8_scaled,uint8_t rssi)
{
# 165 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
    mavlink_rc_channels_scaled_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_scaled = chan1_scaled;
    packet.chan2_scaled = chan2_scaled;
    packet.chan3_scaled = chan3_scaled;
    packet.chan4_scaled = chan4_scaled;
    packet.chan5_scaled = chan5_scaled;
    packet.chan6_scaled = chan6_scaled;
    packet.chan7_scaled = chan7_scaled;
    packet.chan8_scaled = chan8_scaled;
    packet.port = port;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 34;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 237);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
    return mavlink_msg_rc_channels_scaled_pack(system_id, component_id, msg, rc_channels_scaled->time_boot_ms, rc_channels_scaled->port, rc_channels_scaled->chan1_scaled, rc_channels_scaled->chan2_scaled, rc_channels_scaled->chan3_scaled, rc_channels_scaled->chan4_scaled, rc_channels_scaled->chan5_scaled, rc_channels_scaled->chan6_scaled, rc_channels_scaled->chan7_scaled, rc_channels_scaled->chan8_scaled, rc_channels_scaled->rssi);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
    return mavlink_msg_rc_channels_scaled_pack_chan(system_id, component_id, chan, msg, rc_channels_scaled->time_boot_ms, rc_channels_scaled->port, rc_channels_scaled->chan1_scaled, rc_channels_scaled->chan2_scaled, rc_channels_scaled->chan3_scaled, rc_channels_scaled->chan4_scaled, rc_channels_scaled->chan5_scaled, rc_channels_scaled->chan6_scaled, rc_channels_scaled->chan7_scaled, rc_channels_scaled->chan8_scaled, rc_channels_scaled->rssi);
}
# 333 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint32_t mavlink_msg_rc_channels_scaled_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_scaled_get_port(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan1_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan2_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan3_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan4_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan5_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan6_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan7_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan8_scaled(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline uint8_t mavlink_msg_rc_channels_scaled_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_rc_channels_scaled_decode(const mavlink_message_t* msg, mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
# 459 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(rc_channels_scaled, 0, 22);
    memcpy(rc_channels_scaled, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1025 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h" 1
       


#define MAVLINK_MSG_ID_RC_CHANNELS_RAW 35

typedef struct __mavlink_rc_channels_raw_t { uint32_t time_boot_ms; uint16_t chan1_raw; uint16_t chan2_raw; uint16_t chan3_raw; uint16_t chan4_raw; uint16_t chan5_raw; uint16_t chan6_raw; uint16_t chan7_raw; uint16_t chan8_raw; uint8_t port; uint8_t rssi; } __attribute__((packed))
# 19 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
   mavlink_rc_channels_raw_t;

#define MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN 22
#define MAVLINK_MSG_ID_RC_CHANNELS_RAW_MIN_LEN 22
#define MAVLINK_MSG_ID_35_LEN 22
#define MAVLINK_MSG_ID_35_MIN_LEN 22

#define MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC 244
#define MAVLINK_MSG_ID_35_CRC 244
# 50 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
#define MAVLINK_MESSAGE_INFO_RC_CHANNELS_RAW { "RC_CHANNELS_RAW", 11, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_rc_channels_raw_t, time_boot_ms) }, { "chan1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_rc_channels_raw_t, chan1_raw) }, { "chan2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_rc_channels_raw_t, chan2_raw) }, { "chan3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_rc_channels_raw_t, chan3_raw) }, { "chan4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_rc_channels_raw_t, chan4_raw) }, { "chan5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_rc_channels_raw_t, chan5_raw) }, { "chan6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_rc_channels_raw_t, chan6_raw) }, { "chan7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_rc_channels_raw_t, chan7_raw) }, { "chan8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_rc_channels_raw_t, chan8_raw) }, { "port", NULL, MAVLINK_TYPE_UINT8_T, 0, 20, offsetof(mavlink_rc_channels_raw_t, port) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 21, offsetof(mavlink_rc_channels_raw_t, rssi) }, } }
# 87 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
    mavlink_rc_channels_raw_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.port = port;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 35;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 244);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t port,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint8_t rssi)
{
# 165 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
    mavlink_rc_channels_raw_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.port = port;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 35;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 244);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_raw_t* rc_channels_raw)
{
    return mavlink_msg_rc_channels_raw_pack(system_id, component_id, msg, rc_channels_raw->time_boot_ms, rc_channels_raw->port, rc_channels_raw->chan1_raw, rc_channels_raw->chan2_raw, rc_channels_raw->chan3_raw, rc_channels_raw->chan4_raw, rc_channels_raw->chan5_raw, rc_channels_raw->chan6_raw, rc_channels_raw->chan7_raw, rc_channels_raw->chan8_raw, rc_channels_raw->rssi);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_raw_t* rc_channels_raw)
{
    return mavlink_msg_rc_channels_raw_pack_chan(system_id, component_id, chan, msg, rc_channels_raw->time_boot_ms, rc_channels_raw->port, rc_channels_raw->chan1_raw, rc_channels_raw->chan2_raw, rc_channels_raw->chan3_raw, rc_channels_raw->chan4_raw, rc_channels_raw->chan5_raw, rc_channels_raw->chan6_raw, rc_channels_raw->chan7_raw, rc_channels_raw->chan8_raw, rc_channels_raw->rssi);
}
# 333 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint32_t mavlink_msg_rc_channels_raw_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_raw_get_port(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint8_t mavlink_msg_rc_channels_raw_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_rc_channels_raw_decode(const mavlink_message_t* msg, mavlink_rc_channels_raw_t* rc_channels_raw)
{
# 459 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(rc_channels_raw, 0, 22);
    memcpy(rc_channels_raw, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1026 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h" 1
       


#define MAVLINK_MSG_ID_SERVO_OUTPUT_RAW 36

typedef struct __mavlink_servo_output_raw_t { uint32_t time_usec; uint16_t servo1_raw; uint16_t servo2_raw; uint16_t servo3_raw; uint16_t servo4_raw; uint16_t servo5_raw; uint16_t servo6_raw; uint16_t servo7_raw; uint16_t servo8_raw; uint8_t port; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
   mavlink_servo_output_raw_t;

#define MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN 21
#define MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_MIN_LEN 21
#define MAVLINK_MSG_ID_36_LEN 21
#define MAVLINK_MSG_ID_36_MIN_LEN 21

#define MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC 222
#define MAVLINK_MSG_ID_36_CRC 222
# 48 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
#define MAVLINK_MESSAGE_INFO_SERVO_OUTPUT_RAW { "SERVO_OUTPUT_RAW", 10, { { "time_usec", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_servo_output_raw_t, time_usec) }, { "servo1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_servo_output_raw_t, servo1_raw) }, { "servo2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_servo_output_raw_t, servo2_raw) }, { "servo3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_servo_output_raw_t, servo3_raw) }, { "servo4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_servo_output_raw_t, servo4_raw) }, { "servo5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_servo_output_raw_t, servo5_raw) }, { "servo6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_servo_output_raw_t, servo6_raw) }, { "servo7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_servo_output_raw_t, servo7_raw) }, { "servo8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_servo_output_raw_t, servo8_raw) }, { "port", NULL, MAVLINK_TYPE_UINT8_T, 0, 20, offsetof(mavlink_servo_output_raw_t, port) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
    mavlink_servo_output_raw_t packet;
    packet.time_usec = time_usec;
    packet.servo1_raw = servo1_raw;
    packet.servo2_raw = servo2_raw;
    packet.servo3_raw = servo3_raw;
    packet.servo4_raw = servo4_raw;
    packet.servo5_raw = servo5_raw;
    packet.servo6_raw = servo6_raw;
    packet.servo7_raw = servo7_raw;
    packet.servo8_raw = servo8_raw;
    packet.port = port;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 21);


    msg->msgid = 36;
    return mavlink_finalize_message(msg, system_id, component_id, 21, 21, 222);
}
# 138 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_usec,uint8_t port,uint16_t servo1_raw,uint16_t servo2_raw,uint16_t servo3_raw,uint16_t servo4_raw,uint16_t servo5_raw,uint16_t servo6_raw,uint16_t servo7_raw,uint16_t servo8_raw)
{
# 157 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
    mavlink_servo_output_raw_t packet;
    packet.time_usec = time_usec;
    packet.servo1_raw = servo1_raw;
    packet.servo2_raw = servo2_raw;
    packet.servo3_raw = servo3_raw;
    packet.servo4_raw = servo4_raw;
    packet.servo5_raw = servo5_raw;
    packet.servo6_raw = servo6_raw;
    packet.servo7_raw = servo7_raw;
    packet.servo8_raw = servo8_raw;
    packet.port = port;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 21);


    msg->msgid = 36;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 21, 21, 222);
}
# 184 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_servo_output_raw_t* servo_output_raw)
{
    return mavlink_msg_servo_output_raw_pack(system_id, component_id, msg, servo_output_raw->time_usec, servo_output_raw->port, servo_output_raw->servo1_raw, servo_output_raw->servo2_raw, servo_output_raw->servo3_raw, servo_output_raw->servo4_raw, servo_output_raw->servo5_raw, servo_output_raw->servo6_raw, servo_output_raw->servo7_raw, servo_output_raw->servo8_raw);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_servo_output_raw_t* servo_output_raw)
{
    return mavlink_msg_servo_output_raw_pack_chan(system_id, component_id, chan, msg, servo_output_raw->time_usec, servo_output_raw->port, servo_output_raw->servo1_raw, servo_output_raw->servo2_raw, servo_output_raw->servo3_raw, servo_output_raw->servo4_raw, servo_output_raw->servo5_raw, servo_output_raw->servo6_raw, servo_output_raw->servo7_raw, servo_output_raw->servo8_raw);
}
# 319 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint32_t mavlink_msg_servo_output_raw_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_servo_output_raw_get_port(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}







static inline void mavlink_msg_servo_output_raw_decode(const mavlink_message_t* msg, mavlink_servo_output_raw_t* servo_output_raw)
{
# 434 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
        uint8_t len = msg->len < 21? msg->len : 21;
        memset(servo_output_raw, 0, 21);
    memcpy(servo_output_raw, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1027 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h" 1
       


#define MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST 37

typedef struct __mavlink_mission_request_partial_list_t { int16_t start_index; int16_t end_index; uint8_t target_system; uint8_t target_component; } __attribute__((packed))





   mavlink_mission_request_partial_list_t;

#define MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST_LEN 6
#define MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST_MIN_LEN 6
#define MAVLINK_MSG_ID_37_LEN 6
#define MAVLINK_MSG_ID_37_MIN_LEN 6

#define MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST_CRC 212
#define MAVLINK_MSG_ID_37_CRC 212
# 36 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
#define MAVLINK_MESSAGE_INFO_MISSION_REQUEST_PARTIAL_LIST { "MISSION_REQUEST_PARTIAL_LIST", 4, { { "start_index", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_mission_request_partial_list_t, start_index) }, { "end_index", NULL, MAVLINK_TYPE_INT16_T, 0, 2, offsetof(mavlink_mission_request_partial_list_t, end_index) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_mission_request_partial_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_mission_request_partial_list_t, target_component) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
    mavlink_mission_request_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 37;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 212);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,int16_t start_index,int16_t end_index)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
    mavlink_mission_request_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 37;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 212);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{
    return mavlink_msg_mission_request_partial_list_pack(system_id, component_id, msg, mission_request_partial_list->target_system, mission_request_partial_list->target_component, mission_request_partial_list->start_index, mission_request_partial_list->end_index);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{
    return mavlink_msg_mission_request_partial_list_pack_chan(system_id, component_id, chan, msg, mission_request_partial_list->target_system, mission_request_partial_list->target_component, mission_request_partial_list->start_index, mission_request_partial_list->end_index);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint8_t mavlink_msg_mission_request_partial_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mission_request_partial_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline int16_t mavlink_msg_mission_request_partial_list_get_start_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_mission_request_partial_list_get_end_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}







static inline void mavlink_msg_mission_request_partial_list_decode(const mavlink_message_t* msg, mavlink_mission_request_partial_list_t* mission_request_partial_list)
{






        uint8_t len = msg->len < 6? msg->len : 6;
        memset(mission_request_partial_list, 0, 6);
    memcpy(mission_request_partial_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1028 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h" 1
       


#define MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST 38

typedef struct __mavlink_mission_write_partial_list_t { int16_t start_index; int16_t end_index; uint8_t target_system; uint8_t target_component; } __attribute__((packed))





   mavlink_mission_write_partial_list_t;

#define MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST_LEN 6
#define MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST_MIN_LEN 6
#define MAVLINK_MSG_ID_38_LEN 6
#define MAVLINK_MSG_ID_38_MIN_LEN 6

#define MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST_CRC 9
#define MAVLINK_MSG_ID_38_CRC 9
# 36 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
#define MAVLINK_MESSAGE_INFO_MISSION_WRITE_PARTIAL_LIST { "MISSION_WRITE_PARTIAL_LIST", 4, { { "start_index", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_mission_write_partial_list_t, start_index) }, { "end_index", NULL, MAVLINK_TYPE_INT16_T, 0, 2, offsetof(mavlink_mission_write_partial_list_t, end_index) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_mission_write_partial_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_mission_write_partial_list_t, target_component) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
    mavlink_mission_write_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 38;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 9);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,int16_t start_index,int16_t end_index)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
    mavlink_mission_write_partial_list_t packet;
    packet.start_index = start_index;
    packet.end_index = end_index;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 38;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 9);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{
    return mavlink_msg_mission_write_partial_list_pack(system_id, component_id, msg, mission_write_partial_list->target_system, mission_write_partial_list->target_component, mission_write_partial_list->start_index, mission_write_partial_list->end_index);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{
    return mavlink_msg_mission_write_partial_list_pack_chan(system_id, component_id, chan, msg, mission_write_partial_list->target_system, mission_write_partial_list->target_component, mission_write_partial_list->start_index, mission_write_partial_list->end_index);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint8_t mavlink_msg_mission_write_partial_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mission_write_partial_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline int16_t mavlink_msg_mission_write_partial_list_get_start_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_mission_write_partial_list_get_end_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}







static inline void mavlink_msg_mission_write_partial_list_decode(const mavlink_message_t* msg, mavlink_mission_write_partial_list_t* mission_write_partial_list)
{






        uint8_t len = msg->len < 6? msg->len : 6;
        memset(mission_write_partial_list, 0, 6);
    memcpy(mission_write_partial_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1029 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h" 1
       


#define MAVLINK_MSG_ID_MISSION_ITEM 39

typedef struct __mavlink_mission_item_t { float param1; float param2; float param3; float param4; float x; float y; float z; uint16_t seq; uint16_t command; uint8_t target_system; uint8_t target_component; uint8_t frame; uint8_t current; uint8_t autocontinue; } __attribute__((packed))
# 22 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
   mavlink_mission_item_t;

#define MAVLINK_MSG_ID_MISSION_ITEM_LEN 37
#define MAVLINK_MSG_ID_MISSION_ITEM_MIN_LEN 37
#define MAVLINK_MSG_ID_39_LEN 37
#define MAVLINK_MSG_ID_39_MIN_LEN 37

#define MAVLINK_MSG_ID_MISSION_ITEM_CRC 254
#define MAVLINK_MSG_ID_39_CRC 254
# 56 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
#define MAVLINK_MESSAGE_INFO_MISSION_ITEM { "MISSION_ITEM", 14, { { "param1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_mission_item_t, param1) }, { "param2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_mission_item_t, param2) }, { "param3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_mission_item_t, param3) }, { "param4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_mission_item_t, param4) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_mission_item_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_mission_item_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_mission_item_t, z) }, { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_mission_item_t, seq) }, { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_mission_item_t, command) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_mission_item_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_mission_item_t, target_component) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_mission_item_t, frame) }, { "current", NULL, MAVLINK_TYPE_UINT8_T, 0, 35, offsetof(mavlink_mission_item_t, current) }, { "autocontinue", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_mission_item_t, autocontinue) }, } }
# 99 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
    mavlink_mission_item_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 39;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 37, 254);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,float x,float y,float z)
{
# 189 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
    mavlink_mission_item_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 39;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 37, 254);
}
# 220 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_t* mission_item)
{
    return mavlink_msg_mission_item_pack(system_id, component_id, msg, mission_item->target_system, mission_item->target_component, mission_item->seq, mission_item->frame, mission_item->command, mission_item->current, mission_item->autocontinue, mission_item->param1, mission_item->param2, mission_item->param3, mission_item->param4, mission_item->x, mission_item->y, mission_item->z);
}
# 234 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_t* mission_item)
{
    return mavlink_msg_mission_item_pack_chan(system_id, component_id, chan, msg, mission_item->target_system, mission_item->target_component, mission_item->seq, mission_item->frame, mission_item->command, mission_item->current, mission_item->autocontinue, mission_item->param1, mission_item->param2, mission_item->param3, mission_item->param4, mission_item->x, mission_item->y, mission_item->z);
}
# 375 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
# 534 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
        uint8_t len = msg->len < 37? msg->len : 37;
        memset(mission_item, 0, 37);
    memcpy(mission_item, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1030 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h" 1
       


#define MAVLINK_MSG_ID_MISSION_REQUEST 40

typedef struct __mavlink_mission_request_t { uint16_t seq; uint8_t target_system; uint8_t target_component; } __attribute__((packed))




   mavlink_mission_request_t;

#define MAVLINK_MSG_ID_MISSION_REQUEST_LEN 4
#define MAVLINK_MSG_ID_MISSION_REQUEST_MIN_LEN 4
#define MAVLINK_MSG_ID_40_LEN 4
#define MAVLINK_MSG_ID_40_MIN_LEN 4

#define MAVLINK_MSG_ID_MISSION_REQUEST_CRC 230
#define MAVLINK_MSG_ID_40_CRC 230
# 34 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
#define MAVLINK_MESSAGE_INFO_MISSION_REQUEST { "MISSION_REQUEST", 3, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_request_t, seq) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_request_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_mission_request_t, target_component) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
    mavlink_mission_request_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 40;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 230);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
    mavlink_mission_request_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 40;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 230);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_t* mission_request)
{
    return mavlink_msg_mission_request_pack(system_id, component_id, msg, mission_request->target_system, mission_request->target_component, mission_request->seq);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_t* mission_request)
{
    return mavlink_msg_mission_request_pack_chan(system_id, component_id, chan, msg, mission_request->target_system, mission_request->target_component, mission_request->seq);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{





        uint8_t len = msg->len < 4? msg->len : 4;
        memset(mission_request, 0, 4);
    memcpy(mission_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1031 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h" 1
       


#define MAVLINK_MSG_ID_MISSION_SET_CURRENT 41

typedef struct __mavlink_mission_set_current_t { uint16_t seq; uint8_t target_system; uint8_t target_component; } __attribute__((packed))




   mavlink_mission_set_current_t;

#define MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN 4
#define MAVLINK_MSG_ID_MISSION_SET_CURRENT_MIN_LEN 4
#define MAVLINK_MSG_ID_41_LEN 4
#define MAVLINK_MSG_ID_41_MIN_LEN 4

#define MAVLINK_MSG_ID_MISSION_SET_CURRENT_CRC 28
#define MAVLINK_MSG_ID_41_CRC 28
# 34 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
#define MAVLINK_MESSAGE_INFO_MISSION_SET_CURRENT { "MISSION_SET_CURRENT", 3, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_set_current_t, seq) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_set_current_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_mission_set_current_t, target_component) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
    mavlink_mission_set_current_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 41;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 28);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
    mavlink_mission_set_current_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 41;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 28);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_set_current_t* mission_set_current)
{
    return mavlink_msg_mission_set_current_pack(system_id, component_id, msg, mission_set_current->target_system, mission_set_current->target_component, mission_set_current->seq);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_set_current_t* mission_set_current)
{
    return mavlink_msg_mission_set_current_pack_chan(system_id, component_id, chan, msg, mission_set_current->target_system, mission_set_current->target_component, mission_set_current->seq);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{





        uint8_t len = msg->len < 4? msg->len : 4;
        memset(mission_set_current, 0, 4);
    memcpy(mission_set_current, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1032 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h" 1
       


#define MAVLINK_MSG_ID_MISSION_CURRENT 42

typedef struct __mavlink_mission_current_t { uint16_t seq; } __attribute__((packed))


   mavlink_mission_current_t;

#define MAVLINK_MSG_ID_MISSION_CURRENT_LEN 2
#define MAVLINK_MSG_ID_MISSION_CURRENT_MIN_LEN 2
#define MAVLINK_MSG_ID_42_LEN 2
#define MAVLINK_MSG_ID_42_MIN_LEN 2

#define MAVLINK_MSG_ID_MISSION_CURRENT_CRC 28
#define MAVLINK_MSG_ID_42_CRC 28
# 30 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
#define MAVLINK_MESSAGE_INFO_MISSION_CURRENT { "MISSION_CURRENT", 1, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_current_t, seq) }, } }
# 47 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t seq)
{






    mavlink_mission_current_t packet;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 42;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 28);
}
# 75 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t seq)
{






    mavlink_mission_current_t packet;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 42;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 28);
}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_current_t* mission_current)
{
    return mavlink_msg_mission_current_pack(system_id, component_id, msg, mission_current->seq);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_current_t* mission_current)
{
    return mavlink_msg_mission_current_pack_chan(system_id, component_id, chan, msg, mission_current->seq);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_current_decode(const mavlink_message_t* msg, mavlink_mission_current_t* mission_current)
{



        uint8_t len = msg->len < 2? msg->len : 2;
        memset(mission_current, 0, 2);
    memcpy(mission_current, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1033 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h" 1
       


#define MAVLINK_MSG_ID_MISSION_REQUEST_LIST 43

typedef struct __mavlink_mission_request_list_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_mission_request_list_t;

#define MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN 2
#define MAVLINK_MSG_ID_MISSION_REQUEST_LIST_MIN_LEN 2
#define MAVLINK_MSG_ID_43_LEN 2
#define MAVLINK_MSG_ID_43_MIN_LEN 2

#define MAVLINK_MSG_ID_MISSION_REQUEST_LIST_CRC 132
#define MAVLINK_MSG_ID_43_CRC 132
# 32 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
#define MAVLINK_MESSAGE_INFO_MISSION_REQUEST_LIST { "MISSION_REQUEST_LIST", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_mission_request_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_mission_request_list_t, target_component) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_mission_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 43;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 132);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_mission_request_list_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 43;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 132);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_list_t* mission_request_list)
{
    return mavlink_msg_mission_request_list_pack(system_id, component_id, msg, mission_request_list->target_system, mission_request_list->target_component);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_list_t* mission_request_list)
{
    return mavlink_msg_mission_request_list_pack_chan(system_id, component_id, chan, msg, mission_request_list->target_system, mission_request_list->target_component);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(mission_request_list, 0, 2);
    memcpy(mission_request_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1034 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h" 1
       


#define MAVLINK_MSG_ID_MISSION_COUNT 44

typedef struct __mavlink_mission_count_t { uint16_t count; uint8_t target_system; uint8_t target_component; } __attribute__((packed))




   mavlink_mission_count_t;

#define MAVLINK_MSG_ID_MISSION_COUNT_LEN 4
#define MAVLINK_MSG_ID_MISSION_COUNT_MIN_LEN 4
#define MAVLINK_MSG_ID_44_LEN 4
#define MAVLINK_MSG_ID_44_MIN_LEN 4

#define MAVLINK_MSG_ID_MISSION_COUNT_CRC 221
#define MAVLINK_MSG_ID_44_CRC 221
# 34 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
#define MAVLINK_MESSAGE_INFO_MISSION_COUNT { "MISSION_COUNT", 3, { { "count", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_count_t, count) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_count_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_mission_count_t, target_component) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t count)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
    mavlink_mission_count_t packet;
    packet.count = count;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 44;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 221);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t count)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
    mavlink_mission_count_t packet;
    packet.count = count;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 44;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 221);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_count_t* mission_count)
{
    return mavlink_msg_mission_count_pack(system_id, component_id, msg, mission_count->target_system, mission_count->target_component, mission_count->count);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_count_t* mission_count)
{
    return mavlink_msg_mission_count_pack_chan(system_id, component_id, chan, msg, mission_count->target_system, mission_count->target_component, mission_count->count);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{





        uint8_t len = msg->len < 4? msg->len : 4;
        memset(mission_count, 0, 4);
    memcpy(mission_count, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1035 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h" 1
       


#define MAVLINK_MSG_ID_MISSION_CLEAR_ALL 45

typedef struct __mavlink_mission_clear_all_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_mission_clear_all_t;

#define MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN 2
#define MAVLINK_MSG_ID_MISSION_CLEAR_ALL_MIN_LEN 2
#define MAVLINK_MSG_ID_45_LEN 2
#define MAVLINK_MSG_ID_45_MIN_LEN 2

#define MAVLINK_MSG_ID_MISSION_CLEAR_ALL_CRC 232
#define MAVLINK_MSG_ID_45_CRC 232
# 32 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
#define MAVLINK_MESSAGE_INFO_MISSION_CLEAR_ALL { "MISSION_CLEAR_ALL", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_mission_clear_all_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_mission_clear_all_t, target_component) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_mission_clear_all_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 45;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 232);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_mission_clear_all_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 45;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 232);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_clear_all_t* mission_clear_all)
{
    return mavlink_msg_mission_clear_all_pack(system_id, component_id, msg, mission_clear_all->target_system, mission_clear_all->target_component);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_clear_all_t* mission_clear_all)
{
    return mavlink_msg_mission_clear_all_pack_chan(system_id, component_id, chan, msg, mission_clear_all->target_system, mission_clear_all->target_component);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(mission_clear_all, 0, 2);
    memcpy(mission_clear_all, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1036 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h" 1
       


#define MAVLINK_MSG_ID_MISSION_ITEM_REACHED 46

typedef struct __mavlink_mission_item_reached_t { uint16_t seq; } __attribute__((packed))


   mavlink_mission_item_reached_t;

#define MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN 2
#define MAVLINK_MSG_ID_MISSION_ITEM_REACHED_MIN_LEN 2
#define MAVLINK_MSG_ID_46_LEN 2
#define MAVLINK_MSG_ID_46_MIN_LEN 2

#define MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC 11
#define MAVLINK_MSG_ID_46_CRC 11
# 30 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
#define MAVLINK_MESSAGE_INFO_MISSION_ITEM_REACHED { "MISSION_ITEM_REACHED", 1, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_item_reached_t, seq) }, } }
# 47 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t seq)
{






    mavlink_mission_item_reached_t packet;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 46;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 11);
}
# 75 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t seq)
{






    mavlink_mission_item_reached_t packet;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 46;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 11);
}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_reached_t* mission_item_reached)
{
    return mavlink_msg_mission_item_reached_pack(system_id, component_id, msg, mission_item_reached->seq);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_reached_t* mission_item_reached)
{
    return mavlink_msg_mission_item_reached_pack_chan(system_id, component_id, chan, msg, mission_item_reached->seq);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_item_reached_decode(const mavlink_message_t* msg, mavlink_mission_item_reached_t* mission_item_reached)
{



        uint8_t len = msg->len < 2? msg->len : 2;
        memset(mission_item_reached, 0, 2);
    memcpy(mission_item_reached, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1037 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h" 1
       


#define MAVLINK_MSG_ID_MISSION_ACK 47

typedef struct __mavlink_mission_ack_t { uint8_t target_system; uint8_t target_component; uint8_t type; } __attribute__((packed))




   mavlink_mission_ack_t;

#define MAVLINK_MSG_ID_MISSION_ACK_LEN 3
#define MAVLINK_MSG_ID_MISSION_ACK_MIN_LEN 3
#define MAVLINK_MSG_ID_47_LEN 3
#define MAVLINK_MSG_ID_47_MIN_LEN 3

#define MAVLINK_MSG_ID_MISSION_ACK_CRC 153
#define MAVLINK_MSG_ID_47_CRC 153
# 34 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
#define MAVLINK_MESSAGE_INFO_MISSION_ACK { "MISSION_ACK", 3, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_mission_ack_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_mission_ack_t, target_component) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_ack_t, type) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t type)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
    mavlink_mission_ack_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type = type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 47;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 153);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t type)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
    mavlink_mission_ack_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type = type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 47;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 153);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_ack_t* mission_ack)
{
    return mavlink_msg_mission_ack_pack(system_id, component_id, msg, mission_ack->target_system, mission_ack->target_component, mission_ack->type);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_ack_t* mission_ack)
{
    return mavlink_msg_mission_ack_pack_chan(system_id, component_id, chan, msg, mission_ack->target_system, mission_ack->target_component, mission_ack->type);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{





        uint8_t len = msg->len < 3? msg->len : 3;
        memset(mission_ack, 0, 3);
    memcpy(mission_ack, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1038 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h" 1
       


#define MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN 48

typedef struct __mavlink_set_gps_global_origin_t { int32_t latitude; int32_t longitude; int32_t altitude; uint8_t target_system; } __attribute__((packed))





   mavlink_set_gps_global_origin_t;

#define MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN_LEN 13
#define MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN_MIN_LEN 13
#define MAVLINK_MSG_ID_48_LEN 13
#define MAVLINK_MSG_ID_48_MIN_LEN 13

#define MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN_CRC 41
#define MAVLINK_MSG_ID_48_CRC 41
# 36 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
#define MAVLINK_MESSAGE_INFO_SET_GPS_GLOBAL_ORIGIN { "SET_GPS_GLOBAL_ORIGIN", 4, { { "latitude", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_set_gps_global_origin_t, latitude) }, { "longitude", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_set_gps_global_origin_t, longitude) }, { "altitude", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_set_gps_global_origin_t, altitude) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_set_gps_global_origin_t, target_system) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
    mavlink_set_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.target_system = target_system;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 48;
    return mavlink_finalize_message(msg, system_id, component_id, 13, 13, 41);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,int32_t latitude,int32_t longitude,int32_t altitude)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
    mavlink_set_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.target_system = target_system;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 48;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 13, 41);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{
    return mavlink_msg_set_gps_global_origin_pack(system_id, component_id, msg, set_gps_global_origin->target_system, set_gps_global_origin->latitude, set_gps_global_origin->longitude, set_gps_global_origin->altitude);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{
    return mavlink_msg_set_gps_global_origin_pack_chan(system_id, component_id, chan, msg, set_gps_global_origin->target_system, set_gps_global_origin->latitude, set_gps_global_origin->longitude, set_gps_global_origin->altitude);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint8_t mavlink_msg_set_gps_global_origin_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_set_gps_global_origin_decode(const mavlink_message_t* msg, mavlink_set_gps_global_origin_t* set_gps_global_origin)
{






        uint8_t len = msg->len < 13? msg->len : 13;
        memset(set_gps_global_origin, 0, 13);
    memcpy(set_gps_global_origin, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1039 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h" 1
       


#define MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN 49

typedef struct __mavlink_gps_global_origin_t { int32_t latitude; int32_t longitude; int32_t altitude; } __attribute__((packed))




   mavlink_gps_global_origin_t;

#define MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN_LEN 12
#define MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN_MIN_LEN 12
#define MAVLINK_MSG_ID_49_LEN 12
#define MAVLINK_MSG_ID_49_MIN_LEN 12

#define MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN_CRC 39
#define MAVLINK_MSG_ID_49_CRC 39
# 34 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
#define MAVLINK_MESSAGE_INFO_GPS_GLOBAL_ORIGIN { "GPS_GLOBAL_ORIGIN", 3, { { "latitude", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_gps_global_origin_t, latitude) }, { "longitude", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_gps_global_origin_t, longitude) }, { "altitude", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps_global_origin_t, altitude) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t latitude, int32_t longitude, int32_t altitude)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
    mavlink_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 49;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 39);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t latitude,int32_t longitude,int32_t altitude)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
    mavlink_gps_global_origin_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 49;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 39);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_global_origin_t* gps_global_origin)
{
    return mavlink_msg_gps_global_origin_pack(system_id, component_id, msg, gps_global_origin->latitude, gps_global_origin->longitude, gps_global_origin->altitude);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_global_origin_t* gps_global_origin)
{
    return mavlink_msg_gps_global_origin_pack_chan(system_id, component_id, chan, msg, gps_global_origin->latitude, gps_global_origin->longitude, gps_global_origin->altitude);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline int32_t mavlink_msg_gps_global_origin_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_gps_global_origin_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_gps_global_origin_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_gps_global_origin_decode(const mavlink_message_t* msg, mavlink_gps_global_origin_t* gps_global_origin)
{





        uint8_t len = msg->len < 12? msg->len : 12;
        memset(gps_global_origin, 0, 12);
    memcpy(gps_global_origin, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1040 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h" 1
       


#define MAVLINK_MSG_ID_PARAM_MAP_RC 50

typedef struct __mavlink_param_map_rc_t { float param_value0; float scale; float param_value_min; float param_value_max; int16_t param_index; uint8_t target_system; uint8_t target_component; char param_id[16]; uint8_t parameter_rc_channel_index; } __attribute__((packed))
# 17 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
   mavlink_param_map_rc_t;

#define MAVLINK_MSG_ID_PARAM_MAP_RC_LEN 37
#define MAVLINK_MSG_ID_PARAM_MAP_RC_MIN_LEN 37
#define MAVLINK_MSG_ID_50_LEN 37
#define MAVLINK_MSG_ID_50_MIN_LEN 37

#define MAVLINK_MSG_ID_PARAM_MAP_RC_CRC 78
#define MAVLINK_MSG_ID_50_CRC 78

#define MAVLINK_MSG_PARAM_MAP_RC_FIELD_PARAM_ID_LEN 16
# 46 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
#define MAVLINK_MESSAGE_INFO_PARAM_MAP_RC { "PARAM_MAP_RC", 9, { { "param_value0", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_param_map_rc_t, param_value0) }, { "scale", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_param_map_rc_t, scale) }, { "param_value_min", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_param_map_rc_t, param_value_min) }, { "param_value_max", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_param_map_rc_t, param_value_max) }, { "param_index", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_param_map_rc_t, param_index) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 18, offsetof(mavlink_param_map_rc_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 19, offsetof(mavlink_param_map_rc_t, target_component) }, { "param_id", NULL, MAVLINK_TYPE_CHAR, 16, 20, offsetof(mavlink_param_map_rc_t, param_id) }, { "parameter_rc_channel_index", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_param_map_rc_t, parameter_rc_channel_index) }, } }
# 79 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index, uint8_t parameter_rc_channel_index, float param_value0, float scale, float param_value_min, float param_value_max)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
    mavlink_param_map_rc_t packet;
    packet.param_value0 = param_value0;
    packet.scale = scale;
    packet.param_value_min = param_value_min;
    packet.param_value_max = param_value_max;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.parameter_rc_channel_index = parameter_rc_channel_index;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 50;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 37, 78);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,const char *param_id,int16_t param_index,uint8_t parameter_rc_channel_index,float param_value0,float scale,float param_value_min,float param_value_max)
{
# 146 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
    mavlink_param_map_rc_t packet;
    packet.param_value0 = param_value0;
    packet.scale = scale;
    packet.param_value_min = param_value_min;
    packet.param_value_max = param_value_max;
    packet.param_index = param_index;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.parameter_rc_channel_index = parameter_rc_channel_index;
    mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 50;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 37, 78);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_map_rc_t* param_map_rc)
{
    return mavlink_msg_param_map_rc_pack(system_id, component_id, msg, param_map_rc->target_system, param_map_rc->target_component, param_map_rc->param_id, param_map_rc->param_index, param_map_rc->parameter_rc_channel_index, param_map_rc->param_value0, param_map_rc->scale, param_map_rc->param_value_min, param_map_rc->param_value_max);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_map_rc_t* param_map_rc)
{
    return mavlink_msg_param_map_rc_pack_chan(system_id, component_id, chan, msg, param_map_rc->target_system, param_map_rc->target_component, param_map_rc->param_id, param_map_rc->param_index, param_map_rc->parameter_rc_channel_index, param_map_rc->param_value0, param_map_rc->scale, param_map_rc->param_value_min, param_map_rc->param_value_max);
}
# 297 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint8_t mavlink_msg_param_map_rc_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}






static inline uint8_t mavlink_msg_param_map_rc_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[19];
}






static inline uint16_t mavlink_msg_param_map_rc_get_param_id(const mavlink_message_t* msg, char *param_id)
{
    return _MAV_RETURN_char_array(msg, param_id, 16, 20);
}






static inline int16_t mavlink_msg_param_map_rc_get_param_index(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline uint8_t mavlink_msg_param_map_rc_get_parameter_rc_channel_index(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_param_map_rc_get_param_value0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_param_map_rc_get_scale(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_param_map_rc_get_param_value_min(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_param_map_rc_get_param_value_max(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_param_map_rc_decode(const mavlink_message_t* msg, mavlink_param_map_rc_t* param_map_rc)
{
# 401 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
        uint8_t len = msg->len < 37? msg->len : 37;
        memset(param_map_rc, 0, 37);
    memcpy(param_map_rc, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1041 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h" 1
       


#define MAVLINK_MSG_ID_MISSION_REQUEST_INT 51

typedef struct __mavlink_mission_request_int_t { uint16_t seq; uint8_t target_system; uint8_t target_component; } __attribute__((packed))




   mavlink_mission_request_int_t;

#define MAVLINK_MSG_ID_MISSION_REQUEST_INT_LEN 4
#define MAVLINK_MSG_ID_MISSION_REQUEST_INT_MIN_LEN 4
#define MAVLINK_MSG_ID_51_LEN 4
#define MAVLINK_MSG_ID_51_MIN_LEN 4

#define MAVLINK_MSG_ID_MISSION_REQUEST_INT_CRC 196
#define MAVLINK_MSG_ID_51_CRC 196
# 34 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h"
#define MAVLINK_MESSAGE_INFO_MISSION_REQUEST_INT { "MISSION_REQUEST_INT", 3, { { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_mission_request_int_t, seq) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_mission_request_int_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_mission_request_int_t, target_component) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h"
static inline uint16_t mavlink_msg_mission_request_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h"
    mavlink_mission_request_int_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 51;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 196);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h"
static inline uint16_t mavlink_msg_mission_request_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h"
    mavlink_mission_request_int_t packet;
    packet.seq = seq;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 51;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 196);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h"
static inline uint16_t mavlink_msg_mission_request_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_int_t* mission_request_int)
{
    return mavlink_msg_mission_request_int_pack(system_id, component_id, msg, mission_request_int->target_system, mission_request_int->target_component, mission_request_int->seq);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h"
static inline uint16_t mavlink_msg_mission_request_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_int_t* mission_request_int)
{
    return mavlink_msg_mission_request_int_pack_chan(system_id, component_id, chan, msg, mission_request_int->target_system, mission_request_int->target_component, mission_request_int->seq);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_int.h"
static inline uint8_t mavlink_msg_mission_request_int_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_request_int_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_request_int_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_request_int_decode(const mavlink_message_t* msg, mavlink_mission_request_int_t* mission_request_int)
{





        uint8_t len = msg->len < 4? msg->len : 4;
        memset(mission_request_int, 0, 4);
    memcpy(mission_request_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1042 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h" 1
       


#define MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA 54

typedef struct __mavlink_safety_set_allowed_area_t { float p1x; float p1y; float p1z; float p2x; float p2y; float p2z; uint8_t target_system; uint8_t target_component; uint8_t frame; } __attribute__((packed))
# 17 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
   mavlink_safety_set_allowed_area_t;

#define MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA_LEN 27
#define MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA_MIN_LEN 27
#define MAVLINK_MSG_ID_54_LEN 27
#define MAVLINK_MSG_ID_54_MIN_LEN 27

#define MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA_CRC 15
#define MAVLINK_MSG_ID_54_CRC 15
# 46 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
#define MAVLINK_MESSAGE_INFO_SAFETY_SET_ALLOWED_AREA { "SAFETY_SET_ALLOWED_AREA", 9, { { "p1x", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_safety_set_allowed_area_t, p1x) }, { "p1y", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_safety_set_allowed_area_t, p1y) }, { "p1z", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_safety_set_allowed_area_t, p1z) }, { "p2x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_safety_set_allowed_area_t, p2x) }, { "p2y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_safety_set_allowed_area_t, p2y) }, { "p2z", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_safety_set_allowed_area_t, p2z) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 24, offsetof(mavlink_safety_set_allowed_area_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 25, offsetof(mavlink_safety_set_allowed_area_t, target_component) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 26, offsetof(mavlink_safety_set_allowed_area_t, frame) }, } }
# 79 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 96 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
    mavlink_safety_set_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


    msg->msgid = 54;
    return mavlink_finalize_message(msg, system_id, component_id, 27, 27, 15);
}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t frame,float p1x,float p1y,float p1z,float p2x,float p2y,float p2z)
{
# 149 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
    mavlink_safety_set_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


    msg->msgid = 54;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 27, 27, 15);
}
# 175 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
    return mavlink_msg_safety_set_allowed_area_pack(system_id, component_id, msg, safety_set_allowed_area->target_system, safety_set_allowed_area->target_component, safety_set_allowed_area->frame, safety_set_allowed_area->p1x, safety_set_allowed_area->p1y, safety_set_allowed_area->p1z, safety_set_allowed_area->p2x, safety_set_allowed_area->p2y, safety_set_allowed_area->p2z);
}
# 189 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
    return mavlink_msg_safety_set_allowed_area_pack_chan(system_id, component_id, chan, msg, safety_set_allowed_area->target_system, safety_set_allowed_area->target_component, safety_set_allowed_area->frame, safety_set_allowed_area->p1x, safety_set_allowed_area->p1y, safety_set_allowed_area->p1z, safety_set_allowed_area->p2x, safety_set_allowed_area->p2y, safety_set_allowed_area->p2z);
}
# 305 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint8_t mavlink_msg_safety_set_allowed_area_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint8_t mavlink_msg_safety_set_allowed_area_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline uint8_t mavlink_msg_safety_set_allowed_area_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_safety_set_allowed_area_decode(const mavlink_message_t* msg, mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
# 409 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
        uint8_t len = msg->len < 27? msg->len : 27;
        memset(safety_set_allowed_area, 0, 27);
    memcpy(safety_set_allowed_area, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1043 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h" 1
       


#define MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA 55

typedef struct __mavlink_safety_allowed_area_t { float p1x; float p1y; float p1z; float p2x; float p2y; float p2z; uint8_t frame; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
   mavlink_safety_allowed_area_t;

#define MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA_LEN 25
#define MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA_MIN_LEN 25
#define MAVLINK_MSG_ID_55_LEN 25
#define MAVLINK_MSG_ID_55_MIN_LEN 25

#define MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA_CRC 3
#define MAVLINK_MSG_ID_55_CRC 3
# 42 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
#define MAVLINK_MESSAGE_INFO_SAFETY_ALLOWED_AREA { "SAFETY_ALLOWED_AREA", 7, { { "p1x", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_safety_allowed_area_t, p1x) }, { "p1y", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_safety_allowed_area_t, p1y) }, { "p1z", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_safety_allowed_area_t, p1z) }, { "p2x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_safety_allowed_area_t, p2x) }, { "p2y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_safety_allowed_area_t, p2y) }, { "p2z", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_safety_allowed_area_t, p2z) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 24, offsetof(mavlink_safety_allowed_area_t, frame) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
    mavlink_safety_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 55;
    return mavlink_finalize_message(msg, system_id, component_id, 25, 25, 3);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t frame,float p1x,float p1y,float p1z,float p2x,float p2y,float p2z)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
    mavlink_safety_allowed_area_t packet;
    packet.p1x = p1x;
    packet.p1y = p1y;
    packet.p1z = p1z;
    packet.p2x = p2x;
    packet.p2y = p2y;
    packet.p2z = p2z;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


    msg->msgid = 55;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 25, 3);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_safety_allowed_area_t* safety_allowed_area)
{
    return mavlink_msg_safety_allowed_area_pack(system_id, component_id, msg, safety_allowed_area->frame, safety_allowed_area->p1x, safety_allowed_area->p1y, safety_allowed_area->p1z, safety_allowed_area->p2x, safety_allowed_area->p2y, safety_allowed_area->p2z);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_safety_allowed_area_t* safety_allowed_area)
{
    return mavlink_msg_safety_allowed_area_pack_chan(system_id, component_id, chan, msg, safety_allowed_area->frame, safety_allowed_area->p1x, safety_allowed_area->p1y, safety_allowed_area->p1z, safety_allowed_area->p2x, safety_allowed_area->p2y, safety_allowed_area->p2z);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint8_t mavlink_msg_safety_allowed_area_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline float mavlink_msg_safety_allowed_area_get_p1x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_safety_allowed_area_get_p1y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_safety_allowed_area_get_p1z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_safety_allowed_area_get_p2x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_safety_allowed_area_get_p2y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_safety_allowed_area_get_p2z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_safety_allowed_area_decode(const mavlink_message_t* msg, mavlink_safety_allowed_area_t* safety_allowed_area)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
        uint8_t len = msg->len < 25? msg->len : 25;
        memset(safety_allowed_area, 0, 25);
    memcpy(safety_allowed_area, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1044 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h" 1
       


#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV 61

typedef struct __mavlink_attitude_quaternion_cov_t { uint64_t time_usec; float q[4]; float rollspeed; float pitchspeed; float yawspeed; float covariance[9]; } __attribute__((packed))







   mavlink_attitude_quaternion_cov_t;

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV_LEN 72
#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV_MIN_LEN 72
#define MAVLINK_MSG_ID_61_LEN 72
#define MAVLINK_MSG_ID_61_MIN_LEN 72

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV_CRC 167
#define MAVLINK_MSG_ID_61_CRC 167

#define MAVLINK_MSG_ATTITUDE_QUATERNION_COV_FIELD_Q_LEN 4
#define MAVLINK_MSG_ATTITUDE_QUATERNION_COV_FIELD_COVARIANCE_LEN 9
# 41 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
#define MAVLINK_MESSAGE_INFO_ATTITUDE_QUATERNION_COV { "ATTITUDE_QUATERNION_COV", 6, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_attitude_quaternion_cov_t, time_usec) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 8, offsetof(mavlink_attitude_quaternion_cov_t, q) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_attitude_quaternion_cov_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_attitude_quaternion_cov_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_attitude_quaternion_cov_t, yawspeed) }, { "covariance", NULL, MAVLINK_TYPE_FLOAT, 9, 36, offsetof(mavlink_attitude_quaternion_cov_t, covariance) }, } }
# 68 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, const float *q, float rollspeed, float pitchspeed, float yawspeed, const float *covariance)
{
# 81 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
    mavlink_attitude_quaternion_cov_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 72);


    msg->msgid = 61;
    return mavlink_finalize_message(msg, system_id, component_id, 72, 72, 167);
}
# 109 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,const float *q,float rollspeed,float pitchspeed,float yawspeed,const float *covariance)
{
# 123 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
    mavlink_attitude_quaternion_cov_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 72);


    msg->msgid = 61;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 72, 72, 167);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
    return mavlink_msg_attitude_quaternion_cov_pack(system_id, component_id, msg, attitude_quaternion_cov->time_usec, attitude_quaternion_cov->q, attitude_quaternion_cov->rollspeed, attitude_quaternion_cov->pitchspeed, attitude_quaternion_cov->yawspeed, attitude_quaternion_cov->covariance);
}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
    return mavlink_msg_attitude_quaternion_cov_pack_chan(system_id, component_id, chan, msg, attitude_quaternion_cov->time_usec, attitude_quaternion_cov->q, attitude_quaternion_cov->rollspeed, attitude_quaternion_cov->pitchspeed, attitude_quaternion_cov->yawspeed, attitude_quaternion_cov->covariance);
}
# 256 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint64_t mavlink_msg_attitude_quaternion_cov_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_attitude_quaternion_cov_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 8);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline uint16_t mavlink_msg_attitude_quaternion_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
    return _MAV_RETURN_float_array(msg, covariance, 9, 36);
}







static inline void mavlink_msg_attitude_quaternion_cov_decode(const mavlink_message_t* msg, mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
# 327 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
        uint8_t len = msg->len < 72? msg->len : 72;
        memset(attitude_quaternion_cov, 0, 72);
    memcpy(attitude_quaternion_cov, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1045 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h" 1
       


#define MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT 62

typedef struct __mavlink_nav_controller_output_t { float nav_roll; float nav_pitch; float alt_error; float aspd_error; float xtrack_error; int16_t nav_bearing; int16_t target_bearing; uint16_t wp_dist; } __attribute__((packed))
# 16 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
   mavlink_nav_controller_output_t;

#define MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_LEN 26
#define MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_MIN_LEN 26
#define MAVLINK_MSG_ID_62_LEN 26
#define MAVLINK_MSG_ID_62_MIN_LEN 26

#define MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_CRC 183
#define MAVLINK_MSG_ID_62_CRC 183
# 44 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
#define MAVLINK_MESSAGE_INFO_NAV_CONTROLLER_OUTPUT { "NAV_CONTROLLER_OUTPUT", 8, { { "nav_roll", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_nav_controller_output_t, nav_roll) }, { "nav_pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_nav_controller_output_t, nav_pitch) }, { "alt_error", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_nav_controller_output_t, alt_error) }, { "aspd_error", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_nav_controller_output_t, aspd_error) }, { "xtrack_error", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_nav_controller_output_t, xtrack_error) }, { "nav_bearing", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_nav_controller_output_t, nav_bearing) }, { "target_bearing", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_nav_controller_output_t, target_bearing) }, { "wp_dist", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_nav_controller_output_t, wp_dist) }, } }
# 75 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float nav_roll, float nav_pitch, int16_t nav_bearing, int16_t target_bearing, uint16_t wp_dist, float alt_error, float aspd_error, float xtrack_error)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
    mavlink_nav_controller_output_t packet;
    packet.nav_roll = nav_roll;
    packet.nav_pitch = nav_pitch;
    packet.alt_error = alt_error;
    packet.aspd_error = aspd_error;
    packet.xtrack_error = xtrack_error;
    packet.nav_bearing = nav_bearing;
    packet.target_bearing = target_bearing;
    packet.wp_dist = wp_dist;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 62;
    return mavlink_finalize_message(msg, system_id, component_id, 26, 26, 183);
}
# 124 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float nav_roll,float nav_pitch,int16_t nav_bearing,int16_t target_bearing,uint16_t wp_dist,float alt_error,float aspd_error,float xtrack_error)
{
# 141 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
    mavlink_nav_controller_output_t packet;
    packet.nav_roll = nav_roll;
    packet.nav_pitch = nav_pitch;
    packet.alt_error = alt_error;
    packet.aspd_error = aspd_error;
    packet.xtrack_error = xtrack_error;
    packet.nav_bearing = nav_bearing;
    packet.target_bearing = target_bearing;
    packet.wp_dist = wp_dist;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 62;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 26, 183);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_nav_controller_output_t* nav_controller_output)
{
    return mavlink_msg_nav_controller_output_pack(system_id, component_id, msg, nav_controller_output->nav_roll, nav_controller_output->nav_pitch, nav_controller_output->nav_bearing, nav_controller_output->target_bearing, nav_controller_output->wp_dist, nav_controller_output->alt_error, nav_controller_output->aspd_error, nav_controller_output->xtrack_error);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_nav_controller_output_t* nav_controller_output)
{
    return mavlink_msg_nav_controller_output_pack_chan(system_id, component_id, chan, msg, nav_controller_output->nav_roll, nav_controller_output->nav_pitch, nav_controller_output->nav_bearing, nav_controller_output->target_bearing, nav_controller_output->wp_dist, nav_controller_output->alt_error, nav_controller_output->aspd_error, nav_controller_output->xtrack_error);
}
# 291 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline float mavlink_msg_nav_controller_output_get_nav_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_nav_controller_output_get_nav_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline int16_t mavlink_msg_nav_controller_output_get_nav_bearing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_nav_controller_output_get_target_bearing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline uint16_t mavlink_msg_nav_controller_output_get_wp_dist(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline float mavlink_msg_nav_controller_output_get_alt_error(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_nav_controller_output_get_aspd_error(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_nav_controller_output_get_xtrack_error(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_nav_controller_output_decode(const mavlink_message_t* msg, mavlink_nav_controller_output_t* nav_controller_output)
{
# 384 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
        uint8_t len = msg->len < 26? msg->len : 26;
        memset(nav_controller_output, 0, 26);
    memcpy(nav_controller_output, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1046 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h" 1
       


#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV 63

typedef struct __mavlink_global_position_int_cov_t { uint64_t time_usec; int32_t lat; int32_t lon; int32_t alt; int32_t relative_alt; float vx; float vy; float vz; float covariance[36]; uint8_t estimator_type; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
   mavlink_global_position_int_cov_t;

#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV_LEN 181
#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV_MIN_LEN 181
#define MAVLINK_MSG_ID_63_LEN 181
#define MAVLINK_MSG_ID_63_MIN_LEN 181

#define MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV_CRC 119
#define MAVLINK_MSG_ID_63_CRC 119

#define MAVLINK_MSG_GLOBAL_POSITION_INT_COV_FIELD_COVARIANCE_LEN 36
# 48 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
#define MAVLINK_MESSAGE_INFO_GLOBAL_POSITION_INT_COV { "GLOBAL_POSITION_INT_COV", 10, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_global_position_int_cov_t, time_usec) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_global_position_int_cov_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_global_position_int_cov_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_global_position_int_cov_t, alt) }, { "relative_alt", NULL, MAVLINK_TYPE_INT32_T, 0, 20, offsetof(mavlink_global_position_int_cov_t, relative_alt) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_global_position_int_cov_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_global_position_int_cov_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_global_position_int_cov_t, vz) }, { "covariance", NULL, MAVLINK_TYPE_FLOAT, 36, 36, offsetof(mavlink_global_position_int_cov_t, covariance) }, { "estimator_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 180, offsetof(mavlink_global_position_int_cov_t, estimator_type) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t estimator_type, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, float vx, float vy, float vz, const float *covariance)
{
# 100 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
    mavlink_global_position_int_cov_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 181);


    msg->msgid = 63;
    return mavlink_finalize_message(msg, system_id, component_id, 181, 181, 119);
}
# 136 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t estimator_type,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,float vx,float vy,float vz,const float *covariance)
{
# 154 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
    mavlink_global_position_int_cov_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.relative_alt = relative_alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 181);


    msg->msgid = 63;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 181, 181, 119);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_position_int_cov_t* global_position_int_cov)
{
    return mavlink_msg_global_position_int_cov_pack(system_id, component_id, msg, global_position_int_cov->time_usec, global_position_int_cov->estimator_type, global_position_int_cov->lat, global_position_int_cov->lon, global_position_int_cov->alt, global_position_int_cov->relative_alt, global_position_int_cov->vx, global_position_int_cov->vy, global_position_int_cov->vz, global_position_int_cov->covariance);
}
# 194 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_position_int_cov_t* global_position_int_cov)
{
    return mavlink_msg_global_position_int_cov_pack_chan(system_id, component_id, chan, msg, global_position_int_cov->time_usec, global_position_int_cov->estimator_type, global_position_int_cov->lat, global_position_int_cov->lon, global_position_int_cov->alt, global_position_int_cov->relative_alt, global_position_int_cov->vx, global_position_int_cov->vy, global_position_int_cov->vz, global_position_int_cov->covariance);
}
# 311 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint64_t mavlink_msg_global_position_int_cov_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_global_position_int_cov_get_estimator_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[180];
}






static inline int32_t mavlink_msg_global_position_int_cov_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_relative_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_global_position_int_cov_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_global_position_int_cov_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_global_position_int_cov_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline uint16_t mavlink_msg_global_position_int_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
    return _MAV_RETURN_float_array(msg, covariance, 36, 36);
}







static inline void mavlink_msg_global_position_int_cov_decode(const mavlink_message_t* msg, mavlink_global_position_int_cov_t* global_position_int_cov)
{
# 426 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
        uint8_t len = msg->len < 181? msg->len : 181;
        memset(global_position_int_cov, 0, 181);
    memcpy(global_position_int_cov, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1047 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h" 1
       


#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV 64

typedef struct __mavlink_local_position_ned_cov_t { uint64_t time_usec; float x; float y; float z; float vx; float vy; float vz; float ax; float ay; float az; float covariance[45]; uint8_t estimator_type; } __attribute__((packed))
# 20 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
   mavlink_local_position_ned_cov_t;

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV_LEN 225
#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV_MIN_LEN 225
#define MAVLINK_MSG_ID_64_LEN 225
#define MAVLINK_MSG_ID_64_MIN_LEN 225

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV_CRC 191
#define MAVLINK_MSG_ID_64_CRC 191

#define MAVLINK_MSG_LOCAL_POSITION_NED_COV_FIELD_COVARIANCE_LEN 45
# 52 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
#define MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED_COV { "LOCAL_POSITION_NED_COV", 12, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_local_position_ned_cov_t, time_usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_local_position_ned_cov_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_local_position_ned_cov_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_local_position_ned_cov_t, z) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_local_position_ned_cov_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_local_position_ned_cov_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_local_position_ned_cov_t, vz) }, { "ax", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_local_position_ned_cov_t, ax) }, { "ay", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_local_position_ned_cov_t, ay) }, { "az", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_local_position_ned_cov_t, az) }, { "covariance", NULL, MAVLINK_TYPE_FLOAT, 45, 44, offsetof(mavlink_local_position_ned_cov_t, covariance) }, { "estimator_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 224, offsetof(mavlink_local_position_ned_cov_t, estimator_type) }, } }
# 91 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t estimator_type, float x, float y, float z, float vx, float vy, float vz, float ax, float ay, float az, const float *covariance)
{
# 110 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
    mavlink_local_position_ned_cov_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ax = ax;
    packet.ay = ay;
    packet.az = az;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 225);


    msg->msgid = 64;
    return mavlink_finalize_message(msg, system_id, component_id, 225, 225, 191);
}
# 150 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t estimator_type,float x,float y,float z,float vx,float vy,float vz,float ax,float ay,float az,const float *covariance)
{
# 170 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
    mavlink_local_position_ned_cov_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ax = ax;
    packet.ay = ay;
    packet.az = az;
    packet.estimator_type = estimator_type;
    mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 225);


    msg->msgid = 64;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 225, 225, 191);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
    return mavlink_msg_local_position_ned_cov_pack(system_id, component_id, msg, local_position_ned_cov->time_usec, local_position_ned_cov->estimator_type, local_position_ned_cov->x, local_position_ned_cov->y, local_position_ned_cov->z, local_position_ned_cov->vx, local_position_ned_cov->vy, local_position_ned_cov->vz, local_position_ned_cov->ax, local_position_ned_cov->ay, local_position_ned_cov->az, local_position_ned_cov->covariance);
}
# 212 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
    return mavlink_msg_local_position_ned_cov_pack_chan(system_id, component_id, chan, msg, local_position_ned_cov->time_usec, local_position_ned_cov->estimator_type, local_position_ned_cov->x, local_position_ned_cov->y, local_position_ned_cov->z, local_position_ned_cov->vx, local_position_ned_cov->vy, local_position_ned_cov->vz, local_position_ned_cov->ax, local_position_ned_cov->ay, local_position_ned_cov->az, local_position_ned_cov->covariance);
}
# 339 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint64_t mavlink_msg_local_position_ned_cov_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_local_position_ned_cov_get_estimator_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[224];
}






static inline float mavlink_msg_local_position_ned_cov_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_cov_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_cov_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_cov_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_cov_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_local_position_ned_cov_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_local_position_ned_cov_get_ax(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_local_position_ned_cov_get_ay(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_local_position_ned_cov_get_az(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline uint16_t mavlink_msg_local_position_ned_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
    return _MAV_RETURN_float_array(msg, covariance, 45, 44);
}







static inline void mavlink_msg_local_position_ned_cov_decode(const mavlink_message_t* msg, mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
# 476 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
        uint8_t len = msg->len < 225? msg->len : 225;
        memset(local_position_ned_cov, 0, 225);
    memcpy(local_position_ned_cov, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1048 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h" 1
       


#define MAVLINK_MSG_ID_RC_CHANNELS 65

typedef struct __mavlink_rc_channels_t { uint32_t time_boot_ms; uint16_t chan1_raw; uint16_t chan2_raw; uint16_t chan3_raw; uint16_t chan4_raw; uint16_t chan5_raw; uint16_t chan6_raw; uint16_t chan7_raw; uint16_t chan8_raw; uint16_t chan9_raw; uint16_t chan10_raw; uint16_t chan11_raw; uint16_t chan12_raw; uint16_t chan13_raw; uint16_t chan14_raw; uint16_t chan15_raw; uint16_t chan16_raw; uint16_t chan17_raw; uint16_t chan18_raw; uint8_t chancount; uint8_t rssi; } __attribute__((packed))
# 29 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
   mavlink_rc_channels_t;

#define MAVLINK_MSG_ID_RC_CHANNELS_LEN 42
#define MAVLINK_MSG_ID_RC_CHANNELS_MIN_LEN 42
#define MAVLINK_MSG_ID_65_LEN 42
#define MAVLINK_MSG_ID_65_MIN_LEN 42

#define MAVLINK_MSG_ID_RC_CHANNELS_CRC 118
#define MAVLINK_MSG_ID_65_CRC 118
# 70 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
#define MAVLINK_MESSAGE_INFO_RC_CHANNELS { "RC_CHANNELS", 21, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_rc_channels_t, time_boot_ms) }, { "chan1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_rc_channels_t, chan1_raw) }, { "chan2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_rc_channels_t, chan2_raw) }, { "chan3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_rc_channels_t, chan3_raw) }, { "chan4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_rc_channels_t, chan4_raw) }, { "chan5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_rc_channels_t, chan5_raw) }, { "chan6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_rc_channels_t, chan6_raw) }, { "chan7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_rc_channels_t, chan7_raw) }, { "chan8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_rc_channels_t, chan8_raw) }, { "chan9_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_rc_channels_t, chan9_raw) }, { "chan10_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_rc_channels_t, chan10_raw) }, { "chan11_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_rc_channels_t, chan11_raw) }, { "chan12_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_rc_channels_t, chan12_raw) }, { "chan13_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_rc_channels_t, chan13_raw) }, { "chan14_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_rc_channels_t, chan14_raw) }, { "chan15_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 32, offsetof(mavlink_rc_channels_t, chan15_raw) }, { "chan16_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 34, offsetof(mavlink_rc_channels_t, chan16_raw) }, { "chan17_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 36, offsetof(mavlink_rc_channels_t, chan17_raw) }, { "chan18_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 38, offsetof(mavlink_rc_channels_t, chan18_raw) }, { "chancount", NULL, MAVLINK_TYPE_UINT8_T, 0, 40, offsetof(mavlink_rc_channels_t, chancount) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 41, offsetof(mavlink_rc_channels_t, rssi) }, } }
# 127 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t chancount, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint16_t chan13_raw, uint16_t chan14_raw, uint16_t chan15_raw, uint16_t chan16_raw, uint16_t chan17_raw, uint16_t chan18_raw, uint8_t rssi)
{
# 156 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
    mavlink_rc_channels_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.chan13_raw = chan13_raw;
    packet.chan14_raw = chan14_raw;
    packet.chan15_raw = chan15_raw;
    packet.chan16_raw = chan16_raw;
    packet.chan17_raw = chan17_raw;
    packet.chan18_raw = chan18_raw;
    packet.chancount = chancount;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 65;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 118);
}
# 215 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t chancount,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint16_t chan9_raw,uint16_t chan10_raw,uint16_t chan11_raw,uint16_t chan12_raw,uint16_t chan13_raw,uint16_t chan14_raw,uint16_t chan15_raw,uint16_t chan16_raw,uint16_t chan17_raw,uint16_t chan18_raw,uint8_t rssi)
{
# 245 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
    mavlink_rc_channels_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.chan13_raw = chan13_raw;
    packet.chan14_raw = chan14_raw;
    packet.chan15_raw = chan15_raw;
    packet.chan16_raw = chan16_raw;
    packet.chan17_raw = chan17_raw;
    packet.chan18_raw = chan18_raw;
    packet.chancount = chancount;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 65;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 118);
}
# 283 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_t* rc_channels)
{
    return mavlink_msg_rc_channels_pack(system_id, component_id, msg, rc_channels->time_boot_ms, rc_channels->chancount, rc_channels->chan1_raw, rc_channels->chan2_raw, rc_channels->chan3_raw, rc_channels->chan4_raw, rc_channels->chan5_raw, rc_channels->chan6_raw, rc_channels->chan7_raw, rc_channels->chan8_raw, rc_channels->chan9_raw, rc_channels->chan10_raw, rc_channels->chan11_raw, rc_channels->chan12_raw, rc_channels->chan13_raw, rc_channels->chan14_raw, rc_channels->chan15_raw, rc_channels->chan16_raw, rc_channels->chan17_raw, rc_channels->chan18_raw, rc_channels->rssi);
}
# 297 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_t* rc_channels)
{
    return mavlink_msg_rc_channels_pack_chan(system_id, component_id, chan, msg, rc_channels->time_boot_ms, rc_channels->chancount, rc_channels->chan1_raw, rc_channels->chan2_raw, rc_channels->chan3_raw, rc_channels->chan4_raw, rc_channels->chan5_raw, rc_channels->chan6_raw, rc_channels->chan7_raw, rc_channels->chan8_raw, rc_channels->chan9_raw, rc_channels->chan10_raw, rc_channels->chan11_raw, rc_channels->chan12_raw, rc_channels->chan13_raw, rc_channels->chan14_raw, rc_channels->chan15_raw, rc_channels->chan16_raw, rc_channels->chan17_raw, rc_channels->chan18_raw, rc_channels->rssi);
}
# 473 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint32_t mavlink_msg_rc_channels_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_get_chancount(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_rc_channels_get_chan1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan9_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan10_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan11_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan12_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan13_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan14_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan15_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan16_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan17_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 36);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan18_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 38);
}






static inline uint8_t mavlink_msg_rc_channels_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}







static inline void mavlink_msg_rc_channels_decode(const mavlink_message_t* msg, mavlink_rc_channels_t* rc_channels)
{
# 709 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
        uint8_t len = msg->len < 42? msg->len : 42;
        memset(rc_channels, 0, 42);
    memcpy(rc_channels, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1049 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h" 1
       


#define MAVLINK_MSG_ID_REQUEST_DATA_STREAM 66

typedef struct __mavlink_request_data_stream_t { uint16_t req_message_rate; uint8_t target_system; uint8_t target_component; uint8_t req_stream_id; uint8_t start_stop; } __attribute__((packed))






   mavlink_request_data_stream_t;

#define MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN 6
#define MAVLINK_MSG_ID_REQUEST_DATA_STREAM_MIN_LEN 6
#define MAVLINK_MSG_ID_66_LEN 6
#define MAVLINK_MSG_ID_66_MIN_LEN 6

#define MAVLINK_MSG_ID_REQUEST_DATA_STREAM_CRC 148
#define MAVLINK_MSG_ID_66_CRC 148
# 38 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
#define MAVLINK_MESSAGE_INFO_REQUEST_DATA_STREAM { "REQUEST_DATA_STREAM", 5, { { "req_message_rate", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_request_data_stream_t, req_message_rate) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_request_data_stream_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_request_data_stream_t, target_component) }, { "req_stream_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_request_data_stream_t, req_stream_id) }, { "start_stop", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_request_data_stream_t, start_stop) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t req_stream_id, uint16_t req_message_rate, uint8_t start_stop)
{
# 76 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
    mavlink_request_data_stream_t packet;
    packet.req_message_rate = req_message_rate;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.req_stream_id = req_stream_id;
    packet.start_stop = start_stop;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 66;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 148);
}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t req_stream_id,uint16_t req_message_rate,uint8_t start_stop)
{
# 117 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
    mavlink_request_data_stream_t packet;
    packet.req_message_rate = req_message_rate;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.req_stream_id = req_stream_id;
    packet.start_stop = start_stop;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 66;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 148);
}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_request_data_stream_t* request_data_stream)
{
    return mavlink_msg_request_data_stream_pack(system_id, component_id, msg, request_data_stream->target_system, request_data_stream->target_component, request_data_stream->req_stream_id, request_data_stream->req_message_rate, request_data_stream->start_stop);
}
# 153 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_request_data_stream_t* request_data_stream)
{
    return mavlink_msg_request_data_stream_pack_chan(system_id, component_id, chan, msg, request_data_stream->target_system, request_data_stream->target_component, request_data_stream->req_stream_id, request_data_stream->req_message_rate, request_data_stream->start_stop);
}
# 249 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}







static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{







        uint8_t len = msg->len < 6? msg->len : 6;
        memset(request_data_stream, 0, 6);
    memcpy(request_data_stream, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1050 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h" 1
       


#define MAVLINK_MSG_ID_DATA_STREAM 67

typedef struct __mavlink_data_stream_t { uint16_t message_rate; uint8_t stream_id; uint8_t on_off; } __attribute__((packed))




   mavlink_data_stream_t;

#define MAVLINK_MSG_ID_DATA_STREAM_LEN 4
#define MAVLINK_MSG_ID_DATA_STREAM_MIN_LEN 4
#define MAVLINK_MSG_ID_67_LEN 4
#define MAVLINK_MSG_ID_67_MIN_LEN 4

#define MAVLINK_MSG_ID_DATA_STREAM_CRC 21
#define MAVLINK_MSG_ID_67_CRC 21
# 34 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
#define MAVLINK_MESSAGE_INFO_DATA_STREAM { "DATA_STREAM", 3, { { "message_rate", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_data_stream_t, message_rate) }, { "stream_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_data_stream_t, stream_id) }, { "on_off", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_data_stream_t, on_off) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t stream_id, uint16_t message_rate, uint8_t on_off)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
    mavlink_data_stream_t packet;
    packet.message_rate = message_rate;
    packet.stream_id = stream_id;
    packet.on_off = on_off;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 67;
    return mavlink_finalize_message(msg, system_id, component_id, 4, 4, 21);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t stream_id,uint16_t message_rate,uint8_t on_off)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
    mavlink_data_stream_t packet;
    packet.message_rate = message_rate;
    packet.stream_id = stream_id;
    packet.on_off = on_off;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


    msg->msgid = 67;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 4, 21);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data_stream_t* data_stream)
{
    return mavlink_msg_data_stream_pack(system_id, component_id, msg, data_stream->stream_id, data_stream->message_rate, data_stream->on_off);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data_stream_t* data_stream)
{
    return mavlink_msg_data_stream_pack_chan(system_id, component_id, chan, msg, data_stream->stream_id, data_stream->message_rate, data_stream->on_off);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint8_t mavlink_msg_data_stream_get_stream_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_data_stream_get_message_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_data_stream_get_on_off(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}







static inline void mavlink_msg_data_stream_decode(const mavlink_message_t* msg, mavlink_data_stream_t* data_stream)
{





        uint8_t len = msg->len < 4? msg->len : 4;
        memset(data_stream, 0, 4);
    memcpy(data_stream, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1051 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h" 1
       


#define MAVLINK_MSG_ID_MANUAL_CONTROL 69

typedef struct __mavlink_manual_control_t { int16_t x; int16_t y; int16_t z; int16_t r; uint16_t buttons; uint8_t target; } __attribute__((packed))







   mavlink_manual_control_t;

#define MAVLINK_MSG_ID_MANUAL_CONTROL_LEN 11
#define MAVLINK_MSG_ID_MANUAL_CONTROL_MIN_LEN 11
#define MAVLINK_MSG_ID_69_LEN 11
#define MAVLINK_MSG_ID_69_MIN_LEN 11

#define MAVLINK_MSG_ID_MANUAL_CONTROL_CRC 243
#define MAVLINK_MSG_ID_69_CRC 243
# 40 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
#define MAVLINK_MESSAGE_INFO_MANUAL_CONTROL { "MANUAL_CONTROL", 6, { { "x", NULL, MAVLINK_TYPE_INT16_T, 0, 0, offsetof(mavlink_manual_control_t, x) }, { "y", NULL, MAVLINK_TYPE_INT16_T, 0, 2, offsetof(mavlink_manual_control_t, y) }, { "z", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_manual_control_t, z) }, { "r", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_manual_control_t, r) }, { "buttons", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_manual_control_t, buttons) }, { "target", NULL, MAVLINK_TYPE_UINT8_T, 0, 10, offsetof(mavlink_manual_control_t, target) }, } }
# 67 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target, int16_t x, int16_t y, int16_t z, int16_t r, uint16_t buttons)
{
# 81 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
    mavlink_manual_control_t packet;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.r = r;
    packet.buttons = buttons;
    packet.target = target;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 11);


    msg->msgid = 69;
    return mavlink_finalize_message(msg, system_id, component_id, 11, 11, 243);
}
# 110 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target,int16_t x,int16_t y,int16_t z,int16_t r,uint16_t buttons)
{
# 125 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
    mavlink_manual_control_t packet;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.r = r;
    packet.buttons = buttons;
    packet.target = target;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 11);


    msg->msgid = 69;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 11, 11, 243);
}
# 148 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_manual_control_t* manual_control)
{
    return mavlink_msg_manual_control_pack(system_id, component_id, msg, manual_control->target, manual_control->x, manual_control->y, manual_control->z, manual_control->r, manual_control->buttons);
}
# 162 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_manual_control_t* manual_control)
{
    return mavlink_msg_manual_control_pack_chan(system_id, component_id, chan, msg, manual_control->target, manual_control->x, manual_control->y, manual_control->z, manual_control->r, manual_control->buttons);
}
# 263 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint8_t mavlink_msg_manual_control_get_target(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline int16_t mavlink_msg_manual_control_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_manual_control_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 2);
}






static inline int16_t mavlink_msg_manual_control_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_manual_control_get_r(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline uint16_t mavlink_msg_manual_control_get_buttons(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}







static inline void mavlink_msg_manual_control_decode(const mavlink_message_t* msg, mavlink_manual_control_t* manual_control)
{
# 334 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
        uint8_t len = msg->len < 11? msg->len : 11;
        memset(manual_control, 0, 11);
    memcpy(manual_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1052 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h" 1
       


#define MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE 70

typedef struct __mavlink_rc_channels_override_t { uint16_t chan1_raw; uint16_t chan2_raw; uint16_t chan3_raw; uint16_t chan4_raw; uint16_t chan5_raw; uint16_t chan6_raw; uint16_t chan7_raw; uint16_t chan8_raw; uint8_t target_system; uint8_t target_component; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
   mavlink_rc_channels_override_t;

#define MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE_LEN 18
#define MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE_MIN_LEN 18
#define MAVLINK_MSG_ID_70_LEN 18
#define MAVLINK_MSG_ID_70_MIN_LEN 18

#define MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE_CRC 124
#define MAVLINK_MSG_ID_70_CRC 124
# 48 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
#define MAVLINK_MESSAGE_INFO_RC_CHANNELS_OVERRIDE { "RC_CHANNELS_OVERRIDE", 10, { { "chan1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_rc_channels_override_t, chan1_raw) }, { "chan2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 2, offsetof(mavlink_rc_channels_override_t, chan2_raw) }, { "chan3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_rc_channels_override_t, chan3_raw) }, { "chan4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_rc_channels_override_t, chan4_raw) }, { "chan5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_rc_channels_override_t, chan5_raw) }, { "chan6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_rc_channels_override_t, chan6_raw) }, { "chan7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_rc_channels_override_t, chan7_raw) }, { "chan8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_rc_channels_override_t, chan8_raw) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 16, offsetof(mavlink_rc_channels_override_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 17, offsetof(mavlink_rc_channels_override_t, target_component) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
    mavlink_rc_channels_override_t packet;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 70;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 124);
}
# 138 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw)
{
# 157 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
    mavlink_rc_channels_override_t packet;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 70;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 124);
}
# 184 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_override_t* rc_channels_override)
{
    return mavlink_msg_rc_channels_override_pack(system_id, component_id, msg, rc_channels_override->target_system, rc_channels_override->target_component, rc_channels_override->chan1_raw, rc_channels_override->chan2_raw, rc_channels_override->chan3_raw, rc_channels_override->chan4_raw, rc_channels_override->chan5_raw, rc_channels_override->chan6_raw, rc_channels_override->chan7_raw, rc_channels_override->chan8_raw);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_override_t* rc_channels_override)
{
    return mavlink_msg_rc_channels_override_pack_chan(system_id, component_id, chan, msg, rc_channels_override->target_system, rc_channels_override->target_component, rc_channels_override->chan1_raw, rc_channels_override->chan2_raw, rc_channels_override->chan3_raw, rc_channels_override->chan4_raw, rc_channels_override->chan5_raw, rc_channels_override->chan6_raw, rc_channels_override->chan7_raw, rc_channels_override->chan8_raw);
}
# 319 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint8_t mavlink_msg_rc_channels_override_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint8_t mavlink_msg_rc_channels_override_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[17];
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}







static inline void mavlink_msg_rc_channels_override_decode(const mavlink_message_t* msg, mavlink_rc_channels_override_t* rc_channels_override)
{
# 434 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
        uint8_t len = msg->len < 18? msg->len : 18;
        memset(rc_channels_override, 0, 18);
    memcpy(rc_channels_override, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1053 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h" 1
       


#define MAVLINK_MSG_ID_MISSION_ITEM_INT 73

typedef struct __mavlink_mission_item_int_t { float param1; float param2; float param3; float param4; int32_t x; int32_t y; float z; uint16_t seq; uint16_t command; uint8_t target_system; uint8_t target_component; uint8_t frame; uint8_t current; uint8_t autocontinue; } __attribute__((packed))
# 22 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
   mavlink_mission_item_int_t;

#define MAVLINK_MSG_ID_MISSION_ITEM_INT_LEN 37
#define MAVLINK_MSG_ID_MISSION_ITEM_INT_MIN_LEN 37
#define MAVLINK_MSG_ID_73_LEN 37
#define MAVLINK_MSG_ID_73_MIN_LEN 37

#define MAVLINK_MSG_ID_MISSION_ITEM_INT_CRC 38
#define MAVLINK_MSG_ID_73_CRC 38
# 56 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
#define MAVLINK_MESSAGE_INFO_MISSION_ITEM_INT { "MISSION_ITEM_INT", 14, { { "param1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_mission_item_int_t, param1) }, { "param2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_mission_item_int_t, param2) }, { "param3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_mission_item_int_t, param3) }, { "param4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_mission_item_int_t, param4) }, { "x", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_mission_item_int_t, x) }, { "y", NULL, MAVLINK_TYPE_INT32_T, 0, 20, offsetof(mavlink_mission_item_int_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_mission_item_int_t, z) }, { "seq", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_mission_item_int_t, seq) }, { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_mission_item_int_t, command) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_mission_item_int_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_mission_item_int_t, target_component) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_mission_item_int_t, frame) }, { "current", NULL, MAVLINK_TYPE_UINT8_T, 0, 35, offsetof(mavlink_mission_item_int_t, current) }, { "autocontinue", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_mission_item_int_t, autocontinue) }, } }
# 99 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
    mavlink_mission_item_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 73;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 37, 38);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,int32_t x,int32_t y,float z)
{
# 189 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
    mavlink_mission_item_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.seq = seq;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 73;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 37, 38);
}
# 220 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_int_t* mission_item_int)
{
    return mavlink_msg_mission_item_int_pack(system_id, component_id, msg, mission_item_int->target_system, mission_item_int->target_component, mission_item_int->seq, mission_item_int->frame, mission_item_int->command, mission_item_int->current, mission_item_int->autocontinue, mission_item_int->param1, mission_item_int->param2, mission_item_int->param3, mission_item_int->param4, mission_item_int->x, mission_item_int->y, mission_item_int->z);
}
# 234 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_int_t* mission_item_int)
{
    return mavlink_msg_mission_item_int_pack_chan(system_id, component_id, chan, msg, mission_item_int->target_system, mission_item_int->target_component, mission_item_int->seq, mission_item_int->frame, mission_item_int->command, mission_item_int->current, mission_item_int->autocontinue, mission_item_int->param1, mission_item_int->param2, mission_item_int->param3, mission_item_int->param4, mission_item_int->x, mission_item_int->y, mission_item_int->z);
}
# 375 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint8_t mavlink_msg_mission_item_int_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_mission_item_int_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint16_t mavlink_msg_mission_item_int_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_mission_item_int_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint16_t mavlink_msg_mission_item_int_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_mission_item_int_get_current(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline uint8_t mavlink_msg_mission_item_int_get_autocontinue(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_mission_item_int_get_param1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mission_item_int_get_param2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mission_item_int_get_param3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mission_item_int_get_param4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_mission_item_int_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_mission_item_int_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_mission_item_int_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_mission_item_int_decode(const mavlink_message_t* msg, mavlink_mission_item_int_t* mission_item_int)
{
# 534 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
        uint8_t len = msg->len < 37? msg->len : 37;
        memset(mission_item_int, 0, 37);
    memcpy(mission_item_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1054 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h" 1
       


#define MAVLINK_MSG_ID_VFR_HUD 74

typedef struct __mavlink_vfr_hud_t { float airspeed; float groundspeed; float alt; float climb; int16_t heading; uint16_t throttle; } __attribute__((packed))







   mavlink_vfr_hud_t;

#define MAVLINK_MSG_ID_VFR_HUD_LEN 20
#define MAVLINK_MSG_ID_VFR_HUD_MIN_LEN 20
#define MAVLINK_MSG_ID_74_LEN 20
#define MAVLINK_MSG_ID_74_MIN_LEN 20

#define MAVLINK_MSG_ID_VFR_HUD_CRC 20
#define MAVLINK_MSG_ID_74_CRC 20
# 40 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
#define MAVLINK_MESSAGE_INFO_VFR_HUD { "VFR_HUD", 6, { { "airspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_vfr_hud_t, airspeed) }, { "groundspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_vfr_hud_t, groundspeed) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vfr_hud_t, alt) }, { "climb", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vfr_hud_t, climb) }, { "heading", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_vfr_hud_t, heading) }, { "throttle", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_vfr_hud_t, throttle) }, } }
# 67 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
# 81 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
    packet.groundspeed = groundspeed;
    packet.alt = alt;
    packet.climb = climb;
    packet.heading = heading;
    packet.throttle = throttle;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 74;
    return mavlink_finalize_message(msg, system_id, component_id, 20, 20, 20);
}
# 110 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float airspeed,float groundspeed,int16_t heading,uint16_t throttle,float alt,float climb)
{
# 125 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
    mavlink_vfr_hud_t packet;
    packet.airspeed = airspeed;
    packet.groundspeed = groundspeed;
    packet.alt = alt;
    packet.climb = climb;
    packet.heading = heading;
    packet.throttle = throttle;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 74;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20, 20);
}
# 148 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vfr_hud_t* vfr_hud)
{
    return mavlink_msg_vfr_hud_pack(system_id, component_id, msg, vfr_hud->airspeed, vfr_hud->groundspeed, vfr_hud->heading, vfr_hud->throttle, vfr_hud->alt, vfr_hud->climb);
}
# 162 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vfr_hud_t* vfr_hud)
{
    return mavlink_msg_vfr_hud_pack_chan(system_id, component_id, chan, msg, vfr_hud->airspeed, vfr_hud->groundspeed, vfr_hud->heading, vfr_hud->throttle, vfr_hud->alt, vfr_hud->climb);
}
# 263 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline float mavlink_msg_vfr_hud_get_airspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_vfr_hud_get_groundspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline int16_t mavlink_msg_vfr_hud_get_heading(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline uint16_t mavlink_msg_vfr_hud_get_throttle(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline float mavlink_msg_vfr_hud_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vfr_hud_get_climb(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_vfr_hud_decode(const mavlink_message_t* msg, mavlink_vfr_hud_t* vfr_hud)
{
# 334 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
        uint8_t len = msg->len < 20? msg->len : 20;
        memset(vfr_hud, 0, 20);
    memcpy(vfr_hud, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1055 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h" 1
       


#define MAVLINK_MSG_ID_COMMAND_INT 75

typedef struct __mavlink_command_int_t { float param1; float param2; float param3; float param4; int32_t x; int32_t y; float z; uint16_t command; uint8_t target_system; uint8_t target_component; uint8_t frame; uint8_t current; uint8_t autocontinue; } __attribute__((packed))
# 21 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
   mavlink_command_int_t;

#define MAVLINK_MSG_ID_COMMAND_INT_LEN 35
#define MAVLINK_MSG_ID_COMMAND_INT_MIN_LEN 35
#define MAVLINK_MSG_ID_75_LEN 35
#define MAVLINK_MSG_ID_75_MIN_LEN 35

#define MAVLINK_MSG_ID_COMMAND_INT_CRC 158
#define MAVLINK_MSG_ID_75_CRC 158
# 54 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
#define MAVLINK_MESSAGE_INFO_COMMAND_INT { "COMMAND_INT", 13, { { "param1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_command_int_t, param1) }, { "param2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_command_int_t, param2) }, { "param3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_command_int_t, param3) }, { "param4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_command_int_t, param4) }, { "x", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_command_int_t, x) }, { "y", NULL, MAVLINK_TYPE_INT32_T, 0, 20, offsetof(mavlink_command_int_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_command_int_t, z) }, { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_command_int_t, command) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_command_int_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_command_int_t, target_component) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_command_int_t, frame) }, { "current", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_command_int_t, current) }, { "autocontinue", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_command_int_t, autocontinue) }, } }
# 95 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 116 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
    mavlink_command_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 75;
    return mavlink_finalize_message(msg, system_id, component_id, 35, 35, 158);
}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,int32_t x,int32_t y,float z)
{
# 181 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
    mavlink_command_int_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.frame = frame;
    packet.current = current;
    packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 75;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 35, 158);
}
# 211 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_int_t* command_int)
{
    return mavlink_msg_command_int_pack(system_id, component_id, msg, command_int->target_system, command_int->target_component, command_int->frame, command_int->command, command_int->current, command_int->autocontinue, command_int->param1, command_int->param2, command_int->param3, command_int->param4, command_int->x, command_int->y, command_int->z);
}
# 225 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_int_t* command_int)
{
    return mavlink_msg_command_int_pack_chan(system_id, component_id, chan, msg, command_int->target_system, command_int->target_component, command_int->frame, command_int->command, command_int->current, command_int->autocontinue, command_int->param1, command_int->param2, command_int->param3, command_int->param4, command_int->x, command_int->y, command_int->z);
}
# 361 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint8_t mavlink_msg_command_int_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_command_int_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_command_int_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint16_t mavlink_msg_command_int_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_command_int_get_current(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_command_int_get_autocontinue(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline float mavlink_msg_command_int_get_param1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_command_int_get_param2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_command_int_get_param3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_command_int_get_param4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_command_int_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_command_int_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_command_int_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_command_int_decode(const mavlink_message_t* msg, mavlink_command_int_t* command_int)
{
# 509 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
        uint8_t len = msg->len < 35? msg->len : 35;
        memset(command_int, 0, 35);
    memcpy(command_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1056 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h" 1
       


#define MAVLINK_MSG_ID_COMMAND_LONG 76

typedef struct __mavlink_command_long_t { float param1; float param2; float param3; float param4; float param5; float param6; float param7; uint16_t command; uint8_t target_system; uint8_t target_component; uint8_t confirmation; } __attribute__((packed))
# 19 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
   mavlink_command_long_t;

#define MAVLINK_MSG_ID_COMMAND_LONG_LEN 33
#define MAVLINK_MSG_ID_COMMAND_LONG_MIN_LEN 33
#define MAVLINK_MSG_ID_76_LEN 33
#define MAVLINK_MSG_ID_76_MIN_LEN 33

#define MAVLINK_MSG_ID_COMMAND_LONG_CRC 152
#define MAVLINK_MSG_ID_76_CRC 152
# 50 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
#define MAVLINK_MESSAGE_INFO_COMMAND_LONG { "COMMAND_LONG", 11, { { "param1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_command_long_t, param1) }, { "param2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_command_long_t, param2) }, { "param3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_command_long_t, param3) }, { "param4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_command_long_t, param4) }, { "param5", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_command_long_t, param5) }, { "param6", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_command_long_t, param6) }, { "param7", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_command_long_t, param7) }, { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_command_long_t, command) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_command_long_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_command_long_t, target_component) }, { "confirmation", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_command_long_t, confirmation) }, } }
# 87 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
    mavlink_command_long_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.param5 = param5;
    packet.param6 = param6;
    packet.param7 = param7;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.confirmation = confirmation;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


    msg->msgid = 76;
    return mavlink_finalize_message(msg, system_id, component_id, 33, 33, 152);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t command,uint8_t confirmation,float param1,float param2,float param3,float param4,float param5,float param6,float param7)
{
# 165 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
    mavlink_command_long_t packet;
    packet.param1 = param1;
    packet.param2 = param2;
    packet.param3 = param3;
    packet.param4 = param4;
    packet.param5 = param5;
    packet.param6 = param6;
    packet.param7 = param7;
    packet.command = command;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.confirmation = confirmation;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


    msg->msgid = 76;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 33, 33, 152);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
    return mavlink_msg_command_long_pack(system_id, component_id, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
    return mavlink_msg_command_long_pack_chan(system_id, component_id, chan, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
}
# 333 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
# 459 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
        uint8_t len = msg->len < 33? msg->len : 33;
        memset(command_long, 0, 33);
    memcpy(command_long, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1057 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h" 1
       


#define MAVLINK_MSG_ID_COMMAND_ACK 77

typedef struct __mavlink_command_ack_t { uint16_t command; uint8_t result; } __attribute__((packed))



   mavlink_command_ack_t;

#define MAVLINK_MSG_ID_COMMAND_ACK_LEN 3
#define MAVLINK_MSG_ID_COMMAND_ACK_MIN_LEN 3
#define MAVLINK_MSG_ID_77_LEN 3
#define MAVLINK_MSG_ID_77_MIN_LEN 3

#define MAVLINK_MSG_ID_COMMAND_ACK_CRC 143
#define MAVLINK_MSG_ID_77_CRC 143
# 32 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
#define MAVLINK_MESSAGE_INFO_COMMAND_ACK { "COMMAND_ACK", 2, { { "command", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_command_ack_t, command) }, { "result", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_command_ack_t, result) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t command, uint8_t result)
{







    mavlink_command_ack_t packet;
    packet.command = command;
    packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 77;
    return mavlink_finalize_message(msg, system_id, component_id, 3, 3, 143);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t command,uint8_t result)
{







    mavlink_command_ack_t packet;
    packet.command = command;
    packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


    msg->msgid = 77;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 3, 143);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_ack_t* command_ack)
{
    return mavlink_msg_command_ack_pack(system_id, component_id, msg, command_ack->command, command_ack->result);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_ack_t* command_ack)
{
    return mavlink_msg_command_ack_pack_chan(system_id, component_id, chan, msg, command_ack->command, command_ack->result);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_get_command(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_command_ack_get_result(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{




        uint8_t len = msg->len < 3? msg->len : 3;
        memset(command_ack, 0, 3);
    memcpy(command_ack, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1058 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h" 1
       


#define MAVLINK_MSG_ID_MANUAL_SETPOINT 81

typedef struct __mavlink_manual_setpoint_t { uint32_t time_boot_ms; float roll; float pitch; float yaw; float thrust; uint8_t mode_switch; uint8_t manual_override_switch; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
   mavlink_manual_setpoint_t;

#define MAVLINK_MSG_ID_MANUAL_SETPOINT_LEN 22
#define MAVLINK_MSG_ID_MANUAL_SETPOINT_MIN_LEN 22
#define MAVLINK_MSG_ID_81_LEN 22
#define MAVLINK_MSG_ID_81_MIN_LEN 22

#define MAVLINK_MSG_ID_MANUAL_SETPOINT_CRC 106
#define MAVLINK_MSG_ID_81_CRC 106
# 42 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
#define MAVLINK_MESSAGE_INFO_MANUAL_SETPOINT { "MANUAL_SETPOINT", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_manual_setpoint_t, time_boot_ms) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_manual_setpoint_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_manual_setpoint_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_manual_setpoint_t, yaw) }, { "thrust", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_manual_setpoint_t, thrust) }, { "mode_switch", NULL, MAVLINK_TYPE_UINT8_T, 0, 20, offsetof(mavlink_manual_setpoint_t, mode_switch) }, { "manual_override_switch", NULL, MAVLINK_TYPE_UINT8_T, 0, 21, offsetof(mavlink_manual_setpoint_t, manual_override_switch) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust, uint8_t mode_switch, uint8_t manual_override_switch)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
    mavlink_manual_setpoint_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.thrust = thrust;
    packet.mode_switch = mode_switch;
    packet.manual_override_switch = manual_override_switch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 81;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 106);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float roll,float pitch,float yaw,float thrust,uint8_t mode_switch,uint8_t manual_override_switch)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
    mavlink_manual_setpoint_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.thrust = thrust;
    packet.mode_switch = mode_switch;
    packet.manual_override_switch = manual_override_switch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 81;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 106);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_manual_setpoint_t* manual_setpoint)
{
    return mavlink_msg_manual_setpoint_pack(system_id, component_id, msg, manual_setpoint->time_boot_ms, manual_setpoint->roll, manual_setpoint->pitch, manual_setpoint->yaw, manual_setpoint->thrust, manual_setpoint->mode_switch, manual_setpoint->manual_override_switch);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_manual_setpoint_t* manual_setpoint)
{
    return mavlink_msg_manual_setpoint_pack_chan(system_id, component_id, chan, msg, manual_setpoint->time_boot_ms, manual_setpoint->roll, manual_setpoint->pitch, manual_setpoint->yaw, manual_setpoint->thrust, manual_setpoint->mode_switch, manual_setpoint->manual_override_switch);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint32_t mavlink_msg_manual_setpoint_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_manual_setpoint_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_manual_setpoint_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_manual_setpoint_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_manual_setpoint_get_thrust(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline uint8_t mavlink_msg_manual_setpoint_get_mode_switch(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint8_t mavlink_msg_manual_setpoint_get_manual_override_switch(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_manual_setpoint_decode(const mavlink_message_t* msg, mavlink_manual_setpoint_t* manual_setpoint)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(manual_setpoint, 0, 22);
    memcpy(manual_setpoint, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1059 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h" 1
       


#define MAVLINK_MSG_ID_SET_ATTITUDE_TARGET 82

typedef struct __mavlink_set_attitude_target_t { uint32_t time_boot_ms; float q[4]; float body_roll_rate; float body_pitch_rate; float body_yaw_rate; float thrust; uint8_t target_system; uint8_t target_component; uint8_t type_mask; } __attribute__((packed))
# 17 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
   mavlink_set_attitude_target_t;

#define MAVLINK_MSG_ID_SET_ATTITUDE_TARGET_LEN 39
#define MAVLINK_MSG_ID_SET_ATTITUDE_TARGET_MIN_LEN 39
#define MAVLINK_MSG_ID_82_LEN 39
#define MAVLINK_MSG_ID_82_MIN_LEN 39

#define MAVLINK_MSG_ID_SET_ATTITUDE_TARGET_CRC 49
#define MAVLINK_MSG_ID_82_CRC 49

#define MAVLINK_MSG_SET_ATTITUDE_TARGET_FIELD_Q_LEN 4
# 46 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
#define MAVLINK_MESSAGE_INFO_SET_ATTITUDE_TARGET { "SET_ATTITUDE_TARGET", 9, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_set_attitude_target_t, time_boot_ms) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 4, offsetof(mavlink_set_attitude_target_t, q) }, { "body_roll_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_set_attitude_target_t, body_roll_rate) }, { "body_pitch_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_set_attitude_target_t, body_pitch_rate) }, { "body_yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_set_attitude_target_t, body_yaw_rate) }, { "thrust", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_set_attitude_target_t, thrust) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_set_attitude_target_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 37, offsetof(mavlink_set_attitude_target_t, target_component) }, { "type_mask", NULL, MAVLINK_TYPE_UINT8_T, 0, 38, offsetof(mavlink_set_attitude_target_t, type_mask) }, } }
# 79 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
    mavlink_set_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 39);


    msg->msgid = 82;
    return mavlink_finalize_message(msg, system_id, component_id, 39, 39, 49);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t type_mask,const float *q,float body_roll_rate,float body_pitch_rate,float body_yaw_rate,float thrust)
{
# 146 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
    mavlink_set_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 39);


    msg->msgid = 82;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 39, 39, 49);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_attitude_target_t* set_attitude_target)
{
    return mavlink_msg_set_attitude_target_pack(system_id, component_id, msg, set_attitude_target->time_boot_ms, set_attitude_target->target_system, set_attitude_target->target_component, set_attitude_target->type_mask, set_attitude_target->q, set_attitude_target->body_roll_rate, set_attitude_target->body_pitch_rate, set_attitude_target->body_yaw_rate, set_attitude_target->thrust);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_attitude_target_t* set_attitude_target)
{
    return mavlink_msg_set_attitude_target_pack_chan(system_id, component_id, chan, msg, set_attitude_target->time_boot_ms, set_attitude_target->target_system, set_attitude_target->target_component, set_attitude_target->type_mask, set_attitude_target->q, set_attitude_target->body_roll_rate, set_attitude_target->body_pitch_rate, set_attitude_target->body_yaw_rate, set_attitude_target->thrust);
}
# 297 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint32_t mavlink_msg_set_attitude_target_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_attitude_target_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint8_t mavlink_msg_set_attitude_target_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[37];
}






static inline uint8_t mavlink_msg_set_attitude_target_get_type_mask(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[38];
}






static inline uint16_t mavlink_msg_set_attitude_target_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_set_attitude_target_get_body_roll_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_attitude_target_get_body_pitch_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_attitude_target_get_body_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_attitude_target_get_thrust(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_set_attitude_target_decode(const mavlink_message_t* msg, mavlink_set_attitude_target_t* set_attitude_target)
{
# 401 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
        uint8_t len = msg->len < 39? msg->len : 39;
        memset(set_attitude_target, 0, 39);
    memcpy(set_attitude_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1060 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h" 1
       


#define MAVLINK_MSG_ID_ATTITUDE_TARGET 83

typedef struct __mavlink_attitude_target_t { uint32_t time_boot_ms; float q[4]; float body_roll_rate; float body_pitch_rate; float body_yaw_rate; float thrust; uint8_t type_mask; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
   mavlink_attitude_target_t;

#define MAVLINK_MSG_ID_ATTITUDE_TARGET_LEN 37
#define MAVLINK_MSG_ID_ATTITUDE_TARGET_MIN_LEN 37
#define MAVLINK_MSG_ID_83_LEN 37
#define MAVLINK_MSG_ID_83_MIN_LEN 37

#define MAVLINK_MSG_ID_ATTITUDE_TARGET_CRC 22
#define MAVLINK_MSG_ID_83_CRC 22

#define MAVLINK_MSG_ATTITUDE_TARGET_FIELD_Q_LEN 4
# 42 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
#define MAVLINK_MESSAGE_INFO_ATTITUDE_TARGET { "ATTITUDE_TARGET", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_attitude_target_t, time_boot_ms) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 4, offsetof(mavlink_attitude_target_t, q) }, { "body_roll_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_attitude_target_t, body_roll_rate) }, { "body_pitch_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_attitude_target_t, body_pitch_rate) }, { "body_yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_attitude_target_t, body_yaw_rate) }, { "thrust", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_attitude_target_t, thrust) }, { "type_mask", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_attitude_target_t, type_mask) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 85 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
    mavlink_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 83;
    return mavlink_finalize_message(msg, system_id, component_id, 37, 37, 22);
}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t type_mask,const float *q,float body_roll_rate,float body_pitch_rate,float body_yaw_rate,float thrust)
{
# 130 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
    mavlink_attitude_target_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.body_roll_rate = body_roll_rate;
    packet.body_pitch_rate = body_pitch_rate;
    packet.body_yaw_rate = body_yaw_rate;
    packet.thrust = thrust;
    packet.type_mask = type_mask;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


    msg->msgid = 83;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 37, 22);
}
# 153 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_target_t* attitude_target)
{
    return mavlink_msg_attitude_target_pack(system_id, component_id, msg, attitude_target->time_boot_ms, attitude_target->type_mask, attitude_target->q, attitude_target->body_roll_rate, attitude_target->body_pitch_rate, attitude_target->body_yaw_rate, attitude_target->thrust);
}
# 167 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_target_t* attitude_target)
{
    return mavlink_msg_attitude_target_pack_chan(system_id, component_id, chan, msg, attitude_target->time_boot_ms, attitude_target->type_mask, attitude_target->q, attitude_target->body_roll_rate, attitude_target->body_pitch_rate, attitude_target->body_yaw_rate, attitude_target->thrust);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint32_t mavlink_msg_attitude_target_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_attitude_target_get_type_mask(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint16_t mavlink_msg_attitude_target_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_attitude_target_get_body_roll_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_target_get_body_pitch_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_target_get_body_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_attitude_target_get_thrust(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_attitude_target_decode(const mavlink_message_t* msg, mavlink_attitude_target_t* attitude_target)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
        uint8_t len = msg->len < 37? msg->len : 37;
        memset(attitude_target, 0, 37);
    memcpy(attitude_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1061 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h" 1
       


#define MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED 84

typedef struct __mavlink_set_position_target_local_ned_t { uint32_t time_boot_ms; float x; float y; float z; float vx; float vy; float vz; float afx; float afy; float afz; float yaw; float yaw_rate; uint16_t type_mask; uint8_t target_system; uint8_t target_component; uint8_t coordinate_frame; } __attribute__((packed))
# 24 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
   mavlink_set_position_target_local_ned_t;

#define MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED_LEN 53
#define MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED_MIN_LEN 53
#define MAVLINK_MSG_ID_84_LEN 53
#define MAVLINK_MSG_ID_84_MIN_LEN 53

#define MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED_CRC 143
#define MAVLINK_MSG_ID_84_CRC 143
# 60 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
#define MAVLINK_MESSAGE_INFO_SET_POSITION_TARGET_LOCAL_NED { "SET_POSITION_TARGET_LOCAL_NED", 16, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_set_position_target_local_ned_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_set_position_target_local_ned_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_set_position_target_local_ned_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_set_position_target_local_ned_t, z) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_set_position_target_local_ned_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_set_position_target_local_ned_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_set_position_target_local_ned_t, vz) }, { "afx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_set_position_target_local_ned_t, afx) }, { "afy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_set_position_target_local_ned_t, afy) }, { "afz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_set_position_target_local_ned_t, afz) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_set_position_target_local_ned_t, yaw) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_set_position_target_local_ned_t, yaw_rate) }, { "type_mask", NULL, MAVLINK_TYPE_UINT16_T, 0, 48, offsetof(mavlink_set_position_target_local_ned_t, type_mask) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 50, offsetof(mavlink_set_position_target_local_ned_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 51, offsetof(mavlink_set_position_target_local_ned_t, target_component) }, { "coordinate_frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 52, offsetof(mavlink_set_position_target_local_ned_t, coordinate_frame) }, } }
# 107 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 131 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
    mavlink_set_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 84;
    return mavlink_finalize_message(msg, system_id, component_id, 53, 53, 143);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t coordinate_frame,uint16_t type_mask,float x,float y,float z,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 205 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
    mavlink_set_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 84;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 53, 143);
}
# 238 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
    return mavlink_msg_set_position_target_local_ned_pack(system_id, component_id, msg, set_position_target_local_ned->time_boot_ms, set_position_target_local_ned->target_system, set_position_target_local_ned->target_component, set_position_target_local_ned->coordinate_frame, set_position_target_local_ned->type_mask, set_position_target_local_ned->x, set_position_target_local_ned->y, set_position_target_local_ned->z, set_position_target_local_ned->vx, set_position_target_local_ned->vy, set_position_target_local_ned->vz, set_position_target_local_ned->afx, set_position_target_local_ned->afy, set_position_target_local_ned->afz, set_position_target_local_ned->yaw, set_position_target_local_ned->yaw_rate);
}
# 252 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
    return mavlink_msg_set_position_target_local_ned_pack_chan(system_id, component_id, chan, msg, set_position_target_local_ned->time_boot_ms, set_position_target_local_ned->target_system, set_position_target_local_ned->target_component, set_position_target_local_ned->coordinate_frame, set_position_target_local_ned->type_mask, set_position_target_local_ned->x, set_position_target_local_ned->y, set_position_target_local_ned->z, set_position_target_local_ned->vx, set_position_target_local_ned->vy, set_position_target_local_ned->vz, set_position_target_local_ned->afx, set_position_target_local_ned->afy, set_position_target_local_ned->afz, set_position_target_local_ned->yaw, set_position_target_local_ned->yaw_rate);
}
# 403 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint32_t mavlink_msg_set_position_target_local_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[51];
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_coordinate_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline uint16_t mavlink_msg_set_position_target_local_ned_get_type_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 48);
}






static inline float mavlink_msg_set_position_target_local_ned_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_set_position_target_local_ned_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_set_position_target_local_ned_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_set_position_target_local_ned_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_position_target_local_ned_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_set_position_target_local_ned_decode(const mavlink_message_t* msg, mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
# 584 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
        uint8_t len = msg->len < 53? msg->len : 53;
        memset(set_position_target_local_ned, 0, 53);
    memcpy(set_position_target_local_ned, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1062 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h" 1
       


#define MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED 85

typedef struct __mavlink_position_target_local_ned_t { uint32_t time_boot_ms; float x; float y; float z; float vx; float vy; float vz; float afx; float afy; float afz; float yaw; float yaw_rate; uint16_t type_mask; uint8_t coordinate_frame; } __attribute__((packed))
# 22 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
   mavlink_position_target_local_ned_t;

#define MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED_LEN 51
#define MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED_MIN_LEN 51
#define MAVLINK_MSG_ID_85_LEN 51
#define MAVLINK_MSG_ID_85_MIN_LEN 51

#define MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED_CRC 140
#define MAVLINK_MSG_ID_85_CRC 140
# 56 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
#define MAVLINK_MESSAGE_INFO_POSITION_TARGET_LOCAL_NED { "POSITION_TARGET_LOCAL_NED", 14, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_position_target_local_ned_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_position_target_local_ned_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_position_target_local_ned_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_position_target_local_ned_t, z) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_position_target_local_ned_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_position_target_local_ned_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_position_target_local_ned_t, vz) }, { "afx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_position_target_local_ned_t, afx) }, { "afy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_position_target_local_ned_t, afy) }, { "afz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_position_target_local_ned_t, afz) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_position_target_local_ned_t, yaw) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_position_target_local_ned_t, yaw_rate) }, { "type_mask", NULL, MAVLINK_TYPE_UINT16_T, 0, 48, offsetof(mavlink_position_target_local_ned_t, type_mask) }, { "coordinate_frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 50, offsetof(mavlink_position_target_local_ned_t, coordinate_frame) }, } }
# 99 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 121 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
    mavlink_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 85;
    return mavlink_finalize_message(msg, system_id, component_id, 51, 51, 140);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t coordinate_frame,uint16_t type_mask,float x,float y,float z,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 189 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
    mavlink_position_target_local_ned_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 85;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 51, 140);
}
# 220 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_position_target_local_ned_t* position_target_local_ned)
{
    return mavlink_msg_position_target_local_ned_pack(system_id, component_id, msg, position_target_local_ned->time_boot_ms, position_target_local_ned->coordinate_frame, position_target_local_ned->type_mask, position_target_local_ned->x, position_target_local_ned->y, position_target_local_ned->z, position_target_local_ned->vx, position_target_local_ned->vy, position_target_local_ned->vz, position_target_local_ned->afx, position_target_local_ned->afy, position_target_local_ned->afz, position_target_local_ned->yaw, position_target_local_ned->yaw_rate);
}
# 234 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_position_target_local_ned_t* position_target_local_ned)
{
    return mavlink_msg_position_target_local_ned_pack_chan(system_id, component_id, chan, msg, position_target_local_ned->time_boot_ms, position_target_local_ned->coordinate_frame, position_target_local_ned->type_mask, position_target_local_ned->x, position_target_local_ned->y, position_target_local_ned->z, position_target_local_ned->vx, position_target_local_ned->vy, position_target_local_ned->vz, position_target_local_ned->afx, position_target_local_ned->afy, position_target_local_ned->afz, position_target_local_ned->yaw, position_target_local_ned->yaw_rate);
}
# 375 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint32_t mavlink_msg_position_target_local_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_position_target_local_ned_get_coordinate_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_position_target_local_ned_get_type_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 48);
}






static inline float mavlink_msg_position_target_local_ned_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_position_target_local_ned_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_position_target_local_ned_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_position_target_local_ned_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_position_target_local_ned_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_position_target_local_ned_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_position_target_local_ned_get_afx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_position_target_local_ned_get_afy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_position_target_local_ned_get_afz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_position_target_local_ned_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_position_target_local_ned_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_position_target_local_ned_decode(const mavlink_message_t* msg, mavlink_position_target_local_ned_t* position_target_local_ned)
{
# 534 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
        uint8_t len = msg->len < 51? msg->len : 51;
        memset(position_target_local_ned, 0, 51);
    memcpy(position_target_local_ned, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1063 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h" 1
       


#define MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT 86

typedef struct __mavlink_set_position_target_global_int_t { uint32_t time_boot_ms; int32_t lat_int; int32_t lon_int; float alt; float vx; float vy; float vz; float afx; float afy; float afz; float yaw; float yaw_rate; uint16_t type_mask; uint8_t target_system; uint8_t target_component; uint8_t coordinate_frame; } __attribute__((packed))
# 24 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
   mavlink_set_position_target_global_int_t;

#define MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT_LEN 53
#define MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT_MIN_LEN 53
#define MAVLINK_MSG_ID_86_LEN 53
#define MAVLINK_MSG_ID_86_MIN_LEN 53

#define MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT_CRC 5
#define MAVLINK_MSG_ID_86_CRC 5
# 60 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
#define MAVLINK_MESSAGE_INFO_SET_POSITION_TARGET_GLOBAL_INT { "SET_POSITION_TARGET_GLOBAL_INT", 16, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_set_position_target_global_int_t, time_boot_ms) }, { "lat_int", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_set_position_target_global_int_t, lat_int) }, { "lon_int", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_set_position_target_global_int_t, lon_int) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_set_position_target_global_int_t, alt) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_set_position_target_global_int_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_set_position_target_global_int_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_set_position_target_global_int_t, vz) }, { "afx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_set_position_target_global_int_t, afx) }, { "afy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_set_position_target_global_int_t, afy) }, { "afz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_set_position_target_global_int_t, afz) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_set_position_target_global_int_t, yaw) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_set_position_target_global_int_t, yaw_rate) }, { "type_mask", NULL, MAVLINK_TYPE_UINT16_T, 0, 48, offsetof(mavlink_set_position_target_global_int_t, type_mask) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 50, offsetof(mavlink_set_position_target_global_int_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 51, offsetof(mavlink_set_position_target_global_int_t, target_component) }, { "coordinate_frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 52, offsetof(mavlink_set_position_target_global_int_t, coordinate_frame) }, } }
# 107 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 131 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
    mavlink_set_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 86;
    return mavlink_finalize_message(msg, system_id, component_id, 53, 53, 5);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t coordinate_frame,uint16_t type_mask,int32_t lat_int,int32_t lon_int,float alt,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 205 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
    mavlink_set_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 86;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 53, 5);
}
# 238 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
    return mavlink_msg_set_position_target_global_int_pack(system_id, component_id, msg, set_position_target_global_int->time_boot_ms, set_position_target_global_int->target_system, set_position_target_global_int->target_component, set_position_target_global_int->coordinate_frame, set_position_target_global_int->type_mask, set_position_target_global_int->lat_int, set_position_target_global_int->lon_int, set_position_target_global_int->alt, set_position_target_global_int->vx, set_position_target_global_int->vy, set_position_target_global_int->vz, set_position_target_global_int->afx, set_position_target_global_int->afy, set_position_target_global_int->afz, set_position_target_global_int->yaw, set_position_target_global_int->yaw_rate);
}
# 252 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
    return mavlink_msg_set_position_target_global_int_pack_chan(system_id, component_id, chan, msg, set_position_target_global_int->time_boot_ms, set_position_target_global_int->target_system, set_position_target_global_int->target_component, set_position_target_global_int->coordinate_frame, set_position_target_global_int->type_mask, set_position_target_global_int->lat_int, set_position_target_global_int->lon_int, set_position_target_global_int->alt, set_position_target_global_int->vx, set_position_target_global_int->vy, set_position_target_global_int->vz, set_position_target_global_int->afx, set_position_target_global_int->afy, set_position_target_global_int->afz, set_position_target_global_int->yaw, set_position_target_global_int->yaw_rate);
}
# 403 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint32_t mavlink_msg_set_position_target_global_int_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[51];
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_coordinate_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline uint16_t mavlink_msg_set_position_target_global_int_get_type_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 48);
}






static inline int32_t mavlink_msg_set_position_target_global_int_get_lat_int(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_position_target_global_int_get_lon_int(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_set_position_target_global_int_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_position_target_global_int_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_position_target_global_int_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_position_target_global_int_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_position_target_global_int_get_afx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_position_target_global_int_get_afy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_set_position_target_global_int_get_afz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_set_position_target_global_int_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_position_target_global_int_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_set_position_target_global_int_decode(const mavlink_message_t* msg, mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
# 584 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
        uint8_t len = msg->len < 53? msg->len : 53;
        memset(set_position_target_global_int, 0, 53);
    memcpy(set_position_target_global_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1064 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h" 1
       


#define MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT 87

typedef struct __mavlink_position_target_global_int_t { uint32_t time_boot_ms; int32_t lat_int; int32_t lon_int; float alt; float vx; float vy; float vz; float afx; float afy; float afz; float yaw; float yaw_rate; uint16_t type_mask; uint8_t coordinate_frame; } __attribute__((packed))
# 22 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
   mavlink_position_target_global_int_t;

#define MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_LEN 51
#define MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_MIN_LEN 51
#define MAVLINK_MSG_ID_87_LEN 51
#define MAVLINK_MSG_ID_87_MIN_LEN 51

#define MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_CRC 150
#define MAVLINK_MSG_ID_87_CRC 150
# 56 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
#define MAVLINK_MESSAGE_INFO_POSITION_TARGET_GLOBAL_INT { "POSITION_TARGET_GLOBAL_INT", 14, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_position_target_global_int_t, time_boot_ms) }, { "lat_int", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_position_target_global_int_t, lat_int) }, { "lon_int", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_position_target_global_int_t, lon_int) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_position_target_global_int_t, alt) }, { "vx", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_position_target_global_int_t, vx) }, { "vy", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_position_target_global_int_t, vy) }, { "vz", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_position_target_global_int_t, vz) }, { "afx", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_position_target_global_int_t, afx) }, { "afy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_position_target_global_int_t, afy) }, { "afz", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_position_target_global_int_t, afz) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_position_target_global_int_t, yaw) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_position_target_global_int_t, yaw_rate) }, { "type_mask", NULL, MAVLINK_TYPE_UINT16_T, 0, 48, offsetof(mavlink_position_target_global_int_t, type_mask) }, { "coordinate_frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 50, offsetof(mavlink_position_target_global_int_t, coordinate_frame) }, } }
# 99 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 121 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
    mavlink_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 87;
    return mavlink_finalize_message(msg, system_id, component_id, 51, 51, 150);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t coordinate_frame,uint16_t type_mask,int32_t lat_int,int32_t lon_int,float alt,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 189 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
    mavlink_position_target_global_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.lat_int = lat_int;
    packet.lon_int = lon_int;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.afx = afx;
    packet.afy = afy;
    packet.afz = afz;
    packet.yaw = yaw;
    packet.yaw_rate = yaw_rate;
    packet.type_mask = type_mask;
    packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 87;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 51, 150);
}
# 220 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_position_target_global_int_t* position_target_global_int)
{
    return mavlink_msg_position_target_global_int_pack(system_id, component_id, msg, position_target_global_int->time_boot_ms, position_target_global_int->coordinate_frame, position_target_global_int->type_mask, position_target_global_int->lat_int, position_target_global_int->lon_int, position_target_global_int->alt, position_target_global_int->vx, position_target_global_int->vy, position_target_global_int->vz, position_target_global_int->afx, position_target_global_int->afy, position_target_global_int->afz, position_target_global_int->yaw, position_target_global_int->yaw_rate);
}
# 234 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_position_target_global_int_t* position_target_global_int)
{
    return mavlink_msg_position_target_global_int_pack_chan(system_id, component_id, chan, msg, position_target_global_int->time_boot_ms, position_target_global_int->coordinate_frame, position_target_global_int->type_mask, position_target_global_int->lat_int, position_target_global_int->lon_int, position_target_global_int->alt, position_target_global_int->vx, position_target_global_int->vy, position_target_global_int->vz, position_target_global_int->afx, position_target_global_int->afy, position_target_global_int->afz, position_target_global_int->yaw, position_target_global_int->yaw_rate);
}
# 375 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint32_t mavlink_msg_position_target_global_int_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_position_target_global_int_get_coordinate_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_position_target_global_int_get_type_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 48);
}






static inline int32_t mavlink_msg_position_target_global_int_get_lat_int(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_position_target_global_int_get_lon_int(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_position_target_global_int_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_position_target_global_int_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_position_target_global_int_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_position_target_global_int_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_position_target_global_int_get_afx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_position_target_global_int_get_afy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_position_target_global_int_get_afz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_position_target_global_int_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_position_target_global_int_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_position_target_global_int_decode(const mavlink_message_t* msg, mavlink_position_target_global_int_t* position_target_global_int)
{
# 534 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
        uint8_t len = msg->len < 51? msg->len : 51;
        memset(position_target_global_int, 0, 51);
    memcpy(position_target_global_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1065 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h" 1
       


#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET 89

typedef struct __mavlink_local_position_ned_system_global_offset_t { uint32_t time_boot_ms; float x; float y; float z; float roll; float pitch; float yaw; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
   mavlink_local_position_ned_system_global_offset_t;

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_LEN 28
#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_MIN_LEN 28
#define MAVLINK_MSG_ID_89_LEN 28
#define MAVLINK_MSG_ID_89_MIN_LEN 28

#define MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_CRC 231
#define MAVLINK_MSG_ID_89_CRC 231
# 42 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
#define MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET { "LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET", 7, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_local_position_ned_system_global_offset_t, time_boot_ms) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_local_position_ned_system_global_offset_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_local_position_ned_system_global_offset_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_local_position_ned_system_global_offset_t, z) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_local_position_ned_system_global_offset_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_local_position_ned_system_global_offset_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_local_position_ned_system_global_offset_t, yaw) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float x, float y, float z, float roll, float pitch, float yaw)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
    mavlink_local_position_ned_system_global_offset_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 89;
    return mavlink_finalize_message(msg, system_id, component_id, 28, 28, 231);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float x,float y,float z,float roll,float pitch,float yaw)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
    mavlink_local_position_ned_system_global_offset_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


    msg->msgid = 89;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 28, 231);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
    return mavlink_msg_local_position_ned_system_global_offset_pack(system_id, component_id, msg, local_position_ned_system_global_offset->time_boot_ms, local_position_ned_system_global_offset->x, local_position_ned_system_global_offset->y, local_position_ned_system_global_offset->z, local_position_ned_system_global_offset->roll, local_position_ned_system_global_offset->pitch, local_position_ned_system_global_offset->yaw);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
    return mavlink_msg_local_position_ned_system_global_offset_pack_chan(system_id, component_id, chan, msg, local_position_ned_system_global_offset->time_boot_ms, local_position_ned_system_global_offset->x, local_position_ned_system_global_offset->y, local_position_ned_system_global_offset->z, local_position_ned_system_global_offset->roll, local_position_ned_system_global_offset->pitch, local_position_ned_system_global_offset->yaw);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint32_t mavlink_msg_local_position_ned_system_global_offset_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_local_position_ned_system_global_offset_decode(const mavlink_message_t* msg, mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
        uint8_t len = msg->len < 28? msg->len : 28;
        memset(local_position_ned_system_global_offset, 0, 28);
    memcpy(local_position_ned_system_global_offset, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1066 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h" 1
       


#define MAVLINK_MSG_ID_HIL_STATE 90

typedef struct __mavlink_hil_state_t { uint64_t time_usec; float roll; float pitch; float yaw; float rollspeed; float pitchspeed; float yawspeed; int32_t lat; int32_t lon; int32_t alt; int16_t vx; int16_t vy; int16_t vz; int16_t xacc; int16_t yacc; int16_t zacc; } __attribute__((packed))
# 24 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
   mavlink_hil_state_t;

#define MAVLINK_MSG_ID_HIL_STATE_LEN 56
#define MAVLINK_MSG_ID_HIL_STATE_MIN_LEN 56
#define MAVLINK_MSG_ID_90_LEN 56
#define MAVLINK_MSG_ID_90_MIN_LEN 56

#define MAVLINK_MSG_ID_HIL_STATE_CRC 183
#define MAVLINK_MSG_ID_90_CRC 183
# 60 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
#define MAVLINK_MESSAGE_INFO_HIL_STATE { "HIL_STATE", 16, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_state_t, time_usec) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_hil_state_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_hil_state_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_hil_state_t, yaw) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_hil_state_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_state_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_state_t, yawspeed) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 32, offsetof(mavlink_hil_state_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 36, offsetof(mavlink_hil_state_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 40, offsetof(mavlink_hil_state_t, alt) }, { "vx", NULL, MAVLINK_TYPE_INT16_T, 0, 44, offsetof(mavlink_hil_state_t, vx) }, { "vy", NULL, MAVLINK_TYPE_INT16_T, 0, 46, offsetof(mavlink_hil_state_t, vy) }, { "vz", NULL, MAVLINK_TYPE_INT16_T, 0, 48, offsetof(mavlink_hil_state_t, vz) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 50, offsetof(mavlink_hil_state_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 52, offsetof(mavlink_hil_state_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 54, offsetof(mavlink_hil_state_t, zacc) }, } }
# 107 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 131 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
    mavlink_hil_state_t packet;
    packet.time_usec = time_usec;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 56);


    msg->msgid = 90;
    return mavlink_finalize_message(msg, system_id, component_id, 56, 56, 183);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float roll,float pitch,float yaw,float rollspeed,float pitchspeed,float yawspeed,int32_t lat,int32_t lon,int32_t alt,int16_t vx,int16_t vy,int16_t vz,int16_t xacc,int16_t yacc,int16_t zacc)
{
# 205 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
    mavlink_hil_state_t packet;
    packet.time_usec = time_usec;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 56);


    msg->msgid = 90;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 56, 56, 183);
}
# 238 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_state_t* hil_state)
{
    return mavlink_msg_hil_state_pack(system_id, component_id, msg, hil_state->time_usec, hil_state->roll, hil_state->pitch, hil_state->yaw, hil_state->rollspeed, hil_state->pitchspeed, hil_state->yawspeed, hil_state->lat, hil_state->lon, hil_state->alt, hil_state->vx, hil_state->vy, hil_state->vz, hil_state->xacc, hil_state->yacc, hil_state->zacc);
}
# 252 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_state_t* hil_state)
{
    return mavlink_msg_hil_state_pack_chan(system_id, component_id, chan, msg, hil_state->time_usec, hil_state->roll, hil_state->pitch, hil_state->yaw, hil_state->rollspeed, hil_state->pitchspeed, hil_state->yawspeed, hil_state->lat, hil_state->lon, hil_state->alt, hil_state->vx, hil_state->vy, hil_state->vz, hil_state->xacc, hil_state->yacc, hil_state->zacc);
}
# 403 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint64_t mavlink_msg_hil_state_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_state_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_state_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_state_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_state_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_state_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_state_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline int32_t mavlink_msg_hil_state_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 32);
}






static inline int32_t mavlink_msg_hil_state_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_hil_state_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 40);
}






static inline int16_t mavlink_msg_hil_state_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 44);
}






static inline int16_t mavlink_msg_hil_state_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 46);
}






static inline int16_t mavlink_msg_hil_state_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 48);
}






static inline int16_t mavlink_msg_hil_state_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 50);
}






static inline int16_t mavlink_msg_hil_state_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 52);
}






static inline int16_t mavlink_msg_hil_state_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 54);
}







static inline void mavlink_msg_hil_state_decode(const mavlink_message_t* msg, mavlink_hil_state_t* hil_state)
{
# 584 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
        uint8_t len = msg->len < 56? msg->len : 56;
        memset(hil_state, 0, 56);
    memcpy(hil_state, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1067 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h" 1
       


#define MAVLINK_MSG_ID_HIL_CONTROLS 91

typedef struct __mavlink_hil_controls_t { uint64_t time_usec; float roll_ailerons; float pitch_elevator; float yaw_rudder; float throttle; float aux1; float aux2; float aux3; float aux4; uint8_t mode; uint8_t nav_mode; } __attribute__((packed))
# 19 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
   mavlink_hil_controls_t;

#define MAVLINK_MSG_ID_HIL_CONTROLS_LEN 42
#define MAVLINK_MSG_ID_HIL_CONTROLS_MIN_LEN 42
#define MAVLINK_MSG_ID_91_LEN 42
#define MAVLINK_MSG_ID_91_MIN_LEN 42

#define MAVLINK_MSG_ID_HIL_CONTROLS_CRC 63
#define MAVLINK_MSG_ID_91_CRC 63
# 50 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
#define MAVLINK_MESSAGE_INFO_HIL_CONTROLS { "HIL_CONTROLS", 11, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_controls_t, time_usec) }, { "roll_ailerons", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_hil_controls_t, roll_ailerons) }, { "pitch_elevator", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_hil_controls_t, pitch_elevator) }, { "yaw_rudder", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_hil_controls_t, yaw_rudder) }, { "throttle", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_hil_controls_t, throttle) }, { "aux1", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_controls_t, aux1) }, { "aux2", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_controls_t, aux2) }, { "aux3", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_hil_controls_t, aux3) }, { "aux4", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_hil_controls_t, aux4) }, { "mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 40, offsetof(mavlink_hil_controls_t, mode) }, { "nav_mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 41, offsetof(mavlink_hil_controls_t, nav_mode) }, } }
# 87 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float roll_ailerons, float pitch_elevator, float yaw_rudder, float throttle, float aux1, float aux2, float aux3, float aux4, uint8_t mode, uint8_t nav_mode)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
    mavlink_hil_controls_t packet;
    packet.time_usec = time_usec;
    packet.roll_ailerons = roll_ailerons;
    packet.pitch_elevator = pitch_elevator;
    packet.yaw_rudder = yaw_rudder;
    packet.throttle = throttle;
    packet.aux1 = aux1;
    packet.aux2 = aux2;
    packet.aux3 = aux3;
    packet.aux4 = aux4;
    packet.mode = mode;
    packet.nav_mode = nav_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 91;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 63);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float roll_ailerons,float pitch_elevator,float yaw_rudder,float throttle,float aux1,float aux2,float aux3,float aux4,uint8_t mode,uint8_t nav_mode)
{
# 165 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
    mavlink_hil_controls_t packet;
    packet.time_usec = time_usec;
    packet.roll_ailerons = roll_ailerons;
    packet.pitch_elevator = pitch_elevator;
    packet.yaw_rudder = yaw_rudder;
    packet.throttle = throttle;
    packet.aux1 = aux1;
    packet.aux2 = aux2;
    packet.aux3 = aux3;
    packet.aux4 = aux4;
    packet.mode = mode;
    packet.nav_mode = nav_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 91;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 63);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_controls_t* hil_controls)
{
    return mavlink_msg_hil_controls_pack(system_id, component_id, msg, hil_controls->time_usec, hil_controls->roll_ailerons, hil_controls->pitch_elevator, hil_controls->yaw_rudder, hil_controls->throttle, hil_controls->aux1, hil_controls->aux2, hil_controls->aux3, hil_controls->aux4, hil_controls->mode, hil_controls->nav_mode);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_controls_t* hil_controls)
{
    return mavlink_msg_hil_controls_pack_chan(system_id, component_id, chan, msg, hil_controls->time_usec, hil_controls->roll_ailerons, hil_controls->pitch_elevator, hil_controls->yaw_rudder, hil_controls->throttle, hil_controls->aux1, hil_controls->aux2, hil_controls->aux3, hil_controls->aux4, hil_controls->mode, hil_controls->nav_mode);
}
# 333 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint64_t mavlink_msg_hil_controls_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_controls_get_roll_ailerons(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_controls_get_pitch_elevator(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_controls_get_yaw_rudder(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_controls_get_throttle(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_controls_get_aux1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_controls_get_aux2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_controls_get_aux3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_hil_controls_get_aux4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline uint8_t mavlink_msg_hil_controls_get_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_hil_controls_get_nav_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}







static inline void mavlink_msg_hil_controls_decode(const mavlink_message_t* msg, mavlink_hil_controls_t* hil_controls)
{
# 459 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
        uint8_t len = msg->len < 42? msg->len : 42;
        memset(hil_controls, 0, 42);
    memcpy(hil_controls, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1068 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h" 1
       


#define MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW 92

typedef struct __mavlink_hil_rc_inputs_raw_t { uint64_t time_usec; uint16_t chan1_raw; uint16_t chan2_raw; uint16_t chan3_raw; uint16_t chan4_raw; uint16_t chan5_raw; uint16_t chan6_raw; uint16_t chan7_raw; uint16_t chan8_raw; uint16_t chan9_raw; uint16_t chan10_raw; uint16_t chan11_raw; uint16_t chan12_raw; uint8_t rssi; } __attribute__((packed))
# 22 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
   mavlink_hil_rc_inputs_raw_t;

#define MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW_LEN 33
#define MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW_MIN_LEN 33
#define MAVLINK_MSG_ID_92_LEN 33
#define MAVLINK_MSG_ID_92_MIN_LEN 33

#define MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW_CRC 54
#define MAVLINK_MSG_ID_92_CRC 54
# 56 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
#define MAVLINK_MESSAGE_INFO_HIL_RC_INPUTS_RAW { "HIL_RC_INPUTS_RAW", 14, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_rc_inputs_raw_t, time_usec) }, { "chan1_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_hil_rc_inputs_raw_t, chan1_raw) }, { "chan2_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_hil_rc_inputs_raw_t, chan2_raw) }, { "chan3_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_hil_rc_inputs_raw_t, chan3_raw) }, { "chan4_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 14, offsetof(mavlink_hil_rc_inputs_raw_t, chan4_raw) }, { "chan5_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_hil_rc_inputs_raw_t, chan5_raw) }, { "chan6_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_hil_rc_inputs_raw_t, chan6_raw) }, { "chan7_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_hil_rc_inputs_raw_t, chan7_raw) }, { "chan8_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_hil_rc_inputs_raw_t, chan8_raw) }, { "chan9_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_hil_rc_inputs_raw_t, chan9_raw) }, { "chan10_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_hil_rc_inputs_raw_t, chan10_raw) }, { "chan11_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_hil_rc_inputs_raw_t, chan11_raw) }, { "chan12_raw", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_hil_rc_inputs_raw_t, chan12_raw) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_hil_rc_inputs_raw_t, rssi) }, } }
# 99 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint8_t rssi)
{
# 121 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
    mavlink_hil_rc_inputs_raw_t packet;
    packet.time_usec = time_usec;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


    msg->msgid = 92;
    return mavlink_finalize_message(msg, system_id, component_id, 33, 33, 54);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint16_t chan9_raw,uint16_t chan10_raw,uint16_t chan11_raw,uint16_t chan12_raw,uint8_t rssi)
{
# 189 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
    mavlink_hil_rc_inputs_raw_t packet;
    packet.time_usec = time_usec;
    packet.chan1_raw = chan1_raw;
    packet.chan2_raw = chan2_raw;
    packet.chan3_raw = chan3_raw;
    packet.chan4_raw = chan4_raw;
    packet.chan5_raw = chan5_raw;
    packet.chan6_raw = chan6_raw;
    packet.chan7_raw = chan7_raw;
    packet.chan8_raw = chan8_raw;
    packet.chan9_raw = chan9_raw;
    packet.chan10_raw = chan10_raw;
    packet.chan11_raw = chan11_raw;
    packet.chan12_raw = chan12_raw;
    packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


    msg->msgid = 92;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 33, 33, 54);
}
# 220 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
    return mavlink_msg_hil_rc_inputs_raw_pack(system_id, component_id, msg, hil_rc_inputs_raw->time_usec, hil_rc_inputs_raw->chan1_raw, hil_rc_inputs_raw->chan2_raw, hil_rc_inputs_raw->chan3_raw, hil_rc_inputs_raw->chan4_raw, hil_rc_inputs_raw->chan5_raw, hil_rc_inputs_raw->chan6_raw, hil_rc_inputs_raw->chan7_raw, hil_rc_inputs_raw->chan8_raw, hil_rc_inputs_raw->chan9_raw, hil_rc_inputs_raw->chan10_raw, hil_rc_inputs_raw->chan11_raw, hil_rc_inputs_raw->chan12_raw, hil_rc_inputs_raw->rssi);
}
# 234 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
    return mavlink_msg_hil_rc_inputs_raw_pack_chan(system_id, component_id, chan, msg, hil_rc_inputs_raw->time_usec, hil_rc_inputs_raw->chan1_raw, hil_rc_inputs_raw->chan2_raw, hil_rc_inputs_raw->chan3_raw, hil_rc_inputs_raw->chan4_raw, hil_rc_inputs_raw->chan5_raw, hil_rc_inputs_raw->chan6_raw, hil_rc_inputs_raw->chan7_raw, hil_rc_inputs_raw->chan8_raw, hil_rc_inputs_raw->chan9_raw, hil_rc_inputs_raw->chan10_raw, hil_rc_inputs_raw->chan11_raw, hil_rc_inputs_raw->chan12_raw, hil_rc_inputs_raw->rssi);
}
# 375 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint64_t mavlink_msg_hil_rc_inputs_raw_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan1_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan2_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan3_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan4_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan5_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan6_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan7_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan8_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan9_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan10_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan11_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan12_raw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_hil_rc_inputs_raw_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}







static inline void mavlink_msg_hil_rc_inputs_raw_decode(const mavlink_message_t* msg, mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
# 534 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
        uint8_t len = msg->len < 33? msg->len : 33;
        memset(hil_rc_inputs_raw, 0, 33);
    memcpy(hil_rc_inputs_raw, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1069 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h" 1
       


#define MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS 93

typedef struct __mavlink_hil_actuator_controls_t { uint64_t time_usec; uint64_t flags; float controls[16]; uint8_t mode; } __attribute__((packed))





   mavlink_hil_actuator_controls_t;

#define MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS_LEN 81
#define MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS_MIN_LEN 81
#define MAVLINK_MSG_ID_93_LEN 81
#define MAVLINK_MSG_ID_93_MIN_LEN 81

#define MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS_CRC 47
#define MAVLINK_MSG_ID_93_CRC 47

#define MAVLINK_MSG_HIL_ACTUATOR_CONTROLS_FIELD_CONTROLS_LEN 16
# 36 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h"
#define MAVLINK_MESSAGE_INFO_HIL_ACTUATOR_CONTROLS { "HIL_ACTUATOR_CONTROLS", 4, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_actuator_controls_t, time_usec) }, { "flags", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_hil_actuator_controls_t, flags) }, { "controls", NULL, MAVLINK_TYPE_FLOAT, 16, 16, offsetof(mavlink_hil_actuator_controls_t, controls) }, { "mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 80, offsetof(mavlink_hil_actuator_controls_t, mode) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h"
static inline uint16_t mavlink_msg_hil_actuator_controls_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, const float *controls, uint8_t mode, uint64_t flags)
{
# 70 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h"
    mavlink_hil_actuator_controls_t packet;
    packet.time_usec = time_usec;
    packet.flags = flags;
    packet.mode = mode;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 81);


    msg->msgid = 93;
    return mavlink_finalize_message(msg, system_id, component_id, 81, 81, 47);
}
# 94 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h"
static inline uint16_t mavlink_msg_hil_actuator_controls_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,const float *controls,uint8_t mode,uint64_t flags)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h"
    mavlink_hil_actuator_controls_t packet;
    packet.time_usec = time_usec;
    packet.flags = flags;
    packet.mode = mode;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 81);


    msg->msgid = 93;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 81, 81, 47);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h"
static inline uint16_t mavlink_msg_hil_actuator_controls_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_actuator_controls_t* hil_actuator_controls)
{
    return mavlink_msg_hil_actuator_controls_pack(system_id, component_id, msg, hil_actuator_controls->time_usec, hil_actuator_controls->controls, hil_actuator_controls->mode, hil_actuator_controls->flags);
}
# 140 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h"
static inline uint16_t mavlink_msg_hil_actuator_controls_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_actuator_controls_t* hil_actuator_controls)
{
    return mavlink_msg_hil_actuator_controls_pack_chan(system_id, component_id, chan, msg, hil_actuator_controls->time_usec, hil_actuator_controls->controls, hil_actuator_controls->mode, hil_actuator_controls->flags);
}
# 227 "./lib/main/MAVLink/common/./mavlink_msg_hil_actuator_controls.h"
static inline uint64_t mavlink_msg_hil_actuator_controls_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_actuator_controls_get_controls(const mavlink_message_t* msg, float *controls)
{
    return _MAV_RETURN_float_array(msg, controls, 16, 16);
}






static inline uint8_t mavlink_msg_hil_actuator_controls_get_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[80];
}






static inline uint64_t mavlink_msg_hil_actuator_controls_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 8);
}







static inline void mavlink_msg_hil_actuator_controls_decode(const mavlink_message_t* msg, mavlink_hil_actuator_controls_t* hil_actuator_controls)
{






        uint8_t len = msg->len < 81? msg->len : 81;
        memset(hil_actuator_controls, 0, 81);
    memcpy(hil_actuator_controls, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1070 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h" 1
       


#define MAVLINK_MSG_ID_OPTICAL_FLOW 100

typedef struct __mavlink_optical_flow_t { uint64_t time_usec; float flow_comp_m_x; float flow_comp_m_y; float ground_distance; int16_t flow_x; int16_t flow_y; uint8_t sensor_id; uint8_t quality; } __attribute__((packed))
# 16 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
   mavlink_optical_flow_t;

#define MAVLINK_MSG_ID_OPTICAL_FLOW_LEN 26
#define MAVLINK_MSG_ID_OPTICAL_FLOW_MIN_LEN 26
#define MAVLINK_MSG_ID_100_LEN 26
#define MAVLINK_MSG_ID_100_MIN_LEN 26

#define MAVLINK_MSG_ID_OPTICAL_FLOW_CRC 175
#define MAVLINK_MSG_ID_100_CRC 175
# 44 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
#define MAVLINK_MESSAGE_INFO_OPTICAL_FLOW { "OPTICAL_FLOW", 8, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_optical_flow_t, time_usec) }, { "flow_comp_m_x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_optical_flow_t, flow_comp_m_x) }, { "flow_comp_m_y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_optical_flow_t, flow_comp_m_y) }, { "ground_distance", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_optical_flow_t, ground_distance) }, { "flow_x", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_optical_flow_t, flow_x) }, { "flow_y", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_optical_flow_t, flow_y) }, { "sensor_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 24, offsetof(mavlink_optical_flow_t, sensor_id) }, { "quality", NULL, MAVLINK_TYPE_UINT8_T, 0, 25, offsetof(mavlink_optical_flow_t, quality) }, } }
# 75 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t sensor_id, int16_t flow_x, int16_t flow_y, float flow_comp_m_x, float flow_comp_m_y, uint8_t quality, float ground_distance)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
    mavlink_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.flow_comp_m_x = flow_comp_m_x;
    packet.flow_comp_m_y = flow_comp_m_y;
    packet.ground_distance = ground_distance;
    packet.flow_x = flow_x;
    packet.flow_y = flow_y;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 100;
    return mavlink_finalize_message(msg, system_id, component_id, 26, 26, 175);
}
# 124 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t sensor_id,int16_t flow_x,int16_t flow_y,float flow_comp_m_x,float flow_comp_m_y,uint8_t quality,float ground_distance)
{
# 141 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
    mavlink_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.flow_comp_m_x = flow_comp_m_x;
    packet.flow_comp_m_y = flow_comp_m_y;
    packet.ground_distance = ground_distance;
    packet.flow_x = flow_x;
    packet.flow_y = flow_y;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


    msg->msgid = 100;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 26, 175);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_optical_flow_t* optical_flow)
{
    return mavlink_msg_optical_flow_pack(system_id, component_id, msg, optical_flow->time_usec, optical_flow->sensor_id, optical_flow->flow_x, optical_flow->flow_y, optical_flow->flow_comp_m_x, optical_flow->flow_comp_m_y, optical_flow->quality, optical_flow->ground_distance);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_optical_flow_t* optical_flow)
{
    return mavlink_msg_optical_flow_pack_chan(system_id, component_id, chan, msg, optical_flow->time_usec, optical_flow->sensor_id, optical_flow->flow_x, optical_flow->flow_y, optical_flow->flow_comp_m_x, optical_flow->flow_comp_m_y, optical_flow->quality, optical_flow->ground_distance);
}
# 291 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint64_t mavlink_msg_optical_flow_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_optical_flow_get_sensor_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline int16_t mavlink_msg_optical_flow_get_flow_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_optical_flow_get_flow_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline float mavlink_msg_optical_flow_get_flow_comp_m_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_optical_flow_get_flow_comp_m_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline uint8_t mavlink_msg_optical_flow_get_quality(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline float mavlink_msg_optical_flow_get_ground_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_optical_flow_decode(const mavlink_message_t* msg, mavlink_optical_flow_t* optical_flow)
{
# 384 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
        uint8_t len = msg->len < 26? msg->len : 26;
        memset(optical_flow, 0, 26);
    memcpy(optical_flow, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1071 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h" 1
       


#define MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE 101

typedef struct __mavlink_global_vision_position_estimate_t { uint64_t usec; float x; float y; float z; float roll; float pitch; float yaw; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
   mavlink_global_vision_position_estimate_t;

#define MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE_LEN 32
#define MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE_MIN_LEN 32
#define MAVLINK_MSG_ID_101_LEN 32
#define MAVLINK_MSG_ID_101_MIN_LEN 32

#define MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE_CRC 102
#define MAVLINK_MSG_ID_101_CRC 102
# 42 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
#define MAVLINK_MESSAGE_INFO_GLOBAL_VISION_POSITION_ESTIMATE { "GLOBAL_VISION_POSITION_ESTIMATE", 7, { { "usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_global_vision_position_estimate_t, usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_global_vision_position_estimate_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_global_vision_position_estimate_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_global_vision_position_estimate_t, z) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_global_vision_position_estimate_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_global_vision_position_estimate_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_global_vision_position_estimate_t, yaw) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
    mavlink_global_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 101;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 102);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
    mavlink_global_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 101;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 102);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
    return mavlink_msg_global_vision_position_estimate_pack(system_id, component_id, msg, global_vision_position_estimate->usec, global_vision_position_estimate->x, global_vision_position_estimate->y, global_vision_position_estimate->z, global_vision_position_estimate->roll, global_vision_position_estimate->pitch, global_vision_position_estimate->yaw);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
    return mavlink_msg_global_vision_position_estimate_pack_chan(system_id, component_id, chan, msg, global_vision_position_estimate->usec, global_vision_position_estimate->x, global_vision_position_estimate->y, global_vision_position_estimate->z, global_vision_position_estimate->roll, global_vision_position_estimate->pitch, global_vision_position_estimate->yaw);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint64_t mavlink_msg_global_vision_position_estimate_get_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_global_vision_position_estimate_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_global_vision_position_estimate_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_global_vision_position_estimate_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_global_vision_position_estimate_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_global_vision_position_estimate_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_global_vision_position_estimate_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_global_vision_position_estimate_decode(const mavlink_message_t* msg, mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(global_vision_position_estimate, 0, 32);
    memcpy(global_vision_position_estimate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1072 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h" 1
       


#define MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE 102

typedef struct __mavlink_vision_position_estimate_t { uint64_t usec; float x; float y; float z; float roll; float pitch; float yaw; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
   mavlink_vision_position_estimate_t;

#define MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE_LEN 32
#define MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE_MIN_LEN 32
#define MAVLINK_MSG_ID_102_LEN 32
#define MAVLINK_MSG_ID_102_MIN_LEN 32

#define MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE_CRC 158
#define MAVLINK_MSG_ID_102_CRC 158
# 42 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
#define MAVLINK_MESSAGE_INFO_VISION_POSITION_ESTIMATE { "VISION_POSITION_ESTIMATE", 7, { { "usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_vision_position_estimate_t, usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vision_position_estimate_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vision_position_estimate_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_vision_position_estimate_t, z) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_vision_position_estimate_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_vision_position_estimate_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_vision_position_estimate_t, yaw) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
    mavlink_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 102;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 158);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
    mavlink_vision_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 102;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 158);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_position_estimate_t* vision_position_estimate)
{
    return mavlink_msg_vision_position_estimate_pack(system_id, component_id, msg, vision_position_estimate->usec, vision_position_estimate->x, vision_position_estimate->y, vision_position_estimate->z, vision_position_estimate->roll, vision_position_estimate->pitch, vision_position_estimate->yaw);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_position_estimate_t* vision_position_estimate)
{
    return mavlink_msg_vision_position_estimate_pack_chan(system_id, component_id, chan, msg, vision_position_estimate->usec, vision_position_estimate->x, vision_position_estimate->y, vision_position_estimate->z, vision_position_estimate->roll, vision_position_estimate->pitch, vision_position_estimate->yaw);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint64_t mavlink_msg_vision_position_estimate_get_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vision_position_estimate_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vision_position_estimate_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vision_position_estimate_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_vision_position_estimate_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_vision_position_estimate_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_vision_position_estimate_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_vision_position_estimate_decode(const mavlink_message_t* msg, mavlink_vision_position_estimate_t* vision_position_estimate)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(vision_position_estimate, 0, 32);
    memcpy(vision_position_estimate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1073 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h" 1
       


#define MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE 103

typedef struct __mavlink_vision_speed_estimate_t { uint64_t usec; float x; float y; float z; } __attribute__((packed))





   mavlink_vision_speed_estimate_t;

#define MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE_LEN 20
#define MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE_MIN_LEN 20
#define MAVLINK_MSG_ID_103_LEN 20
#define MAVLINK_MSG_ID_103_MIN_LEN 20

#define MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE_CRC 208
#define MAVLINK_MSG_ID_103_CRC 208
# 36 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
#define MAVLINK_MESSAGE_INFO_VISION_SPEED_ESTIMATE { "VISION_SPEED_ESTIMATE", 4, { { "usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_vision_speed_estimate_t, usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vision_speed_estimate_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vision_speed_estimate_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_vision_speed_estimate_t, z) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t usec, float x, float y, float z)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
    mavlink_vision_speed_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 103;
    return mavlink_finalize_message(msg, system_id, component_id, 20, 20, 208);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t usec,float x,float y,float z)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
    mavlink_vision_speed_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


    msg->msgid = 103;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20, 208);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{
    return mavlink_msg_vision_speed_estimate_pack(system_id, component_id, msg, vision_speed_estimate->usec, vision_speed_estimate->x, vision_speed_estimate->y, vision_speed_estimate->z);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{
    return mavlink_msg_vision_speed_estimate_pack_chan(system_id, component_id, chan, msg, vision_speed_estimate->usec, vision_speed_estimate->x, vision_speed_estimate->y, vision_speed_estimate->z);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint64_t mavlink_msg_vision_speed_estimate_get_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vision_speed_estimate_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vision_speed_estimate_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vision_speed_estimate_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_vision_speed_estimate_decode(const mavlink_message_t* msg, mavlink_vision_speed_estimate_t* vision_speed_estimate)
{






        uint8_t len = msg->len < 20? msg->len : 20;
        memset(vision_speed_estimate, 0, 20);
    memcpy(vision_speed_estimate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1074 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h" 1
       


#define MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE 104

typedef struct __mavlink_vicon_position_estimate_t { uint64_t usec; float x; float y; float z; float roll; float pitch; float yaw; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
   mavlink_vicon_position_estimate_t;

#define MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE_LEN 32
#define MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE_MIN_LEN 32
#define MAVLINK_MSG_ID_104_LEN 32
#define MAVLINK_MSG_ID_104_MIN_LEN 32

#define MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE_CRC 56
#define MAVLINK_MSG_ID_104_CRC 56
# 42 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
#define MAVLINK_MESSAGE_INFO_VICON_POSITION_ESTIMATE { "VICON_POSITION_ESTIMATE", 7, { { "usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_vicon_position_estimate_t, usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vicon_position_estimate_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vicon_position_estimate_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_vicon_position_estimate_t, z) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_vicon_position_estimate_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_vicon_position_estimate_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_vicon_position_estimate_t, yaw) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
    mavlink_vicon_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 104;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 56);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
    mavlink_vicon_position_estimate_t packet;
    packet.usec = usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 104;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 56);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
    return mavlink_msg_vicon_position_estimate_pack(system_id, component_id, msg, vicon_position_estimate->usec, vicon_position_estimate->x, vicon_position_estimate->y, vicon_position_estimate->z, vicon_position_estimate->roll, vicon_position_estimate->pitch, vicon_position_estimate->yaw);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
    return mavlink_msg_vicon_position_estimate_pack_chan(system_id, component_id, chan, msg, vicon_position_estimate->usec, vicon_position_estimate->x, vicon_position_estimate->y, vicon_position_estimate->z, vicon_position_estimate->roll, vicon_position_estimate->pitch, vicon_position_estimate->yaw);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint64_t mavlink_msg_vicon_position_estimate_get_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vicon_position_estimate_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vicon_position_estimate_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vicon_position_estimate_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_vicon_position_estimate_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_vicon_position_estimate_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_vicon_position_estimate_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_vicon_position_estimate_decode(const mavlink_message_t* msg, mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(vicon_position_estimate, 0, 32);
    memcpy(vicon_position_estimate, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1075 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h" 1
       


#define MAVLINK_MSG_ID_HIGHRES_IMU 105

typedef struct __mavlink_highres_imu_t { uint64_t time_usec; float xacc; float yacc; float zacc; float xgyro; float ygyro; float zgyro; float xmag; float ymag; float zmag; float abs_pressure; float diff_pressure; float pressure_alt; float temperature; uint16_t fields_updated; } __attribute__((packed))
# 23 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
   mavlink_highres_imu_t;

#define MAVLINK_MSG_ID_HIGHRES_IMU_LEN 62
#define MAVLINK_MSG_ID_HIGHRES_IMU_MIN_LEN 62
#define MAVLINK_MSG_ID_105_LEN 62
#define MAVLINK_MSG_ID_105_MIN_LEN 62

#define MAVLINK_MSG_ID_HIGHRES_IMU_CRC 93
#define MAVLINK_MSG_ID_105_CRC 93
# 58 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
#define MAVLINK_MESSAGE_INFO_HIGHRES_IMU { "HIGHRES_IMU", 15, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_highres_imu_t, time_usec) }, { "xacc", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_highres_imu_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_highres_imu_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_highres_imu_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_highres_imu_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_highres_imu_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_highres_imu_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_highres_imu_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_highres_imu_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_highres_imu_t, zmag) }, { "abs_pressure", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_highres_imu_t, abs_pressure) }, { "diff_pressure", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_highres_imu_t, diff_pressure) }, { "pressure_alt", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_highres_imu_t, pressure_alt) }, { "temperature", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_highres_imu_t, temperature) }, { "fields_updated", NULL, MAVLINK_TYPE_UINT16_T, 0, 60, offsetof(mavlink_highres_imu_t, fields_updated) }, } }
# 103 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint16_t fields_updated)
{
# 126 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
    mavlink_highres_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 62);


    msg->msgid = 105;
    return mavlink_finalize_message(msg, system_id, component_id, 62, 62, 93);
}
# 173 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float xmag,float ymag,float zmag,float abs_pressure,float diff_pressure,float pressure_alt,float temperature,uint16_t fields_updated)
{
# 197 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
    mavlink_highres_imu_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 62);


    msg->msgid = 105;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 62, 62, 93);
}
# 229 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_highres_imu_t* highres_imu)
{
    return mavlink_msg_highres_imu_pack(system_id, component_id, msg, highres_imu->time_usec, highres_imu->xacc, highres_imu->yacc, highres_imu->zacc, highres_imu->xgyro, highres_imu->ygyro, highres_imu->zgyro, highres_imu->xmag, highres_imu->ymag, highres_imu->zmag, highres_imu->abs_pressure, highres_imu->diff_pressure, highres_imu->pressure_alt, highres_imu->temperature, highres_imu->fields_updated);
}
# 243 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_highres_imu_t* highres_imu)
{
    return mavlink_msg_highres_imu_pack_chan(system_id, component_id, chan, msg, highres_imu->time_usec, highres_imu->xacc, highres_imu->yacc, highres_imu->zacc, highres_imu->xgyro, highres_imu->ygyro, highres_imu->zgyro, highres_imu->xmag, highres_imu->ymag, highres_imu->zmag, highres_imu->abs_pressure, highres_imu->diff_pressure, highres_imu->pressure_alt, highres_imu->temperature, highres_imu->fields_updated);
}
# 389 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint64_t mavlink_msg_highres_imu_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_highres_imu_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_highres_imu_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_highres_imu_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_highres_imu_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_highres_imu_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_highres_imu_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_highres_imu_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_highres_imu_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_highres_imu_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_highres_imu_get_abs_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_highres_imu_get_diff_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_highres_imu_get_pressure_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_highres_imu_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 56);
}






static inline uint16_t mavlink_msg_highres_imu_get_fields_updated(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 60);
}







static inline void mavlink_msg_highres_imu_decode(const mavlink_message_t* msg, mavlink_highres_imu_t* highres_imu)
{
# 559 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
        uint8_t len = msg->len < 62? msg->len : 62;
        memset(highres_imu, 0, 62);
    memcpy(highres_imu, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1076 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h" 1
       


#define MAVLINK_MSG_ID_OPTICAL_FLOW_RAD 106

typedef struct __mavlink_optical_flow_rad_t { uint64_t time_usec; uint32_t integration_time_us; float integrated_x; float integrated_y; float integrated_xgyro; float integrated_ygyro; float integrated_zgyro; uint32_t time_delta_distance_us; float distance; int16_t temperature; uint8_t sensor_id; uint8_t quality; } __attribute__((packed))
# 20 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
   mavlink_optical_flow_rad_t;

#define MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_LEN 44
#define MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_MIN_LEN 44
#define MAVLINK_MSG_ID_106_LEN 44
#define MAVLINK_MSG_ID_106_MIN_LEN 44

#define MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_CRC 138
#define MAVLINK_MSG_ID_106_CRC 138
# 52 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
#define MAVLINK_MESSAGE_INFO_OPTICAL_FLOW_RAD { "OPTICAL_FLOW_RAD", 12, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_optical_flow_rad_t, time_usec) }, { "integration_time_us", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_optical_flow_rad_t, integration_time_us) }, { "integrated_x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_optical_flow_rad_t, integrated_x) }, { "integrated_y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_optical_flow_rad_t, integrated_y) }, { "integrated_xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_optical_flow_rad_t, integrated_xgyro) }, { "integrated_ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_optical_flow_rad_t, integrated_ygyro) }, { "integrated_zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_optical_flow_rad_t, integrated_zgyro) }, { "time_delta_distance_us", NULL, MAVLINK_TYPE_UINT32_T, 0, 32, offsetof(mavlink_optical_flow_rad_t, time_delta_distance_us) }, { "distance", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_optical_flow_rad_t, distance) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 40, offsetof(mavlink_optical_flow_rad_t, temperature) }, { "sensor_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 42, offsetof(mavlink_optical_flow_rad_t, sensor_id) }, { "quality", NULL, MAVLINK_TYPE_UINT8_T, 0, 43, offsetof(mavlink_optical_flow_rad_t, quality) }, } }
# 91 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 111 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
    mavlink_optical_flow_rad_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 106;
    return mavlink_finalize_message(msg, system_id, component_id, 44, 44, 138);
}
# 152 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t sensor_id,uint32_t integration_time_us,float integrated_x,float integrated_y,float integrated_xgyro,float integrated_ygyro,float integrated_zgyro,int16_t temperature,uint8_t quality,uint32_t time_delta_distance_us,float distance)
{
# 173 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
    mavlink_optical_flow_rad_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 106;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 44, 138);
}
# 202 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_optical_flow_rad_t* optical_flow_rad)
{
    return mavlink_msg_optical_flow_rad_pack(system_id, component_id, msg, optical_flow_rad->time_usec, optical_flow_rad->sensor_id, optical_flow_rad->integration_time_us, optical_flow_rad->integrated_x, optical_flow_rad->integrated_y, optical_flow_rad->integrated_xgyro, optical_flow_rad->integrated_ygyro, optical_flow_rad->integrated_zgyro, optical_flow_rad->temperature, optical_flow_rad->quality, optical_flow_rad->time_delta_distance_us, optical_flow_rad->distance);
}
# 216 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_optical_flow_rad_t* optical_flow_rad)
{
    return mavlink_msg_optical_flow_rad_pack_chan(system_id, component_id, chan, msg, optical_flow_rad->time_usec, optical_flow_rad->sensor_id, optical_flow_rad->integration_time_us, optical_flow_rad->integrated_x, optical_flow_rad->integrated_y, optical_flow_rad->integrated_xgyro, optical_flow_rad->integrated_ygyro, optical_flow_rad->integrated_zgyro, optical_flow_rad->temperature, optical_flow_rad->quality, optical_flow_rad->time_delta_distance_us, optical_flow_rad->distance);
}
# 347 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint64_t mavlink_msg_optical_flow_rad_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_optical_flow_rad_get_sensor_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint32_t mavlink_msg_optical_flow_rad_get_integration_time_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline int16_t mavlink_msg_optical_flow_rad_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 40);
}






static inline uint8_t mavlink_msg_optical_flow_rad_get_quality(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint32_t mavlink_msg_optical_flow_rad_get_time_delta_distance_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 32);
}






static inline float mavlink_msg_optical_flow_rad_get_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_optical_flow_rad_decode(const mavlink_message_t* msg, mavlink_optical_flow_rad_t* optical_flow_rad)
{
# 484 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
        uint8_t len = msg->len < 44? msg->len : 44;
        memset(optical_flow_rad, 0, 44);
    memcpy(optical_flow_rad, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1077 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h" 1
       


#define MAVLINK_MSG_ID_HIL_SENSOR 107

typedef struct __mavlink_hil_sensor_t { uint64_t time_usec; float xacc; float yacc; float zacc; float xgyro; float ygyro; float zgyro; float xmag; float ymag; float zmag; float abs_pressure; float diff_pressure; float pressure_alt; float temperature; uint32_t fields_updated; } __attribute__((packed))
# 23 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
   mavlink_hil_sensor_t;

#define MAVLINK_MSG_ID_HIL_SENSOR_LEN 64
#define MAVLINK_MSG_ID_HIL_SENSOR_MIN_LEN 64
#define MAVLINK_MSG_ID_107_LEN 64
#define MAVLINK_MSG_ID_107_MIN_LEN 64

#define MAVLINK_MSG_ID_HIL_SENSOR_CRC 108
#define MAVLINK_MSG_ID_107_CRC 108
# 58 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
#define MAVLINK_MESSAGE_INFO_HIL_SENSOR { "HIL_SENSOR", 15, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_sensor_t, time_usec) }, { "xacc", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_hil_sensor_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_hil_sensor_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_hil_sensor_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_hil_sensor_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_sensor_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_sensor_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_hil_sensor_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_hil_sensor_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_hil_sensor_t, zmag) }, { "abs_pressure", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_hil_sensor_t, abs_pressure) }, { "diff_pressure", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_hil_sensor_t, diff_pressure) }, { "pressure_alt", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_hil_sensor_t, pressure_alt) }, { "temperature", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_hil_sensor_t, temperature) }, { "fields_updated", NULL, MAVLINK_TYPE_UINT32_T, 0, 60, offsetof(mavlink_hil_sensor_t, fields_updated) }, } }
# 103 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint32_t fields_updated)
{
# 126 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
    mavlink_hil_sensor_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


    msg->msgid = 107;
    return mavlink_finalize_message(msg, system_id, component_id, 64, 64, 108);
}
# 173 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float xmag,float ymag,float zmag,float abs_pressure,float diff_pressure,float pressure_alt,float temperature,uint32_t fields_updated)
{
# 197 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
    mavlink_hil_sensor_t packet;
    packet.time_usec = time_usec;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;
    packet.abs_pressure = abs_pressure;
    packet.diff_pressure = diff_pressure;
    packet.pressure_alt = pressure_alt;
    packet.temperature = temperature;
    packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


    msg->msgid = 107;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 64, 64, 108);
}
# 229 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_sensor_t* hil_sensor)
{
    return mavlink_msg_hil_sensor_pack(system_id, component_id, msg, hil_sensor->time_usec, hil_sensor->xacc, hil_sensor->yacc, hil_sensor->zacc, hil_sensor->xgyro, hil_sensor->ygyro, hil_sensor->zgyro, hil_sensor->xmag, hil_sensor->ymag, hil_sensor->zmag, hil_sensor->abs_pressure, hil_sensor->diff_pressure, hil_sensor->pressure_alt, hil_sensor->temperature, hil_sensor->fields_updated);
}
# 243 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_sensor_t* hil_sensor)
{
    return mavlink_msg_hil_sensor_pack_chan(system_id, component_id, chan, msg, hil_sensor->time_usec, hil_sensor->xacc, hil_sensor->yacc, hil_sensor->zacc, hil_sensor->xgyro, hil_sensor->ygyro, hil_sensor->zgyro, hil_sensor->xmag, hil_sensor->ymag, hil_sensor->zmag, hil_sensor->abs_pressure, hil_sensor->diff_pressure, hil_sensor->pressure_alt, hil_sensor->temperature, hil_sensor->fields_updated);
}
# 389 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint64_t mavlink_msg_hil_sensor_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_sensor_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_sensor_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_sensor_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_sensor_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_sensor_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_sensor_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_sensor_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_hil_sensor_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_hil_sensor_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_hil_sensor_get_abs_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_hil_sensor_get_diff_pressure(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_hil_sensor_get_pressure_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_hil_sensor_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 56);
}






static inline uint32_t mavlink_msg_hil_sensor_get_fields_updated(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 60);
}







static inline void mavlink_msg_hil_sensor_decode(const mavlink_message_t* msg, mavlink_hil_sensor_t* hil_sensor)
{
# 559 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
        uint8_t len = msg->len < 64? msg->len : 64;
        memset(hil_sensor, 0, 64);
    memcpy(hil_sensor, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1078 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h" 1
       


#define MAVLINK_MSG_ID_SIM_STATE 108

typedef struct __mavlink_sim_state_t { float q1; float q2; float q3; float q4; float roll; float pitch; float yaw; float xacc; float yacc; float zacc; float xgyro; float ygyro; float zgyro; float lat; float lon; float alt; float std_dev_horz; float std_dev_vert; float vn; float ve; float vd; } __attribute__((packed))
# 29 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
   mavlink_sim_state_t;

#define MAVLINK_MSG_ID_SIM_STATE_LEN 84
#define MAVLINK_MSG_ID_SIM_STATE_MIN_LEN 84
#define MAVLINK_MSG_ID_108_LEN 84
#define MAVLINK_MSG_ID_108_MIN_LEN 84

#define MAVLINK_MSG_ID_SIM_STATE_CRC 32
#define MAVLINK_MSG_ID_108_CRC 32
# 70 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
#define MAVLINK_MESSAGE_INFO_SIM_STATE { "SIM_STATE", 21, { { "q1", NULL, MAVLINK_TYPE_FLOAT, 0, 0, offsetof(mavlink_sim_state_t, q1) }, { "q2", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_sim_state_t, q2) }, { "q3", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_sim_state_t, q3) }, { "q4", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_sim_state_t, q4) }, { "roll", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_sim_state_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_sim_state_t, pitch) }, { "yaw", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_sim_state_t, yaw) }, { "xacc", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_sim_state_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_sim_state_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_sim_state_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_sim_state_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_sim_state_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_sim_state_t, zgyro) }, { "lat", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_sim_state_t, lat) }, { "lon", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_sim_state_t, lon) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 60, offsetof(mavlink_sim_state_t, alt) }, { "std_dev_horz", NULL, MAVLINK_TYPE_FLOAT, 0, 64, offsetof(mavlink_sim_state_t, std_dev_horz) }, { "std_dev_vert", NULL, MAVLINK_TYPE_FLOAT, 0, 68, offsetof(mavlink_sim_state_t, std_dev_vert) }, { "vn", NULL, MAVLINK_TYPE_FLOAT, 0, 72, offsetof(mavlink_sim_state_t, vn) }, { "ve", NULL, MAVLINK_TYPE_FLOAT, 0, 76, offsetof(mavlink_sim_state_t, ve) }, { "vd", NULL, MAVLINK_TYPE_FLOAT, 0, 80, offsetof(mavlink_sim_state_t, vd) }, } }
# 127 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd)
{
# 156 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
    mavlink_sim_state_t packet;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.std_dev_horz = std_dev_horz;
    packet.std_dev_vert = std_dev_vert;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 84);


    msg->msgid = 108;
    return mavlink_finalize_message(msg, system_id, component_id, 84, 84, 32);
}
# 215 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   float q1,float q2,float q3,float q4,float roll,float pitch,float yaw,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float lat,float lon,float alt,float std_dev_horz,float std_dev_vert,float vn,float ve,float vd)
{
# 245 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
    mavlink_sim_state_t packet;
    packet.q1 = q1;
    packet.q2 = q2;
    packet.q3 = q3;
    packet.q4 = q4;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.yaw = yaw;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.std_dev_horz = std_dev_horz;
    packet.std_dev_vert = std_dev_vert;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 84);


    msg->msgid = 108;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 84, 84, 32);
}
# 283 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sim_state_t* sim_state)
{
    return mavlink_msg_sim_state_pack(system_id, component_id, msg, sim_state->q1, sim_state->q2, sim_state->q3, sim_state->q4, sim_state->roll, sim_state->pitch, sim_state->yaw, sim_state->xacc, sim_state->yacc, sim_state->zacc, sim_state->xgyro, sim_state->ygyro, sim_state->zgyro, sim_state->lat, sim_state->lon, sim_state->alt, sim_state->std_dev_horz, sim_state->std_dev_vert, sim_state->vn, sim_state->ve, sim_state->vd);
}
# 297 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sim_state_t* sim_state)
{
    return mavlink_msg_sim_state_pack_chan(system_id, component_id, chan, msg, sim_state->q1, sim_state->q2, sim_state->q3, sim_state->q4, sim_state->roll, sim_state->pitch, sim_state->yaw, sim_state->xacc, sim_state->yacc, sim_state->zacc, sim_state->xgyro, sim_state->ygyro, sim_state->zgyro, sim_state->lat, sim_state->lon, sim_state->alt, sim_state->std_dev_horz, sim_state->std_dev_vert, sim_state->vn, sim_state->ve, sim_state->vd);
}
# 473 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline float mavlink_msg_sim_state_get_q1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_sim_state_get_q2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_sim_state_get_q3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_sim_state_get_q4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_sim_state_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_sim_state_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_sim_state_get_yaw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_sim_state_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_sim_state_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_sim_state_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_sim_state_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_sim_state_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_sim_state_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_sim_state_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_sim_state_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 56);
}






static inline float mavlink_msg_sim_state_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 60);
}






static inline float mavlink_msg_sim_state_get_std_dev_horz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 64);
}






static inline float mavlink_msg_sim_state_get_std_dev_vert(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 68);
}






static inline float mavlink_msg_sim_state_get_vn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 72);
}






static inline float mavlink_msg_sim_state_get_ve(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 76);
}






static inline float mavlink_msg_sim_state_get_vd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 80);
}







static inline void mavlink_msg_sim_state_decode(const mavlink_message_t* msg, mavlink_sim_state_t* sim_state)
{
# 709 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
        uint8_t len = msg->len < 84? msg->len : 84;
        memset(sim_state, 0, 84);
    memcpy(sim_state, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1079 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h" 1
       


#define MAVLINK_MSG_ID_RADIO_STATUS 109

typedef struct __mavlink_radio_status_t { uint16_t rxerrors; uint16_t fixed; uint8_t rssi; uint8_t remrssi; uint8_t txbuf; uint8_t noise; uint8_t remnoise; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
   mavlink_radio_status_t;

#define MAVLINK_MSG_ID_RADIO_STATUS_LEN 9
#define MAVLINK_MSG_ID_RADIO_STATUS_MIN_LEN 9
#define MAVLINK_MSG_ID_109_LEN 9
#define MAVLINK_MSG_ID_109_MIN_LEN 9

#define MAVLINK_MSG_ID_RADIO_STATUS_CRC 185
#define MAVLINK_MSG_ID_109_CRC 185
# 42 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
#define MAVLINK_MESSAGE_INFO_RADIO_STATUS { "RADIO_STATUS", 7, { { "rxerrors", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_radio_status_t, rxerrors) }, { "fixed", NULL, MAVLINK_TYPE_UINT16_T, 0, 2, offsetof(mavlink_radio_status_t, fixed) }, { "rssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_radio_status_t, rssi) }, { "remrssi", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_radio_status_t, remrssi) }, { "txbuf", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_radio_status_t, txbuf) }, { "noise", NULL, MAVLINK_TYPE_UINT8_T, 0, 7, offsetof(mavlink_radio_status_t, noise) }, { "remnoise", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_radio_status_t, remnoise) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
    mavlink_radio_status_t packet;
    packet.rxerrors = rxerrors;
    packet.fixed = fixed;
    packet.rssi = rssi;
    packet.remrssi = remrssi;
    packet.txbuf = txbuf;
    packet.noise = noise;
    packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 109;
    return mavlink_finalize_message(msg, system_id, component_id, 9, 9, 185);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t rssi,uint8_t remrssi,uint8_t txbuf,uint8_t noise,uint8_t remnoise,uint16_t rxerrors,uint16_t fixed)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
    mavlink_radio_status_t packet;
    packet.rxerrors = rxerrors;
    packet.fixed = fixed;
    packet.rssi = rssi;
    packet.remrssi = remrssi;
    packet.txbuf = txbuf;
    packet.noise = noise;
    packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 109;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 9, 185);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_radio_status_t* radio_status)
{
    return mavlink_msg_radio_status_pack(system_id, component_id, msg, radio_status->rssi, radio_status->remrssi, radio_status->txbuf, radio_status->noise, radio_status->remnoise, radio_status->rxerrors, radio_status->fixed);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_radio_status_t* radio_status)
{
    return mavlink_msg_radio_status_pack_chan(system_id, component_id, chan, msg, radio_status->rssi, radio_status->remrssi, radio_status->txbuf, radio_status->noise, radio_status->remnoise, radio_status->rxerrors, radio_status->fixed);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint8_t mavlink_msg_radio_status_get_rssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_radio_status_get_remrssi(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_radio_status_get_txbuf(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_radio_status_get_noise(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_radio_status_get_remnoise(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_radio_status_get_rxerrors(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_radio_status_get_fixed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_radio_status_decode(const mavlink_message_t* msg, mavlink_radio_status_t* radio_status)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
        uint8_t len = msg->len < 9? msg->len : 9;
        memset(radio_status, 0, 9);
    memcpy(radio_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1080 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h" 1
       


#define MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL 110

typedef struct __mavlink_file_transfer_protocol_t { uint8_t target_network; uint8_t target_system; uint8_t target_component; uint8_t payload[251]; } __attribute__((packed))





   mavlink_file_transfer_protocol_t;

#define MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN 254
#define MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_MIN_LEN 254
#define MAVLINK_MSG_ID_110_LEN 254
#define MAVLINK_MSG_ID_110_MIN_LEN 254

#define MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_CRC 84
#define MAVLINK_MSG_ID_110_CRC 84

#define MAVLINK_MSG_FILE_TRANSFER_PROTOCOL_FIELD_PAYLOAD_LEN 251
# 36 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
#define MAVLINK_MESSAGE_INFO_FILE_TRANSFER_PROTOCOL { "FILE_TRANSFER_PROTOCOL", 4, { { "target_network", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_file_transfer_protocol_t, target_network) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_file_transfer_protocol_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_file_transfer_protocol_t, target_component) }, { "payload", NULL, MAVLINK_TYPE_UINT8_T, 251, 3, offsetof(mavlink_file_transfer_protocol_t, payload) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
# 70 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
    mavlink_file_transfer_protocol_t packet;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


    msg->msgid = 110;
    return mavlink_finalize_message(msg, system_id, component_id, 254, 254, 84);
}
# 94 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_network,uint8_t target_system,uint8_t target_component,const uint8_t *payload)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
    mavlink_file_transfer_protocol_t packet;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


    msg->msgid = 110;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 254, 254, 84);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
    return mavlink_msg_file_transfer_protocol_pack(system_id, component_id, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
}
# 140 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
    return mavlink_msg_file_transfer_protocol_pack_chan(system_id, component_id, chan, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
}
# 227 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_network(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_file_transfer_protocol_get_payload(const mavlink_message_t* msg, uint8_t *payload)
{
    return _MAV_RETURN_uint8_t_array(msg, payload, 251, 3);
}







static inline void mavlink_msg_file_transfer_protocol_decode(const mavlink_message_t* msg, mavlink_file_transfer_protocol_t* file_transfer_protocol)
{






        uint8_t len = msg->len < 254? msg->len : 254;
        memset(file_transfer_protocol, 0, 254);
    memcpy(file_transfer_protocol, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1081 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h" 1
       


#define MAVLINK_MSG_ID_TIMESYNC 111

typedef struct __mavlink_timesync_t { int64_t tc1; int64_t ts1; } __attribute__((packed))



   mavlink_timesync_t;

#define MAVLINK_MSG_ID_TIMESYNC_LEN 16
#define MAVLINK_MSG_ID_TIMESYNC_MIN_LEN 16
#define MAVLINK_MSG_ID_111_LEN 16
#define MAVLINK_MSG_ID_111_MIN_LEN 16

#define MAVLINK_MSG_ID_TIMESYNC_CRC 34
#define MAVLINK_MSG_ID_111_CRC 34
# 32 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
#define MAVLINK_MESSAGE_INFO_TIMESYNC { "TIMESYNC", 2, { { "tc1", NULL, MAVLINK_TYPE_INT64_T, 0, 0, offsetof(mavlink_timesync_t, tc1) }, { "ts1", NULL, MAVLINK_TYPE_INT64_T, 0, 8, offsetof(mavlink_timesync_t, ts1) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int64_t tc1, int64_t ts1)
{







    mavlink_timesync_t packet;
    packet.tc1 = tc1;
    packet.ts1 = ts1;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 111;
    return mavlink_finalize_message(msg, system_id, component_id, 16, 16, 34);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int64_t tc1,int64_t ts1)
{







    mavlink_timesync_t packet;
    packet.tc1 = tc1;
    packet.ts1 = ts1;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


    msg->msgid = 111;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 16, 34);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_timesync_t* timesync)
{
    return mavlink_msg_timesync_pack(system_id, component_id, msg, timesync->tc1, timesync->ts1);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_timesync_t* timesync)
{
    return mavlink_msg_timesync_pack_chan(system_id, component_id, chan, msg, timesync->tc1, timesync->ts1);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline int64_t mavlink_msg_timesync_get_tc1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int64_t(msg, 0);
}






static inline int64_t mavlink_msg_timesync_get_ts1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int64_t(msg, 8);
}







static inline void mavlink_msg_timesync_decode(const mavlink_message_t* msg, mavlink_timesync_t* timesync)
{




        uint8_t len = msg->len < 16? msg->len : 16;
        memset(timesync, 0, 16);
    memcpy(timesync, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1082 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h" 1
       


#define MAVLINK_MSG_ID_CAMERA_TRIGGER 112

typedef struct __mavlink_camera_trigger_t { uint64_t time_usec; uint32_t seq; } __attribute__((packed))



   mavlink_camera_trigger_t;

#define MAVLINK_MSG_ID_CAMERA_TRIGGER_LEN 12
#define MAVLINK_MSG_ID_CAMERA_TRIGGER_MIN_LEN 12
#define MAVLINK_MSG_ID_112_LEN 12
#define MAVLINK_MSG_ID_112_MIN_LEN 12

#define MAVLINK_MSG_ID_CAMERA_TRIGGER_CRC 174
#define MAVLINK_MSG_ID_112_CRC 174
# 32 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
#define MAVLINK_MESSAGE_INFO_CAMERA_TRIGGER { "CAMERA_TRIGGER", 2, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_camera_trigger_t, time_usec) }, { "seq", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_camera_trigger_t, seq) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint32_t seq)
{







    mavlink_camera_trigger_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 112;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 174);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint32_t seq)
{







    mavlink_camera_trigger_t packet;
    packet.time_usec = time_usec;
    packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 112;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 174);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_trigger_t* camera_trigger)
{
    return mavlink_msg_camera_trigger_pack(system_id, component_id, msg, camera_trigger->time_usec, camera_trigger->seq);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_trigger_t* camera_trigger)
{
    return mavlink_msg_camera_trigger_pack_chan(system_id, component_id, chan, msg, camera_trigger->time_usec, camera_trigger->seq);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint64_t mavlink_msg_camera_trigger_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_camera_trigger_get_seq(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}







static inline void mavlink_msg_camera_trigger_decode(const mavlink_message_t* msg, mavlink_camera_trigger_t* camera_trigger)
{




        uint8_t len = msg->len < 12? msg->len : 12;
        memset(camera_trigger, 0, 12);
    memcpy(camera_trigger, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1083 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h" 1
       


#define MAVLINK_MSG_ID_HIL_GPS 113

typedef struct __mavlink_hil_gps_t { uint64_t time_usec; int32_t lat; int32_t lon; int32_t alt; uint16_t eph; uint16_t epv; uint16_t vel; int16_t vn; int16_t ve; int16_t vd; uint16_t cog; uint8_t fix_type; uint8_t satellites_visible; } __attribute__((packed))
# 21 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
   mavlink_hil_gps_t;

#define MAVLINK_MSG_ID_HIL_GPS_LEN 36
#define MAVLINK_MSG_ID_HIL_GPS_MIN_LEN 36
#define MAVLINK_MSG_ID_113_LEN 36
#define MAVLINK_MSG_ID_113_MIN_LEN 36

#define MAVLINK_MSG_ID_HIL_GPS_CRC 124
#define MAVLINK_MSG_ID_113_CRC 124
# 54 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
#define MAVLINK_MESSAGE_INFO_HIL_GPS { "HIL_GPS", 13, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_gps_t, time_usec) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_hil_gps_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_hil_gps_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_hil_gps_t, alt) }, { "eph", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_hil_gps_t, eph) }, { "epv", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_hil_gps_t, epv) }, { "vel", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_hil_gps_t, vel) }, { "vn", NULL, MAVLINK_TYPE_INT16_T, 0, 26, offsetof(mavlink_hil_gps_t, vn) }, { "ve", NULL, MAVLINK_TYPE_INT16_T, 0, 28, offsetof(mavlink_hil_gps_t, ve) }, { "vd", NULL, MAVLINK_TYPE_INT16_T, 0, 30, offsetof(mavlink_hil_gps_t, vd) }, { "cog", NULL, MAVLINK_TYPE_UINT16_T, 0, 32, offsetof(mavlink_hil_gps_t, cog) }, { "fix_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_hil_gps_t, fix_type) }, { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 35, offsetof(mavlink_hil_gps_t, satellites_visible) }, } }
# 95 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, int16_t vn, int16_t ve, int16_t vd, uint16_t cog, uint8_t satellites_visible)
{
# 116 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
    mavlink_hil_gps_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 113;
    return mavlink_finalize_message(msg, system_id, component_id, 36, 36, 124);
}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,int16_t vn,int16_t ve,int16_t vd,uint16_t cog,uint8_t satellites_visible)
{
# 181 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
    mavlink_hil_gps_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 113;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 36, 124);
}
# 211 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_gps_t* hil_gps)
{
    return mavlink_msg_hil_gps_pack(system_id, component_id, msg, hil_gps->time_usec, hil_gps->fix_type, hil_gps->lat, hil_gps->lon, hil_gps->alt, hil_gps->eph, hil_gps->epv, hil_gps->vel, hil_gps->vn, hil_gps->ve, hil_gps->vd, hil_gps->cog, hil_gps->satellites_visible);
}
# 225 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_gps_t* hil_gps)
{
    return mavlink_msg_hil_gps_pack_chan(system_id, component_id, chan, msg, hil_gps->time_usec, hil_gps->fix_type, hil_gps->lat, hil_gps->lon, hil_gps->alt, hil_gps->eph, hil_gps->epv, hil_gps->vel, hil_gps->vn, hil_gps->ve, hil_gps->vd, hil_gps->cog, hil_gps->satellites_visible);
}
# 361 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint64_t mavlink_msg_hil_gps_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_hil_gps_get_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_hil_gps_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_hil_gps_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_hil_gps_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_hil_gps_get_eph(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_hil_gps_get_epv(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_hil_gps_get_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline int16_t mavlink_msg_hil_gps_get_vn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 26);
}






static inline int16_t mavlink_msg_hil_gps_get_ve(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 28);
}






static inline int16_t mavlink_msg_hil_gps_get_vd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 30);
}






static inline uint16_t mavlink_msg_hil_gps_get_cog(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint8_t mavlink_msg_hil_gps_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}







static inline void mavlink_msg_hil_gps_decode(const mavlink_message_t* msg, mavlink_hil_gps_t* hil_gps)
{
# 509 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
        uint8_t len = msg->len < 36? msg->len : 36;
        memset(hil_gps, 0, 36);
    memcpy(hil_gps, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1084 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h" 1
       


#define MAVLINK_MSG_ID_HIL_OPTICAL_FLOW 114

typedef struct __mavlink_hil_optical_flow_t { uint64_t time_usec; uint32_t integration_time_us; float integrated_x; float integrated_y; float integrated_xgyro; float integrated_ygyro; float integrated_zgyro; uint32_t time_delta_distance_us; float distance; int16_t temperature; uint8_t sensor_id; uint8_t quality; } __attribute__((packed))
# 20 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
   mavlink_hil_optical_flow_t;

#define MAVLINK_MSG_ID_HIL_OPTICAL_FLOW_LEN 44
#define MAVLINK_MSG_ID_HIL_OPTICAL_FLOW_MIN_LEN 44
#define MAVLINK_MSG_ID_114_LEN 44
#define MAVLINK_MSG_ID_114_MIN_LEN 44

#define MAVLINK_MSG_ID_HIL_OPTICAL_FLOW_CRC 237
#define MAVLINK_MSG_ID_114_CRC 237
# 52 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
#define MAVLINK_MESSAGE_INFO_HIL_OPTICAL_FLOW { "HIL_OPTICAL_FLOW", 12, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_optical_flow_t, time_usec) }, { "integration_time_us", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_hil_optical_flow_t, integration_time_us) }, { "integrated_x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_hil_optical_flow_t, integrated_x) }, { "integrated_y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_hil_optical_flow_t, integrated_y) }, { "integrated_xgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_hil_optical_flow_t, integrated_xgyro) }, { "integrated_ygyro", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_optical_flow_t, integrated_ygyro) }, { "integrated_zgyro", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_optical_flow_t, integrated_zgyro) }, { "time_delta_distance_us", NULL, MAVLINK_TYPE_UINT32_T, 0, 32, offsetof(mavlink_hil_optical_flow_t, time_delta_distance_us) }, { "distance", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_hil_optical_flow_t, distance) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 40, offsetof(mavlink_hil_optical_flow_t, temperature) }, { "sensor_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 42, offsetof(mavlink_hil_optical_flow_t, sensor_id) }, { "quality", NULL, MAVLINK_TYPE_UINT8_T, 0, 43, offsetof(mavlink_hil_optical_flow_t, quality) }, } }
# 91 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 111 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
    mavlink_hil_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 114;
    return mavlink_finalize_message(msg, system_id, component_id, 44, 44, 237);
}
# 152 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t sensor_id,uint32_t integration_time_us,float integrated_x,float integrated_y,float integrated_xgyro,float integrated_ygyro,float integrated_zgyro,int16_t temperature,uint8_t quality,uint32_t time_delta_distance_us,float distance)
{
# 173 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
    mavlink_hil_optical_flow_t packet;
    packet.time_usec = time_usec;
    packet.integration_time_us = integration_time_us;
    packet.integrated_x = integrated_x;
    packet.integrated_y = integrated_y;
    packet.integrated_xgyro = integrated_xgyro;
    packet.integrated_ygyro = integrated_ygyro;
    packet.integrated_zgyro = integrated_zgyro;
    packet.time_delta_distance_us = time_delta_distance_us;
    packet.distance = distance;
    packet.temperature = temperature;
    packet.sensor_id = sensor_id;
    packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


    msg->msgid = 114;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 44, 237);
}
# 202 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_optical_flow_t* hil_optical_flow)
{
    return mavlink_msg_hil_optical_flow_pack(system_id, component_id, msg, hil_optical_flow->time_usec, hil_optical_flow->sensor_id, hil_optical_flow->integration_time_us, hil_optical_flow->integrated_x, hil_optical_flow->integrated_y, hil_optical_flow->integrated_xgyro, hil_optical_flow->integrated_ygyro, hil_optical_flow->integrated_zgyro, hil_optical_flow->temperature, hil_optical_flow->quality, hil_optical_flow->time_delta_distance_us, hil_optical_flow->distance);
}
# 216 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_optical_flow_t* hil_optical_flow)
{
    return mavlink_msg_hil_optical_flow_pack_chan(system_id, component_id, chan, msg, hil_optical_flow->time_usec, hil_optical_flow->sensor_id, hil_optical_flow->integration_time_us, hil_optical_flow->integrated_x, hil_optical_flow->integrated_y, hil_optical_flow->integrated_xgyro, hil_optical_flow->integrated_ygyro, hil_optical_flow->integrated_zgyro, hil_optical_flow->temperature, hil_optical_flow->quality, hil_optical_flow->time_delta_distance_us, hil_optical_flow->distance);
}
# 347 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint64_t mavlink_msg_hil_optical_flow_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_hil_optical_flow_get_sensor_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint32_t mavlink_msg_hil_optical_flow_get_integration_time_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline int16_t mavlink_msg_hil_optical_flow_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 40);
}






static inline uint8_t mavlink_msg_hil_optical_flow_get_quality(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint32_t mavlink_msg_hil_optical_flow_get_time_delta_distance_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 32);
}






static inline float mavlink_msg_hil_optical_flow_get_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_hil_optical_flow_decode(const mavlink_message_t* msg, mavlink_hil_optical_flow_t* hil_optical_flow)
{
# 484 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
        uint8_t len = msg->len < 44? msg->len : 44;
        memset(hil_optical_flow, 0, 44);
    memcpy(hil_optical_flow, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1085 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h" 1
       


#define MAVLINK_MSG_ID_HIL_STATE_QUATERNION 115

typedef struct __mavlink_hil_state_quaternion_t { uint64_t time_usec; float attitude_quaternion[4]; float rollspeed; float pitchspeed; float yawspeed; int32_t lat; int32_t lon; int32_t alt; int16_t vx; int16_t vy; int16_t vz; uint16_t ind_airspeed; uint16_t true_airspeed; int16_t xacc; int16_t yacc; int16_t zacc; } __attribute__((packed))
# 24 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
   mavlink_hil_state_quaternion_t;

#define MAVLINK_MSG_ID_HIL_STATE_QUATERNION_LEN 64
#define MAVLINK_MSG_ID_HIL_STATE_QUATERNION_MIN_LEN 64
#define MAVLINK_MSG_ID_115_LEN 64
#define MAVLINK_MSG_ID_115_MIN_LEN 64

#define MAVLINK_MSG_ID_HIL_STATE_QUATERNION_CRC 4
#define MAVLINK_MSG_ID_115_CRC 4

#define MAVLINK_MSG_HIL_STATE_QUATERNION_FIELD_ATTITUDE_QUATERNION_LEN 4
# 60 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
#define MAVLINK_MESSAGE_INFO_HIL_STATE_QUATERNION { "HIL_STATE_QUATERNION", 16, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_hil_state_quaternion_t, time_usec) }, { "attitude_quaternion", NULL, MAVLINK_TYPE_FLOAT, 4, 8, offsetof(mavlink_hil_state_quaternion_t, attitude_quaternion) }, { "rollspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_hil_state_quaternion_t, rollspeed) }, { "pitchspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_hil_state_quaternion_t, pitchspeed) }, { "yawspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_hil_state_quaternion_t, yawspeed) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 36, offsetof(mavlink_hil_state_quaternion_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 40, offsetof(mavlink_hil_state_quaternion_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 44, offsetof(mavlink_hil_state_quaternion_t, alt) }, { "vx", NULL, MAVLINK_TYPE_INT16_T, 0, 48, offsetof(mavlink_hil_state_quaternion_t, vx) }, { "vy", NULL, MAVLINK_TYPE_INT16_T, 0, 50, offsetof(mavlink_hil_state_quaternion_t, vy) }, { "vz", NULL, MAVLINK_TYPE_INT16_T, 0, 52, offsetof(mavlink_hil_state_quaternion_t, vz) }, { "ind_airspeed", NULL, MAVLINK_TYPE_UINT16_T, 0, 54, offsetof(mavlink_hil_state_quaternion_t, ind_airspeed) }, { "true_airspeed", NULL, MAVLINK_TYPE_UINT16_T, 0, 56, offsetof(mavlink_hil_state_quaternion_t, true_airspeed) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 58, offsetof(mavlink_hil_state_quaternion_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 60, offsetof(mavlink_hil_state_quaternion_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 62, offsetof(mavlink_hil_state_quaternion_t, zacc) }, } }
# 107 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, const float *attitude_quaternion, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, uint16_t ind_airspeed, uint16_t true_airspeed, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 130 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
    mavlink_hil_state_quaternion_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ind_airspeed = ind_airspeed;
    packet.true_airspeed = true_airspeed;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


    msg->msgid = 115;
    return mavlink_finalize_message(msg, system_id, component_id, 64, 64, 4);
}
# 178 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,const float *attitude_quaternion,float rollspeed,float pitchspeed,float yawspeed,int32_t lat,int32_t lon,int32_t alt,int16_t vx,int16_t vy,int16_t vz,uint16_t ind_airspeed,uint16_t true_airspeed,int16_t xacc,int16_t yacc,int16_t zacc)
{
# 202 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
    mavlink_hil_state_quaternion_t packet;
    packet.time_usec = time_usec;
    packet.rollspeed = rollspeed;
    packet.pitchspeed = pitchspeed;
    packet.yawspeed = yawspeed;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.vx = vx;
    packet.vy = vy;
    packet.vz = vz;
    packet.ind_airspeed = ind_airspeed;
    packet.true_airspeed = true_airspeed;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


    msg->msgid = 115;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 64, 64, 4);
}
# 234 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
    return mavlink_msg_hil_state_quaternion_pack(system_id, component_id, msg, hil_state_quaternion->time_usec, hil_state_quaternion->attitude_quaternion, hil_state_quaternion->rollspeed, hil_state_quaternion->pitchspeed, hil_state_quaternion->yawspeed, hil_state_quaternion->lat, hil_state_quaternion->lon, hil_state_quaternion->alt, hil_state_quaternion->vx, hil_state_quaternion->vy, hil_state_quaternion->vz, hil_state_quaternion->ind_airspeed, hil_state_quaternion->true_airspeed, hil_state_quaternion->xacc, hil_state_quaternion->yacc, hil_state_quaternion->zacc);
}
# 248 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
    return mavlink_msg_hil_state_quaternion_pack_chan(system_id, component_id, chan, msg, hil_state_quaternion->time_usec, hil_state_quaternion->attitude_quaternion, hil_state_quaternion->rollspeed, hil_state_quaternion->pitchspeed, hil_state_quaternion->yawspeed, hil_state_quaternion->lat, hil_state_quaternion->lon, hil_state_quaternion->alt, hil_state_quaternion->vx, hil_state_quaternion->vy, hil_state_quaternion->vz, hil_state_quaternion->ind_airspeed, hil_state_quaternion->true_airspeed, hil_state_quaternion->xacc, hil_state_quaternion->yacc, hil_state_quaternion->zacc);
}
# 395 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint64_t mavlink_msg_hil_state_quaternion_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_attitude_quaternion(const mavlink_message_t* msg, float *attitude_quaternion)
{
    return _MAV_RETURN_float_array(msg, attitude_quaternion, 4, 8);
}






static inline float mavlink_msg_hil_state_quaternion_get_rollspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_state_quaternion_get_pitchspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_state_quaternion_get_yawspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 40);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 44);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 48);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 50);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 52);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_ind_airspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 54);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_true_airspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 56);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 58);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 60);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 62);
}







static inline void mavlink_msg_hil_state_quaternion_decode(const mavlink_message_t* msg, mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
# 576 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
        uint8_t len = msg->len < 64? msg->len : 64;
        memset(hil_state_quaternion, 0, 64);
    memcpy(hil_state_quaternion, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1086 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h" 1
       


#define MAVLINK_MSG_ID_SCALED_IMU2 116

typedef struct __mavlink_scaled_imu2_t { uint32_t time_boot_ms; int16_t xacc; int16_t yacc; int16_t zacc; int16_t xgyro; int16_t ygyro; int16_t zgyro; int16_t xmag; int16_t ymag; int16_t zmag; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
   mavlink_scaled_imu2_t;

#define MAVLINK_MSG_ID_SCALED_IMU2_LEN 22
#define MAVLINK_MSG_ID_SCALED_IMU2_MIN_LEN 22
#define MAVLINK_MSG_ID_116_LEN 22
#define MAVLINK_MSG_ID_116_MIN_LEN 22

#define MAVLINK_MSG_ID_SCALED_IMU2_CRC 76
#define MAVLINK_MSG_ID_116_CRC 76
# 48 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
#define MAVLINK_MESSAGE_INFO_SCALED_IMU2 { "SCALED_IMU2", 10, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_imu2_t, time_boot_ms) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_scaled_imu2_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_scaled_imu2_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_scaled_imu2_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_scaled_imu2_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_imu2_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_scaled_imu2_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_scaled_imu2_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_scaled_imu2_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_scaled_imu2_t, zmag) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
    mavlink_scaled_imu2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 116;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 76);
}
# 138 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 157 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
    mavlink_scaled_imu2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 116;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 76);
}
# 184 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu2_t* scaled_imu2)
{
    return mavlink_msg_scaled_imu2_pack(system_id, component_id, msg, scaled_imu2->time_boot_ms, scaled_imu2->xacc, scaled_imu2->yacc, scaled_imu2->zacc, scaled_imu2->xgyro, scaled_imu2->ygyro, scaled_imu2->zgyro, scaled_imu2->xmag, scaled_imu2->ymag, scaled_imu2->zmag);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu2_t* scaled_imu2)
{
    return mavlink_msg_scaled_imu2_pack_chan(system_id, component_id, chan, msg, scaled_imu2->time_boot_ms, scaled_imu2->xacc, scaled_imu2->yacc, scaled_imu2->zacc, scaled_imu2->xgyro, scaled_imu2->ygyro, scaled_imu2->zgyro, scaled_imu2->xmag, scaled_imu2->ymag, scaled_imu2->zmag);
}
# 319 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint32_t mavlink_msg_scaled_imu2_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu2_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu2_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu2_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu2_decode(const mavlink_message_t* msg, mavlink_scaled_imu2_t* scaled_imu2)
{
# 434 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(scaled_imu2, 0, 22);
    memcpy(scaled_imu2, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1087 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h" 1
       


#define MAVLINK_MSG_ID_LOG_REQUEST_LIST 117

typedef struct __mavlink_log_request_list_t { uint16_t start; uint16_t end; uint8_t target_system; uint8_t target_component; } __attribute__((packed))





   mavlink_log_request_list_t;

#define MAVLINK_MSG_ID_LOG_REQUEST_LIST_LEN 6
#define MAVLINK_MSG_ID_LOG_REQUEST_LIST_MIN_LEN 6
#define MAVLINK_MSG_ID_117_LEN 6
#define MAVLINK_MSG_ID_117_MIN_LEN 6

#define MAVLINK_MSG_ID_LOG_REQUEST_LIST_CRC 128
#define MAVLINK_MSG_ID_117_CRC 128
# 36 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
#define MAVLINK_MESSAGE_INFO_LOG_REQUEST_LIST { "LOG_REQUEST_LIST", 4, { { "start", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_log_request_list_t, start) }, { "end", NULL, MAVLINK_TYPE_UINT16_T, 0, 2, offsetof(mavlink_log_request_list_t, end) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_log_request_list_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 5, offsetof(mavlink_log_request_list_t, target_component) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t start, uint16_t end)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
    mavlink_log_request_list_t packet;
    packet.start = start;
    packet.end = end;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 117;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 128);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t start,uint16_t end)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
    mavlink_log_request_list_t packet;
    packet.start = start;
    packet.end = end;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 117;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 128);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_list_t* log_request_list)
{
    return mavlink_msg_log_request_list_pack(system_id, component_id, msg, log_request_list->target_system, log_request_list->target_component, log_request_list->start, log_request_list->end);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_list_t* log_request_list)
{
    return mavlink_msg_log_request_list_pack_chan(system_id, component_id, chan, msg, log_request_list->target_system, log_request_list->target_component, log_request_list->start, log_request_list->end);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint8_t mavlink_msg_log_request_list_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_log_request_list_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_log_request_list_get_start(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_log_request_list_get_end(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_log_request_list_decode(const mavlink_message_t* msg, mavlink_log_request_list_t* log_request_list)
{






        uint8_t len = msg->len < 6? msg->len : 6;
        memset(log_request_list, 0, 6);
    memcpy(log_request_list, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1088 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h" 1
       


#define MAVLINK_MSG_ID_LOG_ENTRY 118

typedef struct __mavlink_log_entry_t { uint32_t time_utc; uint32_t size; uint16_t id; uint16_t num_logs; uint16_t last_log_num; } __attribute__((packed))






   mavlink_log_entry_t;

#define MAVLINK_MSG_ID_LOG_ENTRY_LEN 14
#define MAVLINK_MSG_ID_LOG_ENTRY_MIN_LEN 14
#define MAVLINK_MSG_ID_118_LEN 14
#define MAVLINK_MSG_ID_118_MIN_LEN 14

#define MAVLINK_MSG_ID_LOG_ENTRY_CRC 56
#define MAVLINK_MSG_ID_118_CRC 56
# 38 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
#define MAVLINK_MESSAGE_INFO_LOG_ENTRY { "LOG_ENTRY", 5, { { "time_utc", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_log_entry_t, time_utc) }, { "size", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_log_entry_t, size) }, { "id", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_log_entry_t, id) }, { "num_logs", NULL, MAVLINK_TYPE_UINT16_T, 0, 10, offsetof(mavlink_log_entry_t, num_logs) }, { "last_log_num", NULL, MAVLINK_TYPE_UINT16_T, 0, 12, offsetof(mavlink_log_entry_t, last_log_num) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t id, uint16_t num_logs, uint16_t last_log_num, uint32_t time_utc, uint32_t size)
{
# 76 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
    mavlink_log_entry_t packet;
    packet.time_utc = time_utc;
    packet.size = size;
    packet.id = id;
    packet.num_logs = num_logs;
    packet.last_log_num = last_log_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 118;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 56);
}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t id,uint16_t num_logs,uint16_t last_log_num,uint32_t time_utc,uint32_t size)
{
# 117 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
    mavlink_log_entry_t packet;
    packet.time_utc = time_utc;
    packet.size = size;
    packet.id = id;
    packet.num_logs = num_logs;
    packet.last_log_num = last_log_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 118;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 56);
}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_entry_t* log_entry)
{
    return mavlink_msg_log_entry_pack(system_id, component_id, msg, log_entry->id, log_entry->num_logs, log_entry->last_log_num, log_entry->time_utc, log_entry->size);
}
# 153 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_entry_t* log_entry)
{
    return mavlink_msg_log_entry_pack_chan(system_id, component_id, chan, msg, log_entry->id, log_entry->num_logs, log_entry->last_log_num, log_entry->time_utc, log_entry->size);
}
# 249 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_get_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_log_entry_get_num_logs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_log_entry_get_last_log_num(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint32_t mavlink_msg_log_entry_get_time_utc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_log_entry_get_size(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_log_entry_decode(const mavlink_message_t* msg, mavlink_log_entry_t* log_entry)
{







        uint8_t len = msg->len < 14? msg->len : 14;
        memset(log_entry, 0, 14);
    memcpy(log_entry, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1089 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h" 1
       


#define MAVLINK_MSG_ID_LOG_REQUEST_DATA 119

typedef struct __mavlink_log_request_data_t { uint32_t ofs; uint32_t count; uint16_t id; uint8_t target_system; uint8_t target_component; } __attribute__((packed))






   mavlink_log_request_data_t;

#define MAVLINK_MSG_ID_LOG_REQUEST_DATA_LEN 12
#define MAVLINK_MSG_ID_LOG_REQUEST_DATA_MIN_LEN 12
#define MAVLINK_MSG_ID_119_LEN 12
#define MAVLINK_MSG_ID_119_MIN_LEN 12

#define MAVLINK_MSG_ID_LOG_REQUEST_DATA_CRC 116
#define MAVLINK_MSG_ID_119_CRC 116
# 38 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
#define MAVLINK_MESSAGE_INFO_LOG_REQUEST_DATA { "LOG_REQUEST_DATA", 5, { { "ofs", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_log_request_data_t, ofs) }, { "count", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_log_request_data_t, count) }, { "id", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_log_request_data_t, id) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 10, offsetof(mavlink_log_request_data_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 11, offsetof(mavlink_log_request_data_t, target_component) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t id, uint32_t ofs, uint32_t count)
{
# 76 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
    mavlink_log_request_data_t packet;
    packet.ofs = ofs;
    packet.count = count;
    packet.id = id;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 119;
    return mavlink_finalize_message(msg, system_id, component_id, 12, 12, 116);
}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint16_t id,uint32_t ofs,uint32_t count)
{
# 117 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
    mavlink_log_request_data_t packet;
    packet.ofs = ofs;
    packet.count = count;
    packet.id = id;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


    msg->msgid = 119;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 12, 116);
}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_data_t* log_request_data)
{
    return mavlink_msg_log_request_data_pack(system_id, component_id, msg, log_request_data->target_system, log_request_data->target_component, log_request_data->id, log_request_data->ofs, log_request_data->count);
}
# 153 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_data_t* log_request_data)
{
    return mavlink_msg_log_request_data_pack_chan(system_id, component_id, chan, msg, log_request_data->target_system, log_request_data->target_component, log_request_data->id, log_request_data->ofs, log_request_data->count);
}
# 249 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint8_t mavlink_msg_log_request_data_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_log_request_data_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint16_t mavlink_msg_log_request_data_get_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint32_t mavlink_msg_log_request_data_get_ofs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_log_request_data_get_count(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_log_request_data_decode(const mavlink_message_t* msg, mavlink_log_request_data_t* log_request_data)
{







        uint8_t len = msg->len < 12? msg->len : 12;
        memset(log_request_data, 0, 12);
    memcpy(log_request_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1090 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h" 1
       


#define MAVLINK_MSG_ID_LOG_DATA 120

typedef struct __mavlink_log_data_t { uint32_t ofs; uint16_t id; uint8_t count; uint8_t data[90]; } __attribute__((packed))





   mavlink_log_data_t;

#define MAVLINK_MSG_ID_LOG_DATA_LEN 97
#define MAVLINK_MSG_ID_LOG_DATA_MIN_LEN 97
#define MAVLINK_MSG_ID_120_LEN 97
#define MAVLINK_MSG_ID_120_MIN_LEN 97

#define MAVLINK_MSG_ID_LOG_DATA_CRC 134
#define MAVLINK_MSG_ID_120_CRC 134

#define MAVLINK_MSG_LOG_DATA_FIELD_DATA_LEN 90
# 36 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
#define MAVLINK_MESSAGE_INFO_LOG_DATA { "LOG_DATA", 4, { { "ofs", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_log_data_t, ofs) }, { "id", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_log_data_t, id) }, { "count", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_log_data_t, count) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 90, 7, offsetof(mavlink_log_data_t, data) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t id, uint32_t ofs, uint8_t count, const uint8_t *data)
{
# 70 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
    mavlink_log_data_t packet;
    packet.ofs = ofs;
    packet.id = id;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 97);


    msg->msgid = 120;
    return mavlink_finalize_message(msg, system_id, component_id, 97, 97, 134);
}
# 94 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t id,uint32_t ofs,uint8_t count,const uint8_t *data)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
    mavlink_log_data_t packet;
    packet.ofs = ofs;
    packet.id = id;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 97);


    msg->msgid = 120;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 97, 97, 134);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_data_t* log_data)
{
    return mavlink_msg_log_data_pack(system_id, component_id, msg, log_data->id, log_data->ofs, log_data->count, log_data->data);
}
# 140 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_data_t* log_data)
{
    return mavlink_msg_log_data_pack_chan(system_id, component_id, chan, msg, log_data->id, log_data->ofs, log_data->count, log_data->data);
}
# 227 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_get_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint32_t mavlink_msg_log_data_get_ofs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_log_data_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint16_t mavlink_msg_log_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 90, 7);
}







static inline void mavlink_msg_log_data_decode(const mavlink_message_t* msg, mavlink_log_data_t* log_data)
{






        uint8_t len = msg->len < 97? msg->len : 97;
        memset(log_data, 0, 97);
    memcpy(log_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1091 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h" 1
       


#define MAVLINK_MSG_ID_LOG_ERASE 121

typedef struct __mavlink_log_erase_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_log_erase_t;

#define MAVLINK_MSG_ID_LOG_ERASE_LEN 2
#define MAVLINK_MSG_ID_LOG_ERASE_MIN_LEN 2
#define MAVLINK_MSG_ID_121_LEN 2
#define MAVLINK_MSG_ID_121_MIN_LEN 2

#define MAVLINK_MSG_ID_LOG_ERASE_CRC 237
#define MAVLINK_MSG_ID_121_CRC 237
# 32 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
#define MAVLINK_MESSAGE_INFO_LOG_ERASE { "LOG_ERASE", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_log_erase_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_log_erase_t, target_component) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_log_erase_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 121;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 237);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_log_erase_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 121;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 237);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_erase_t* log_erase)
{
    return mavlink_msg_log_erase_pack(system_id, component_id, msg, log_erase->target_system, log_erase->target_component);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_erase_t* log_erase)
{
    return mavlink_msg_log_erase_pack_chan(system_id, component_id, chan, msg, log_erase->target_system, log_erase->target_component);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint8_t mavlink_msg_log_erase_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_log_erase_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_log_erase_decode(const mavlink_message_t* msg, mavlink_log_erase_t* log_erase)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(log_erase, 0, 2);
    memcpy(log_erase, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1092 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h" 1
       


#define MAVLINK_MSG_ID_LOG_REQUEST_END 122

typedef struct __mavlink_log_request_end_t { uint8_t target_system; uint8_t target_component; } __attribute__((packed))



   mavlink_log_request_end_t;

#define MAVLINK_MSG_ID_LOG_REQUEST_END_LEN 2
#define MAVLINK_MSG_ID_LOG_REQUEST_END_MIN_LEN 2
#define MAVLINK_MSG_ID_122_LEN 2
#define MAVLINK_MSG_ID_122_MIN_LEN 2

#define MAVLINK_MSG_ID_LOG_REQUEST_END_CRC 203
#define MAVLINK_MSG_ID_122_CRC 203
# 32 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
#define MAVLINK_MESSAGE_INFO_LOG_REQUEST_END { "LOG_REQUEST_END", 2, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_log_request_end_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_log_request_end_t, target_component) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component)
{







    mavlink_log_request_end_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 122;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 203);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component)
{







    mavlink_log_request_end_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 122;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 203);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_end_t* log_request_end)
{
    return mavlink_msg_log_request_end_pack(system_id, component_id, msg, log_request_end->target_system, log_request_end->target_component);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_end_t* log_request_end)
{
    return mavlink_msg_log_request_end_pack_chan(system_id, component_id, chan, msg, log_request_end->target_system, log_request_end->target_component);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint8_t mavlink_msg_log_request_end_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_log_request_end_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_log_request_end_decode(const mavlink_message_t* msg, mavlink_log_request_end_t* log_request_end)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(log_request_end, 0, 2);
    memcpy(log_request_end, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1093 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h" 1
       


#define MAVLINK_MSG_ID_GPS_INJECT_DATA 123

typedef struct __mavlink_gps_inject_data_t { uint8_t target_system; uint8_t target_component; uint8_t len; uint8_t data[110]; } __attribute__((packed))





   mavlink_gps_inject_data_t;

#define MAVLINK_MSG_ID_GPS_INJECT_DATA_LEN 113
#define MAVLINK_MSG_ID_GPS_INJECT_DATA_MIN_LEN 113
#define MAVLINK_MSG_ID_123_LEN 113
#define MAVLINK_MSG_ID_123_MIN_LEN 113

#define MAVLINK_MSG_ID_GPS_INJECT_DATA_CRC 250
#define MAVLINK_MSG_ID_123_CRC 250

#define MAVLINK_MSG_GPS_INJECT_DATA_FIELD_DATA_LEN 110
# 36 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
#define MAVLINK_MESSAGE_INFO_GPS_INJECT_DATA { "GPS_INJECT_DATA", 4, { { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_gps_inject_data_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_gps_inject_data_t, target_component) }, { "len", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_gps_inject_data_t, len) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 110, 3, offsetof(mavlink_gps_inject_data_t, data) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint8_t len, const uint8_t *data)
{
# 70 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
    mavlink_gps_inject_data_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 113);


    msg->msgid = 123;
    return mavlink_finalize_message(msg, system_id, component_id, 113, 113, 250);
}
# 94 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,uint8_t target_component,uint8_t len,const uint8_t *data)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
    mavlink_gps_inject_data_t packet;
    packet.target_system = target_system;
    packet.target_component = target_component;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 113);


    msg->msgid = 123;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 113, 113, 250);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_inject_data_t* gps_inject_data)
{
    return mavlink_msg_gps_inject_data_pack(system_id, component_id, msg, gps_inject_data->target_system, gps_inject_data->target_component, gps_inject_data->len, gps_inject_data->data);
}
# 140 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_inject_data_t* gps_inject_data)
{
    return mavlink_msg_gps_inject_data_pack_chan(system_id, component_id, chan, msg, gps_inject_data->target_system, gps_inject_data->target_component, gps_inject_data->len, gps_inject_data->data);
}
# 227 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint8_t mavlink_msg_gps_inject_data_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gps_inject_data_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_gps_inject_data_get_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_gps_inject_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 110, 3);
}







static inline void mavlink_msg_gps_inject_data_decode(const mavlink_message_t* msg, mavlink_gps_inject_data_t* gps_inject_data)
{






        uint8_t len = msg->len < 113? msg->len : 113;
        memset(gps_inject_data, 0, 113);
    memcpy(gps_inject_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1094 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h" 1
       


#define MAVLINK_MSG_ID_GPS2_RAW 124

typedef struct __mavlink_gps2_raw_t { uint64_t time_usec; int32_t lat; int32_t lon; int32_t alt; uint32_t dgps_age; uint16_t eph; uint16_t epv; uint16_t vel; uint16_t cog; uint8_t fix_type; uint8_t satellites_visible; uint8_t dgps_numch; } __attribute__((packed))
# 20 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
   mavlink_gps2_raw_t;

#define MAVLINK_MSG_ID_GPS2_RAW_LEN 35
#define MAVLINK_MSG_ID_GPS2_RAW_MIN_LEN 35
#define MAVLINK_MSG_ID_124_LEN 35
#define MAVLINK_MSG_ID_124_MIN_LEN 35

#define MAVLINK_MSG_ID_GPS2_RAW_CRC 87
#define MAVLINK_MSG_ID_124_CRC 87
# 52 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
#define MAVLINK_MESSAGE_INFO_GPS2_RAW { "GPS2_RAW", 12, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_gps2_raw_t, time_usec) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps2_raw_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps2_raw_t, lon) }, { "alt", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps2_raw_t, alt) }, { "dgps_age", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_gps2_raw_t, dgps_age) }, { "eph", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_gps2_raw_t, eph) }, { "epv", NULL, MAVLINK_TYPE_UINT16_T, 0, 26, offsetof(mavlink_gps2_raw_t, epv) }, { "vel", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_gps2_raw_t, vel) }, { "cog", NULL, MAVLINK_TYPE_UINT16_T, 0, 30, offsetof(mavlink_gps2_raw_t, cog) }, { "fix_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_gps2_raw_t, fix_type) }, { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_gps2_raw_t, satellites_visible) }, { "dgps_numch", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_gps2_raw_t, dgps_numch) }, } }
# 91 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, uint8_t dgps_numch, uint32_t dgps_age)
{
# 111 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
    mavlink_gps2_raw_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.dgps_age = dgps_age;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;
    packet.dgps_numch = dgps_numch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 124;
    return mavlink_finalize_message(msg, system_id, component_id, 35, 35, 87);
}
# 152 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,uint16_t cog,uint8_t satellites_visible,uint8_t dgps_numch,uint32_t dgps_age)
{
# 173 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
    mavlink_gps2_raw_t packet;
    packet.time_usec = time_usec;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.dgps_age = dgps_age;
    packet.eph = eph;
    packet.epv = epv;
    packet.vel = vel;
    packet.cog = cog;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;
    packet.dgps_numch = dgps_numch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 124;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 35, 87);
}
# 202 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps2_raw_t* gps2_raw)
{
    return mavlink_msg_gps2_raw_pack(system_id, component_id, msg, gps2_raw->time_usec, gps2_raw->fix_type, gps2_raw->lat, gps2_raw->lon, gps2_raw->alt, gps2_raw->eph, gps2_raw->epv, gps2_raw->vel, gps2_raw->cog, gps2_raw->satellites_visible, gps2_raw->dgps_numch, gps2_raw->dgps_age);
}
# 216 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps2_raw_t* gps2_raw)
{
    return mavlink_msg_gps2_raw_pack_chan(system_id, component_id, chan, msg, gps2_raw->time_usec, gps2_raw->fix_type, gps2_raw->lat, gps2_raw->lon, gps2_raw->alt, gps2_raw->eph, gps2_raw->epv, gps2_raw->vel, gps2_raw->cog, gps2_raw->satellites_visible, gps2_raw->dgps_numch, gps2_raw->dgps_age);
}
# 347 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint64_t mavlink_msg_gps2_raw_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps2_raw_get_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline int32_t mavlink_msg_gps2_raw_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps2_raw_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps2_raw_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_gps2_raw_get_eph(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_gps2_raw_get_epv(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_gps2_raw_get_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_gps2_raw_get_cog(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_gps2_raw_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps2_raw_get_dgps_numch(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint32_t mavlink_msg_gps2_raw_get_dgps_age(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}







static inline void mavlink_msg_gps2_raw_decode(const mavlink_message_t* msg, mavlink_gps2_raw_t* gps2_raw)
{
# 484 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
        uint8_t len = msg->len < 35? msg->len : 35;
        memset(gps2_raw, 0, 35);
    memcpy(gps2_raw, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1095 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h" 1
       


#define MAVLINK_MSG_ID_POWER_STATUS 125

typedef struct __mavlink_power_status_t { uint16_t Vcc; uint16_t Vservo; uint16_t flags; } __attribute__((packed))




   mavlink_power_status_t;

#define MAVLINK_MSG_ID_POWER_STATUS_LEN 6
#define MAVLINK_MSG_ID_POWER_STATUS_MIN_LEN 6
#define MAVLINK_MSG_ID_125_LEN 6
#define MAVLINK_MSG_ID_125_MIN_LEN 6

#define MAVLINK_MSG_ID_POWER_STATUS_CRC 203
#define MAVLINK_MSG_ID_125_CRC 203
# 34 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
#define MAVLINK_MESSAGE_INFO_POWER_STATUS { "POWER_STATUS", 3, { { "Vcc", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_power_status_t, Vcc) }, { "Vservo", NULL, MAVLINK_TYPE_UINT16_T, 0, 2, offsetof(mavlink_power_status_t, Vservo) }, { "flags", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_power_status_t, flags) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t Vcc, uint16_t Vservo, uint16_t flags)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
    mavlink_power_status_t packet;
    packet.Vcc = Vcc;
    packet.Vservo = Vservo;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 125;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 203);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t Vcc,uint16_t Vservo,uint16_t flags)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
    mavlink_power_status_t packet;
    packet.Vcc = Vcc;
    packet.Vservo = Vservo;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 125;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 203);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_power_status_t* power_status)
{
    return mavlink_msg_power_status_pack(system_id, component_id, msg, power_status->Vcc, power_status->Vservo, power_status->flags);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_power_status_t* power_status)
{
    return mavlink_msg_power_status_pack_chan(system_id, component_id, chan, msg, power_status->Vcc, power_status->Vservo, power_status->flags);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_get_Vcc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_power_status_get_Vservo(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_power_status_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}







static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{





        uint8_t len = msg->len < 6? msg->len : 6;
        memset(power_status, 0, 6);
    memcpy(power_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1096 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h" 1
       


#define MAVLINK_MSG_ID_SERIAL_CONTROL 126

typedef struct __mavlink_serial_control_t { uint32_t baudrate; uint16_t timeout; uint8_t device; uint8_t flags; uint8_t count; uint8_t data[70]; } __attribute__((packed))







   mavlink_serial_control_t;

#define MAVLINK_MSG_ID_SERIAL_CONTROL_LEN 79
#define MAVLINK_MSG_ID_SERIAL_CONTROL_MIN_LEN 79
#define MAVLINK_MSG_ID_126_LEN 79
#define MAVLINK_MSG_ID_126_MIN_LEN 79

#define MAVLINK_MSG_ID_SERIAL_CONTROL_CRC 220
#define MAVLINK_MSG_ID_126_CRC 220

#define MAVLINK_MSG_SERIAL_CONTROL_FIELD_DATA_LEN 70
# 40 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
#define MAVLINK_MESSAGE_INFO_SERIAL_CONTROL { "SERIAL_CONTROL", 6, { { "baudrate", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_serial_control_t, baudrate) }, { "timeout", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_serial_control_t, timeout) }, { "device", NULL, MAVLINK_TYPE_UINT8_T, 0, 6, offsetof(mavlink_serial_control_t, device) }, { "flags", NULL, MAVLINK_TYPE_UINT8_T, 0, 7, offsetof(mavlink_serial_control_t, flags) }, { "count", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_serial_control_t, count) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 70, 9, offsetof(mavlink_serial_control_t, data) }, } }
# 67 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t device, uint8_t flags, uint16_t timeout, uint32_t baudrate, uint8_t count, const uint8_t *data)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
    mavlink_serial_control_t packet;
    packet.baudrate = baudrate;
    packet.timeout = timeout;
    packet.device = device;
    packet.flags = flags;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 79);


    msg->msgid = 126;
    return mavlink_finalize_message(msg, system_id, component_id, 79, 79, 220);
}
# 108 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t device,uint8_t flags,uint16_t timeout,uint32_t baudrate,uint8_t count,const uint8_t *data)
{
# 122 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
    mavlink_serial_control_t packet;
    packet.baudrate = baudrate;
    packet.timeout = timeout;
    packet.device = device;
    packet.flags = flags;
    packet.count = count;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 79);


    msg->msgid = 126;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 79, 79, 220);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_serial_control_t* serial_control)
{
    return mavlink_msg_serial_control_pack(system_id, component_id, msg, serial_control->device, serial_control->flags, serial_control->timeout, serial_control->baudrate, serial_control->count, serial_control->data);
}
# 158 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_serial_control_t* serial_control)
{
    return mavlink_msg_serial_control_pack_chan(system_id, component_id, chan, msg, serial_control->device, serial_control->flags, serial_control->timeout, serial_control->baudrate, serial_control->count, serial_control->data);
}
# 255 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint8_t mavlink_msg_serial_control_get_device(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_serial_control_get_flags(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint16_t mavlink_msg_serial_control_get_timeout(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint32_t mavlink_msg_serial_control_get_baudrate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_serial_control_get_count(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_serial_control_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 70, 9);
}







static inline void mavlink_msg_serial_control_decode(const mavlink_message_t* msg, mavlink_serial_control_t* serial_control)
{
# 326 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
        uint8_t len = msg->len < 79? msg->len : 79;
        memset(serial_control, 0, 79);
    memcpy(serial_control, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1097 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h" 1
       


#define MAVLINK_MSG_ID_GPS_RTK 127

typedef struct __mavlink_gps_rtk_t { uint32_t time_last_baseline_ms; uint32_t tow; int32_t baseline_a_mm; int32_t baseline_b_mm; int32_t baseline_c_mm; uint32_t accuracy; int32_t iar_num_hypotheses; uint16_t wn; uint8_t rtk_receiver_id; uint8_t rtk_health; uint8_t rtk_rate; uint8_t nsats; uint8_t baseline_coords_type; } __attribute__((packed))
# 21 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
   mavlink_gps_rtk_t;

#define MAVLINK_MSG_ID_GPS_RTK_LEN 35
#define MAVLINK_MSG_ID_GPS_RTK_MIN_LEN 35
#define MAVLINK_MSG_ID_127_LEN 35
#define MAVLINK_MSG_ID_127_MIN_LEN 35

#define MAVLINK_MSG_ID_GPS_RTK_CRC 25
#define MAVLINK_MSG_ID_127_CRC 25
# 54 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
#define MAVLINK_MESSAGE_INFO_GPS_RTK { "GPS_RTK", 13, { { "time_last_baseline_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_gps_rtk_t, time_last_baseline_ms) }, { "tow", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_gps_rtk_t, tow) }, { "baseline_a_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps_rtk_t, baseline_a_mm) }, { "baseline_b_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps_rtk_t, baseline_b_mm) }, { "baseline_c_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps_rtk_t, baseline_c_mm) }, { "accuracy", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_gps_rtk_t, accuracy) }, { "iar_num_hypotheses", NULL, MAVLINK_TYPE_INT32_T, 0, 24, offsetof(mavlink_gps_rtk_t, iar_num_hypotheses) }, { "wn", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_gps_rtk_t, wn) }, { "rtk_receiver_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_gps_rtk_t, rtk_receiver_id) }, { "rtk_health", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_gps_rtk_t, rtk_health) }, { "rtk_rate", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_gps_rtk_t, rtk_rate) }, { "nsats", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_gps_rtk_t, nsats) }, { "baseline_coords_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_gps_rtk_t, baseline_coords_type) }, } }
# 95 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 116 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
    mavlink_gps_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 127;
    return mavlink_finalize_message(msg, system_id, component_id, 35, 35, 25);
}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_last_baseline_ms,uint8_t rtk_receiver_id,uint16_t wn,uint32_t tow,uint8_t rtk_health,uint8_t rtk_rate,uint8_t nsats,uint8_t baseline_coords_type,int32_t baseline_a_mm,int32_t baseline_b_mm,int32_t baseline_c_mm,uint32_t accuracy,int32_t iar_num_hypotheses)
{
# 181 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
    mavlink_gps_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 127;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 35, 25);
}
# 211 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_rtk_t* gps_rtk)
{
    return mavlink_msg_gps_rtk_pack(system_id, component_id, msg, gps_rtk->time_last_baseline_ms, gps_rtk->rtk_receiver_id, gps_rtk->wn, gps_rtk->tow, gps_rtk->rtk_health, gps_rtk->rtk_rate, gps_rtk->nsats, gps_rtk->baseline_coords_type, gps_rtk->baseline_a_mm, gps_rtk->baseline_b_mm, gps_rtk->baseline_c_mm, gps_rtk->accuracy, gps_rtk->iar_num_hypotheses);
}
# 225 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_rtk_t* gps_rtk)
{
    return mavlink_msg_gps_rtk_pack_chan(system_id, component_id, chan, msg, gps_rtk->time_last_baseline_ms, gps_rtk->rtk_receiver_id, gps_rtk->wn, gps_rtk->tow, gps_rtk->rtk_health, gps_rtk->rtk_rate, gps_rtk->nsats, gps_rtk->baseline_coords_type, gps_rtk->baseline_a_mm, gps_rtk->baseline_b_mm, gps_rtk->baseline_c_mm, gps_rtk->accuracy, gps_rtk->iar_num_hypotheses);
}
# 361 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint32_t mavlink_msg_gps_rtk_get_time_last_baseline_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_receiver_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_gps_rtk_get_wn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint32_t mavlink_msg_gps_rtk_get_tow(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_health(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_rate(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_gps_rtk_get_nsats(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps_rtk_get_baseline_coords_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_a_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_b_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_c_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_gps_rtk_get_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline int32_t mavlink_msg_gps_rtk_get_iar_num_hypotheses(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 24);
}







static inline void mavlink_msg_gps_rtk_decode(const mavlink_message_t* msg, mavlink_gps_rtk_t* gps_rtk)
{
# 509 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
        uint8_t len = msg->len < 35? msg->len : 35;
        memset(gps_rtk, 0, 35);
    memcpy(gps_rtk, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1098 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h" 1
       


#define MAVLINK_MSG_ID_GPS2_RTK 128

typedef struct __mavlink_gps2_rtk_t { uint32_t time_last_baseline_ms; uint32_t tow; int32_t baseline_a_mm; int32_t baseline_b_mm; int32_t baseline_c_mm; uint32_t accuracy; int32_t iar_num_hypotheses; uint16_t wn; uint8_t rtk_receiver_id; uint8_t rtk_health; uint8_t rtk_rate; uint8_t nsats; uint8_t baseline_coords_type; } __attribute__((packed))
# 21 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
   mavlink_gps2_rtk_t;

#define MAVLINK_MSG_ID_GPS2_RTK_LEN 35
#define MAVLINK_MSG_ID_GPS2_RTK_MIN_LEN 35
#define MAVLINK_MSG_ID_128_LEN 35
#define MAVLINK_MSG_ID_128_MIN_LEN 35

#define MAVLINK_MSG_ID_GPS2_RTK_CRC 226
#define MAVLINK_MSG_ID_128_CRC 226
# 54 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
#define MAVLINK_MESSAGE_INFO_GPS2_RTK { "GPS2_RTK", 13, { { "time_last_baseline_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_gps2_rtk_t, time_last_baseline_ms) }, { "tow", NULL, MAVLINK_TYPE_UINT32_T, 0, 4, offsetof(mavlink_gps2_rtk_t, tow) }, { "baseline_a_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_gps2_rtk_t, baseline_a_mm) }, { "baseline_b_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps2_rtk_t, baseline_b_mm) }, { "baseline_c_mm", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps2_rtk_t, baseline_c_mm) }, { "accuracy", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_gps2_rtk_t, accuracy) }, { "iar_num_hypotheses", NULL, MAVLINK_TYPE_INT32_T, 0, 24, offsetof(mavlink_gps2_rtk_t, iar_num_hypotheses) }, { "wn", NULL, MAVLINK_TYPE_UINT16_T, 0, 28, offsetof(mavlink_gps2_rtk_t, wn) }, { "rtk_receiver_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_gps2_rtk_t, rtk_receiver_id) }, { "rtk_health", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_gps2_rtk_t, rtk_health) }, { "rtk_rate", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_gps2_rtk_t, rtk_rate) }, { "nsats", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_gps2_rtk_t, nsats) }, { "baseline_coords_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_gps2_rtk_t, baseline_coords_type) }, } }
# 95 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 116 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
    mavlink_gps2_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 128;
    return mavlink_finalize_message(msg, system_id, component_id, 35, 35, 226);
}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_last_baseline_ms,uint8_t rtk_receiver_id,uint16_t wn,uint32_t tow,uint8_t rtk_health,uint8_t rtk_rate,uint8_t nsats,uint8_t baseline_coords_type,int32_t baseline_a_mm,int32_t baseline_b_mm,int32_t baseline_c_mm,uint32_t accuracy,int32_t iar_num_hypotheses)
{
# 181 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
    mavlink_gps2_rtk_t packet;
    packet.time_last_baseline_ms = time_last_baseline_ms;
    packet.tow = tow;
    packet.baseline_a_mm = baseline_a_mm;
    packet.baseline_b_mm = baseline_b_mm;
    packet.baseline_c_mm = baseline_c_mm;
    packet.accuracy = accuracy;
    packet.iar_num_hypotheses = iar_num_hypotheses;
    packet.wn = wn;
    packet.rtk_receiver_id = rtk_receiver_id;
    packet.rtk_health = rtk_health;
    packet.rtk_rate = rtk_rate;
    packet.nsats = nsats;
    packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


    msg->msgid = 128;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 35, 226);
}
# 211 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps2_rtk_t* gps2_rtk)
{
    return mavlink_msg_gps2_rtk_pack(system_id, component_id, msg, gps2_rtk->time_last_baseline_ms, gps2_rtk->rtk_receiver_id, gps2_rtk->wn, gps2_rtk->tow, gps2_rtk->rtk_health, gps2_rtk->rtk_rate, gps2_rtk->nsats, gps2_rtk->baseline_coords_type, gps2_rtk->baseline_a_mm, gps2_rtk->baseline_b_mm, gps2_rtk->baseline_c_mm, gps2_rtk->accuracy, gps2_rtk->iar_num_hypotheses);
}
# 225 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps2_rtk_t* gps2_rtk)
{
    return mavlink_msg_gps2_rtk_pack_chan(system_id, component_id, chan, msg, gps2_rtk->time_last_baseline_ms, gps2_rtk->rtk_receiver_id, gps2_rtk->wn, gps2_rtk->tow, gps2_rtk->rtk_health, gps2_rtk->rtk_rate, gps2_rtk->nsats, gps2_rtk->baseline_coords_type, gps2_rtk->baseline_a_mm, gps2_rtk->baseline_b_mm, gps2_rtk->baseline_c_mm, gps2_rtk->accuracy, gps2_rtk->iar_num_hypotheses);
}
# 361 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint32_t mavlink_msg_gps2_rtk_get_time_last_baseline_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_receiver_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_gps2_rtk_get_wn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint32_t mavlink_msg_gps2_rtk_get_tow(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_health(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_rate(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_nsats(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_baseline_coords_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_a_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_b_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_c_mm(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_gps2_rtk_get_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline int32_t mavlink_msg_gps2_rtk_get_iar_num_hypotheses(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 24);
}







static inline void mavlink_msg_gps2_rtk_decode(const mavlink_message_t* msg, mavlink_gps2_rtk_t* gps2_rtk)
{
# 509 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
        uint8_t len = msg->len < 35? msg->len : 35;
        memset(gps2_rtk, 0, 35);
    memcpy(gps2_rtk, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1099 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h" 1
       


#define MAVLINK_MSG_ID_SCALED_IMU3 129

typedef struct __mavlink_scaled_imu3_t { uint32_t time_boot_ms; int16_t xacc; int16_t yacc; int16_t zacc; int16_t xgyro; int16_t ygyro; int16_t zgyro; int16_t xmag; int16_t ymag; int16_t zmag; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
   mavlink_scaled_imu3_t;

#define MAVLINK_MSG_ID_SCALED_IMU3_LEN 22
#define MAVLINK_MSG_ID_SCALED_IMU3_MIN_LEN 22
#define MAVLINK_MSG_ID_129_LEN 22
#define MAVLINK_MSG_ID_129_MIN_LEN 22

#define MAVLINK_MSG_ID_SCALED_IMU3_CRC 46
#define MAVLINK_MSG_ID_129_CRC 46
# 48 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
#define MAVLINK_MESSAGE_INFO_SCALED_IMU3 { "SCALED_IMU3", 10, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_imu3_t, time_boot_ms) }, { "xacc", NULL, MAVLINK_TYPE_INT16_T, 0, 4, offsetof(mavlink_scaled_imu3_t, xacc) }, { "yacc", NULL, MAVLINK_TYPE_INT16_T, 0, 6, offsetof(mavlink_scaled_imu3_t, yacc) }, { "zacc", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_scaled_imu3_t, zacc) }, { "xgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 10, offsetof(mavlink_scaled_imu3_t, xgyro) }, { "ygyro", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_imu3_t, ygyro) }, { "zgyro", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_scaled_imu3_t, zgyro) }, { "xmag", NULL, MAVLINK_TYPE_INT16_T, 0, 16, offsetof(mavlink_scaled_imu3_t, xmag) }, { "ymag", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_scaled_imu3_t, ymag) }, { "zmag", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_scaled_imu3_t, zmag) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
    mavlink_scaled_imu3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 129;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 46);
}
# 138 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 157 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
    mavlink_scaled_imu3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.xacc = xacc;
    packet.yacc = yacc;
    packet.zacc = zacc;
    packet.xgyro = xgyro;
    packet.ygyro = ygyro;
    packet.zgyro = zgyro;
    packet.xmag = xmag;
    packet.ymag = ymag;
    packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 129;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 46);
}
# 184 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu3_t* scaled_imu3)
{
    return mavlink_msg_scaled_imu3_pack(system_id, component_id, msg, scaled_imu3->time_boot_ms, scaled_imu3->xacc, scaled_imu3->yacc, scaled_imu3->zacc, scaled_imu3->xgyro, scaled_imu3->ygyro, scaled_imu3->zgyro, scaled_imu3->xmag, scaled_imu3->ymag, scaled_imu3->zmag);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu3_t* scaled_imu3)
{
    return mavlink_msg_scaled_imu3_pack_chan(system_id, component_id, chan, msg, scaled_imu3->time_boot_ms, scaled_imu3->xacc, scaled_imu3->yacc, scaled_imu3->zacc, scaled_imu3->xgyro, scaled_imu3->ygyro, scaled_imu3->zgyro, scaled_imu3->xmag, scaled_imu3->ymag, scaled_imu3->zmag);
}
# 319 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint32_t mavlink_msg_scaled_imu3_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu3_get_yacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zacc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu3_get_ygyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zgyro(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu3_get_ymag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zmag(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu3_decode(const mavlink_message_t* msg, mavlink_scaled_imu3_t* scaled_imu3)
{
# 434 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(scaled_imu3, 0, 22);
    memcpy(scaled_imu3, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1100 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h" 1
       


#define MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE 130

typedef struct __mavlink_data_transmission_handshake_t { uint32_t size; uint16_t width; uint16_t height; uint16_t packets; uint8_t type; uint8_t payload; uint8_t jpg_quality; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
   mavlink_data_transmission_handshake_t;

#define MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE_LEN 13
#define MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE_MIN_LEN 13
#define MAVLINK_MSG_ID_130_LEN 13
#define MAVLINK_MSG_ID_130_MIN_LEN 13

#define MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE_CRC 29
#define MAVLINK_MSG_ID_130_CRC 29
# 42 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
#define MAVLINK_MESSAGE_INFO_DATA_TRANSMISSION_HANDSHAKE { "DATA_TRANSMISSION_HANDSHAKE", 7, { { "size", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_data_transmission_handshake_t, size) }, { "width", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_data_transmission_handshake_t, width) }, { "height", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_data_transmission_handshake_t, height) }, { "packets", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_data_transmission_handshake_t, packets) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 10, offsetof(mavlink_data_transmission_handshake_t, type) }, { "payload", NULL, MAVLINK_TYPE_UINT8_T, 0, 11, offsetof(mavlink_data_transmission_handshake_t, payload) }, { "jpg_quality", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_data_transmission_handshake_t, jpg_quality) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint32_t size, uint16_t width, uint16_t height, uint16_t packets, uint8_t payload, uint8_t jpg_quality)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
    mavlink_data_transmission_handshake_t packet;
    packet.size = size;
    packet.width = width;
    packet.height = height;
    packet.packets = packets;
    packet.type = type;
    packet.payload = payload;
    packet.jpg_quality = jpg_quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 130;
    return mavlink_finalize_message(msg, system_id, component_id, 13, 13, 29);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t type,uint32_t size,uint16_t width,uint16_t height,uint16_t packets,uint8_t payload,uint8_t jpg_quality)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
    mavlink_data_transmission_handshake_t packet;
    packet.size = size;
    packet.width = width;
    packet.height = height;
    packet.packets = packets;
    packet.type = type;
    packet.payload = payload;
    packet.jpg_quality = jpg_quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


    msg->msgid = 130;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 13, 29);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
    return mavlink_msg_data_transmission_handshake_pack(system_id, component_id, msg, data_transmission_handshake->type, data_transmission_handshake->size, data_transmission_handshake->width, data_transmission_handshake->height, data_transmission_handshake->packets, data_transmission_handshake->payload, data_transmission_handshake->jpg_quality);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
    return mavlink_msg_data_transmission_handshake_pack_chan(system_id, component_id, chan, msg, data_transmission_handshake->type, data_transmission_handshake->size, data_transmission_handshake->width, data_transmission_handshake->height, data_transmission_handshake->packets, data_transmission_handshake->payload, data_transmission_handshake->jpg_quality);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint8_t mavlink_msg_data_transmission_handshake_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint32_t mavlink_msg_data_transmission_handshake_get_size(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_width(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_height(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_packets(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_data_transmission_handshake_get_payload(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_data_transmission_handshake_get_jpg_quality(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}







static inline void mavlink_msg_data_transmission_handshake_decode(const mavlink_message_t* msg, mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
        uint8_t len = msg->len < 13? msg->len : 13;
        memset(data_transmission_handshake, 0, 13);
    memcpy(data_transmission_handshake, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1101 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h" 1
       


#define MAVLINK_MSG_ID_ENCAPSULATED_DATA 131

typedef struct __mavlink_encapsulated_data_t { uint16_t seqnr; uint8_t data[253]; } __attribute__((packed))



   mavlink_encapsulated_data_t;

#define MAVLINK_MSG_ID_ENCAPSULATED_DATA_LEN 255
#define MAVLINK_MSG_ID_ENCAPSULATED_DATA_MIN_LEN 255
#define MAVLINK_MSG_ID_131_LEN 255
#define MAVLINK_MSG_ID_131_MIN_LEN 255

#define MAVLINK_MSG_ID_ENCAPSULATED_DATA_CRC 223
#define MAVLINK_MSG_ID_131_CRC 223

#define MAVLINK_MSG_ENCAPSULATED_DATA_FIELD_DATA_LEN 253
# 32 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
#define MAVLINK_MESSAGE_INFO_ENCAPSULATED_DATA { "ENCAPSULATED_DATA", 2, { { "seqnr", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_encapsulated_data_t, seqnr) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 253, 2, offsetof(mavlink_encapsulated_data_t, data) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t seqnr, const uint8_t *data)
{






    mavlink_encapsulated_data_t packet;
    packet.seqnr = seqnr;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 131;
    return mavlink_finalize_message(msg, system_id, component_id, 255, 255, 223);
}
# 80 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t seqnr,const uint8_t *data)
{






    mavlink_encapsulated_data_t packet;
    packet.seqnr = seqnr;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


    msg->msgid = 131;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 255, 255, 223);
}
# 108 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_encapsulated_data_t* encapsulated_data)
{
    return mavlink_msg_encapsulated_data_pack(system_id, component_id, msg, encapsulated_data->seqnr, encapsulated_data->data);
}
# 122 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_encapsulated_data_t* encapsulated_data)
{
    return mavlink_msg_encapsulated_data_pack_chan(system_id, component_id, chan, msg, encapsulated_data->seqnr, encapsulated_data->data);
}
# 199 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_get_seqnr(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_encapsulated_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 253, 2);
}







static inline void mavlink_msg_encapsulated_data_decode(const mavlink_message_t* msg, mavlink_encapsulated_data_t* encapsulated_data)
{




        uint8_t len = msg->len < 255? msg->len : 255;
        memset(encapsulated_data, 0, 255);
    memcpy(encapsulated_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1102 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h" 1
       


#define MAVLINK_MSG_ID_DISTANCE_SENSOR 132

typedef struct __mavlink_distance_sensor_t { uint32_t time_boot_ms; uint16_t min_distance; uint16_t max_distance; uint16_t current_distance; uint8_t type; uint8_t id; uint8_t orientation; uint8_t covariance; } __attribute__((packed))
# 16 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
   mavlink_distance_sensor_t;

#define MAVLINK_MSG_ID_DISTANCE_SENSOR_LEN 14
#define MAVLINK_MSG_ID_DISTANCE_SENSOR_MIN_LEN 14
#define MAVLINK_MSG_ID_132_LEN 14
#define MAVLINK_MSG_ID_132_MIN_LEN 14

#define MAVLINK_MSG_ID_DISTANCE_SENSOR_CRC 85
#define MAVLINK_MSG_ID_132_CRC 85
# 44 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
#define MAVLINK_MESSAGE_INFO_DISTANCE_SENSOR { "DISTANCE_SENSOR", 8, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_distance_sensor_t, time_boot_ms) }, { "min_distance", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_distance_sensor_t, min_distance) }, { "max_distance", NULL, MAVLINK_TYPE_UINT16_T, 0, 6, offsetof(mavlink_distance_sensor_t, max_distance) }, { "current_distance", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_distance_sensor_t, current_distance) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 10, offsetof(mavlink_distance_sensor_t, type) }, { "id", NULL, MAVLINK_TYPE_UINT8_T, 0, 11, offsetof(mavlink_distance_sensor_t, id) }, { "orientation", NULL, MAVLINK_TYPE_UINT8_T, 0, 12, offsetof(mavlink_distance_sensor_t, orientation) }, { "covariance", NULL, MAVLINK_TYPE_UINT8_T, 0, 13, offsetof(mavlink_distance_sensor_t, covariance) }, } }
# 75 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint16_t min_distance, uint16_t max_distance, uint16_t current_distance, uint8_t type, uint8_t id, uint8_t orientation, uint8_t covariance)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
    mavlink_distance_sensor_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.min_distance = min_distance;
    packet.max_distance = max_distance;
    packet.current_distance = current_distance;
    packet.type = type;
    packet.id = id;
    packet.orientation = orientation;
    packet.covariance = covariance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 132;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 85);
}
# 124 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint16_t min_distance,uint16_t max_distance,uint16_t current_distance,uint8_t type,uint8_t id,uint8_t orientation,uint8_t covariance)
{
# 141 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
    mavlink_distance_sensor_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.min_distance = min_distance;
    packet.max_distance = max_distance;
    packet.current_distance = current_distance;
    packet.type = type;
    packet.id = id;
    packet.orientation = orientation;
    packet.covariance = covariance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 132;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 85);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
    return mavlink_msg_distance_sensor_pack(system_id, component_id, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
    return mavlink_msg_distance_sensor_pack_chan(system_id, component_id, chan, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance);
}
# 291 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint32_t mavlink_msg_distance_sensor_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_distance_sensor_get_min_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_distance_sensor_get_max_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_distance_sensor_get_current_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_distance_sensor_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_distance_sensor_get_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_distance_sensor_get_orientation(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_distance_sensor_get_covariance(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}







static inline void mavlink_msg_distance_sensor_decode(const mavlink_message_t* msg, mavlink_distance_sensor_t* distance_sensor)
{
# 384 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
        uint8_t len = msg->len < 14? msg->len : 14;
        memset(distance_sensor, 0, 14);
    memcpy(distance_sensor, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1103 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h" 1
       


#define MAVLINK_MSG_ID_TERRAIN_REQUEST 133

typedef struct __mavlink_terrain_request_t { uint64_t mask; int32_t lat; int32_t lon; uint16_t grid_spacing; } __attribute__((packed))





   mavlink_terrain_request_t;

#define MAVLINK_MSG_ID_TERRAIN_REQUEST_LEN 18
#define MAVLINK_MSG_ID_TERRAIN_REQUEST_MIN_LEN 18
#define MAVLINK_MSG_ID_133_LEN 18
#define MAVLINK_MSG_ID_133_MIN_LEN 18

#define MAVLINK_MSG_ID_TERRAIN_REQUEST_CRC 6
#define MAVLINK_MSG_ID_133_CRC 6
# 36 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
#define MAVLINK_MESSAGE_INFO_TERRAIN_REQUEST { "TERRAIN_REQUEST", 4, { { "mask", "0x%07x", MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_terrain_request_t, mask) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_terrain_request_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_terrain_request_t, lon) }, { "grid_spacing", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_terrain_request_t, grid_spacing) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t lat, int32_t lon, uint16_t grid_spacing, uint64_t mask)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
    mavlink_terrain_request_t packet;
    packet.mask = mask;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 133;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 6);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t lat,int32_t lon,uint16_t grid_spacing,uint64_t mask)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
    mavlink_terrain_request_t packet;
    packet.mask = mask;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 133;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 6);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_request_t* terrain_request)
{
    return mavlink_msg_terrain_request_pack(system_id, component_id, msg, terrain_request->lat, terrain_request->lon, terrain_request->grid_spacing, terrain_request->mask);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_request_t* terrain_request)
{
    return mavlink_msg_terrain_request_pack_chan(system_id, component_id, chan, msg, terrain_request->lat, terrain_request->lon, terrain_request->grid_spacing, terrain_request->mask);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline int32_t mavlink_msg_terrain_request_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_terrain_request_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline uint16_t mavlink_msg_terrain_request_get_grid_spacing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint64_t mavlink_msg_terrain_request_get_mask(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}







static inline void mavlink_msg_terrain_request_decode(const mavlink_message_t* msg, mavlink_terrain_request_t* terrain_request)
{






        uint8_t len = msg->len < 18? msg->len : 18;
        memset(terrain_request, 0, 18);
    memcpy(terrain_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1104 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h" 1
       


#define MAVLINK_MSG_ID_TERRAIN_DATA 134

typedef struct __mavlink_terrain_data_t { int32_t lat; int32_t lon; uint16_t grid_spacing; int16_t data[16]; uint8_t gridbit; } __attribute__((packed))






   mavlink_terrain_data_t;

#define MAVLINK_MSG_ID_TERRAIN_DATA_LEN 43
#define MAVLINK_MSG_ID_TERRAIN_DATA_MIN_LEN 43
#define MAVLINK_MSG_ID_134_LEN 43
#define MAVLINK_MSG_ID_134_MIN_LEN 43

#define MAVLINK_MSG_ID_TERRAIN_DATA_CRC 229
#define MAVLINK_MSG_ID_134_CRC 229

#define MAVLINK_MSG_TERRAIN_DATA_FIELD_DATA_LEN 16
# 38 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
#define MAVLINK_MESSAGE_INFO_TERRAIN_DATA { "TERRAIN_DATA", 5, { { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_terrain_data_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_terrain_data_t, lon) }, { "grid_spacing", NULL, MAVLINK_TYPE_UINT16_T, 0, 8, offsetof(mavlink_terrain_data_t, grid_spacing) }, { "data", NULL, MAVLINK_TYPE_INT16_T, 16, 10, offsetof(mavlink_terrain_data_t, data) }, { "gridbit", NULL, MAVLINK_TYPE_UINT8_T, 0, 42, offsetof(mavlink_terrain_data_t, gridbit) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t lat, int32_t lon, uint16_t grid_spacing, uint8_t gridbit, const int16_t *data)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
    mavlink_terrain_data_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;
    packet.gridbit = gridbit;
    mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


    msg->msgid = 134;
    return mavlink_finalize_message(msg, system_id, component_id, 43, 43, 229);
}
# 101 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t lat,int32_t lon,uint16_t grid_spacing,uint8_t gridbit,const int16_t *data)
{
# 114 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
    mavlink_terrain_data_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.grid_spacing = grid_spacing;
    packet.gridbit = gridbit;
    mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


    msg->msgid = 134;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 43, 43, 229);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_data_t* terrain_data)
{
    return mavlink_msg_terrain_data_pack(system_id, component_id, msg, terrain_data->lat, terrain_data->lon, terrain_data->grid_spacing, terrain_data->gridbit, terrain_data->data);
}
# 149 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_data_t* terrain_data)
{
    return mavlink_msg_terrain_data_pack_chan(system_id, component_id, chan, msg, terrain_data->lat, terrain_data->lon, terrain_data->grid_spacing, terrain_data->gridbit, terrain_data->data);
}
# 241 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline int32_t mavlink_msg_terrain_data_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_data_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline uint16_t mavlink_msg_terrain_data_get_grid_spacing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_terrain_data_get_gridbit(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint16_t mavlink_msg_terrain_data_get_data(const mavlink_message_t* msg, int16_t *data)
{
    return _MAV_RETURN_int16_t_array(msg, data, 16, 10);
}







static inline void mavlink_msg_terrain_data_decode(const mavlink_message_t* msg, mavlink_terrain_data_t* terrain_data)
{







        uint8_t len = msg->len < 43? msg->len : 43;
        memset(terrain_data, 0, 43);
    memcpy(terrain_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1105 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h" 1
       


#define MAVLINK_MSG_ID_TERRAIN_CHECK 135

typedef struct __mavlink_terrain_check_t { int32_t lat; int32_t lon; } __attribute__((packed))



   mavlink_terrain_check_t;

#define MAVLINK_MSG_ID_TERRAIN_CHECK_LEN 8
#define MAVLINK_MSG_ID_TERRAIN_CHECK_MIN_LEN 8
#define MAVLINK_MSG_ID_135_LEN 8
#define MAVLINK_MSG_ID_135_MIN_LEN 8

#define MAVLINK_MSG_ID_TERRAIN_CHECK_CRC 203
#define MAVLINK_MSG_ID_135_CRC 203
# 32 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
#define MAVLINK_MESSAGE_INFO_TERRAIN_CHECK { "TERRAIN_CHECK", 2, { { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_terrain_check_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_terrain_check_t, lon) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t lat, int32_t lon)
{







    mavlink_terrain_check_t packet;
    packet.lat = lat;
    packet.lon = lon;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 135;
    return mavlink_finalize_message(msg, system_id, component_id, 8, 8, 203);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t lat,int32_t lon)
{







    mavlink_terrain_check_t packet;
    packet.lat = lat;
    packet.lon = lon;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


    msg->msgid = 135;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 8, 203);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_check_t* terrain_check)
{
    return mavlink_msg_terrain_check_pack(system_id, component_id, msg, terrain_check->lat, terrain_check->lon);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_check_t* terrain_check)
{
    return mavlink_msg_terrain_check_pack_chan(system_id, component_id, chan, msg, terrain_check->lat, terrain_check->lon);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline int32_t mavlink_msg_terrain_check_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_check_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}







static inline void mavlink_msg_terrain_check_decode(const mavlink_message_t* msg, mavlink_terrain_check_t* terrain_check)
{




        uint8_t len = msg->len < 8? msg->len : 8;
        memset(terrain_check, 0, 8);
    memcpy(terrain_check, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1106 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h" 1
       


#define MAVLINK_MSG_ID_TERRAIN_REPORT 136

typedef struct __mavlink_terrain_report_t { int32_t lat; int32_t lon; float terrain_height; float current_height; uint16_t spacing; uint16_t pending; uint16_t loaded; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
   mavlink_terrain_report_t;

#define MAVLINK_MSG_ID_TERRAIN_REPORT_LEN 22
#define MAVLINK_MSG_ID_TERRAIN_REPORT_MIN_LEN 22
#define MAVLINK_MSG_ID_136_LEN 22
#define MAVLINK_MSG_ID_136_MIN_LEN 22

#define MAVLINK_MSG_ID_TERRAIN_REPORT_CRC 1
#define MAVLINK_MSG_ID_136_CRC 1
# 42 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
#define MAVLINK_MESSAGE_INFO_TERRAIN_REPORT { "TERRAIN_REPORT", 7, { { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_terrain_report_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_terrain_report_t, lon) }, { "terrain_height", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_terrain_report_t, terrain_height) }, { "current_height", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_terrain_report_t, current_height) }, { "spacing", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_terrain_report_t, spacing) }, { "pending", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_terrain_report_t, pending) }, { "loaded", NULL, MAVLINK_TYPE_UINT16_T, 0, 20, offsetof(mavlink_terrain_report_t, loaded) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t lat, int32_t lon, uint16_t spacing, float terrain_height, float current_height, uint16_t pending, uint16_t loaded)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
    mavlink_terrain_report_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.terrain_height = terrain_height;
    packet.current_height = current_height;
    packet.spacing = spacing;
    packet.pending = pending;
    packet.loaded = loaded;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 136;
    return mavlink_finalize_message(msg, system_id, component_id, 22, 22, 1);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t lat,int32_t lon,uint16_t spacing,float terrain_height,float current_height,uint16_t pending,uint16_t loaded)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
    mavlink_terrain_report_t packet;
    packet.lat = lat;
    packet.lon = lon;
    packet.terrain_height = terrain_height;
    packet.current_height = current_height;
    packet.spacing = spacing;
    packet.pending = pending;
    packet.loaded = loaded;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


    msg->msgid = 136;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 22, 1);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_report_t* terrain_report)
{
    return mavlink_msg_terrain_report_pack(system_id, component_id, msg, terrain_report->lat, terrain_report->lon, terrain_report->spacing, terrain_report->terrain_height, terrain_report->current_height, terrain_report->pending, terrain_report->loaded);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_report_t* terrain_report)
{
    return mavlink_msg_terrain_report_pack_chan(system_id, component_id, chan, msg, terrain_report->lat, terrain_report->lon, terrain_report->spacing, terrain_report->terrain_height, terrain_report->current_height, terrain_report->pending, terrain_report->loaded);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline int32_t mavlink_msg_terrain_report_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_report_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline uint16_t mavlink_msg_terrain_report_get_spacing(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline float mavlink_msg_terrain_report_get_terrain_height(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_terrain_report_get_current_height(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline uint16_t mavlink_msg_terrain_report_get_pending(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_terrain_report_get_loaded(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 20);
}







static inline void mavlink_msg_terrain_report_decode(const mavlink_message_t* msg, mavlink_terrain_report_t* terrain_report)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
        uint8_t len = msg->len < 22? msg->len : 22;
        memset(terrain_report, 0, 22);
    memcpy(terrain_report, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1107 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h" 1
       


#define MAVLINK_MSG_ID_SCALED_PRESSURE2 137

typedef struct __mavlink_scaled_pressure2_t { uint32_t time_boot_ms; float press_abs; float press_diff; int16_t temperature; } __attribute__((packed))





   mavlink_scaled_pressure2_t;

#define MAVLINK_MSG_ID_SCALED_PRESSURE2_LEN 14
#define MAVLINK_MSG_ID_SCALED_PRESSURE2_MIN_LEN 14
#define MAVLINK_MSG_ID_137_LEN 14
#define MAVLINK_MSG_ID_137_MIN_LEN 14

#define MAVLINK_MSG_ID_SCALED_PRESSURE2_CRC 195
#define MAVLINK_MSG_ID_137_CRC 195
# 36 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
#define MAVLINK_MESSAGE_INFO_SCALED_PRESSURE2 { "SCALED_PRESSURE2", 4, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_pressure2_t, time_boot_ms) }, { "press_abs", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_scaled_pressure2_t, press_abs) }, { "press_diff", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_scaled_pressure2_t, press_diff) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_pressure2_t, temperature) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
    mavlink_scaled_pressure2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 137;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 195);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
    mavlink_scaled_pressure2_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 137;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 195);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure2_t* scaled_pressure2)
{
    return mavlink_msg_scaled_pressure2_pack(system_id, component_id, msg, scaled_pressure2->time_boot_ms, scaled_pressure2->press_abs, scaled_pressure2->press_diff, scaled_pressure2->temperature);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure2_t* scaled_pressure2)
{
    return mavlink_msg_scaled_pressure2_pack_chan(system_id, component_id, chan, msg, scaled_pressure2->time_boot_ms, scaled_pressure2->press_abs, scaled_pressure2->press_diff, scaled_pressure2->temperature);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint32_t mavlink_msg_scaled_pressure2_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure2_get_press_abs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure2_get_press_diff(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure2_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure2_decode(const mavlink_message_t* msg, mavlink_scaled_pressure2_t* scaled_pressure2)
{






        uint8_t len = msg->len < 14? msg->len : 14;
        memset(scaled_pressure2, 0, 14);
    memcpy(scaled_pressure2, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1108 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h" 1
       


#define MAVLINK_MSG_ID_ATT_POS_MOCAP 138

typedef struct __mavlink_att_pos_mocap_t { uint64_t time_usec; float q[4]; float x; float y; float z; } __attribute__((packed))






   mavlink_att_pos_mocap_t;

#define MAVLINK_MSG_ID_ATT_POS_MOCAP_LEN 36
#define MAVLINK_MSG_ID_ATT_POS_MOCAP_MIN_LEN 36
#define MAVLINK_MSG_ID_138_LEN 36
#define MAVLINK_MSG_ID_138_MIN_LEN 36

#define MAVLINK_MSG_ID_ATT_POS_MOCAP_CRC 109
#define MAVLINK_MSG_ID_138_CRC 109

#define MAVLINK_MSG_ATT_POS_MOCAP_FIELD_Q_LEN 4
# 38 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
#define MAVLINK_MESSAGE_INFO_ATT_POS_MOCAP { "ATT_POS_MOCAP", 5, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_att_pos_mocap_t, time_usec) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 8, offsetof(mavlink_att_pos_mocap_t, q) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_att_pos_mocap_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_att_pos_mocap_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_att_pos_mocap_t, z) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, const float *q, float x, float y, float z)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
    mavlink_att_pos_mocap_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 138;
    return mavlink_finalize_message(msg, system_id, component_id, 36, 36, 109);
}
# 101 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,const float *q,float x,float y,float z)
{
# 114 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
    mavlink_att_pos_mocap_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 138;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 36, 109);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_att_pos_mocap_t* att_pos_mocap)
{
    return mavlink_msg_att_pos_mocap_pack(system_id, component_id, msg, att_pos_mocap->time_usec, att_pos_mocap->q, att_pos_mocap->x, att_pos_mocap->y, att_pos_mocap->z);
}
# 149 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_att_pos_mocap_t* att_pos_mocap)
{
    return mavlink_msg_att_pos_mocap_pack_chan(system_id, component_id, chan, msg, att_pos_mocap->time_usec, att_pos_mocap->q, att_pos_mocap->x, att_pos_mocap->y, att_pos_mocap->z);
}
# 241 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint64_t mavlink_msg_att_pos_mocap_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_att_pos_mocap_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 8);
}






static inline float mavlink_msg_att_pos_mocap_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_att_pos_mocap_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_att_pos_mocap_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_att_pos_mocap_decode(const mavlink_message_t* msg, mavlink_att_pos_mocap_t* att_pos_mocap)
{







        uint8_t len = msg->len < 36? msg->len : 36;
        memset(att_pos_mocap, 0, 36);
    memcpy(att_pos_mocap, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1109 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h" 1
       


#define MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET 139

typedef struct __mavlink_set_actuator_control_target_t { uint64_t time_usec; float controls[8]; uint8_t group_mlx; uint8_t target_system; uint8_t target_component; } __attribute__((packed))






   mavlink_set_actuator_control_target_t;

#define MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET_LEN 43
#define MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET_MIN_LEN 43
#define MAVLINK_MSG_ID_139_LEN 43
#define MAVLINK_MSG_ID_139_MIN_LEN 43

#define MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET_CRC 168
#define MAVLINK_MSG_ID_139_CRC 168

#define MAVLINK_MSG_SET_ACTUATOR_CONTROL_TARGET_FIELD_CONTROLS_LEN 8
# 38 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
#define MAVLINK_MESSAGE_INFO_SET_ACTUATOR_CONTROL_TARGET { "SET_ACTUATOR_CONTROL_TARGET", 5, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_set_actuator_control_target_t, time_usec) }, { "controls", NULL, MAVLINK_TYPE_FLOAT, 8, 8, offsetof(mavlink_set_actuator_control_target_t, controls) }, { "group_mlx", NULL, MAVLINK_TYPE_UINT8_T, 0, 40, offsetof(mavlink_set_actuator_control_target_t, group_mlx) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 41, offsetof(mavlink_set_actuator_control_target_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 42, offsetof(mavlink_set_actuator_control_target_t, target_component) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t group_mlx, uint8_t target_system, uint8_t target_component, const float *controls)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
    mavlink_set_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


    msg->msgid = 139;
    return mavlink_finalize_message(msg, system_id, component_id, 43, 43, 168);
}
# 101 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t group_mlx,uint8_t target_system,uint8_t target_component,const float *controls)
{
# 114 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
    mavlink_set_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


    msg->msgid = 139;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 43, 43, 168);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{
    return mavlink_msg_set_actuator_control_target_pack(system_id, component_id, msg, set_actuator_control_target->time_usec, set_actuator_control_target->group_mlx, set_actuator_control_target->target_system, set_actuator_control_target->target_component, set_actuator_control_target->controls);
}
# 149 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{
    return mavlink_msg_set_actuator_control_target_pack_chan(system_id, component_id, chan, msg, set_actuator_control_target->time_usec, set_actuator_control_target->group_mlx, set_actuator_control_target->target_system, set_actuator_control_target->target_component, set_actuator_control_target->controls);
}
# 241 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint64_t mavlink_msg_set_actuator_control_target_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_group_mlx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint16_t mavlink_msg_set_actuator_control_target_get_controls(const mavlink_message_t* msg, float *controls)
{
    return _MAV_RETURN_float_array(msg, controls, 8, 8);
}







static inline void mavlink_msg_set_actuator_control_target_decode(const mavlink_message_t* msg, mavlink_set_actuator_control_target_t* set_actuator_control_target)
{







        uint8_t len = msg->len < 43? msg->len : 43;
        memset(set_actuator_control_target, 0, 43);
    memcpy(set_actuator_control_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1110 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h" 1
       


#define MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET 140

typedef struct __mavlink_actuator_control_target_t { uint64_t time_usec; float controls[8]; uint8_t group_mlx; } __attribute__((packed))




   mavlink_actuator_control_target_t;

#define MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_LEN 41
#define MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_MIN_LEN 41
#define MAVLINK_MSG_ID_140_LEN 41
#define MAVLINK_MSG_ID_140_MIN_LEN 41

#define MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_CRC 181
#define MAVLINK_MSG_ID_140_CRC 181

#define MAVLINK_MSG_ACTUATOR_CONTROL_TARGET_FIELD_CONTROLS_LEN 8
# 34 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
#define MAVLINK_MESSAGE_INFO_ACTUATOR_CONTROL_TARGET { "ACTUATOR_CONTROL_TARGET", 3, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_actuator_control_target_t, time_usec) }, { "controls", NULL, MAVLINK_TYPE_FLOAT, 8, 8, offsetof(mavlink_actuator_control_target_t, controls) }, { "group_mlx", NULL, MAVLINK_TYPE_UINT8_T, 0, 40, offsetof(mavlink_actuator_control_target_t, group_mlx) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t group_mlx, const float *controls)
{







    mavlink_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


    msg->msgid = 140;
    return mavlink_finalize_message(msg, system_id, component_id, 41, 41, 181);
}
# 87 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t group_mlx,const float *controls)
{







    mavlink_actuator_control_target_t packet;
    packet.time_usec = time_usec;
    packet.group_mlx = group_mlx;
    mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


    msg->msgid = 140;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 41, 41, 181);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_actuator_control_target_t* actuator_control_target)
{
    return mavlink_msg_actuator_control_target_pack(system_id, component_id, msg, actuator_control_target->time_usec, actuator_control_target->group_mlx, actuator_control_target->controls);
}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_actuator_control_target_t* actuator_control_target)
{
    return mavlink_msg_actuator_control_target_pack_chan(system_id, component_id, chan, msg, actuator_control_target->time_usec, actuator_control_target->group_mlx, actuator_control_target->controls);
}
# 213 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint64_t mavlink_msg_actuator_control_target_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_actuator_control_target_get_group_mlx(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_actuator_control_target_get_controls(const mavlink_message_t* msg, float *controls)
{
    return _MAV_RETURN_float_array(msg, controls, 8, 8);
}







static inline void mavlink_msg_actuator_control_target_decode(const mavlink_message_t* msg, mavlink_actuator_control_target_t* actuator_control_target)
{





        uint8_t len = msg->len < 41? msg->len : 41;
        memset(actuator_control_target, 0, 41);
    memcpy(actuator_control_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1111 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h" 1
       


#define MAVLINK_MSG_ID_ALTITUDE 141

typedef struct __mavlink_altitude_t { uint64_t time_usec; float altitude_monotonic; float altitude_amsl; float altitude_local; float altitude_relative; float altitude_terrain; float bottom_clearance; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
   mavlink_altitude_t;

#define MAVLINK_MSG_ID_ALTITUDE_LEN 32
#define MAVLINK_MSG_ID_ALTITUDE_MIN_LEN 32
#define MAVLINK_MSG_ID_141_LEN 32
#define MAVLINK_MSG_ID_141_MIN_LEN 32

#define MAVLINK_MSG_ID_ALTITUDE_CRC 47
#define MAVLINK_MSG_ID_141_CRC 47
# 42 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
#define MAVLINK_MESSAGE_INFO_ALTITUDE { "ALTITUDE", 7, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_altitude_t, time_usec) }, { "altitude_monotonic", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_altitude_t, altitude_monotonic) }, { "altitude_amsl", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_altitude_t, altitude_amsl) }, { "altitude_local", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_altitude_t, altitude_local) }, { "altitude_relative", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_altitude_t, altitude_relative) }, { "altitude_terrain", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_altitude_t, altitude_terrain) }, { "bottom_clearance", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_altitude_t, bottom_clearance) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
static inline uint16_t mavlink_msg_altitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float altitude_monotonic, float altitude_amsl, float altitude_local, float altitude_relative, float altitude_terrain, float bottom_clearance)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
    mavlink_altitude_t packet;
    packet.time_usec = time_usec;
    packet.altitude_monotonic = altitude_monotonic;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_local = altitude_local;
    packet.altitude_relative = altitude_relative;
    packet.altitude_terrain = altitude_terrain;
    packet.bottom_clearance = bottom_clearance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 141;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 47);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
static inline uint16_t mavlink_msg_altitude_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float altitude_monotonic,float altitude_amsl,float altitude_local,float altitude_relative,float altitude_terrain,float bottom_clearance)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
    mavlink_altitude_t packet;
    packet.time_usec = time_usec;
    packet.altitude_monotonic = altitude_monotonic;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_local = altitude_local;
    packet.altitude_relative = altitude_relative;
    packet.altitude_terrain = altitude_terrain;
    packet.bottom_clearance = bottom_clearance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 141;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 47);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
static inline uint16_t mavlink_msg_altitude_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_altitude_t* altitude)
{
    return mavlink_msg_altitude_pack(system_id, component_id, msg, altitude->time_usec, altitude->altitude_monotonic, altitude->altitude_amsl, altitude->altitude_local, altitude->altitude_relative, altitude->altitude_terrain, altitude->bottom_clearance);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
static inline uint16_t mavlink_msg_altitude_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_altitude_t* altitude)
{
    return mavlink_msg_altitude_pack_chan(system_id, component_id, chan, msg, altitude->time_usec, altitude->altitude_monotonic, altitude->altitude_amsl, altitude->altitude_local, altitude->altitude_relative, altitude->altitude_terrain, altitude->bottom_clearance);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
static inline uint64_t mavlink_msg_altitude_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_altitude_get_altitude_monotonic(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_altitude_get_altitude_amsl(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_altitude_get_altitude_local(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_altitude_get_altitude_relative(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_altitude_get_altitude_terrain(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_altitude_get_bottom_clearance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_altitude_decode(const mavlink_message_t* msg, mavlink_altitude_t* altitude)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_altitude.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(altitude, 0, 32);
    memcpy(altitude, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1112 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h" 1
       


#define MAVLINK_MSG_ID_RESOURCE_REQUEST 142

typedef struct __mavlink_resource_request_t { uint8_t request_id; uint8_t uri_type; uint8_t uri[120]; uint8_t transfer_type; uint8_t storage[120]; } __attribute__((packed))






   mavlink_resource_request_t;

#define MAVLINK_MSG_ID_RESOURCE_REQUEST_LEN 243
#define MAVLINK_MSG_ID_RESOURCE_REQUEST_MIN_LEN 243
#define MAVLINK_MSG_ID_142_LEN 243
#define MAVLINK_MSG_ID_142_MIN_LEN 243

#define MAVLINK_MSG_ID_RESOURCE_REQUEST_CRC 72
#define MAVLINK_MSG_ID_142_CRC 72

#define MAVLINK_MSG_RESOURCE_REQUEST_FIELD_URI_LEN 120
#define MAVLINK_MSG_RESOURCE_REQUEST_FIELD_STORAGE_LEN 120
# 39 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h"
#define MAVLINK_MESSAGE_INFO_RESOURCE_REQUEST { "RESOURCE_REQUEST", 5, { { "request_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_resource_request_t, request_id) }, { "uri_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_resource_request_t, uri_type) }, { "uri", NULL, MAVLINK_TYPE_UINT8_T, 120, 2, offsetof(mavlink_resource_request_t, uri) }, { "transfer_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 122, offsetof(mavlink_resource_request_t, transfer_type) }, { "storage", NULL, MAVLINK_TYPE_UINT8_T, 120, 123, offsetof(mavlink_resource_request_t, storage) }, } }
# 64 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h"
static inline uint16_t mavlink_msg_resource_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t request_id, uint8_t uri_type, const uint8_t *uri, uint8_t transfer_type, const uint8_t *storage)
{
# 76 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h"
    mavlink_resource_request_t packet;
    packet.request_id = request_id;
    packet.uri_type = uri_type;
    packet.transfer_type = transfer_type;
    mav_array_memcpy(packet.uri, uri, sizeof(uint8_t)*120);
    mav_array_memcpy(packet.storage, storage, sizeof(uint8_t)*120);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 243);


    msg->msgid = 142;
    return mavlink_finalize_message(msg, system_id, component_id, 243, 243, 72);
}
# 102 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h"
static inline uint16_t mavlink_msg_resource_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t request_id,uint8_t uri_type,const uint8_t *uri,uint8_t transfer_type,const uint8_t *storage)
{
# 115 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h"
    mavlink_resource_request_t packet;
    packet.request_id = request_id;
    packet.uri_type = uri_type;
    packet.transfer_type = transfer_type;
    mav_array_memcpy(packet.uri, uri, sizeof(uint8_t)*120);
    mav_array_memcpy(packet.storage, storage, sizeof(uint8_t)*120);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 243);


    msg->msgid = 142;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 243, 243, 72);
}
# 136 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h"
static inline uint16_t mavlink_msg_resource_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_resource_request_t* resource_request)
{
    return mavlink_msg_resource_request_pack(system_id, component_id, msg, resource_request->request_id, resource_request->uri_type, resource_request->uri, resource_request->transfer_type, resource_request->storage);
}
# 150 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h"
static inline uint16_t mavlink_msg_resource_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_resource_request_t* resource_request)
{
    return mavlink_msg_resource_request_pack_chan(system_id, component_id, chan, msg, resource_request->request_id, resource_request->uri_type, resource_request->uri, resource_request->transfer_type, resource_request->storage);
}
# 242 "./lib/main/MAVLink/common/./mavlink_msg_resource_request.h"
static inline uint8_t mavlink_msg_resource_request_get_request_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_resource_request_get_uri_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_resource_request_get_uri(const mavlink_message_t* msg, uint8_t *uri)
{
    return _MAV_RETURN_uint8_t_array(msg, uri, 120, 2);
}






static inline uint8_t mavlink_msg_resource_request_get_transfer_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[122];
}






static inline uint16_t mavlink_msg_resource_request_get_storage(const mavlink_message_t* msg, uint8_t *storage)
{
    return _MAV_RETURN_uint8_t_array(msg, storage, 120, 123);
}







static inline void mavlink_msg_resource_request_decode(const mavlink_message_t* msg, mavlink_resource_request_t* resource_request)
{







        uint8_t len = msg->len < 243? msg->len : 243;
        memset(resource_request, 0, 243);
    memcpy(resource_request, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1113 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h" 1
       


#define MAVLINK_MSG_ID_SCALED_PRESSURE3 143

typedef struct __mavlink_scaled_pressure3_t { uint32_t time_boot_ms; float press_abs; float press_diff; int16_t temperature; } __attribute__((packed))





   mavlink_scaled_pressure3_t;

#define MAVLINK_MSG_ID_SCALED_PRESSURE3_LEN 14
#define MAVLINK_MSG_ID_SCALED_PRESSURE3_MIN_LEN 14
#define MAVLINK_MSG_ID_143_LEN 14
#define MAVLINK_MSG_ID_143_MIN_LEN 14

#define MAVLINK_MSG_ID_SCALED_PRESSURE3_CRC 131
#define MAVLINK_MSG_ID_143_CRC 131
# 36 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h"
#define MAVLINK_MESSAGE_INFO_SCALED_PRESSURE3 { "SCALED_PRESSURE3", 4, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_scaled_pressure3_t, time_boot_ms) }, { "press_abs", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_scaled_pressure3_t, press_abs) }, { "press_diff", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_scaled_pressure3_t, press_diff) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_scaled_pressure3_t, temperature) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h"
static inline uint16_t mavlink_msg_scaled_pressure3_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 71 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h"
    mavlink_scaled_pressure3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 143;
    return mavlink_finalize_message(msg, system_id, component_id, 14, 14, 131);
}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h"
static inline uint16_t mavlink_msg_scaled_pressure3_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h"
    mavlink_scaled_pressure3_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.press_abs = press_abs;
    packet.press_diff = press_diff;
    packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


    msg->msgid = 143;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 14, 131);
}
# 130 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h"
static inline uint16_t mavlink_msg_scaled_pressure3_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure3_t* scaled_pressure3)
{
    return mavlink_msg_scaled_pressure3_pack(system_id, component_id, msg, scaled_pressure3->time_boot_ms, scaled_pressure3->press_abs, scaled_pressure3->press_diff, scaled_pressure3->temperature);
}
# 144 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h"
static inline uint16_t mavlink_msg_scaled_pressure3_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure3_t* scaled_pressure3)
{
    return mavlink_msg_scaled_pressure3_pack_chan(system_id, component_id, chan, msg, scaled_pressure3->time_boot_ms, scaled_pressure3->press_abs, scaled_pressure3->press_diff, scaled_pressure3->temperature);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure3.h"
static inline uint32_t mavlink_msg_scaled_pressure3_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure3_get_press_abs(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure3_get_press_diff(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure3_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure3_decode(const mavlink_message_t* msg, mavlink_scaled_pressure3_t* scaled_pressure3)
{






        uint8_t len = msg->len < 14? msg->len : 14;
        memset(scaled_pressure3, 0, 14);
    memcpy(scaled_pressure3, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1114 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h" 1
       


#define MAVLINK_MSG_ID_FOLLOW_TARGET 144

typedef struct __mavlink_follow_target_t { uint64_t timestamp; uint64_t custom_state; int32_t lat; int32_t lon; float alt; float vel[3]; float acc[3]; float attitude_q[4]; float rates[3]; float position_cov[3]; uint8_t est_capabilities; } __attribute__((packed))
# 19 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
   mavlink_follow_target_t;

#define MAVLINK_MSG_ID_FOLLOW_TARGET_LEN 93
#define MAVLINK_MSG_ID_FOLLOW_TARGET_MIN_LEN 93
#define MAVLINK_MSG_ID_144_LEN 93
#define MAVLINK_MSG_ID_144_MIN_LEN 93

#define MAVLINK_MSG_ID_FOLLOW_TARGET_CRC 127
#define MAVLINK_MSG_ID_144_CRC 127

#define MAVLINK_MSG_FOLLOW_TARGET_FIELD_VEL_LEN 3
#define MAVLINK_MSG_FOLLOW_TARGET_FIELD_ACC_LEN 3
#define MAVLINK_MSG_FOLLOW_TARGET_FIELD_ATTITUDE_Q_LEN 4
#define MAVLINK_MSG_FOLLOW_TARGET_FIELD_RATES_LEN 3
#define MAVLINK_MSG_FOLLOW_TARGET_FIELD_POSITION_COV_LEN 3
# 54 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
#define MAVLINK_MESSAGE_INFO_FOLLOW_TARGET { "FOLLOW_TARGET", 11, { { "timestamp", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_follow_target_t, timestamp) }, { "custom_state", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_follow_target_t, custom_state) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_follow_target_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 20, offsetof(mavlink_follow_target_t, lon) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_follow_target_t, alt) }, { "vel", NULL, MAVLINK_TYPE_FLOAT, 3, 28, offsetof(mavlink_follow_target_t, vel) }, { "acc", NULL, MAVLINK_TYPE_FLOAT, 3, 40, offsetof(mavlink_follow_target_t, acc) }, { "attitude_q", NULL, MAVLINK_TYPE_FLOAT, 4, 52, offsetof(mavlink_follow_target_t, attitude_q) }, { "rates", NULL, MAVLINK_TYPE_FLOAT, 3, 68, offsetof(mavlink_follow_target_t, rates) }, { "position_cov", NULL, MAVLINK_TYPE_FLOAT, 3, 80, offsetof(mavlink_follow_target_t, position_cov) }, { "est_capabilities", NULL, MAVLINK_TYPE_UINT8_T, 0, 92, offsetof(mavlink_follow_target_t, est_capabilities) }, } }
# 91 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
static inline uint16_t mavlink_msg_follow_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t timestamp, uint8_t est_capabilities, int32_t lat, int32_t lon, float alt, const float *vel, const float *acc, const float *attitude_q, const float *rates, const float *position_cov, uint64_t custom_state)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
    mavlink_follow_target_t packet;
    packet.timestamp = timestamp;
    packet.custom_state = custom_state;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.est_capabilities = est_capabilities;
    mav_array_memcpy(packet.vel, vel, sizeof(float)*3);
    mav_array_memcpy(packet.acc, acc, sizeof(float)*3);
    mav_array_memcpy(packet.attitude_q, attitude_q, sizeof(float)*4);
    mav_array_memcpy(packet.rates, rates, sizeof(float)*3);
    mav_array_memcpy(packet.position_cov, position_cov, sizeof(float)*3);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 93);


    msg->msgid = 144;
    return mavlink_finalize_message(msg, system_id, component_id, 93, 93, 127);
}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
static inline uint16_t mavlink_msg_follow_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t timestamp,uint8_t est_capabilities,int32_t lat,int32_t lon,float alt,const float *vel,const float *acc,const float *attitude_q,const float *rates,const float *position_cov,uint64_t custom_state)
{
# 166 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
    mavlink_follow_target_t packet;
    packet.timestamp = timestamp;
    packet.custom_state = custom_state;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.est_capabilities = est_capabilities;
    mav_array_memcpy(packet.vel, vel, sizeof(float)*3);
    mav_array_memcpy(packet.acc, acc, sizeof(float)*3);
    mav_array_memcpy(packet.attitude_q, attitude_q, sizeof(float)*4);
    mav_array_memcpy(packet.rates, rates, sizeof(float)*3);
    mav_array_memcpy(packet.position_cov, position_cov, sizeof(float)*3);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 93);


    msg->msgid = 144;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 93, 93, 127);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
static inline uint16_t mavlink_msg_follow_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_follow_target_t* follow_target)
{
    return mavlink_msg_follow_target_pack(system_id, component_id, msg, follow_target->timestamp, follow_target->est_capabilities, follow_target->lat, follow_target->lon, follow_target->alt, follow_target->vel, follow_target->acc, follow_target->attitude_q, follow_target->rates, follow_target->position_cov, follow_target->custom_state);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
static inline uint16_t mavlink_msg_follow_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_follow_target_t* follow_target)
{
    return mavlink_msg_follow_target_pack_chan(system_id, component_id, chan, msg, follow_target->timestamp, follow_target->est_capabilities, follow_target->lat, follow_target->lon, follow_target->alt, follow_target->vel, follow_target->acc, follow_target->attitude_q, follow_target->rates, follow_target->position_cov, follow_target->custom_state);
}
# 329 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
static inline uint64_t mavlink_msg_follow_target_get_timestamp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_follow_target_get_est_capabilities(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[92];
}






static inline int32_t mavlink_msg_follow_target_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_follow_target_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_follow_target_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline uint16_t mavlink_msg_follow_target_get_vel(const mavlink_message_t* msg, float *vel)
{
    return _MAV_RETURN_float_array(msg, vel, 3, 28);
}






static inline uint16_t mavlink_msg_follow_target_get_acc(const mavlink_message_t* msg, float *acc)
{
    return _MAV_RETURN_float_array(msg, acc, 3, 40);
}






static inline uint16_t mavlink_msg_follow_target_get_attitude_q(const mavlink_message_t* msg, float *attitude_q)
{
    return _MAV_RETURN_float_array(msg, attitude_q, 4, 52);
}






static inline uint16_t mavlink_msg_follow_target_get_rates(const mavlink_message_t* msg, float *rates)
{
    return _MAV_RETURN_float_array(msg, rates, 3, 68);
}






static inline uint16_t mavlink_msg_follow_target_get_position_cov(const mavlink_message_t* msg, float *position_cov)
{
    return _MAV_RETURN_float_array(msg, position_cov, 3, 80);
}






static inline uint64_t mavlink_msg_follow_target_get_custom_state(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 8);
}







static inline void mavlink_msg_follow_target_decode(const mavlink_message_t* msg, mavlink_follow_target_t* follow_target)
{
# 455 "./lib/main/MAVLink/common/./mavlink_msg_follow_target.h"
        uint8_t len = msg->len < 93? msg->len : 93;
        memset(follow_target, 0, 93);
    memcpy(follow_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1115 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h" 1
       


#define MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE 146

typedef struct __mavlink_control_system_state_t { uint64_t time_usec; float x_acc; float y_acc; float z_acc; float x_vel; float y_vel; float z_vel; float x_pos; float y_pos; float z_pos; float airspeed; float vel_variance[3]; float pos_variance[3]; float q[4]; float roll_rate; float pitch_rate; float yaw_rate; } __attribute__((packed))
# 25 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
   mavlink_control_system_state_t;

#define MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE_LEN 100
#define MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE_MIN_LEN 100
#define MAVLINK_MSG_ID_146_LEN 100
#define MAVLINK_MSG_ID_146_MIN_LEN 100

#define MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE_CRC 103
#define MAVLINK_MSG_ID_146_CRC 103

#define MAVLINK_MSG_CONTROL_SYSTEM_STATE_FIELD_VEL_VARIANCE_LEN 3
#define MAVLINK_MSG_CONTROL_SYSTEM_STATE_FIELD_POS_VARIANCE_LEN 3
#define MAVLINK_MSG_CONTROL_SYSTEM_STATE_FIELD_Q_LEN 4
# 64 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
#define MAVLINK_MESSAGE_INFO_CONTROL_SYSTEM_STATE { "CONTROL_SYSTEM_STATE", 17, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_control_system_state_t, time_usec) }, { "x_acc", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_control_system_state_t, x_acc) }, { "y_acc", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_control_system_state_t, y_acc) }, { "z_acc", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_control_system_state_t, z_acc) }, { "x_vel", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_control_system_state_t, x_vel) }, { "y_vel", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_control_system_state_t, y_vel) }, { "z_vel", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_control_system_state_t, z_vel) }, { "x_pos", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_control_system_state_t, x_pos) }, { "y_pos", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_control_system_state_t, y_pos) }, { "z_pos", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_control_system_state_t, z_pos) }, { "airspeed", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_control_system_state_t, airspeed) }, { "vel_variance", NULL, MAVLINK_TYPE_FLOAT, 3, 48, offsetof(mavlink_control_system_state_t, vel_variance) }, { "pos_variance", NULL, MAVLINK_TYPE_FLOAT, 3, 60, offsetof(mavlink_control_system_state_t, pos_variance) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 72, offsetof(mavlink_control_system_state_t, q) }, { "roll_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 88, offsetof(mavlink_control_system_state_t, roll_rate) }, { "pitch_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 92, offsetof(mavlink_control_system_state_t, pitch_rate) }, { "yaw_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 96, offsetof(mavlink_control_system_state_t, yaw_rate) }, } }
# 113 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
static inline uint16_t mavlink_msg_control_system_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float x_acc, float y_acc, float z_acc, float x_vel, float y_vel, float z_vel, float x_pos, float y_pos, float z_pos, float airspeed, const float *vel_variance, const float *pos_variance, const float *q, float roll_rate, float pitch_rate, float yaw_rate)
{
# 137 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
    mavlink_control_system_state_t packet;
    packet.time_usec = time_usec;
    packet.x_acc = x_acc;
    packet.y_acc = y_acc;
    packet.z_acc = z_acc;
    packet.x_vel = x_vel;
    packet.y_vel = y_vel;
    packet.z_vel = z_vel;
    packet.x_pos = x_pos;
    packet.y_pos = y_pos;
    packet.z_pos = z_pos;
    packet.airspeed = airspeed;
    packet.roll_rate = roll_rate;
    packet.pitch_rate = pitch_rate;
    packet.yaw_rate = yaw_rate;
    mav_array_memcpy(packet.vel_variance, vel_variance, sizeof(float)*3);
    mav_array_memcpy(packet.pos_variance, pos_variance, sizeof(float)*3);
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 100);


    msg->msgid = 146;
    return mavlink_finalize_message(msg, system_id, component_id, 100, 100, 103);
}
# 187 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
static inline uint16_t mavlink_msg_control_system_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float x_acc,float y_acc,float z_acc,float x_vel,float y_vel,float z_vel,float x_pos,float y_pos,float z_pos,float airspeed,const float *vel_variance,const float *pos_variance,const float *q,float roll_rate,float pitch_rate,float yaw_rate)
{
# 212 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
    mavlink_control_system_state_t packet;
    packet.time_usec = time_usec;
    packet.x_acc = x_acc;
    packet.y_acc = y_acc;
    packet.z_acc = z_acc;
    packet.x_vel = x_vel;
    packet.y_vel = y_vel;
    packet.z_vel = z_vel;
    packet.x_pos = x_pos;
    packet.y_pos = y_pos;
    packet.z_pos = z_pos;
    packet.airspeed = airspeed;
    packet.roll_rate = roll_rate;
    packet.pitch_rate = pitch_rate;
    packet.yaw_rate = yaw_rate;
    mav_array_memcpy(packet.vel_variance, vel_variance, sizeof(float)*3);
    mav_array_memcpy(packet.pos_variance, pos_variance, sizeof(float)*3);
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 100);


    msg->msgid = 146;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 100, 100, 103);
}
# 245 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
static inline uint16_t mavlink_msg_control_system_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_control_system_state_t* control_system_state)
{
    return mavlink_msg_control_system_state_pack(system_id, component_id, msg, control_system_state->time_usec, control_system_state->x_acc, control_system_state->y_acc, control_system_state->z_acc, control_system_state->x_vel, control_system_state->y_vel, control_system_state->z_vel, control_system_state->x_pos, control_system_state->y_pos, control_system_state->z_pos, control_system_state->airspeed, control_system_state->vel_variance, control_system_state->pos_variance, control_system_state->q, control_system_state->roll_rate, control_system_state->pitch_rate, control_system_state->yaw_rate);
}
# 259 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
static inline uint16_t mavlink_msg_control_system_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_control_system_state_t* control_system_state)
{
    return mavlink_msg_control_system_state_pack_chan(system_id, component_id, chan, msg, control_system_state->time_usec, control_system_state->x_acc, control_system_state->y_acc, control_system_state->z_acc, control_system_state->x_vel, control_system_state->y_vel, control_system_state->z_vel, control_system_state->x_pos, control_system_state->y_pos, control_system_state->z_pos, control_system_state->airspeed, control_system_state->vel_variance, control_system_state->pos_variance, control_system_state->q, control_system_state->roll_rate, control_system_state->pitch_rate, control_system_state->yaw_rate);
}
# 411 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
static inline uint64_t mavlink_msg_control_system_state_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_control_system_state_get_x_acc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_control_system_state_get_y_acc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_control_system_state_get_z_acc(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_control_system_state_get_x_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_control_system_state_get_y_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_control_system_state_get_z_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_control_system_state_get_x_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_control_system_state_get_y_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_control_system_state_get_z_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_control_system_state_get_airspeed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline uint16_t mavlink_msg_control_system_state_get_vel_variance(const mavlink_message_t* msg, float *vel_variance)
{
    return _MAV_RETURN_float_array(msg, vel_variance, 3, 48);
}






static inline uint16_t mavlink_msg_control_system_state_get_pos_variance(const mavlink_message_t* msg, float *pos_variance)
{
    return _MAV_RETURN_float_array(msg, pos_variance, 3, 60);
}






static inline uint16_t mavlink_msg_control_system_state_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 72);
}






static inline float mavlink_msg_control_system_state_get_roll_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 88);
}






static inline float mavlink_msg_control_system_state_get_pitch_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 92);
}






static inline float mavlink_msg_control_system_state_get_yaw_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 96);
}







static inline void mavlink_msg_control_system_state_decode(const mavlink_message_t* msg, mavlink_control_system_state_t* control_system_state)
{
# 603 "./lib/main/MAVLink/common/./mavlink_msg_control_system_state.h"
        uint8_t len = msg->len < 100? msg->len : 100;
        memset(control_system_state, 0, 100);
    memcpy(control_system_state, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1116 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h" 1
       


#define MAVLINK_MSG_ID_BATTERY_STATUS 147

typedef struct __mavlink_battery_status_t { int32_t current_consumed; int32_t energy_consumed; int16_t temperature; uint16_t voltages[10]; int16_t current_battery; uint8_t id; uint8_t battery_function; uint8_t type; int8_t battery_remaining; } __attribute__((packed))
# 17 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
   mavlink_battery_status_t;

#define MAVLINK_MSG_ID_BATTERY_STATUS_LEN 36
#define MAVLINK_MSG_ID_BATTERY_STATUS_MIN_LEN 36
#define MAVLINK_MSG_ID_147_LEN 36
#define MAVLINK_MSG_ID_147_MIN_LEN 36

#define MAVLINK_MSG_ID_BATTERY_STATUS_CRC 154
#define MAVLINK_MSG_ID_147_CRC 154

#define MAVLINK_MSG_BATTERY_STATUS_FIELD_VOLTAGES_LEN 10
# 46 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
#define MAVLINK_MESSAGE_INFO_BATTERY_STATUS { "BATTERY_STATUS", 9, { { "current_consumed", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_battery_status_t, current_consumed) }, { "energy_consumed", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_battery_status_t, energy_consumed) }, { "temperature", NULL, MAVLINK_TYPE_INT16_T, 0, 8, offsetof(mavlink_battery_status_t, temperature) }, { "voltages", NULL, MAVLINK_TYPE_UINT16_T, 10, 10, offsetof(mavlink_battery_status_t, voltages) }, { "current_battery", NULL, MAVLINK_TYPE_INT16_T, 0, 30, offsetof(mavlink_battery_status_t, current_battery) }, { "id", NULL, MAVLINK_TYPE_UINT8_T, 0, 32, offsetof(mavlink_battery_status_t, id) }, { "battery_function", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_battery_status_t, battery_function) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_battery_status_t, type) }, { "battery_remaining", NULL, MAVLINK_TYPE_INT8_T, 0, 35, offsetof(mavlink_battery_status_t, battery_remaining) }, } }
# 79 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t id, uint8_t battery_function, uint8_t type, int16_t temperature, const uint16_t *voltages, int16_t current_battery, int32_t current_consumed, int32_t energy_consumed, int8_t battery_remaining)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
    mavlink_battery_status_t packet;
    packet.current_consumed = current_consumed;
    packet.energy_consumed = energy_consumed;
    packet.temperature = temperature;
    packet.current_battery = current_battery;
    packet.id = id;
    packet.battery_function = battery_function;
    packet.type = type;
    packet.battery_remaining = battery_remaining;
    mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 147;
    return mavlink_finalize_message(msg, system_id, component_id, 36, 36, 154);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t id,uint8_t battery_function,uint8_t type,int16_t temperature,const uint16_t *voltages,int16_t current_battery,int32_t current_consumed,int32_t energy_consumed,int8_t battery_remaining)
{
# 146 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
    mavlink_battery_status_t packet;
    packet.current_consumed = current_consumed;
    packet.energy_consumed = energy_consumed;
    packet.temperature = temperature;
    packet.current_battery = current_battery;
    packet.id = id;
    packet.battery_function = battery_function;
    packet.type = type;
    packet.battery_remaining = battery_remaining;
    mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 147;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 36, 154);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_battery_status_t* battery_status)
{
    return mavlink_msg_battery_status_pack(system_id, component_id, msg, battery_status->id, battery_status->battery_function, battery_status->type, battery_status->temperature, battery_status->voltages, battery_status->current_battery, battery_status->current_consumed, battery_status->energy_consumed, battery_status->battery_remaining);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_battery_status_t* battery_status)
{
    return mavlink_msg_battery_status_pack_chan(system_id, component_id, chan, msg, battery_status->id, battery_status->battery_function, battery_status->type, battery_status->temperature, battery_status->voltages, battery_status->current_battery, battery_status->current_consumed, battery_status->energy_consumed, battery_status->battery_remaining);
}
# 297 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint8_t mavlink_msg_battery_status_get_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_battery_status_get_battery_function(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_battery_status_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int16_t mavlink_msg_battery_status_get_temperature(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 8);
}






static inline uint16_t mavlink_msg_battery_status_get_voltages(const mavlink_message_t* msg, uint16_t *voltages)
{
    return _MAV_RETURN_uint16_t_array(msg, voltages, 10, 10);
}






static inline int16_t mavlink_msg_battery_status_get_current_battery(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 30);
}






static inline int32_t mavlink_msg_battery_status_get_current_consumed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_battery_status_get_energy_consumed(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int8_t mavlink_msg_battery_status_get_battery_remaining(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[35];
}







static inline void mavlink_msg_battery_status_decode(const mavlink_message_t* msg, mavlink_battery_status_t* battery_status)
{
# 401 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
        uint8_t len = msg->len < 36? msg->len : 36;
        memset(battery_status, 0, 36);
    memcpy(battery_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1117 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h" 1
       


#define MAVLINK_MSG_ID_AUTOPILOT_VERSION 148

typedef struct __mavlink_autopilot_version_t { uint64_t capabilities; uint64_t uid; uint32_t flight_sw_version; uint32_t middleware_sw_version; uint32_t os_sw_version; uint32_t board_version; uint16_t vendor_id; uint16_t product_id; uint8_t flight_custom_version[8]; uint8_t middleware_custom_version[8]; uint8_t os_custom_version[8]; } __attribute__((packed))
# 19 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
   mavlink_autopilot_version_t;

#define MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN 60
#define MAVLINK_MSG_ID_AUTOPILOT_VERSION_MIN_LEN 60
#define MAVLINK_MSG_ID_148_LEN 60
#define MAVLINK_MSG_ID_148_MIN_LEN 60

#define MAVLINK_MSG_ID_AUTOPILOT_VERSION_CRC 178
#define MAVLINK_MSG_ID_148_CRC 178

#define MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_FLIGHT_CUSTOM_VERSION_LEN 8
#define MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_MIDDLEWARE_CUSTOM_VERSION_LEN 8
#define MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_OS_CUSTOM_VERSION_LEN 8
# 52 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
#define MAVLINK_MESSAGE_INFO_AUTOPILOT_VERSION { "AUTOPILOT_VERSION", 11, { { "capabilities", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_autopilot_version_t, capabilities) }, { "uid", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_autopilot_version_t, uid) }, { "flight_sw_version", NULL, MAVLINK_TYPE_UINT32_T, 0, 16, offsetof(mavlink_autopilot_version_t, flight_sw_version) }, { "middleware_sw_version", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_autopilot_version_t, middleware_sw_version) }, { "os_sw_version", NULL, MAVLINK_TYPE_UINT32_T, 0, 24, offsetof(mavlink_autopilot_version_t, os_sw_version) }, { "board_version", NULL, MAVLINK_TYPE_UINT32_T, 0, 28, offsetof(mavlink_autopilot_version_t, board_version) }, { "vendor_id", NULL, MAVLINK_TYPE_UINT16_T, 0, 32, offsetof(mavlink_autopilot_version_t, vendor_id) }, { "product_id", NULL, MAVLINK_TYPE_UINT16_T, 0, 34, offsetof(mavlink_autopilot_version_t, product_id) }, { "flight_custom_version", NULL, MAVLINK_TYPE_UINT8_T, 8, 36, offsetof(mavlink_autopilot_version_t, flight_custom_version) }, { "middleware_custom_version", NULL, MAVLINK_TYPE_UINT8_T, 8, 44, offsetof(mavlink_autopilot_version_t, middleware_custom_version) }, { "os_custom_version", NULL, MAVLINK_TYPE_UINT8_T, 8, 52, offsetof(mavlink_autopilot_version_t, os_custom_version) }, } }
# 89 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t capabilities, uint32_t flight_sw_version, uint32_t middleware_sw_version, uint32_t os_sw_version, uint32_t board_version, const uint8_t *flight_custom_version, const uint8_t *middleware_custom_version, const uint8_t *os_custom_version, uint16_t vendor_id, uint16_t product_id, uint64_t uid)
{
# 107 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
    mavlink_autopilot_version_t packet;
    packet.capabilities = capabilities;
    packet.uid = uid;
    packet.flight_sw_version = flight_sw_version;
    packet.middleware_sw_version = middleware_sw_version;
    packet.os_sw_version = os_sw_version;
    packet.board_version = board_version;
    packet.vendor_id = vendor_id;
    packet.product_id = product_id;
    mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 60);


    msg->msgid = 148;
    return mavlink_finalize_message(msg, system_id, component_id, 60, 60, 178);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t capabilities,uint32_t flight_sw_version,uint32_t middleware_sw_version,uint32_t os_sw_version,uint32_t board_version,const uint8_t *flight_custom_version,const uint8_t *middleware_custom_version,const uint8_t *os_custom_version,uint16_t vendor_id,uint16_t product_id,uint64_t uid)
{
# 164 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
    mavlink_autopilot_version_t packet;
    packet.capabilities = capabilities;
    packet.uid = uid;
    packet.flight_sw_version = flight_sw_version;
    packet.middleware_sw_version = middleware_sw_version;
    packet.os_sw_version = os_sw_version;
    packet.board_version = board_version;
    packet.vendor_id = vendor_id;
    packet.product_id = product_id;
    mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
    mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 60);


    msg->msgid = 148;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 60, 60, 178);
}
# 191 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_autopilot_version_t* autopilot_version)
{
    return mavlink_msg_autopilot_version_pack(system_id, component_id, msg, autopilot_version->capabilities, autopilot_version->flight_sw_version, autopilot_version->middleware_sw_version, autopilot_version->os_sw_version, autopilot_version->board_version, autopilot_version->flight_custom_version, autopilot_version->middleware_custom_version, autopilot_version->os_custom_version, autopilot_version->vendor_id, autopilot_version->product_id, autopilot_version->uid);
}
# 205 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_autopilot_version_t* autopilot_version)
{
    return mavlink_msg_autopilot_version_pack_chan(system_id, component_id, chan, msg, autopilot_version->capabilities, autopilot_version->flight_sw_version, autopilot_version->middleware_sw_version, autopilot_version->os_sw_version, autopilot_version->board_version, autopilot_version->flight_custom_version, autopilot_version->middleware_custom_version, autopilot_version->os_custom_version, autopilot_version->vendor_id, autopilot_version->product_id, autopilot_version->uid);
}
# 327 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint64_t mavlink_msg_autopilot_version_get_capabilities(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_autopilot_version_get_flight_sw_version(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 16);
}






static inline uint32_t mavlink_msg_autopilot_version_get_middleware_sw_version(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline uint32_t mavlink_msg_autopilot_version_get_os_sw_version(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 24);
}






static inline uint32_t mavlink_msg_autopilot_version_get_board_version(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 28);
}






static inline uint16_t mavlink_msg_autopilot_version_get_flight_custom_version(const mavlink_message_t* msg, uint8_t *flight_custom_version)
{
    return _MAV_RETURN_uint8_t_array(msg, flight_custom_version, 8, 36);
}






static inline uint16_t mavlink_msg_autopilot_version_get_middleware_custom_version(const mavlink_message_t* msg, uint8_t *middleware_custom_version)
{
    return _MAV_RETURN_uint8_t_array(msg, middleware_custom_version, 8, 44);
}






static inline uint16_t mavlink_msg_autopilot_version_get_os_custom_version(const mavlink_message_t* msg, uint8_t *os_custom_version)
{
    return _MAV_RETURN_uint8_t_array(msg, os_custom_version, 8, 52);
}






static inline uint16_t mavlink_msg_autopilot_version_get_vendor_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint16_t mavlink_msg_autopilot_version_get_product_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint64_t mavlink_msg_autopilot_version_get_uid(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 8);
}







static inline void mavlink_msg_autopilot_version_decode(const mavlink_message_t* msg, mavlink_autopilot_version_t* autopilot_version)
{
# 453 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
        uint8_t len = msg->len < 60? msg->len : 60;
        memset(autopilot_version, 0, 60);
    memcpy(autopilot_version, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1118 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h" 1
       


#define MAVLINK_MSG_ID_LANDING_TARGET 149

typedef struct __mavlink_landing_target_t { uint64_t time_usec; float angle_x; float angle_y; float distance; float size_x; float size_y; uint8_t target_num; uint8_t frame; } __attribute__((packed))
# 16 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
   mavlink_landing_target_t;

#define MAVLINK_MSG_ID_LANDING_TARGET_LEN 30
#define MAVLINK_MSG_ID_LANDING_TARGET_MIN_LEN 30
#define MAVLINK_MSG_ID_149_LEN 30
#define MAVLINK_MSG_ID_149_MIN_LEN 30

#define MAVLINK_MSG_ID_LANDING_TARGET_CRC 200
#define MAVLINK_MSG_ID_149_CRC 200
# 44 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
#define MAVLINK_MESSAGE_INFO_LANDING_TARGET { "LANDING_TARGET", 8, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_landing_target_t, time_usec) }, { "angle_x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_landing_target_t, angle_x) }, { "angle_y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_landing_target_t, angle_y) }, { "distance", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_landing_target_t, distance) }, { "size_x", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_landing_target_t, size_x) }, { "size_y", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_landing_target_t, size_y) }, { "target_num", NULL, MAVLINK_TYPE_UINT8_T, 0, 28, offsetof(mavlink_landing_target_t, target_num) }, { "frame", NULL, MAVLINK_TYPE_UINT8_T, 0, 29, offsetof(mavlink_landing_target_t, frame) }, } }
# 75 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
static inline uint16_t mavlink_msg_landing_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t target_num, uint8_t frame, float angle_x, float angle_y, float distance, float size_x, float size_y)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
    mavlink_landing_target_t packet;
    packet.time_usec = time_usec;
    packet.angle_x = angle_x;
    packet.angle_y = angle_y;
    packet.distance = distance;
    packet.size_x = size_x;
    packet.size_y = size_y;
    packet.target_num = target_num;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 149;
    return mavlink_finalize_message(msg, system_id, component_id, 30, 30, 200);
}
# 124 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
static inline uint16_t mavlink_msg_landing_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t target_num,uint8_t frame,float angle_x,float angle_y,float distance,float size_x,float size_y)
{
# 141 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
    mavlink_landing_target_t packet;
    packet.time_usec = time_usec;
    packet.angle_x = angle_x;
    packet.angle_y = angle_y;
    packet.distance = distance;
    packet.size_x = size_x;
    packet.size_y = size_y;
    packet.target_num = target_num;
    packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 149;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 30, 200);
}
# 166 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
static inline uint16_t mavlink_msg_landing_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_landing_target_t* landing_target)
{
    return mavlink_msg_landing_target_pack(system_id, component_id, msg, landing_target->time_usec, landing_target->target_num, landing_target->frame, landing_target->angle_x, landing_target->angle_y, landing_target->distance, landing_target->size_x, landing_target->size_y);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
static inline uint16_t mavlink_msg_landing_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_landing_target_t* landing_target)
{
    return mavlink_msg_landing_target_pack_chan(system_id, component_id, chan, msg, landing_target->time_usec, landing_target->target_num, landing_target->frame, landing_target->angle_x, landing_target->angle_y, landing_target->distance, landing_target->size_x, landing_target->size_y);
}
# 291 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
static inline uint64_t mavlink_msg_landing_target_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_landing_target_get_target_num(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline uint8_t mavlink_msg_landing_target_get_frame(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}






static inline float mavlink_msg_landing_target_get_angle_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_landing_target_get_angle_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_landing_target_get_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_landing_target_get_size_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_landing_target_get_size_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_landing_target_decode(const mavlink_message_t* msg, mavlink_landing_target_t* landing_target)
{
# 384 "./lib/main/MAVLink/common/./mavlink_msg_landing_target.h"
        uint8_t len = msg->len < 30? msg->len : 30;
        memset(landing_target, 0, 30);
    memcpy(landing_target, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1119 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h" 1
       


#define MAVLINK_MSG_ID_ESTIMATOR_STATUS 230

typedef struct __mavlink_estimator_status_t { uint64_t time_usec; float vel_ratio; float pos_horiz_ratio; float pos_vert_ratio; float mag_ratio; float hagl_ratio; float tas_ratio; float pos_horiz_accuracy; float pos_vert_accuracy; uint16_t flags; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
   mavlink_estimator_status_t;

#define MAVLINK_MSG_ID_ESTIMATOR_STATUS_LEN 42
#define MAVLINK_MSG_ID_ESTIMATOR_STATUS_MIN_LEN 42
#define MAVLINK_MSG_ID_230_LEN 42
#define MAVLINK_MSG_ID_230_MIN_LEN 42

#define MAVLINK_MSG_ID_ESTIMATOR_STATUS_CRC 163
#define MAVLINK_MSG_ID_230_CRC 163
# 48 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
#define MAVLINK_MESSAGE_INFO_ESTIMATOR_STATUS { "ESTIMATOR_STATUS", 10, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_estimator_status_t, time_usec) }, { "vel_ratio", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_estimator_status_t, vel_ratio) }, { "pos_horiz_ratio", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_estimator_status_t, pos_horiz_ratio) }, { "pos_vert_ratio", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_estimator_status_t, pos_vert_ratio) }, { "mag_ratio", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_estimator_status_t, mag_ratio) }, { "hagl_ratio", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_estimator_status_t, hagl_ratio) }, { "tas_ratio", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_estimator_status_t, tas_ratio) }, { "pos_horiz_accuracy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_estimator_status_t, pos_horiz_accuracy) }, { "pos_vert_accuracy", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_estimator_status_t, pos_vert_accuracy) }, { "flags", NULL, MAVLINK_TYPE_UINT16_T, 0, 40, offsetof(mavlink_estimator_status_t, flags) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
static inline uint16_t mavlink_msg_estimator_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint16_t flags, float vel_ratio, float pos_horiz_ratio, float pos_vert_ratio, float mag_ratio, float hagl_ratio, float tas_ratio, float pos_horiz_accuracy, float pos_vert_accuracy)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
    mavlink_estimator_status_t packet;
    packet.time_usec = time_usec;
    packet.vel_ratio = vel_ratio;
    packet.pos_horiz_ratio = pos_horiz_ratio;
    packet.pos_vert_ratio = pos_vert_ratio;
    packet.mag_ratio = mag_ratio;
    packet.hagl_ratio = hagl_ratio;
    packet.tas_ratio = tas_ratio;
    packet.pos_horiz_accuracy = pos_horiz_accuracy;
    packet.pos_vert_accuracy = pos_vert_accuracy;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 230;
    return mavlink_finalize_message(msg, system_id, component_id, 42, 42, 163);
}
# 138 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
static inline uint16_t mavlink_msg_estimator_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint16_t flags,float vel_ratio,float pos_horiz_ratio,float pos_vert_ratio,float mag_ratio,float hagl_ratio,float tas_ratio,float pos_horiz_accuracy,float pos_vert_accuracy)
{
# 157 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
    mavlink_estimator_status_t packet;
    packet.time_usec = time_usec;
    packet.vel_ratio = vel_ratio;
    packet.pos_horiz_ratio = pos_horiz_ratio;
    packet.pos_vert_ratio = pos_vert_ratio;
    packet.mag_ratio = mag_ratio;
    packet.hagl_ratio = hagl_ratio;
    packet.tas_ratio = tas_ratio;
    packet.pos_horiz_accuracy = pos_horiz_accuracy;
    packet.pos_vert_accuracy = pos_vert_accuracy;
    packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


    msg->msgid = 230;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 42, 163);
}
# 184 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
static inline uint16_t mavlink_msg_estimator_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_estimator_status_t* estimator_status)
{
    return mavlink_msg_estimator_status_pack(system_id, component_id, msg, estimator_status->time_usec, estimator_status->flags, estimator_status->vel_ratio, estimator_status->pos_horiz_ratio, estimator_status->pos_vert_ratio, estimator_status->mag_ratio, estimator_status->hagl_ratio, estimator_status->tas_ratio, estimator_status->pos_horiz_accuracy, estimator_status->pos_vert_accuracy);
}
# 198 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
static inline uint16_t mavlink_msg_estimator_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_estimator_status_t* estimator_status)
{
    return mavlink_msg_estimator_status_pack_chan(system_id, component_id, chan, msg, estimator_status->time_usec, estimator_status->flags, estimator_status->vel_ratio, estimator_status->pos_horiz_ratio, estimator_status->pos_vert_ratio, estimator_status->mag_ratio, estimator_status->hagl_ratio, estimator_status->tas_ratio, estimator_status->pos_horiz_accuracy, estimator_status->pos_vert_accuracy);
}
# 319 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
static inline uint64_t mavlink_msg_estimator_status_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_estimator_status_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 40);
}






static inline float mavlink_msg_estimator_status_get_vel_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_estimator_status_get_pos_horiz_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_estimator_status_get_pos_vert_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_estimator_status_get_mag_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_estimator_status_get_hagl_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_estimator_status_get_tas_ratio(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_estimator_status_get_pos_horiz_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_estimator_status_get_pos_vert_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_estimator_status_decode(const mavlink_message_t* msg, mavlink_estimator_status_t* estimator_status)
{
# 434 "./lib/main/MAVLink/common/./mavlink_msg_estimator_status.h"
        uint8_t len = msg->len < 42? msg->len : 42;
        memset(estimator_status, 0, 42);
    memcpy(estimator_status, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1120 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h" 1
       


#define MAVLINK_MSG_ID_WIND_COV 231

typedef struct __mavlink_wind_cov_t { uint64_t time_usec; float wind_x; float wind_y; float wind_z; float var_horiz; float var_vert; float wind_alt; float horiz_accuracy; float vert_accuracy; } __attribute__((packed))
# 17 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
   mavlink_wind_cov_t;

#define MAVLINK_MSG_ID_WIND_COV_LEN 40
#define MAVLINK_MSG_ID_WIND_COV_MIN_LEN 40
#define MAVLINK_MSG_ID_231_LEN 40
#define MAVLINK_MSG_ID_231_MIN_LEN 40

#define MAVLINK_MSG_ID_WIND_COV_CRC 105
#define MAVLINK_MSG_ID_231_CRC 105
# 46 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
#define MAVLINK_MESSAGE_INFO_WIND_COV { "WIND_COV", 9, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_wind_cov_t, time_usec) }, { "wind_x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_wind_cov_t, wind_x) }, { "wind_y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_wind_cov_t, wind_y) }, { "wind_z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_wind_cov_t, wind_z) }, { "var_horiz", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_wind_cov_t, var_horiz) }, { "var_vert", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_wind_cov_t, var_vert) }, { "wind_alt", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_wind_cov_t, wind_alt) }, { "horiz_accuracy", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_wind_cov_t, horiz_accuracy) }, { "vert_accuracy", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_wind_cov_t, vert_accuracy) }, } }
# 79 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
static inline uint16_t mavlink_msg_wind_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float wind_x, float wind_y, float wind_z, float var_horiz, float var_vert, float wind_alt, float horiz_accuracy, float vert_accuracy)
{
# 96 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
    mavlink_wind_cov_t packet;
    packet.time_usec = time_usec;
    packet.wind_x = wind_x;
    packet.wind_y = wind_y;
    packet.wind_z = wind_z;
    packet.var_horiz = var_horiz;
    packet.var_vert = var_vert;
    packet.wind_alt = wind_alt;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 231;
    return mavlink_finalize_message(msg, system_id, component_id, 40, 40, 105);
}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
static inline uint16_t mavlink_msg_wind_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float wind_x,float wind_y,float wind_z,float var_horiz,float var_vert,float wind_alt,float horiz_accuracy,float vert_accuracy)
{
# 149 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
    mavlink_wind_cov_t packet;
    packet.time_usec = time_usec;
    packet.wind_x = wind_x;
    packet.wind_y = wind_y;
    packet.wind_z = wind_z;
    packet.var_horiz = var_horiz;
    packet.var_vert = var_vert;
    packet.wind_alt = wind_alt;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 231;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 40, 40, 105);
}
# 175 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
static inline uint16_t mavlink_msg_wind_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_wind_cov_t* wind_cov)
{
    return mavlink_msg_wind_cov_pack(system_id, component_id, msg, wind_cov->time_usec, wind_cov->wind_x, wind_cov->wind_y, wind_cov->wind_z, wind_cov->var_horiz, wind_cov->var_vert, wind_cov->wind_alt, wind_cov->horiz_accuracy, wind_cov->vert_accuracy);
}
# 189 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
static inline uint16_t mavlink_msg_wind_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_wind_cov_t* wind_cov)
{
    return mavlink_msg_wind_cov_pack_chan(system_id, component_id, chan, msg, wind_cov->time_usec, wind_cov->wind_x, wind_cov->wind_y, wind_cov->wind_z, wind_cov->var_horiz, wind_cov->var_vert, wind_cov->wind_alt, wind_cov->horiz_accuracy, wind_cov->vert_accuracy);
}
# 305 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
static inline uint64_t mavlink_msg_wind_cov_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_wind_cov_get_wind_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_wind_cov_get_wind_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_wind_cov_get_wind_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_wind_cov_get_var_horiz(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_wind_cov_get_var_vert(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_wind_cov_get_wind_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_wind_cov_get_horiz_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_wind_cov_get_vert_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_wind_cov_decode(const mavlink_message_t* msg, mavlink_wind_cov_t* wind_cov)
{
# 409 "./lib/main/MAVLink/common/./mavlink_msg_wind_cov.h"
        uint8_t len = msg->len < 40? msg->len : 40;
        memset(wind_cov, 0, 40);
    memcpy(wind_cov, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1121 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h" 1
       


#define MAVLINK_MSG_ID_GPS_INPUT 232

typedef struct __mavlink_gps_input_t { uint64_t time_usec; uint32_t time_week_ms; int32_t lat; int32_t lon; float alt; float hdop; float vdop; float vn; float ve; float vd; float speed_accuracy; float horiz_accuracy; float vert_accuracy; uint16_t ignore_flags; uint16_t time_week; uint8_t gps_id; uint8_t fix_type; uint8_t satellites_visible; } __attribute__((packed))
# 26 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
   mavlink_gps_input_t;

#define MAVLINK_MSG_ID_GPS_INPUT_LEN 63
#define MAVLINK_MSG_ID_GPS_INPUT_MIN_LEN 63
#define MAVLINK_MSG_ID_232_LEN 63
#define MAVLINK_MSG_ID_232_MIN_LEN 63

#define MAVLINK_MSG_ID_GPS_INPUT_CRC 151
#define MAVLINK_MSG_ID_232_CRC 151
# 64 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
#define MAVLINK_MESSAGE_INFO_GPS_INPUT { "GPS_INPUT", 18, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_gps_input_t, time_usec) }, { "time_week_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 8, offsetof(mavlink_gps_input_t, time_week_ms) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_gps_input_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 16, offsetof(mavlink_gps_input_t, lon) }, { "alt", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_gps_input_t, alt) }, { "hdop", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_gps_input_t, hdop) }, { "vdop", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_gps_input_t, vdop) }, { "vn", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_gps_input_t, vn) }, { "ve", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_gps_input_t, ve) }, { "vd", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_gps_input_t, vd) }, { "speed_accuracy", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_gps_input_t, speed_accuracy) }, { "horiz_accuracy", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_gps_input_t, horiz_accuracy) }, { "vert_accuracy", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_gps_input_t, vert_accuracy) }, { "ignore_flags", NULL, MAVLINK_TYPE_UINT16_T, 0, 56, offsetof(mavlink_gps_input_t, ignore_flags) }, { "time_week", NULL, MAVLINK_TYPE_UINT16_T, 0, 58, offsetof(mavlink_gps_input_t, time_week) }, { "gps_id", NULL, MAVLINK_TYPE_UINT8_T, 0, 60, offsetof(mavlink_gps_input_t, gps_id) }, { "fix_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 61, offsetof(mavlink_gps_input_t, fix_type) }, { "satellites_visible", NULL, MAVLINK_TYPE_UINT8_T, 0, 62, offsetof(mavlink_gps_input_t, satellites_visible) }, } }
# 115 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
static inline uint16_t mavlink_msg_gps_input_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, uint8_t gps_id, uint16_t ignore_flags, uint32_t time_week_ms, uint16_t time_week, uint8_t fix_type, int32_t lat, int32_t lon, float alt, float hdop, float vdop, float vn, float ve, float vd, float speed_accuracy, float horiz_accuracy, float vert_accuracy, uint8_t satellites_visible)
{
# 141 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
    mavlink_gps_input_t packet;
    packet.time_usec = time_usec;
    packet.time_week_ms = time_week_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.hdop = hdop;
    packet.vdop = vdop;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.speed_accuracy = speed_accuracy;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;
    packet.ignore_flags = ignore_flags;
    packet.time_week = time_week;
    packet.gps_id = gps_id;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 63);


    msg->msgid = 232;
    return mavlink_finalize_message(msg, system_id, component_id, 63, 63, 151);
}
# 194 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
static inline uint16_t mavlink_msg_gps_input_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,uint8_t gps_id,uint16_t ignore_flags,uint32_t time_week_ms,uint16_t time_week,uint8_t fix_type,int32_t lat,int32_t lon,float alt,float hdop,float vdop,float vn,float ve,float vd,float speed_accuracy,float horiz_accuracy,float vert_accuracy,uint8_t satellites_visible)
{
# 221 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
    mavlink_gps_input_t packet;
    packet.time_usec = time_usec;
    packet.time_week_ms = time_week_ms;
    packet.lat = lat;
    packet.lon = lon;
    packet.alt = alt;
    packet.hdop = hdop;
    packet.vdop = vdop;
    packet.vn = vn;
    packet.ve = ve;
    packet.vd = vd;
    packet.speed_accuracy = speed_accuracy;
    packet.horiz_accuracy = horiz_accuracy;
    packet.vert_accuracy = vert_accuracy;
    packet.ignore_flags = ignore_flags;
    packet.time_week = time_week;
    packet.gps_id = gps_id;
    packet.fix_type = fix_type;
    packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 63);


    msg->msgid = 232;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 63, 63, 151);
}
# 256 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
static inline uint16_t mavlink_msg_gps_input_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_input_t* gps_input)
{
    return mavlink_msg_gps_input_pack(system_id, component_id, msg, gps_input->time_usec, gps_input->gps_id, gps_input->ignore_flags, gps_input->time_week_ms, gps_input->time_week, gps_input->fix_type, gps_input->lat, gps_input->lon, gps_input->alt, gps_input->hdop, gps_input->vdop, gps_input->vn, gps_input->ve, gps_input->vd, gps_input->speed_accuracy, gps_input->horiz_accuracy, gps_input->vert_accuracy, gps_input->satellites_visible);
}
# 270 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
static inline uint16_t mavlink_msg_gps_input_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_input_t* gps_input)
{
    return mavlink_msg_gps_input_pack_chan(system_id, component_id, chan, msg, gps_input->time_usec, gps_input->gps_id, gps_input->ignore_flags, gps_input->time_week_ms, gps_input->time_week, gps_input->fix_type, gps_input->lat, gps_input->lon, gps_input->alt, gps_input->hdop, gps_input->vdop, gps_input->vn, gps_input->ve, gps_input->vd, gps_input->speed_accuracy, gps_input->horiz_accuracy, gps_input->vert_accuracy, gps_input->satellites_visible);
}
# 431 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
static inline uint64_t mavlink_msg_gps_input_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_input_get_gps_id(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[60];
}






static inline uint16_t mavlink_msg_gps_input_get_ignore_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 56);
}






static inline uint32_t mavlink_msg_gps_input_get_time_week_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint16_t mavlink_msg_gps_input_get_time_week(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 58);
}






static inline uint8_t mavlink_msg_gps_input_get_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[61];
}






static inline int32_t mavlink_msg_gps_input_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_input_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 16);
}






static inline float mavlink_msg_gps_input_get_alt(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_gps_input_get_hdop(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_gps_input_get_vdop(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_gps_input_get_vn(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_gps_input_get_ve(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_gps_input_get_vd(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_gps_input_get_speed_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_gps_input_get_horiz_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_gps_input_get_vert_accuracy(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 52);
}






static inline uint8_t mavlink_msg_gps_input_get_satellites_visible(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[62];
}







static inline void mavlink_msg_gps_input_decode(const mavlink_message_t* msg, mavlink_gps_input_t* gps_input)
{
# 634 "./lib/main/MAVLink/common/./mavlink_msg_gps_input.h"
        uint8_t len = msg->len < 63? msg->len : 63;
        memset(gps_input, 0, 63);
    memcpy(gps_input, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1122 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtcm_data.h" 1
       


#define MAVLINK_MSG_ID_GPS_RTCM_DATA 233

typedef struct __mavlink_gps_rtcm_data_t { uint8_t flags; uint8_t len; uint8_t data[180]; } __attribute__((packed))




   mavlink_gps_rtcm_data_t;

#define MAVLINK_MSG_ID_GPS_RTCM_DATA_LEN 182
#define MAVLINK_MSG_ID_GPS_RTCM_DATA_MIN_LEN 182
#define MAVLINK_MSG_ID_233_LEN 182
#define MAVLINK_MSG_ID_233_MIN_LEN 182

#define MAVLINK_MSG_ID_GPS_RTCM_DATA_CRC 35
#define MAVLINK_MSG_ID_233_CRC 35

#define MAVLINK_MSG_GPS_RTCM_DATA_FIELD_DATA_LEN 180
# 34 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtcm_data.h"
#define MAVLINK_MESSAGE_INFO_GPS_RTCM_DATA { "GPS_RTCM_DATA", 3, { { "flags", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_gps_rtcm_data_t, flags) }, { "len", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_gps_rtcm_data_t, len) }, { "data", NULL, MAVLINK_TYPE_UINT8_T, 180, 2, offsetof(mavlink_gps_rtcm_data_t, data) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtcm_data.h"
static inline uint16_t mavlink_msg_gps_rtcm_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t flags, uint8_t len, const uint8_t *data)
{







    mavlink_gps_rtcm_data_t packet;
    packet.flags = flags;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*180);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 182);


    msg->msgid = 233;
    return mavlink_finalize_message(msg, system_id, component_id, 182, 182, 35);
}
# 87 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtcm_data.h"
static inline uint16_t mavlink_msg_gps_rtcm_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t flags,uint8_t len,const uint8_t *data)
{







    mavlink_gps_rtcm_data_t packet;
    packet.flags = flags;
    packet.len = len;
    mav_array_memcpy(packet.data, data, sizeof(uint8_t)*180);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 182);


    msg->msgid = 233;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 182, 182, 35);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtcm_data.h"
static inline uint16_t mavlink_msg_gps_rtcm_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_rtcm_data_t* gps_rtcm_data)
{
    return mavlink_msg_gps_rtcm_data_pack(system_id, component_id, msg, gps_rtcm_data->flags, gps_rtcm_data->len, gps_rtcm_data->data);
}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtcm_data.h"
static inline uint16_t mavlink_msg_gps_rtcm_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_rtcm_data_t* gps_rtcm_data)
{
    return mavlink_msg_gps_rtcm_data_pack_chan(system_id, component_id, chan, msg, gps_rtcm_data->flags, gps_rtcm_data->len, gps_rtcm_data->data);
}
# 213 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtcm_data.h"
static inline uint8_t mavlink_msg_gps_rtcm_data_get_flags(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gps_rtcm_data_get_len(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint16_t mavlink_msg_gps_rtcm_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
    return _MAV_RETURN_uint8_t_array(msg, data, 180, 2);
}







static inline void mavlink_msg_gps_rtcm_data_decode(const mavlink_message_t* msg, mavlink_gps_rtcm_data_t* gps_rtcm_data)
{





        uint8_t len = msg->len < 182? msg->len : 182;
        memset(gps_rtcm_data, 0, 182);
    memcpy(gps_rtcm_data, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1123 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h" 1
       


#define MAVLINK_MSG_ID_HIGH_LATENCY 234

typedef struct __mavlink_high_latency_t { uint32_t custom_mode; int32_t latitude; int32_t longitude; int16_t roll; int16_t pitch; uint16_t heading; int16_t heading_sp; int16_t altitude_amsl; int16_t altitude_sp; uint16_t wp_distance; uint8_t base_mode; uint8_t landed_state; int8_t throttle; uint8_t airspeed; uint8_t airspeed_sp; uint8_t groundspeed; int8_t climb_rate; uint8_t gps_nsat; uint8_t gps_fix_type; uint8_t battery_remaining; int8_t temperature; int8_t temperature_air; uint8_t failsafe; uint8_t wp_num; } __attribute__((packed))
# 32 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
   mavlink_high_latency_t;

#define MAVLINK_MSG_ID_HIGH_LATENCY_LEN 40
#define MAVLINK_MSG_ID_HIGH_LATENCY_MIN_LEN 40
#define MAVLINK_MSG_ID_234_LEN 40
#define MAVLINK_MSG_ID_234_MIN_LEN 40

#define MAVLINK_MSG_ID_HIGH_LATENCY_CRC 150
#define MAVLINK_MSG_ID_234_CRC 150
# 76 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
#define MAVLINK_MESSAGE_INFO_HIGH_LATENCY { "HIGH_LATENCY", 24, { { "custom_mode", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_high_latency_t, custom_mode) }, { "latitude", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_high_latency_t, latitude) }, { "longitude", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_high_latency_t, longitude) }, { "roll", NULL, MAVLINK_TYPE_INT16_T, 0, 12, offsetof(mavlink_high_latency_t, roll) }, { "pitch", NULL, MAVLINK_TYPE_INT16_T, 0, 14, offsetof(mavlink_high_latency_t, pitch) }, { "heading", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_high_latency_t, heading) }, { "heading_sp", NULL, MAVLINK_TYPE_INT16_T, 0, 18, offsetof(mavlink_high_latency_t, heading_sp) }, { "altitude_amsl", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_high_latency_t, altitude_amsl) }, { "altitude_sp", NULL, MAVLINK_TYPE_INT16_T, 0, 22, offsetof(mavlink_high_latency_t, altitude_sp) }, { "wp_distance", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_high_latency_t, wp_distance) }, { "base_mode", NULL, MAVLINK_TYPE_UINT8_T, 0, 26, offsetof(mavlink_high_latency_t, base_mode) }, { "landed_state", NULL, MAVLINK_TYPE_UINT8_T, 0, 27, offsetof(mavlink_high_latency_t, landed_state) }, { "throttle", NULL, MAVLINK_TYPE_INT8_T, 0, 28, offsetof(mavlink_high_latency_t, throttle) }, { "airspeed", NULL, MAVLINK_TYPE_UINT8_T, 0, 29, offsetof(mavlink_high_latency_t, airspeed) }, { "airspeed_sp", NULL, MAVLINK_TYPE_UINT8_T, 0, 30, offsetof(mavlink_high_latency_t, airspeed_sp) }, { "groundspeed", NULL, MAVLINK_TYPE_UINT8_T, 0, 31, offsetof(mavlink_high_latency_t, groundspeed) }, { "climb_rate", NULL, MAVLINK_TYPE_INT8_T, 0, 32, offsetof(mavlink_high_latency_t, climb_rate) }, { "gps_nsat", NULL, MAVLINK_TYPE_UINT8_T, 0, 33, offsetof(mavlink_high_latency_t, gps_nsat) }, { "gps_fix_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 34, offsetof(mavlink_high_latency_t, gps_fix_type) }, { "battery_remaining", NULL, MAVLINK_TYPE_UINT8_T, 0, 35, offsetof(mavlink_high_latency_t, battery_remaining) }, { "temperature", NULL, MAVLINK_TYPE_INT8_T, 0, 36, offsetof(mavlink_high_latency_t, temperature) }, { "temperature_air", NULL, MAVLINK_TYPE_INT8_T, 0, 37, offsetof(mavlink_high_latency_t, temperature_air) }, { "failsafe", NULL, MAVLINK_TYPE_UINT8_T, 0, 38, offsetof(mavlink_high_latency_t, failsafe) }, { "wp_num", NULL, MAVLINK_TYPE_UINT8_T, 0, 39, offsetof(mavlink_high_latency_t, wp_num) }, } }
# 139 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
static inline uint16_t mavlink_msg_high_latency_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t base_mode, uint32_t custom_mode, uint8_t landed_state, int16_t roll, int16_t pitch, uint16_t heading, int8_t throttle, int16_t heading_sp, int32_t latitude, int32_t longitude, int16_t altitude_amsl, int16_t altitude_sp, uint8_t airspeed, uint8_t airspeed_sp, uint8_t groundspeed, int8_t climb_rate, uint8_t gps_nsat, uint8_t gps_fix_type, uint8_t battery_remaining, int8_t temperature, int8_t temperature_air, uint8_t failsafe, uint8_t wp_num, uint16_t wp_distance)
{
# 171 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
    mavlink_high_latency_t packet;
    packet.custom_mode = custom_mode;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.heading = heading;
    packet.heading_sp = heading_sp;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_sp = altitude_sp;
    packet.wp_distance = wp_distance;
    packet.base_mode = base_mode;
    packet.landed_state = landed_state;
    packet.throttle = throttle;
    packet.airspeed = airspeed;
    packet.airspeed_sp = airspeed_sp;
    packet.groundspeed = groundspeed;
    packet.climb_rate = climb_rate;
    packet.gps_nsat = gps_nsat;
    packet.gps_fix_type = gps_fix_type;
    packet.battery_remaining = battery_remaining;
    packet.temperature = temperature;
    packet.temperature_air = temperature_air;
    packet.failsafe = failsafe;
    packet.wp_num = wp_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 234;
    return mavlink_finalize_message(msg, system_id, component_id, 40, 40, 150);
}
# 236 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
static inline uint16_t mavlink_msg_high_latency_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t base_mode,uint32_t custom_mode,uint8_t landed_state,int16_t roll,int16_t pitch,uint16_t heading,int8_t throttle,int16_t heading_sp,int32_t latitude,int32_t longitude,int16_t altitude_amsl,int16_t altitude_sp,uint8_t airspeed,uint8_t airspeed_sp,uint8_t groundspeed,int8_t climb_rate,uint8_t gps_nsat,uint8_t gps_fix_type,uint8_t battery_remaining,int8_t temperature,int8_t temperature_air,uint8_t failsafe,uint8_t wp_num,uint16_t wp_distance)
{
# 269 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
    mavlink_high_latency_t packet;
    packet.custom_mode = custom_mode;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.roll = roll;
    packet.pitch = pitch;
    packet.heading = heading;
    packet.heading_sp = heading_sp;
    packet.altitude_amsl = altitude_amsl;
    packet.altitude_sp = altitude_sp;
    packet.wp_distance = wp_distance;
    packet.base_mode = base_mode;
    packet.landed_state = landed_state;
    packet.throttle = throttle;
    packet.airspeed = airspeed;
    packet.airspeed_sp = airspeed_sp;
    packet.groundspeed = groundspeed;
    packet.climb_rate = climb_rate;
    packet.gps_nsat = gps_nsat;
    packet.gps_fix_type = gps_fix_type;
    packet.battery_remaining = battery_remaining;
    packet.temperature = temperature;
    packet.temperature_air = temperature_air;
    packet.failsafe = failsafe;
    packet.wp_num = wp_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 40);


    msg->msgid = 234;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 40, 40, 150);
}
# 310 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
static inline uint16_t mavlink_msg_high_latency_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_high_latency_t* high_latency)
{
    return mavlink_msg_high_latency_pack(system_id, component_id, msg, high_latency->base_mode, high_latency->custom_mode, high_latency->landed_state, high_latency->roll, high_latency->pitch, high_latency->heading, high_latency->throttle, high_latency->heading_sp, high_latency->latitude, high_latency->longitude, high_latency->altitude_amsl, high_latency->altitude_sp, high_latency->airspeed, high_latency->airspeed_sp, high_latency->groundspeed, high_latency->climb_rate, high_latency->gps_nsat, high_latency->gps_fix_type, high_latency->battery_remaining, high_latency->temperature, high_latency->temperature_air, high_latency->failsafe, high_latency->wp_num, high_latency->wp_distance);
}
# 324 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
static inline uint16_t mavlink_msg_high_latency_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_high_latency_t* high_latency)
{
    return mavlink_msg_high_latency_pack_chan(system_id, component_id, chan, msg, high_latency->base_mode, high_latency->custom_mode, high_latency->landed_state, high_latency->roll, high_latency->pitch, high_latency->heading, high_latency->throttle, high_latency->heading_sp, high_latency->latitude, high_latency->longitude, high_latency->altitude_amsl, high_latency->altitude_sp, high_latency->airspeed, high_latency->airspeed_sp, high_latency->groundspeed, high_latency->climb_rate, high_latency->gps_nsat, high_latency->gps_fix_type, high_latency->battery_remaining, high_latency->temperature, high_latency->temperature_air, high_latency->failsafe, high_latency->wp_num, high_latency->wp_distance);
}
# 515 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
static inline uint8_t mavlink_msg_high_latency_get_base_mode(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline uint32_t mavlink_msg_high_latency_get_custom_mode(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_high_latency_get_landed_state(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[27];
}






static inline int16_t mavlink_msg_high_latency_get_roll(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_high_latency_get_pitch(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 14);
}






static inline uint16_t mavlink_msg_high_latency_get_heading(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline int8_t mavlink_msg_high_latency_get_throttle(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline int16_t mavlink_msg_high_latency_get_heading_sp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 18);
}






static inline int32_t mavlink_msg_high_latency_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_high_latency_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline int16_t mavlink_msg_high_latency_get_altitude_amsl(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_high_latency_get_altitude_sp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 22);
}






static inline uint8_t mavlink_msg_high_latency_get_airspeed(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}






static inline uint8_t mavlink_msg_high_latency_get_airspeed_sp(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_high_latency_get_groundspeed(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline int8_t mavlink_msg_high_latency_get_climb_rate(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_high_latency_get_gps_nsat(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_high_latency_get_gps_fix_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint8_t mavlink_msg_high_latency_get_battery_remaining(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline int8_t mavlink_msg_high_latency_get_temperature(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline int8_t mavlink_msg_high_latency_get_temperature_air(const mavlink_message_t* msg)
{
    return (const int8_t)((const char *)(&((msg)->payload64[0])))[37];
}






static inline uint8_t mavlink_msg_high_latency_get_failsafe(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[38];
}






static inline uint8_t mavlink_msg_high_latency_get_wp_num(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[39];
}






static inline uint16_t mavlink_msg_high_latency_get_wp_distance(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}







static inline void mavlink_msg_high_latency_decode(const mavlink_message_t* msg, mavlink_high_latency_t* high_latency)
{
# 784 "./lib/main/MAVLink/common/./mavlink_msg_high_latency.h"
        uint8_t len = msg->len < 40? msg->len : 40;
        memset(high_latency, 0, 40);
    memcpy(high_latency, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1124 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h" 1
       


#define MAVLINK_MSG_ID_VIBRATION 241

typedef struct __mavlink_vibration_t { uint64_t time_usec; float vibration_x; float vibration_y; float vibration_z; uint32_t clipping_0; uint32_t clipping_1; uint32_t clipping_2; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
   mavlink_vibration_t;

#define MAVLINK_MSG_ID_VIBRATION_LEN 32
#define MAVLINK_MSG_ID_VIBRATION_MIN_LEN 32
#define MAVLINK_MSG_ID_241_LEN 32
#define MAVLINK_MSG_ID_241_MIN_LEN 32

#define MAVLINK_MSG_ID_VIBRATION_CRC 90
#define MAVLINK_MSG_ID_241_CRC 90
# 42 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
#define MAVLINK_MESSAGE_INFO_VIBRATION { "VIBRATION", 7, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_vibration_t, time_usec) }, { "vibration_x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_vibration_t, vibration_x) }, { "vibration_y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_vibration_t, vibration_y) }, { "vibration_z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_vibration_t, vibration_z) }, { "clipping_0", NULL, MAVLINK_TYPE_UINT32_T, 0, 20, offsetof(mavlink_vibration_t, clipping_0) }, { "clipping_1", NULL, MAVLINK_TYPE_UINT32_T, 0, 24, offsetof(mavlink_vibration_t, clipping_1) }, { "clipping_2", NULL, MAVLINK_TYPE_UINT32_T, 0, 28, offsetof(mavlink_vibration_t, clipping_2) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
static inline uint16_t mavlink_msg_vibration_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t time_usec, float vibration_x, float vibration_y, float vibration_z, uint32_t clipping_0, uint32_t clipping_1, uint32_t clipping_2)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
    mavlink_vibration_t packet;
    packet.time_usec = time_usec;
    packet.vibration_x = vibration_x;
    packet.vibration_y = vibration_y;
    packet.vibration_z = vibration_z;
    packet.clipping_0 = clipping_0;
    packet.clipping_1 = clipping_1;
    packet.clipping_2 = clipping_2;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 241;
    return mavlink_finalize_message(msg, system_id, component_id, 32, 32, 90);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
static inline uint16_t mavlink_msg_vibration_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t time_usec,float vibration_x,float vibration_y,float vibration_z,uint32_t clipping_0,uint32_t clipping_1,uint32_t clipping_2)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
    mavlink_vibration_t packet;
    packet.time_usec = time_usec;
    packet.vibration_x = vibration_x;
    packet.vibration_y = vibration_y;
    packet.vibration_z = vibration_z;
    packet.clipping_0 = clipping_0;
    packet.clipping_1 = clipping_1;
    packet.clipping_2 = clipping_2;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


    msg->msgid = 241;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 32, 90);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
static inline uint16_t mavlink_msg_vibration_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vibration_t* vibration)
{
    return mavlink_msg_vibration_pack(system_id, component_id, msg, vibration->time_usec, vibration->vibration_x, vibration->vibration_y, vibration->vibration_z, vibration->clipping_0, vibration->clipping_1, vibration->clipping_2);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
static inline uint16_t mavlink_msg_vibration_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vibration_t* vibration)
{
    return mavlink_msg_vibration_pack_chan(system_id, component_id, chan, msg, vibration->time_usec, vibration->vibration_x, vibration->vibration_y, vibration->vibration_z, vibration->clipping_0, vibration->clipping_1, vibration->clipping_2);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
static inline uint64_t mavlink_msg_vibration_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vibration_get_vibration_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vibration_get_vibration_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vibration_get_vibration_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline uint32_t mavlink_msg_vibration_get_clipping_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 20);
}






static inline uint32_t mavlink_msg_vibration_get_clipping_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 24);
}






static inline uint32_t mavlink_msg_vibration_get_clipping_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 28);
}







static inline void mavlink_msg_vibration_decode(const mavlink_message_t* msg, mavlink_vibration_t* vibration)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_vibration.h"
        uint8_t len = msg->len < 32? msg->len : 32;
        memset(vibration, 0, 32);
    memcpy(vibration, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1125 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h" 1
       


#define MAVLINK_MSG_ID_HOME_POSITION 242

typedef struct __mavlink_home_position_t { int32_t latitude; int32_t longitude; int32_t altitude; float x; float y; float z; float q[4]; float approach_x; float approach_y; float approach_z; } __attribute__((packed))
# 18 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
   mavlink_home_position_t;

#define MAVLINK_MSG_ID_HOME_POSITION_LEN 52
#define MAVLINK_MSG_ID_HOME_POSITION_MIN_LEN 52
#define MAVLINK_MSG_ID_242_LEN 52
#define MAVLINK_MSG_ID_242_MIN_LEN 52

#define MAVLINK_MSG_ID_HOME_POSITION_CRC 104
#define MAVLINK_MSG_ID_242_CRC 104

#define MAVLINK_MSG_HOME_POSITION_FIELD_Q_LEN 4
# 48 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
#define MAVLINK_MESSAGE_INFO_HOME_POSITION { "HOME_POSITION", 10, { { "latitude", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_home_position_t, latitude) }, { "longitude", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_home_position_t, longitude) }, { "altitude", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_home_position_t, altitude) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_home_position_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_home_position_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_home_position_t, z) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 24, offsetof(mavlink_home_position_t, q) }, { "approach_x", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_home_position_t, approach_x) }, { "approach_y", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_home_position_t, approach_y) }, { "approach_z", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_home_position_t, approach_z) }, } }
# 83 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
static inline uint16_t mavlink_msg_home_position_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               int32_t latitude, int32_t longitude, int32_t altitude, float x, float y, float z, const float *q, float approach_x, float approach_y, float approach_z)
{
# 100 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
    mavlink_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 52);


    msg->msgid = 242;
    return mavlink_finalize_message(msg, system_id, component_id, 52, 52, 104);
}
# 136 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
static inline uint16_t mavlink_msg_home_position_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   int32_t latitude,int32_t longitude,int32_t altitude,float x,float y,float z,const float *q,float approach_x,float approach_y,float approach_z)
{
# 154 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
    mavlink_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 52);


    msg->msgid = 242;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 52, 52, 104);
}
# 180 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
static inline uint16_t mavlink_msg_home_position_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_home_position_t* home_position)
{
    return mavlink_msg_home_position_pack(system_id, component_id, msg, home_position->latitude, home_position->longitude, home_position->altitude, home_position->x, home_position->y, home_position->z, home_position->q, home_position->approach_x, home_position->approach_y, home_position->approach_z);
}
# 194 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
static inline uint16_t mavlink_msg_home_position_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_home_position_t* home_position)
{
    return mavlink_msg_home_position_pack_chan(system_id, component_id, chan, msg, home_position->latitude, home_position->longitude, home_position->altitude, home_position->x, home_position->y, home_position->z, home_position->q, home_position->approach_x, home_position->approach_y, home_position->approach_z);
}
# 311 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
static inline int32_t mavlink_msg_home_position_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_home_position_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_home_position_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_home_position_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_home_position_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_home_position_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline uint16_t mavlink_msg_home_position_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 24);
}






static inline float mavlink_msg_home_position_get_approach_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_home_position_get_approach_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_home_position_get_approach_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}







static inline void mavlink_msg_home_position_decode(const mavlink_message_t* msg, mavlink_home_position_t* home_position)
{
# 426 "./lib/main/MAVLink/common/./mavlink_msg_home_position.h"
        uint8_t len = msg->len < 52? msg->len : 52;
        memset(home_position, 0, 52);
    memcpy(home_position, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1126 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h" 1
       


#define MAVLINK_MSG_ID_SET_HOME_POSITION 243

typedef struct __mavlink_set_home_position_t { int32_t latitude; int32_t longitude; int32_t altitude; float x; float y; float z; float q[4]; float approach_x; float approach_y; float approach_z; uint8_t target_system; } __attribute__((packed))
# 19 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
   mavlink_set_home_position_t;

#define MAVLINK_MSG_ID_SET_HOME_POSITION_LEN 53
#define MAVLINK_MSG_ID_SET_HOME_POSITION_MIN_LEN 53
#define MAVLINK_MSG_ID_243_LEN 53
#define MAVLINK_MSG_ID_243_MIN_LEN 53

#define MAVLINK_MSG_ID_SET_HOME_POSITION_CRC 85
#define MAVLINK_MSG_ID_243_CRC 85

#define MAVLINK_MSG_SET_HOME_POSITION_FIELD_Q_LEN 4
# 50 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
#define MAVLINK_MESSAGE_INFO_SET_HOME_POSITION { "SET_HOME_POSITION", 11, { { "latitude", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_set_home_position_t, latitude) }, { "longitude", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_set_home_position_t, longitude) }, { "altitude", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_set_home_position_t, altitude) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_set_home_position_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_set_home_position_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 20, offsetof(mavlink_set_home_position_t, z) }, { "q", NULL, MAVLINK_TYPE_FLOAT, 4, 24, offsetof(mavlink_set_home_position_t, q) }, { "approach_x", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_set_home_position_t, approach_x) }, { "approach_y", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_set_home_position_t, approach_y) }, { "approach_z", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_set_home_position_t, approach_z) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 52, offsetof(mavlink_set_home_position_t, target_system) }, } }
# 87 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
static inline uint16_t mavlink_msg_set_home_position_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude, float x, float y, float z, const float *q, float approach_x, float approach_y, float approach_z)
{
# 105 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
    mavlink_set_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    packet.target_system = target_system;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 243;
    return mavlink_finalize_message(msg, system_id, component_id, 53, 53, 85);
}
# 143 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
static inline uint16_t mavlink_msg_set_home_position_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_system,int32_t latitude,int32_t longitude,int32_t altitude,float x,float y,float z,const float *q,float approach_x,float approach_y,float approach_z)
{
# 162 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
    mavlink_set_home_position_t packet;
    packet.latitude = latitude;
    packet.longitude = longitude;
    packet.altitude = altitude;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    packet.approach_x = approach_x;
    packet.approach_y = approach_y;
    packet.approach_z = approach_z;
    packet.target_system = target_system;
    mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


    msg->msgid = 243;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 53, 85);
}
# 189 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
static inline uint16_t mavlink_msg_set_home_position_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_home_position_t* set_home_position)
{
    return mavlink_msg_set_home_position_pack(system_id, component_id, msg, set_home_position->target_system, set_home_position->latitude, set_home_position->longitude, set_home_position->altitude, set_home_position->x, set_home_position->y, set_home_position->z, set_home_position->q, set_home_position->approach_x, set_home_position->approach_y, set_home_position->approach_z);
}
# 203 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
static inline uint16_t mavlink_msg_set_home_position_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_home_position_t* set_home_position)
{
    return mavlink_msg_set_home_position_pack_chan(system_id, component_id, chan, msg, set_home_position->target_system, set_home_position->latitude, set_home_position->longitude, set_home_position->altitude, set_home_position->x, set_home_position->y, set_home_position->z, set_home_position->q, set_home_position->approach_x, set_home_position->approach_y, set_home_position->approach_z);
}
# 325 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
static inline uint8_t mavlink_msg_set_home_position_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline int32_t mavlink_msg_set_home_position_get_latitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_set_home_position_get_longitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_home_position_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_set_home_position_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_home_position_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_home_position_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 20);
}






static inline uint16_t mavlink_msg_set_home_position_get_q(const mavlink_message_t* msg, float *q)
{
    return _MAV_RETURN_float_array(msg, q, 4, 24);
}






static inline float mavlink_msg_set_home_position_get_approach_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_home_position_get_approach_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_set_home_position_get_approach_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 48);
}







static inline void mavlink_msg_set_home_position_decode(const mavlink_message_t* msg, mavlink_set_home_position_t* set_home_position)
{
# 451 "./lib/main/MAVLink/common/./mavlink_msg_set_home_position.h"
        uint8_t len = msg->len < 53? msg->len : 53;
        memset(set_home_position, 0, 53);
    memcpy(set_home_position, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1127 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_message_interval.h" 1
       


#define MAVLINK_MSG_ID_MESSAGE_INTERVAL 244

typedef struct __mavlink_message_interval_t { int32_t interval_us; uint16_t message_id; } __attribute__((packed))



   mavlink_message_interval_t;

#define MAVLINK_MSG_ID_MESSAGE_INTERVAL_LEN 6
#define MAVLINK_MSG_ID_MESSAGE_INTERVAL_MIN_LEN 6
#define MAVLINK_MSG_ID_244_LEN 6
#define MAVLINK_MSG_ID_244_MIN_LEN 6

#define MAVLINK_MSG_ID_MESSAGE_INTERVAL_CRC 95
#define MAVLINK_MSG_ID_244_CRC 95
# 32 "./lib/main/MAVLink/common/./mavlink_msg_message_interval.h"
#define MAVLINK_MESSAGE_INFO_MESSAGE_INTERVAL { "MESSAGE_INTERVAL", 2, { { "interval_us", NULL, MAVLINK_TYPE_INT32_T, 0, 0, offsetof(mavlink_message_interval_t, interval_us) }, { "message_id", NULL, MAVLINK_TYPE_UINT16_T, 0, 4, offsetof(mavlink_message_interval_t, message_id) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t message_id, int32_t interval_us)
{







    mavlink_message_interval_t packet;
    packet.interval_us = interval_us;
    packet.message_id = message_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 244;
    return mavlink_finalize_message(msg, system_id, component_id, 6, 6, 95);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t message_id,int32_t interval_us)
{







    mavlink_message_interval_t packet;
    packet.interval_us = interval_us;
    packet.message_id = message_id;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


    msg->msgid = 244;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 6, 95);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_message_interval_t* message_interval)
{
    return mavlink_msg_message_interval_pack(system_id, component_id, msg, message_interval->message_id, message_interval->interval_us);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_message_interval_t* message_interval)
{
    return mavlink_msg_message_interval_pack_chan(system_id, component_id, chan, msg, message_interval->message_id, message_interval->interval_us);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_message_interval.h"
static inline uint16_t mavlink_msg_message_interval_get_message_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 4);
}






static inline int32_t mavlink_msg_message_interval_get_interval_us(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 0);
}







static inline void mavlink_msg_message_interval_decode(const mavlink_message_t* msg, mavlink_message_interval_t* message_interval)
{




        uint8_t len = msg->len < 6? msg->len : 6;
        memset(message_interval, 0, 6);
    memcpy(message_interval, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1128 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_extended_sys_state.h" 1
       


#define MAVLINK_MSG_ID_EXTENDED_SYS_STATE 245

typedef struct __mavlink_extended_sys_state_t { uint8_t vtol_state; uint8_t landed_state; } __attribute__((packed))



   mavlink_extended_sys_state_t;

#define MAVLINK_MSG_ID_EXTENDED_SYS_STATE_LEN 2
#define MAVLINK_MSG_ID_EXTENDED_SYS_STATE_MIN_LEN 2
#define MAVLINK_MSG_ID_245_LEN 2
#define MAVLINK_MSG_ID_245_MIN_LEN 2

#define MAVLINK_MSG_ID_EXTENDED_SYS_STATE_CRC 130
#define MAVLINK_MSG_ID_245_CRC 130
# 32 "./lib/main/MAVLink/common/./mavlink_msg_extended_sys_state.h"
#define MAVLINK_MESSAGE_INFO_EXTENDED_SYS_STATE { "EXTENDED_SYS_STATE", 2, { { "vtol_state", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_extended_sys_state_t, vtol_state) }, { "landed_state", NULL, MAVLINK_TYPE_UINT8_T, 0, 1, offsetof(mavlink_extended_sys_state_t, landed_state) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_extended_sys_state.h"
static inline uint16_t mavlink_msg_extended_sys_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t vtol_state, uint8_t landed_state)
{







    mavlink_extended_sys_state_t packet;
    packet.vtol_state = vtol_state;
    packet.landed_state = landed_state;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 245;
    return mavlink_finalize_message(msg, system_id, component_id, 2, 2, 130);
}
# 82 "./lib/main/MAVLink/common/./mavlink_msg_extended_sys_state.h"
static inline uint16_t mavlink_msg_extended_sys_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t vtol_state,uint8_t landed_state)
{







    mavlink_extended_sys_state_t packet;
    packet.vtol_state = vtol_state;
    packet.landed_state = landed_state;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


    msg->msgid = 245;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 2, 130);
}
# 112 "./lib/main/MAVLink/common/./mavlink_msg_extended_sys_state.h"
static inline uint16_t mavlink_msg_extended_sys_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_extended_sys_state_t* extended_sys_state)
{
    return mavlink_msg_extended_sys_state_pack(system_id, component_id, msg, extended_sys_state->vtol_state, extended_sys_state->landed_state);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_extended_sys_state.h"
static inline uint16_t mavlink_msg_extended_sys_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_extended_sys_state_t* extended_sys_state)
{
    return mavlink_msg_extended_sys_state_pack_chan(system_id, component_id, chan, msg, extended_sys_state->vtol_state, extended_sys_state->landed_state);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_extended_sys_state.h"
static inline uint8_t mavlink_msg_extended_sys_state_get_vtol_state(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_extended_sys_state_get_landed_state(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_extended_sys_state_decode(const mavlink_message_t* msg, mavlink_extended_sys_state_t* extended_sys_state)
{




        uint8_t len = msg->len < 2? msg->len : 2;
        memset(extended_sys_state, 0, 2);
    memcpy(extended_sys_state, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1129 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h" 1
       


#define MAVLINK_MSG_ID_ADSB_VEHICLE 246

typedef struct __mavlink_adsb_vehicle_t { uint32_t ICAO_address; int32_t lat; int32_t lon; int32_t altitude; uint16_t heading; uint16_t hor_velocity; int16_t ver_velocity; uint16_t flags; uint16_t squawk; uint8_t altitude_type; char callsign[9]; uint8_t emitter_type; uint8_t tslc; } __attribute__((packed))
# 21 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
   mavlink_adsb_vehicle_t;

#define MAVLINK_MSG_ID_ADSB_VEHICLE_LEN 38
#define MAVLINK_MSG_ID_ADSB_VEHICLE_MIN_LEN 38
#define MAVLINK_MSG_ID_246_LEN 38
#define MAVLINK_MSG_ID_246_MIN_LEN 38

#define MAVLINK_MSG_ID_ADSB_VEHICLE_CRC 184
#define MAVLINK_MSG_ID_246_CRC 184

#define MAVLINK_MSG_ADSB_VEHICLE_FIELD_CALLSIGN_LEN 9
# 54 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
#define MAVLINK_MESSAGE_INFO_ADSB_VEHICLE { "ADSB_VEHICLE", 13, { { "ICAO_address", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_adsb_vehicle_t, ICAO_address) }, { "lat", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_adsb_vehicle_t, lat) }, { "lon", NULL, MAVLINK_TYPE_INT32_T, 0, 8, offsetof(mavlink_adsb_vehicle_t, lon) }, { "altitude", NULL, MAVLINK_TYPE_INT32_T, 0, 12, offsetof(mavlink_adsb_vehicle_t, altitude) }, { "heading", NULL, MAVLINK_TYPE_UINT16_T, 0, 16, offsetof(mavlink_adsb_vehicle_t, heading) }, { "hor_velocity", NULL, MAVLINK_TYPE_UINT16_T, 0, 18, offsetof(mavlink_adsb_vehicle_t, hor_velocity) }, { "ver_velocity", NULL, MAVLINK_TYPE_INT16_T, 0, 20, offsetof(mavlink_adsb_vehicle_t, ver_velocity) }, { "flags", NULL, MAVLINK_TYPE_UINT16_T, 0, 22, offsetof(mavlink_adsb_vehicle_t, flags) }, { "squawk", NULL, MAVLINK_TYPE_UINT16_T, 0, 24, offsetof(mavlink_adsb_vehicle_t, squawk) }, { "altitude_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 26, offsetof(mavlink_adsb_vehicle_t, altitude_type) }, { "callsign", NULL, MAVLINK_TYPE_CHAR, 9, 27, offsetof(mavlink_adsb_vehicle_t, callsign) }, { "emitter_type", NULL, MAVLINK_TYPE_UINT8_T, 0, 36, offsetof(mavlink_adsb_vehicle_t, emitter_type) }, { "tslc", NULL, MAVLINK_TYPE_UINT8_T, 0, 37, offsetof(mavlink_adsb_vehicle_t, tslc) }, } }
# 95 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
static inline uint16_t mavlink_msg_adsb_vehicle_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t ICAO_address, int32_t lat, int32_t lon, uint8_t altitude_type, int32_t altitude, uint16_t heading, uint16_t hor_velocity, int16_t ver_velocity, const char *callsign, uint8_t emitter_type, uint8_t tslc, uint16_t flags, uint16_t squawk)
{
# 115 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
    mavlink_adsb_vehicle_t packet;
    packet.ICAO_address = ICAO_address;
    packet.lat = lat;
    packet.lon = lon;
    packet.altitude = altitude;
    packet.heading = heading;
    packet.hor_velocity = hor_velocity;
    packet.ver_velocity = ver_velocity;
    packet.flags = flags;
    packet.squawk = squawk;
    packet.altitude_type = altitude_type;
    packet.emitter_type = emitter_type;
    packet.tslc = tslc;
    mav_array_memcpy(packet.callsign, callsign, sizeof(char)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 38);


    msg->msgid = 246;
    return mavlink_finalize_message(msg, system_id, component_id, 38, 38, 184);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
static inline uint16_t mavlink_msg_adsb_vehicle_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t ICAO_address,int32_t lat,int32_t lon,uint8_t altitude_type,int32_t altitude,uint16_t heading,uint16_t hor_velocity,int16_t ver_velocity,const char *callsign,uint8_t emitter_type,uint8_t tslc,uint16_t flags,uint16_t squawk)
{
# 178 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
    mavlink_adsb_vehicle_t packet;
    packet.ICAO_address = ICAO_address;
    packet.lat = lat;
    packet.lon = lon;
    packet.altitude = altitude;
    packet.heading = heading;
    packet.hor_velocity = hor_velocity;
    packet.ver_velocity = ver_velocity;
    packet.flags = flags;
    packet.squawk = squawk;
    packet.altitude_type = altitude_type;
    packet.emitter_type = emitter_type;
    packet.tslc = tslc;
    mav_array_memcpy(packet.callsign, callsign, sizeof(char)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 38);


    msg->msgid = 246;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 38, 38, 184);
}
# 207 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
static inline uint16_t mavlink_msg_adsb_vehicle_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_adsb_vehicle_t* adsb_vehicle)
{
    return mavlink_msg_adsb_vehicle_pack(system_id, component_id, msg, adsb_vehicle->ICAO_address, adsb_vehicle->lat, adsb_vehicle->lon, adsb_vehicle->altitude_type, adsb_vehicle->altitude, adsb_vehicle->heading, adsb_vehicle->hor_velocity, adsb_vehicle->ver_velocity, adsb_vehicle->callsign, adsb_vehicle->emitter_type, adsb_vehicle->tslc, adsb_vehicle->flags, adsb_vehicle->squawk);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
static inline uint16_t mavlink_msg_adsb_vehicle_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_adsb_vehicle_t* adsb_vehicle)
{
    return mavlink_msg_adsb_vehicle_pack_chan(system_id, component_id, chan, msg, adsb_vehicle->ICAO_address, adsb_vehicle->lat, adsb_vehicle->lon, adsb_vehicle->altitude_type, adsb_vehicle->altitude, adsb_vehicle->heading, adsb_vehicle->hor_velocity, adsb_vehicle->ver_velocity, adsb_vehicle->callsign, adsb_vehicle->emitter_type, adsb_vehicle->tslc, adsb_vehicle->flags, adsb_vehicle->squawk);
}
# 353 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
static inline uint32_t mavlink_msg_adsb_vehicle_get_ICAO_address(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int32_t mavlink_msg_adsb_vehicle_get_lat(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_adsb_vehicle_get_lon(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 8);
}






static inline uint8_t mavlink_msg_adsb_vehicle_get_altitude_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline int32_t mavlink_msg_adsb_vehicle_get_altitude(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 12);
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_heading(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_hor_velocity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 18);
}






static inline int16_t mavlink_msg_adsb_vehicle_get_ver_velocity(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int16_t(msg, 20);
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_callsign(const mavlink_message_t* msg, char *callsign)
{
    return _MAV_RETURN_char_array(msg, callsign, 9, 27);
}






static inline uint8_t mavlink_msg_adsb_vehicle_get_emitter_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint8_t mavlink_msg_adsb_vehicle_get_tslc(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[37];
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_flags(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_adsb_vehicle_get_squawk(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 24);
}







static inline void mavlink_msg_adsb_vehicle_decode(const mavlink_message_t* msg, mavlink_adsb_vehicle_t* adsb_vehicle)
{
# 501 "./lib/main/MAVLink/common/./mavlink_msg_adsb_vehicle.h"
        uint8_t len = msg->len < 38? msg->len : 38;
        memset(adsb_vehicle, 0, 38);
    memcpy(adsb_vehicle, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1130 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_collision.h" 1
       


#define MAVLINK_MSG_ID_COLLISION 247

typedef struct __mavlink_collision_t { uint32_t id; float time_to_minimum_delta; float altitude_minimum_delta; float horizontal_minimum_delta; uint8_t src; uint8_t action; uint8_t threat_level; } __attribute__((packed))
# 15 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
   mavlink_collision_t;

#define MAVLINK_MSG_ID_COLLISION_LEN 19
#define MAVLINK_MSG_ID_COLLISION_MIN_LEN 19
#define MAVLINK_MSG_ID_247_LEN 19
#define MAVLINK_MSG_ID_247_MIN_LEN 19

#define MAVLINK_MSG_ID_COLLISION_CRC 81
#define MAVLINK_MSG_ID_247_CRC 81
# 42 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
#define MAVLINK_MESSAGE_INFO_COLLISION { "COLLISION", 7, { { "id", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_collision_t, id) }, { "time_to_minimum_delta", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_collision_t, time_to_minimum_delta) }, { "altitude_minimum_delta", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_collision_t, altitude_minimum_delta) }, { "horizontal_minimum_delta", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_collision_t, horizontal_minimum_delta) }, { "src", NULL, MAVLINK_TYPE_UINT8_T, 0, 16, offsetof(mavlink_collision_t, src) }, { "action", NULL, MAVLINK_TYPE_UINT8_T, 0, 17, offsetof(mavlink_collision_t, action) }, { "threat_level", NULL, MAVLINK_TYPE_UINT8_T, 0, 18, offsetof(mavlink_collision_t, threat_level) }, } }
# 71 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
static inline uint16_t mavlink_msg_collision_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t src, uint32_t id, uint8_t action, uint8_t threat_level, float time_to_minimum_delta, float altitude_minimum_delta, float horizontal_minimum_delta)
{
# 86 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
    mavlink_collision_t packet;
    packet.id = id;
    packet.time_to_minimum_delta = time_to_minimum_delta;
    packet.altitude_minimum_delta = altitude_minimum_delta;
    packet.horizontal_minimum_delta = horizontal_minimum_delta;
    packet.src = src;
    packet.action = action;
    packet.threat_level = threat_level;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 19);


    msg->msgid = 247;
    return mavlink_finalize_message(msg, system_id, component_id, 19, 19, 81);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
static inline uint16_t mavlink_msg_collision_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t src,uint32_t id,uint8_t action,uint8_t threat_level,float time_to_minimum_delta,float altitude_minimum_delta,float horizontal_minimum_delta)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
    mavlink_collision_t packet;
    packet.id = id;
    packet.time_to_minimum_delta = time_to_minimum_delta;
    packet.altitude_minimum_delta = altitude_minimum_delta;
    packet.horizontal_minimum_delta = horizontal_minimum_delta;
    packet.src = src;
    packet.action = action;
    packet.threat_level = threat_level;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 19);


    msg->msgid = 247;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 19, 19, 81);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
static inline uint16_t mavlink_msg_collision_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_collision_t* collision)
{
    return mavlink_msg_collision_pack(system_id, component_id, msg, collision->src, collision->id, collision->action, collision->threat_level, collision->time_to_minimum_delta, collision->altitude_minimum_delta, collision->horizontal_minimum_delta);
}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
static inline uint16_t mavlink_msg_collision_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_collision_t* collision)
{
    return mavlink_msg_collision_pack_chan(system_id, component_id, chan, msg, collision->src, collision->id, collision->action, collision->threat_level, collision->time_to_minimum_delta, collision->altitude_minimum_delta, collision->horizontal_minimum_delta);
}
# 277 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
static inline uint8_t mavlink_msg_collision_get_src(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint32_t mavlink_msg_collision_get_id(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_collision_get_action(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[17];
}






static inline uint8_t mavlink_msg_collision_get_threat_level(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}






static inline float mavlink_msg_collision_get_time_to_minimum_delta(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_collision_get_altitude_minimum_delta(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_collision_get_horizontal_minimum_delta(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_collision_decode(const mavlink_message_t* msg, mavlink_collision_t* collision)
{
# 359 "./lib/main/MAVLink/common/./mavlink_msg_collision.h"
        uint8_t len = msg->len < 19? msg->len : 19;
        memset(collision, 0, 19);
    memcpy(collision, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1131 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h" 1
       


#define MAVLINK_MSG_ID_V2_EXTENSION 248

typedef struct __mavlink_v2_extension_t { uint16_t message_type; uint8_t target_network; uint8_t target_system; uint8_t target_component; uint8_t payload[249]; } __attribute__((packed))






   mavlink_v2_extension_t;

#define MAVLINK_MSG_ID_V2_EXTENSION_LEN 254
#define MAVLINK_MSG_ID_V2_EXTENSION_MIN_LEN 254
#define MAVLINK_MSG_ID_248_LEN 254
#define MAVLINK_MSG_ID_248_MIN_LEN 254

#define MAVLINK_MSG_ID_V2_EXTENSION_CRC 8
#define MAVLINK_MSG_ID_248_CRC 8

#define MAVLINK_MSG_V2_EXTENSION_FIELD_PAYLOAD_LEN 249
# 38 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
#define MAVLINK_MESSAGE_INFO_V2_EXTENSION { "V2_EXTENSION", 5, { { "message_type", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_v2_extension_t, message_type) }, { "target_network", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_v2_extension_t, target_network) }, { "target_system", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_v2_extension_t, target_system) }, { "target_component", NULL, MAVLINK_TYPE_UINT8_T, 0, 4, offsetof(mavlink_v2_extension_t, target_component) }, { "payload", NULL, MAVLINK_TYPE_UINT8_T, 249, 5, offsetof(mavlink_v2_extension_t, payload) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_network, uint8_t target_system, uint8_t target_component, uint16_t message_type, const uint8_t *payload)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
    mavlink_v2_extension_t packet;
    packet.message_type = message_type;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


    msg->msgid = 248;
    return mavlink_finalize_message(msg, system_id, component_id, 254, 254, 8);
}
# 101 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t target_network,uint8_t target_system,uint8_t target_component,uint16_t message_type,const uint8_t *payload)
{
# 114 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
    mavlink_v2_extension_t packet;
    packet.message_type = message_type;
    packet.target_network = target_network;
    packet.target_system = target_system;
    packet.target_component = target_component;
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


    msg->msgid = 248;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 254, 254, 8);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_v2_extension_t* v2_extension)
{
    return mavlink_msg_v2_extension_pack(system_id, component_id, msg, v2_extension->target_network, v2_extension->target_system, v2_extension->target_component, v2_extension->message_type, v2_extension->payload);
}
# 149 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_v2_extension_t* v2_extension)
{
    return mavlink_msg_v2_extension_pack_chan(system_id, component_id, chan, msg, v2_extension->target_network, v2_extension->target_system, v2_extension->target_component, v2_extension->message_type, v2_extension->payload);
}
# 241 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint8_t mavlink_msg_v2_extension_get_target_network(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_v2_extension_get_target_system(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_v2_extension_get_target_component(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_v2_extension_get_message_type(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_v2_extension_get_payload(const mavlink_message_t* msg, uint8_t *payload)
{
    return _MAV_RETURN_uint8_t_array(msg, payload, 249, 5);
}







static inline void mavlink_msg_v2_extension_decode(const mavlink_message_t* msg, mavlink_v2_extension_t* v2_extension)
{







        uint8_t len = msg->len < 254? msg->len : 254;
        memset(v2_extension, 0, 254);
    memcpy(v2_extension, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1132 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h" 1
       


#define MAVLINK_MSG_ID_MEMORY_VECT 249

typedef struct __mavlink_memory_vect_t { uint16_t address; uint8_t ver; uint8_t type; int8_t value[32]; } __attribute__((packed))





   mavlink_memory_vect_t;

#define MAVLINK_MSG_ID_MEMORY_VECT_LEN 36
#define MAVLINK_MSG_ID_MEMORY_VECT_MIN_LEN 36
#define MAVLINK_MSG_ID_249_LEN 36
#define MAVLINK_MSG_ID_249_MIN_LEN 36

#define MAVLINK_MSG_ID_MEMORY_VECT_CRC 204
#define MAVLINK_MSG_ID_249_CRC 204

#define MAVLINK_MSG_MEMORY_VECT_FIELD_VALUE_LEN 32
# 36 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
#define MAVLINK_MESSAGE_INFO_MEMORY_VECT { "MEMORY_VECT", 4, { { "address", NULL, MAVLINK_TYPE_UINT16_T, 0, 0, offsetof(mavlink_memory_vect_t, address) }, { "ver", NULL, MAVLINK_TYPE_UINT8_T, 0, 2, offsetof(mavlink_memory_vect_t, ver) }, { "type", NULL, MAVLINK_TYPE_UINT8_T, 0, 3, offsetof(mavlink_memory_vect_t, type) }, { "value", NULL, MAVLINK_TYPE_INT8_T, 32, 4, offsetof(mavlink_memory_vect_t, value) }, } }
# 59 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint16_t address, uint8_t ver, uint8_t type, const int8_t *value)
{
# 70 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
    mavlink_memory_vect_t packet;
    packet.address = address;
    packet.ver = ver;
    packet.type = type;
    mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 249;
    return mavlink_finalize_message(msg, system_id, component_id, 36, 36, 204);
}
# 94 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint16_t address,uint8_t ver,uint8_t type,const int8_t *value)
{
# 106 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
    mavlink_memory_vect_t packet;
    packet.address = address;
    packet.ver = ver;
    packet.type = type;
    mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


    msg->msgid = 249;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 36, 204);
}
# 126 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_memory_vect_t* memory_vect)
{
    return mavlink_msg_memory_vect_pack(system_id, component_id, msg, memory_vect->address, memory_vect->ver, memory_vect->type, memory_vect->value);
}
# 140 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_memory_vect_t* memory_vect)
{
    return mavlink_msg_memory_vect_pack_chan(system_id, component_id, chan, msg, memory_vect->address, memory_vect->ver, memory_vect->type, memory_vect->value);
}
# 227 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_get_address(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_memory_vect_get_ver(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_memory_vect_get_type(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_memory_vect_get_value(const mavlink_message_t* msg, int8_t *value)
{
    return _MAV_RETURN_int8_t_array(msg, value, 32, 4);
}







static inline void mavlink_msg_memory_vect_decode(const mavlink_message_t* msg, mavlink_memory_vect_t* memory_vect)
{






        uint8_t len = msg->len < 36? msg->len : 36;
        memset(memory_vect, 0, 36);
    memcpy(memory_vect, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1133 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h" 1
       


#define MAVLINK_MSG_ID_DEBUG_VECT 250

typedef struct __mavlink_debug_vect_t { uint64_t time_usec; float x; float y; float z; char name[10]; } __attribute__((packed))






   mavlink_debug_vect_t;

#define MAVLINK_MSG_ID_DEBUG_VECT_LEN 30
#define MAVLINK_MSG_ID_DEBUG_VECT_MIN_LEN 30
#define MAVLINK_MSG_ID_250_LEN 30
#define MAVLINK_MSG_ID_250_MIN_LEN 30

#define MAVLINK_MSG_ID_DEBUG_VECT_CRC 49
#define MAVLINK_MSG_ID_250_CRC 49

#define MAVLINK_MSG_DEBUG_VECT_FIELD_NAME_LEN 10
# 38 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
#define MAVLINK_MESSAGE_INFO_DEBUG_VECT { "DEBUG_VECT", 5, { { "time_usec", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_debug_vect_t, time_usec) }, { "x", NULL, MAVLINK_TYPE_FLOAT, 0, 8, offsetof(mavlink_debug_vect_t, x) }, { "y", NULL, MAVLINK_TYPE_FLOAT, 0, 12, offsetof(mavlink_debug_vect_t, y) }, { "z", NULL, MAVLINK_TYPE_FLOAT, 0, 16, offsetof(mavlink_debug_vect_t, z) }, { "name", NULL, MAVLINK_TYPE_CHAR, 10, 20, offsetof(mavlink_debug_vect_t, name) }, } }
# 63 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               const char *name, uint64_t time_usec, float x, float y, float z)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
    mavlink_debug_vect_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 250;
    return mavlink_finalize_message(msg, system_id, component_id, 30, 30, 49);
}
# 101 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   const char *name,uint64_t time_usec,float x,float y,float z)
{
# 114 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
    mavlink_debug_vect_t packet;
    packet.time_usec = time_usec;
    packet.x = x;
    packet.y = y;
    packet.z = z;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


    msg->msgid = 250;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 30, 49);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_debug_vect_t* debug_vect)
{
    return mavlink_msg_debug_vect_pack(system_id, component_id, msg, debug_vect->name, debug_vect->time_usec, debug_vect->x, debug_vect->y, debug_vect->z);
}
# 149 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_debug_vect_t* debug_vect)
{
    return mavlink_msg_debug_vect_pack_chan(system_id, component_id, chan, msg, debug_vect->name, debug_vect->time_usec, debug_vect->x, debug_vect->y, debug_vect->z);
}
# 241 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_get_name(const mavlink_message_t* msg, char *name)
{
    return _MAV_RETURN_char_array(msg, name, 10, 20);
}






static inline uint64_t mavlink_msg_debug_vect_get_time_usec(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_debug_vect_get_x(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_debug_vect_get_y(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_debug_vect_get_z(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_debug_vect_decode(const mavlink_message_t* msg, mavlink_debug_vect_t* debug_vect)
{







        uint8_t len = msg->len < 30? msg->len : 30;
        memset(debug_vect, 0, 30);
    memcpy(debug_vect, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1134 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h" 1
       


#define MAVLINK_MSG_ID_NAMED_VALUE_FLOAT 251

typedef struct __mavlink_named_value_float_t { uint32_t time_boot_ms; float value; char name[10]; } __attribute__((packed))




   mavlink_named_value_float_t;

#define MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN 18
#define MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_MIN_LEN 18
#define MAVLINK_MSG_ID_251_LEN 18
#define MAVLINK_MSG_ID_251_MIN_LEN 18

#define MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC 170
#define MAVLINK_MSG_ID_251_CRC 170

#define MAVLINK_MSG_NAMED_VALUE_FLOAT_FIELD_NAME_LEN 10
# 34 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
#define MAVLINK_MESSAGE_INFO_NAMED_VALUE_FLOAT { "NAMED_VALUE_FLOAT", 3, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_named_value_float_t, time_boot_ms) }, { "value", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_named_value_float_t, value) }, { "name", NULL, MAVLINK_TYPE_CHAR, 10, 8, offsetof(mavlink_named_value_float_t, name) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, const char *name, float value)
{







    mavlink_named_value_float_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 251;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 170);
}
# 87 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,const char *name,float value)
{







    mavlink_named_value_float_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 251;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 170);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_float_t* named_value_float)
{
    return mavlink_msg_named_value_float_pack(system_id, component_id, msg, named_value_float->time_boot_ms, named_value_float->name, named_value_float->value);
}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_named_value_float_t* named_value_float)
{
    return mavlink_msg_named_value_float_pack_chan(system_id, component_id, chan, msg, named_value_float->time_boot_ms, named_value_float->name, named_value_float->value);
}
# 213 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint32_t mavlink_msg_named_value_float_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_named_value_float_get_name(const mavlink_message_t* msg, char *name)
{
    return _MAV_RETURN_char_array(msg, name, 10, 8);
}






static inline float mavlink_msg_named_value_float_get_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_named_value_float_decode(const mavlink_message_t* msg, mavlink_named_value_float_t* named_value_float)
{





        uint8_t len = msg->len < 18? msg->len : 18;
        memset(named_value_float, 0, 18);
    memcpy(named_value_float, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1135 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h" 1
       


#define MAVLINK_MSG_ID_NAMED_VALUE_INT 252

typedef struct __mavlink_named_value_int_t { uint32_t time_boot_ms; int32_t value; char name[10]; } __attribute__((packed))




   mavlink_named_value_int_t;

#define MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN 18
#define MAVLINK_MSG_ID_NAMED_VALUE_INT_MIN_LEN 18
#define MAVLINK_MSG_ID_252_LEN 18
#define MAVLINK_MSG_ID_252_MIN_LEN 18

#define MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC 44
#define MAVLINK_MSG_ID_252_CRC 44

#define MAVLINK_MSG_NAMED_VALUE_INT_FIELD_NAME_LEN 10
# 34 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
#define MAVLINK_MESSAGE_INFO_NAMED_VALUE_INT { "NAMED_VALUE_INT", 3, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_named_value_int_t, time_boot_ms) }, { "value", NULL, MAVLINK_TYPE_INT32_T, 0, 4, offsetof(mavlink_named_value_int_t, value) }, { "name", NULL, MAVLINK_TYPE_CHAR, 10, 8, offsetof(mavlink_named_value_int_t, name) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, const char *name, int32_t value)
{







    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 252;
    return mavlink_finalize_message(msg, system_id, component_id, 18, 18, 44);
}
# 87 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,const char *name,int32_t value)
{







    mavlink_named_value_int_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


    msg->msgid = 252;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 18, 44);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
    return mavlink_msg_named_value_int_pack(system_id, component_id, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
    return mavlink_msg_named_value_int_pack_chan(system_id, component_id, chan, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
}
# 213 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint32_t mavlink_msg_named_value_int_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_named_value_int_get_name(const mavlink_message_t* msg, char *name)
{
    return _MAV_RETURN_char_array(msg, name, 10, 8);
}






static inline int32_t mavlink_msg_named_value_int_get_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_int32_t(msg, 4);
}







static inline void mavlink_msg_named_value_int_decode(const mavlink_message_t* msg, mavlink_named_value_int_t* named_value_int)
{





        uint8_t len = msg->len < 18? msg->len : 18;
        memset(named_value_int, 0, 18);
    memcpy(named_value_int, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1136 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h" 1
       


#define MAVLINK_MSG_ID_STATUSTEXT 253

typedef struct __mavlink_statustext_t { uint8_t severity; char text[50]; } __attribute__((packed))



   mavlink_statustext_t;

#define MAVLINK_MSG_ID_STATUSTEXT_LEN 51
#define MAVLINK_MSG_ID_STATUSTEXT_MIN_LEN 51
#define MAVLINK_MSG_ID_253_LEN 51
#define MAVLINK_MSG_ID_253_MIN_LEN 51

#define MAVLINK_MSG_ID_STATUSTEXT_CRC 83
#define MAVLINK_MSG_ID_253_CRC 83

#define MAVLINK_MSG_STATUSTEXT_FIELD_TEXT_LEN 50
# 32 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
#define MAVLINK_MESSAGE_INFO_STATUSTEXT { "STATUSTEXT", 2, { { "severity", NULL, MAVLINK_TYPE_UINT8_T, 0, 0, offsetof(mavlink_statustext_t, severity) }, { "text", NULL, MAVLINK_TYPE_CHAR, 50, 1, offsetof(mavlink_statustext_t, text) }, } }
# 51 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t severity, const char *text)
{






    mavlink_statustext_t packet;
    packet.severity = severity;
    mav_array_memcpy(packet.text, text, sizeof(char)*50);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 253;
    return mavlink_finalize_message(msg, system_id, component_id, 51, 51, 83);
}
# 80 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint8_t severity,const char *text)
{






    mavlink_statustext_t packet;
    packet.severity = severity;
    mav_array_memcpy(packet.text, text, sizeof(char)*50);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


    msg->msgid = 253;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 51, 83);
}
# 108 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_statustext_t* statustext)
{
    return mavlink_msg_statustext_pack(system_id, component_id, msg, statustext->severity, statustext->text);
}
# 122 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_statustext_t* statustext)
{
    return mavlink_msg_statustext_pack_chan(system_id, component_id, chan, msg, statustext->severity, statustext->text);
}
# 199 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint8_t mavlink_msg_statustext_get_severity(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint16_t mavlink_msg_statustext_get_text(const mavlink_message_t* msg, char *text)
{
    return _MAV_RETURN_char_array(msg, text, 50, 1);
}







static inline void mavlink_msg_statustext_decode(const mavlink_message_t* msg, mavlink_statustext_t* statustext)
{




        uint8_t len = msg->len < 51? msg->len : 51;
        memset(statustext, 0, 51);
    memcpy(statustext, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1137 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_debug.h" 1
       


#define MAVLINK_MSG_ID_DEBUG 254

typedef struct __mavlink_debug_t { uint32_t time_boot_ms; float value; uint8_t ind; } __attribute__((packed))




   mavlink_debug_t;

#define MAVLINK_MSG_ID_DEBUG_LEN 9
#define MAVLINK_MSG_ID_DEBUG_MIN_LEN 9
#define MAVLINK_MSG_ID_254_LEN 9
#define MAVLINK_MSG_ID_254_MIN_LEN 9

#define MAVLINK_MSG_ID_DEBUG_CRC 46
#define MAVLINK_MSG_ID_254_CRC 46
# 34 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
#define MAVLINK_MESSAGE_INFO_DEBUG { "DEBUG", 3, { { "time_boot_ms", NULL, MAVLINK_TYPE_UINT32_T, 0, 0, offsetof(mavlink_debug_t, time_boot_ms) }, { "value", NULL, MAVLINK_TYPE_FLOAT, 0, 4, offsetof(mavlink_debug_t, value) }, { "ind", NULL, MAVLINK_TYPE_UINT8_T, 0, 8, offsetof(mavlink_debug_t, ind) }, } }
# 55 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, uint8_t ind, float value)
{
# 66 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
    mavlink_debug_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    packet.ind = ind;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 254;
    return mavlink_finalize_message(msg, system_id, component_id, 9, 9, 46);
}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint32_t time_boot_ms,uint8_t ind,float value)
{
# 101 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
    mavlink_debug_t packet;
    packet.time_boot_ms = time_boot_ms;
    packet.value = value;
    packet.ind = ind;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


    msg->msgid = 254;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 9, 46);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_debug_t* debug)
{
    return mavlink_msg_debug_pack(system_id, component_id, msg, debug->time_boot_ms, debug->ind, debug->value);
}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_debug_t* debug)
{
    return mavlink_msg_debug_pack_chan(system_id, component_id, chan, msg, debug->time_boot_ms, debug->ind, debug->value);
}
# 221 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint32_t mavlink_msg_debug_get_time_boot_ms(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_debug_get_ind(const mavlink_message_t* msg)
{
    return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline float mavlink_msg_debug_get_value(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_debug_decode(const mavlink_message_t* msg, mavlink_debug_t* debug)
{





        uint8_t len = msg->len < 9? msg->len : 9;
        memset(debug, 0, 9);
    memcpy(debug, ((const char *)(&((msg)->payload64[0]))), len);

}
# 1138 "./lib/main/MAVLink/common/common.h" 2




#undef MAVLINK_THIS_XML_IDX
#define MAVLINK_THIS_XML_IDX 1


#define MAVLINK_MESSAGE_INFO {MAVLINK_MESSAGE_INFO_HEARTBEAT, MAVLINK_MESSAGE_INFO_SYS_STATUS, MAVLINK_MESSAGE_INFO_SYSTEM_TIME, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_PING, MAVLINK_MESSAGE_INFO_CHANGE_OPERATOR_CONTROL, MAVLINK_MESSAGE_INFO_CHANGE_OPERATOR_CONTROL_ACK, MAVLINK_MESSAGE_INFO_AUTH_KEY, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_SET_MODE, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_PARAM_REQUEST_READ, MAVLINK_MESSAGE_INFO_PARAM_REQUEST_LIST, MAVLINK_MESSAGE_INFO_PARAM_VALUE, MAVLINK_MESSAGE_INFO_PARAM_SET, MAVLINK_MESSAGE_INFO_GPS_RAW_INT, MAVLINK_MESSAGE_INFO_GPS_STATUS, MAVLINK_MESSAGE_INFO_SCALED_IMU, MAVLINK_MESSAGE_INFO_RAW_IMU, MAVLINK_MESSAGE_INFO_RAW_PRESSURE, MAVLINK_MESSAGE_INFO_SCALED_PRESSURE, MAVLINK_MESSAGE_INFO_ATTITUDE, MAVLINK_MESSAGE_INFO_ATTITUDE_QUATERNION, MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED, MAVLINK_MESSAGE_INFO_GLOBAL_POSITION_INT, MAVLINK_MESSAGE_INFO_RC_CHANNELS_SCALED, MAVLINK_MESSAGE_INFO_RC_CHANNELS_RAW, MAVLINK_MESSAGE_INFO_SERVO_OUTPUT_RAW, MAVLINK_MESSAGE_INFO_MISSION_REQUEST_PARTIAL_LIST, MAVLINK_MESSAGE_INFO_MISSION_WRITE_PARTIAL_LIST, MAVLINK_MESSAGE_INFO_MISSION_ITEM, MAVLINK_MESSAGE_INFO_MISSION_REQUEST, MAVLINK_MESSAGE_INFO_MISSION_SET_CURRENT, MAVLINK_MESSAGE_INFO_MISSION_CURRENT, MAVLINK_MESSAGE_INFO_MISSION_REQUEST_LIST, MAVLINK_MESSAGE_INFO_MISSION_COUNT, MAVLINK_MESSAGE_INFO_MISSION_CLEAR_ALL, MAVLINK_MESSAGE_INFO_MISSION_ITEM_REACHED, MAVLINK_MESSAGE_INFO_MISSION_ACK, MAVLINK_MESSAGE_INFO_SET_GPS_GLOBAL_ORIGIN, MAVLINK_MESSAGE_INFO_GPS_GLOBAL_ORIGIN, MAVLINK_MESSAGE_INFO_PARAM_MAP_RC, MAVLINK_MESSAGE_INFO_MISSION_REQUEST_INT, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_SAFETY_SET_ALLOWED_AREA, MAVLINK_MESSAGE_INFO_SAFETY_ALLOWED_AREA, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_ATTITUDE_QUATERNION_COV, MAVLINK_MESSAGE_INFO_NAV_CONTROLLER_OUTPUT, MAVLINK_MESSAGE_INFO_GLOBAL_POSITION_INT_COV, MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED_COV, MAVLINK_MESSAGE_INFO_RC_CHANNELS, MAVLINK_MESSAGE_INFO_REQUEST_DATA_STREAM, MAVLINK_MESSAGE_INFO_DATA_STREAM, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_MANUAL_CONTROL, MAVLINK_MESSAGE_INFO_RC_CHANNELS_OVERRIDE, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_MISSION_ITEM_INT, MAVLINK_MESSAGE_INFO_VFR_HUD, MAVLINK_MESSAGE_INFO_COMMAND_INT, MAVLINK_MESSAGE_INFO_COMMAND_LONG, MAVLINK_MESSAGE_INFO_COMMAND_ACK, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_MANUAL_SETPOINT, MAVLINK_MESSAGE_INFO_SET_ATTITUDE_TARGET, MAVLINK_MESSAGE_INFO_ATTITUDE_TARGET, MAVLINK_MESSAGE_INFO_SET_POSITION_TARGET_LOCAL_NED, MAVLINK_MESSAGE_INFO_POSITION_TARGET_LOCAL_NED, MAVLINK_MESSAGE_INFO_SET_POSITION_TARGET_GLOBAL_INT, MAVLINK_MESSAGE_INFO_POSITION_TARGET_GLOBAL_INT, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET, MAVLINK_MESSAGE_INFO_HIL_STATE, MAVLINK_MESSAGE_INFO_HIL_CONTROLS, MAVLINK_MESSAGE_INFO_HIL_RC_INPUTS_RAW, MAVLINK_MESSAGE_INFO_HIL_ACTUATOR_CONTROLS, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_OPTICAL_FLOW, MAVLINK_MESSAGE_INFO_GLOBAL_VISION_POSITION_ESTIMATE, MAVLINK_MESSAGE_INFO_VISION_POSITION_ESTIMATE, MAVLINK_MESSAGE_INFO_VISION_SPEED_ESTIMATE, MAVLINK_MESSAGE_INFO_VICON_POSITION_ESTIMATE, MAVLINK_MESSAGE_INFO_HIGHRES_IMU, MAVLINK_MESSAGE_INFO_OPTICAL_FLOW_RAD, MAVLINK_MESSAGE_INFO_HIL_SENSOR, MAVLINK_MESSAGE_INFO_SIM_STATE, MAVLINK_MESSAGE_INFO_RADIO_STATUS, MAVLINK_MESSAGE_INFO_FILE_TRANSFER_PROTOCOL, MAVLINK_MESSAGE_INFO_TIMESYNC, MAVLINK_MESSAGE_INFO_CAMERA_TRIGGER, MAVLINK_MESSAGE_INFO_HIL_GPS, MAVLINK_MESSAGE_INFO_HIL_OPTICAL_FLOW, MAVLINK_MESSAGE_INFO_HIL_STATE_QUATERNION, MAVLINK_MESSAGE_INFO_SCALED_IMU2, MAVLINK_MESSAGE_INFO_LOG_REQUEST_LIST, MAVLINK_MESSAGE_INFO_LOG_ENTRY, MAVLINK_MESSAGE_INFO_LOG_REQUEST_DATA, MAVLINK_MESSAGE_INFO_LOG_DATA, MAVLINK_MESSAGE_INFO_LOG_ERASE, MAVLINK_MESSAGE_INFO_LOG_REQUEST_END, MAVLINK_MESSAGE_INFO_GPS_INJECT_DATA, MAVLINK_MESSAGE_INFO_GPS2_RAW, MAVLINK_MESSAGE_INFO_POWER_STATUS, MAVLINK_MESSAGE_INFO_SERIAL_CONTROL, MAVLINK_MESSAGE_INFO_GPS_RTK, MAVLINK_MESSAGE_INFO_GPS2_RTK, MAVLINK_MESSAGE_INFO_SCALED_IMU3, MAVLINK_MESSAGE_INFO_DATA_TRANSMISSION_HANDSHAKE, MAVLINK_MESSAGE_INFO_ENCAPSULATED_DATA, MAVLINK_MESSAGE_INFO_DISTANCE_SENSOR, MAVLINK_MESSAGE_INFO_TERRAIN_REQUEST, MAVLINK_MESSAGE_INFO_TERRAIN_DATA, MAVLINK_MESSAGE_INFO_TERRAIN_CHECK, MAVLINK_MESSAGE_INFO_TERRAIN_REPORT, MAVLINK_MESSAGE_INFO_SCALED_PRESSURE2, MAVLINK_MESSAGE_INFO_ATT_POS_MOCAP, MAVLINK_MESSAGE_INFO_SET_ACTUATOR_CONTROL_TARGET, MAVLINK_MESSAGE_INFO_ACTUATOR_CONTROL_TARGET, MAVLINK_MESSAGE_INFO_ALTITUDE, MAVLINK_MESSAGE_INFO_RESOURCE_REQUEST, MAVLINK_MESSAGE_INFO_SCALED_PRESSURE3, MAVLINK_MESSAGE_INFO_FOLLOW_TARGET, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_CONTROL_SYSTEM_STATE, MAVLINK_MESSAGE_INFO_BATTERY_STATUS, MAVLINK_MESSAGE_INFO_AUTOPILOT_VERSION, MAVLINK_MESSAGE_INFO_LANDING_TARGET, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_ESTIMATOR_STATUS, MAVLINK_MESSAGE_INFO_WIND_COV, MAVLINK_MESSAGE_INFO_GPS_INPUT, MAVLINK_MESSAGE_INFO_GPS_RTCM_DATA, MAVLINK_MESSAGE_INFO_HIGH_LATENCY, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, MAVLINK_MESSAGE_INFO_VIBRATION, MAVLINK_MESSAGE_INFO_HOME_POSITION, MAVLINK_MESSAGE_INFO_SET_HOME_POSITION, MAVLINK_MESSAGE_INFO_MESSAGE_INTERVAL, MAVLINK_MESSAGE_INFO_EXTENDED_SYS_STATE, MAVLINK_MESSAGE_INFO_ADSB_VEHICLE, MAVLINK_MESSAGE_INFO_COLLISION, MAVLINK_MESSAGE_INFO_V2_EXTENSION, MAVLINK_MESSAGE_INFO_MEMORY_VECT, MAVLINK_MESSAGE_INFO_DEBUG_VECT, MAVLINK_MESSAGE_INFO_NAMED_VALUE_FLOAT, MAVLINK_MESSAGE_INFO_NAMED_VALUE_INT, MAVLINK_MESSAGE_INFO_STATUSTEXT, MAVLINK_MESSAGE_INFO_DEBUG, {"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}}
# 33 "./lib/main/MAVLink/common/mavlink.h" 2
# 80 "./src/main/telemetry/mavlink.c" 2
#pragma GCC diagnostic pop

#define TELEMETRY_MAVLINK_PORT_MODE MODE_RXTX
#define TELEMETRY_MAVLINK_MAXRATE 50
#define TELEMETRY_MAVLINK_DELAY ((1000 * 1000) / TELEMETRY_MAVLINK_MAXRATE)

static serialPort_t *mavlinkPort = 
# 86 "./src/main/telemetry/mavlink.c" 3 4
                                  ((void *)0)
# 86 "./src/main/telemetry/mavlink.c"
                                      ;
static serialPortConfig_t *portConfig;

static 
# 89 "./src/main/telemetry/mavlink.c" 3 4
      _Bool 
# 89 "./src/main/telemetry/mavlink.c"
           mavlinkTelemetryEnabled = 
# 89 "./src/main/telemetry/mavlink.c" 3 4
                                      0
# 89 "./src/main/telemetry/mavlink.c"
                                           ;
static portSharing_e mavlinkPortSharing;


static const uint8_t mavRates[] = {
    [MAV_DATA_STREAM_EXTENDED_STATUS] = 2,
    [MAV_DATA_STREAM_RC_CHANNELS] = 5,
    [MAV_DATA_STREAM_POSITION] = 2,
    [MAV_DATA_STREAM_EXTRA1] = 10,
    [MAV_DATA_STREAM_EXTRA2] = 10
};

#define MAXSTREAMS (sizeof(mavRates) / sizeof(mavRates[0]))

static timeUs_t lastMavlinkMessage = 0;
static uint8_t mavTicks[(sizeof(mavRates) / sizeof(mavRates[0]))];
static mavlink_message_t mavSendMsg;
static mavlink_message_t mavRecvMsg;
static mavlink_status_t mavRecvStatus;

static uint8_t mavSystemId = 1;
static uint8_t mavComponentId = MAV_COMP_ID_SYSTEM_CONTROL;


static uint8_t inavToArduCopterMap[FLM_COUNT] = { 1, 1, 0, 0, 2, 16, 6, 3, 18, 0 };
static uint8_t inavToArduPlaneMap[FLM_COUNT] = { 0, 4, 2, 2, 5, 1, 11, 10, 15, 2 };

static int mavlinkStreamTrigger(enum MAV_DATA_STREAM streamNum)
{
    uint8_t rate = (uint8_t) mavRates[streamNum];
    if (rate == 0) {
        return 0;
    }

    if (mavTicks[streamNum] == 0) {

        if (rate > 50) {
            rate = 50;
        }

        mavTicks[streamNum] = (50 / rate);
        return 1;
    }


    mavTicks[streamNum]--;
    return 0;
}

void freeMAVLinkTelemetryPort(void)
{
    closeSerialPort(mavlinkPort);
    mavlinkPort = 
# 141 "./src/main/telemetry/mavlink.c" 3 4
                 ((void *)0)
# 141 "./src/main/telemetry/mavlink.c"
                     ;
    mavlinkTelemetryEnabled = 
# 142 "./src/main/telemetry/mavlink.c" 3 4
                             0
# 142 "./src/main/telemetry/mavlink.c"
                                  ;
}

void initMAVLinkTelemetry(void)
{
    portConfig = findSerialPortConfig(FUNCTION_TELEMETRY_MAVLINK);
    mavlinkPortSharing = determinePortSharing(portConfig, FUNCTION_TELEMETRY_MAVLINK);
}

void configureMAVLinkTelemetryPort(void)
{
    if (!portConfig) {
        return;
    }

    baudRate_e baudRateIndex = portConfig->telemetry_baudrateIndex;
    if (baudRateIndex == BAUD_AUTO) {

        baudRateIndex = BAUD_57600;
    }

    mavlinkPort = openSerialPort(portConfig->identifier, FUNCTION_TELEMETRY_MAVLINK, 
# 163 "./src/main/telemetry/mavlink.c" 3 4
                                                                                    ((void *)0)
# 163 "./src/main/telemetry/mavlink.c"
                                                                                        , 
# 163 "./src/main/telemetry/mavlink.c" 3 4
                                                                                          ((void *)0)
# 163 "./src/main/telemetry/mavlink.c"
                                                                                              , baudRates[baudRateIndex], MODE_RXTX, SERIAL_NOT_INVERTED);

    if (!mavlinkPort) {
        return;
    }

    mavlinkTelemetryEnabled = 
# 169 "./src/main/telemetry/mavlink.c" 3 4
                             1
# 169 "./src/main/telemetry/mavlink.c"
                                 ;
}

void checkMAVLinkTelemetryState(void)
{
    
# 174 "./src/main/telemetry/mavlink.c" 3 4
   _Bool 
# 174 "./src/main/telemetry/mavlink.c"
        newTelemetryEnabledValue = telemetryDetermineEnabledState(mavlinkPortSharing);

    if (newTelemetryEnabledValue == mavlinkTelemetryEnabled) {
        return;
    }

    if (newTelemetryEnabledValue)
        configureMAVLinkTelemetryPort();
    else
        freeMAVLinkTelemetryPort();
}

static void mavlinkSendMessage(void)
{
    uint8_t mavBuffer[(255 + ((5 + 1) + 2))];
    int msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavSendMsg);

    for (int i = 0; i < msgLength; i++) {
        serialWrite(mavlinkPort, mavBuffer[i]);
    }
}

void mavlinkSendSystemStatus(void)
{
    uint32_t onboardControlAndSensors = 35843;
# 210 "./src/main/telemetry/mavlink.c"
    if (sensors(SENSOR_MAG)) onboardControlAndSensors |= 4100;
    if (sensors(SENSOR_BARO)) onboardControlAndSensors |= 8200;
    if (sensors(SENSOR_GPS)) onboardControlAndSensors |= 16416;

    mavlink_msg_sys_status_pack(mavSystemId, mavComponentId, &mavSendMsg,





        onboardControlAndSensors,

        onboardControlAndSensors,

        onboardControlAndSensors & 1023,

        0,

        feature(FEATURE_VBAT) ? getBatteryVoltage() * 10 : 0,

        feature(FEATURE_CURRENT_METER) ? getAmperage() : -1,

        feature(FEATURE_VBAT) ? calculateBatteryPercentage() : 100,

        0,

        0,

        0,

        0,

        0,

        0);

    mavlinkSendMessage();
}

void mavlinkSendRCChannelsAndRSSI(void)
{
    mavlink_msg_rc_channels_raw_pack(mavSystemId, mavComponentId, &mavSendMsg,

        millis(),

        0,

        (rxRuntimeConfig.channelCount >= 1) ? rcData[0] : 0,

        (rxRuntimeConfig.channelCount >= 2) ? rcData[1] : 0,

        (rxRuntimeConfig.channelCount >= 3) ? rcData[2] : 0,

        (rxRuntimeConfig.channelCount >= 4) ? rcData[3] : 0,

        (rxRuntimeConfig.channelCount >= 5) ? rcData[4] : 0,

        (rxRuntimeConfig.channelCount >= 6) ? rcData[5] : 0,

        (rxRuntimeConfig.channelCount >= 7) ? rcData[6] : 0,

        (rxRuntimeConfig.channelCount >= 8) ? rcData[7] : 0,

        scaleRange(getRSSI(), 0, 1023, 0, 255));

    mavlinkSendMessage();
}


void mavlinkSendPosition(timeUs_t currentTimeUs)
{
    uint8_t gpsFixType = 0;

    if (!sensors(SENSOR_GPS))
        return;

    if (gpsSol.fixType == GPS_NO_FIX)
        gpsFixType = 1;
    else if (gpsSol.fixType == GPS_FIX_2D)
            gpsFixType = 2;
    else if (gpsSol.fixType == GPS_FIX_3D)
            gpsFixType = 3;

    mavlink_msg_gps_raw_int_pack(mavSystemId, mavComponentId, &mavSendMsg,

        currentTimeUs,

        gpsFixType,

        gpsSol.llh.lat,

        gpsSol.llh.lon,

        gpsSol.llh.alt * 10,

        gpsSol.eph,

        gpsSol.epv,

        gpsSol.groundSpeed,

        gpsSol.groundCourse * 10,

        gpsSol.numSat);

    mavlinkSendMessage();


    mavlink_msg_global_position_int_pack(mavSystemId, mavComponentId, &mavSendMsg,

        currentTimeUs,

        gpsSol.llh.lat,

        gpsSol.llh.lon,

        gpsSol.llh.alt * 10,


        getEstimatedActualPosition(Z) * 10,




        0,

        0,

        0,

        ((attitude.values.yaw) / 10)
    );

    mavlinkSendMessage();

    mavlink_msg_gps_global_origin_pack(mavSystemId, mavComponentId, &mavSendMsg,

        GPS_home.lat,

        GPS_home.lon,

        GPS_home.alt * 10);

    mavlinkSendMessage();
}


void mavlinkSendAttitude(void)
{
    mavlink_msg_attitude_pack(mavSystemId, mavComponentId, &mavSendMsg,

        millis(),

        (((attitude.values.roll) / 10.0f) * (3.14159265358979323846f / 180.0f)),

        (((-attitude.values.pitch) / 10.0f) * (3.14159265358979323846f / 180.0f)),

        (((attitude.values.yaw) / 10.0f) * (3.14159265358979323846f / 180.0f)),

        0,

        0,

        0);

    mavlinkSendMessage();
}

void mavlinkSendHUDAndHeartbeat(void)
{
    float mavAltitude = 0;
    float mavGroundSpeed = 0;
    float mavAirSpeed = 0;
    float mavClimbRate = 0;



    if (sensors(SENSOR_GPS)) {
        mavGroundSpeed = gpsSol.groundSpeed / 100.0f;
    }



    if (sensors(SENSOR_PITOT)) {
        mavAirSpeed = pitot.airSpeed / 100.0f;
    }




    mavAltitude = getEstimatedActualPosition(Z) / 100.0f;
    mavClimbRate = getEstimatedActualVelocity(Z) / 100.0f;







    mavlink_msg_vfr_hud_pack(mavSystemId, mavComponentId, &mavSendMsg,

        mavAirSpeed,

        mavGroundSpeed,

        ((attitude.values.yaw) / 10),

        scaleRange(constrain(rcData[THROTTLE], 1000, 2000), 1000, 2000, 0, 100),

        mavAltitude,

        mavClimbRate);

    mavlinkSendMessage();


    uint8_t mavModes = MAV_MODE_FLAG_MANUAL_INPUT_ENABLED | MAV_MODE_FLAG_CUSTOM_MODE_ENABLED;
    if ((armingFlags & (ARMED)))
        mavModes |= MAV_MODE_FLAG_SAFETY_ARMED;

    uint8_t mavSystemType;
    switch (mixerConfig()->mixerMode)
    {
        case MIXER_TRI:
            mavSystemType = MAV_TYPE_TRICOPTER;
            break;
        case MIXER_QUADP:
        case MIXER_QUADX:
        case MIXER_Y4:
        case MIXER_VTAIL4:
            mavSystemType = MAV_TYPE_QUADROTOR;
            break;
        case MIXER_Y6:
        case MIXER_HEX6:
        case MIXER_HEX6X:
            mavSystemType = MAV_TYPE_HEXAROTOR;
            break;
        case MIXER_OCTOX8:
        case MIXER_OCTOFLATP:
        case MIXER_OCTOFLATX:
            mavSystemType = MAV_TYPE_OCTOROTOR;
            break;
        case MIXER_FLYING_WING:
        case MIXER_AIRPLANE:
        case MIXER_CUSTOM_AIRPLANE:
            mavSystemType = MAV_TYPE_FIXED_WING;
            break;
        case MIXER_HELI_120_CCPM:
        case MIXER_HELI_90_DEG:
            mavSystemType = MAV_TYPE_HELICOPTER;
            break;
        default:
            mavSystemType = MAV_TYPE_GENERIC;
            break;
    }

    flightModeForTelemetry_e flm = getFlightModeForTelemetry();
    uint8_t mavCustomMode;

    if ((stateFlags & (FIXED_WING))) {
        mavCustomMode = inavToArduPlaneMap[flm];
    }
    else {
        mavCustomMode = inavToArduCopterMap[flm];
    }

    if (flm != FLM_MANUAL) {
        mavModes |= MAV_MODE_FLAG_STABILIZE_ENABLED;
    }
    else if (flm == FLM_POSITION_HOLD || flm == FLM_RTH || flm == FLM_MISSION) {
        mavModes |= MAV_MODE_FLAG_GUIDED_ENABLED;
    }

    uint8_t mavSystemState = 0;
    if ((armingFlags & (ARMED))) {
        if (failsafeIsActive()) {
            mavSystemState = MAV_STATE_CRITICAL;
        }
        else {
            mavSystemState = MAV_STATE_ACTIVE;
        }
    }
    else if (isCalibrating()) {
        mavSystemState = MAV_STATE_CALIBRATING;
    }
    else {
        mavSystemState = MAV_STATE_STANDBY;
    }

    mavlink_msg_heartbeat_pack(mavSystemId, mavComponentId, &mavSendMsg,

        mavSystemType,

        MAV_AUTOPILOT_GENERIC,

        mavModes,

        mavCustomMode,

        mavSystemState);

    mavlinkSendMessage();
}

void processMAVLinkTelemetry(timeUs_t currentTimeUs)
{

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTENDED_STATUS)) {
        mavlinkSendSystemStatus();
    }

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_RC_CHANNELS)) {
        mavlinkSendRCChannelsAndRSSI();
    }


    if (mavlinkStreamTrigger(MAV_DATA_STREAM_POSITION)) {
        mavlinkSendPosition(currentTimeUs);
    }


    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTRA1)) {
        mavlinkSendAttitude();
    }

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTRA2)) {
        mavlinkSendHUDAndHeartbeat();
    }
}

static 
# 540 "./src/main/telemetry/mavlink.c" 3 4
      _Bool 
# 540 "./src/main/telemetry/mavlink.c"
           handleIncoming_MISSION_CLEAR_ALL(void)
{
    mavlink_mission_clear_all_t msg;
    mavlink_msg_mission_clear_all_decode(&mavRecvMsg, &msg);


    if (msg.target_system == mavSystemId) {
        resetWaypointList();
        mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_ACCEPTED);
        mavlinkSendMessage();
        return 
# 550 "./src/main/telemetry/mavlink.c" 3 4
              1
# 550 "./src/main/telemetry/mavlink.c"
                  ;
    }

    return 
# 553 "./src/main/telemetry/mavlink.c" 3 4
          0
# 553 "./src/main/telemetry/mavlink.c"
               ;
}


static int incomingMissionWpCount = 0;
static int incomingMissionWpSequence = 0;

static 
# 560 "./src/main/telemetry/mavlink.c" 3 4
      _Bool 
# 560 "./src/main/telemetry/mavlink.c"
           handleIncoming_MISSION_COUNT(void)
{
    mavlink_mission_count_t msg;
    mavlink_msg_mission_count_decode(&mavRecvMsg, &msg);


    if (msg.target_system == mavSystemId) {
        if (msg.count <= 60) {
            incomingMissionWpCount = msg.count;
            incomingMissionWpSequence = 0;
            mavlink_msg_mission_request_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, incomingMissionWpSequence);
            mavlinkSendMessage();
            return 
# 572 "./src/main/telemetry/mavlink.c" 3 4
                  1
# 572 "./src/main/telemetry/mavlink.c"
                      ;
        }
        else if ((armingFlags & (ARMED))) {
            mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_ERROR);
            mavlinkSendMessage();
            return 
# 577 "./src/main/telemetry/mavlink.c" 3 4
                  1
# 577 "./src/main/telemetry/mavlink.c"
                      ;
        }
        else {
            mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_NO_SPACE);
            mavlinkSendMessage();
            return 
# 582 "./src/main/telemetry/mavlink.c" 3 4
                  1
# 582 "./src/main/telemetry/mavlink.c"
                      ;
        }
    }

    return 
# 586 "./src/main/telemetry/mavlink.c" 3 4
          0
# 586 "./src/main/telemetry/mavlink.c"
               ;
}

static 
# 589 "./src/main/telemetry/mavlink.c" 3 4
      _Bool 
# 589 "./src/main/telemetry/mavlink.c"
           handleIncoming_MISSION_ITEM(void)
{
    mavlink_mission_item_t msg;
    mavlink_msg_mission_item_decode(&mavRecvMsg, &msg);


    if (msg.target_system == mavSystemId) {

        if ((armingFlags & (ARMED))) {
            mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_ERROR);
            mavlinkSendMessage();
            return 
# 600 "./src/main/telemetry/mavlink.c" 3 4
                  1
# 600 "./src/main/telemetry/mavlink.c"
                      ;
        }

        if ((msg.autocontinue == 0) || (msg.command != MAV_CMD_NAV_WAYPOINT && msg.command != MAV_CMD_NAV_RETURN_TO_LAUNCH)) {
            mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_UNSUPPORTED);
            mavlinkSendMessage();
            return 
# 606 "./src/main/telemetry/mavlink.c" 3 4
                  1
# 606 "./src/main/telemetry/mavlink.c"
                      ;
        }

        if ((msg.frame != MAV_FRAME_GLOBAL_RELATIVE_ALT) && !(msg.frame == MAV_FRAME_MISSION && msg.command == MAV_CMD_NAV_RETURN_TO_LAUNCH)) {
            mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_UNSUPPORTED_FRAME);
            mavlinkSendMessage();
            return 
# 612 "./src/main/telemetry/mavlink.c" 3 4
                  1
# 612 "./src/main/telemetry/mavlink.c"
                      ;
        }

        if (msg.seq == incomingMissionWpSequence) {
            incomingMissionWpSequence++;

            navWaypoint_t wp;
            wp.action = (msg.command == MAV_CMD_NAV_RETURN_TO_LAUNCH) ? NAV_WP_ACTION_RTH : NAV_WP_ACTION_WAYPOINT;
            wp.lat = (int32_t)(msg.x * 1e7f);
            wp.lon = (int32_t)(msg.y * 1e7f);
            wp.alt = msg.z * 100.0f;
            wp.p1 = 0;
            wp.p2 = 0;
            wp.p3 = 0;
            wp.flag = (incomingMissionWpSequence >= incomingMissionWpCount) ? NAV_WP_FLAG_LAST : 0;

            setWaypoint(incomingMissionWpSequence, &wp);

            if (incomingMissionWpSequence >= incomingMissionWpCount) {
                if (isWaypointListValid()) {
                    mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_ACCEPTED);
                    mavlinkSendMessage();
                }
                else {
                    mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_INVALID);
                    mavlinkSendMessage();
                }
            }
            else {
                mavlink_msg_mission_request_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, incomingMissionWpSequence);
                mavlinkSendMessage();
            }
        }
        else {

            mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_INVALID_SEQUENCE);
            mavlinkSendMessage();
        }

        return 
# 651 "./src/main/telemetry/mavlink.c" 3 4
              1
# 651 "./src/main/telemetry/mavlink.c"
                  ;
    }

    return 
# 654 "./src/main/telemetry/mavlink.c" 3 4
          0
# 654 "./src/main/telemetry/mavlink.c"
               ;
}

static 
# 657 "./src/main/telemetry/mavlink.c" 3 4
      _Bool 
# 657 "./src/main/telemetry/mavlink.c"
           handleIncoming_MISSION_REQUEST_LIST(void)
{
    mavlink_mission_request_list_t msg;
    mavlink_msg_mission_request_list_decode(&mavRecvMsg, &msg);


    if (msg.target_system == mavSystemId) {
        mavlink_msg_mission_count_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, getWaypointCount());
        mavlinkSendMessage();
        return 
# 666 "./src/main/telemetry/mavlink.c" 3 4
              1
# 666 "./src/main/telemetry/mavlink.c"
                  ;
    }

    return 
# 669 "./src/main/telemetry/mavlink.c" 3 4
          0
# 669 "./src/main/telemetry/mavlink.c"
               ;
}

static 
# 672 "./src/main/telemetry/mavlink.c" 3 4
      _Bool 
# 672 "./src/main/telemetry/mavlink.c"
           handleIncoming_MISSION_REQUEST(void)
{
    mavlink_mission_request_t msg;
    mavlink_msg_mission_request_decode(&mavRecvMsg, &msg);


    if (msg.target_system == mavSystemId) {
        int wpCount = getWaypointCount();

        if (msg.seq < wpCount) {
            navWaypoint_t wp;
            getWaypoint(msg.seq + 1, &wp);

            mavlink_msg_mission_item_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid,
                        msg.seq,
                        wp.action == NAV_WP_ACTION_RTH ? MAV_FRAME_MISSION : MAV_FRAME_GLOBAL_RELATIVE_ALT,
                        wp.action == NAV_WP_ACTION_RTH ? MAV_CMD_NAV_RETURN_TO_LAUNCH : MAV_CMD_NAV_WAYPOINT,
                        0,
                        1,
                        0, 0, 0, 0,
                        wp.lat / 1e7f,
                        wp.lon / 1e7f,
                        wp.alt / 100.0f);
            mavlinkSendMessage();
        }
        else {
            mavlink_msg_mission_ack_pack(mavSystemId, mavComponentId, &mavSendMsg, mavRecvMsg.sysid, mavRecvMsg.compid, MAV_MISSION_INVALID_SEQUENCE);
            mavlinkSendMessage();
        }

        return 
# 702 "./src/main/telemetry/mavlink.c" 3 4
              1
# 702 "./src/main/telemetry/mavlink.c"
                  ;
    }

    return 
# 705 "./src/main/telemetry/mavlink.c" 3 4
          0
# 705 "./src/main/telemetry/mavlink.c"
               ;
}

static 
# 708 "./src/main/telemetry/mavlink.c" 3 4
      _Bool 
# 708 "./src/main/telemetry/mavlink.c"
           processMAVLinkIncomingTelemetry(void)
{
    while (serialRxBytesWaiting(mavlinkPort) > 0) {

        char c = serialRead(mavlinkPort);
        uint8_t result = mavlink_parse_char(0, c, &mavRecvMsg, &mavRecvStatus);
        if (result == MAVLINK_FRAMING_OK) {
            switch (mavRecvMsg.msgid) {
                case 0:
                    break;
                case 45:
                    return handleIncoming_MISSION_CLEAR_ALL();
                case 44:
                    return handleIncoming_MISSION_COUNT();
                case 39:
                    return handleIncoming_MISSION_ITEM();
                case 43:
                    return handleIncoming_MISSION_REQUEST_LIST();
                case 40:
                    return handleIncoming_MISSION_REQUEST();
                default:
                    return 
# 729 "./src/main/telemetry/mavlink.c" 3 4
                          0
# 729 "./src/main/telemetry/mavlink.c"
                               ;
            }
        }
    }

    return 
# 734 "./src/main/telemetry/mavlink.c" 3 4
          0
# 734 "./src/main/telemetry/mavlink.c"
               ;
}

void handleMAVLinkTelemetry(timeUs_t currentTimeUs)
{
    static 
# 739 "./src/main/telemetry/mavlink.c" 3 4
          _Bool 
# 739 "./src/main/telemetry/mavlink.c"
               incomingRequestServed;

    if (!mavlinkTelemetryEnabled) {
        return;
    }

    if (!mavlinkPort) {
        return;
    }


    if (processMAVLinkIncomingTelemetry()) {
        incomingRequestServed = 
# 751 "./src/main/telemetry/mavlink.c" 3 4
                               1
# 751 "./src/main/telemetry/mavlink.c"
                                   ;
    }

    if ((currentTimeUs - lastMavlinkMessage) >= ((1000 * 1000) / 50)) {

        if (!incomingRequestServed) {
            processMAVLinkTelemetry(currentTimeUs);
        }
        lastMavlinkMessage = currentTimeUs;
        incomingRequestServed = 
# 760 "./src/main/telemetry/mavlink.c" 3 4
                               0
# 760 "./src/main/telemetry/mavlink.c"
                                    ;
    }


}
